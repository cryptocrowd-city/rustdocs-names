var searchIndex={};
searchIndex["ahash"] = {"doc":"aHash","i":[[3,"AHasher","ahash","A `Hasher` for hashing an arbitrary stream of bytes.",null,null],[3,"ABuildHasher","","Provides a [Hasher] factory. This is typically used (e.g.…",null,null],[11,"new_with_keys","","Creates a new hasher keyed to the provided key.",0,[[["u64"]],["ahasher"]]],[11,"new","","",1,[[],["abuildhasher"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"write_u8","","",0,[[["self"],["u8"]]]],[11,"write_u16","","",0,[[["u16"],["self"]]]],[11,"write_u32","","",0,[[["self"],["u32"]]]],[11,"write_u64","","",0,[[["self"],["u64"]]]],[11,"write_u128","","",0,[[["self"],["u128"]]]],[11,"write_usize","","",0,[[["self"],["usize"]]]],[11,"write","","",0,[[["self"]]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"build_hasher","","Constructs a new [AHasher] with keys based on compile time…",1,[[["self"]],["ahasher"]]],[11,"clone","","",0,[[["self"]],["ahasher"]]],[11,"clone","","",1,[[["self"]],["abuildhasher"]]],[11,"default","","Constructs a new [AHasher] with compile time generated…",0,[[],["ahasher"]]],[11,"default","","",1,[[],["self"]]]],"p":[[3,"AHasher"],[3,"ABuildHasher"]]};
searchIndex["aho_corasick"] = {"doc":"A library for finding occurrences of many patterns at…","i":[[3,"AhoCorasick","aho_corasick","An automaton for searching multiple strings in linear time.",null,null],[3,"AhoCorasickBuilder","","A builder for configuring an Aho-Corasick automaton.",null,null],[3,"FindIter","","An iterator of non-overlapping matches in a particular…",null,null],[3,"FindOverlappingIter","","An iterator of overlapping matches in a particular haystack.",null,null],[3,"StreamFindIter","","An iterator that reports Aho-Corasick matches in a stream.",null,null],[3,"Error","","An error that occurred during the construction of an…",null,null],[3,"Match","","A representation of a match reported by an Aho-Corasick…",null,null],[4,"MatchKind","","A knob for controlling the match semantics of an…",null,null],[13,"Standard","","Use standard match semantics, which support overlapping…",0,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports leftmost…",0,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports…",0,null],[4,"ErrorKind","","The kind of error that occurred.",null,null],[13,"StateIDOverflow","","An error that occurs when constructing an automaton would…",1,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state ID.",1,null],[13,"PremultiplyOverflow","aho_corasick","An error that occurs when premultiplication of state IDs…",1,null],[12,"max","aho_corasick::ErrorKind","The maximum possible state id.",1,null],[12,"requested_max","","The maximum ID required by premultiplication.",1,null],[11,"new","aho_corasick","Create a new Aho-Corasick automaton using the default…",2,[[["i"]],["ahocorasick"]]],[11,"new_auto_configured","","Build an Aho-Corasick automaton with an automatically…",2,[[],["ahocorasick"]]],[11,"is_match","","Returns true if and only if this automaton matches the…",2,[[["self"],["asref"]],["bool"]]],[11,"earliest_find","","Returns the location of the first detected match in…",2,[[["self"],["asref"]],[["match"],["option",["match"]]]]],[11,"find","","Returns the location of the first match according to the…",2,[[["self"],["asref"]],[["match"],["option",["match"]]]]],[11,"find_iter","","Returns an iterator of non-overlapping matches, using the…",2,[[["self"],["b"]],["finditer"]]],[11,"find_overlapping_iter","","Returns an iterator of overlapping matches in the given…",2,[[["self"],["b"]],["findoverlappingiter"]]],[11,"replace_all","","Replace all matches with a corresponding value in the…",2,[[["str"],["self"]],["string"]]],[11,"replace_all_bytes","","Replace all matches using raw bytes with a corresponding…",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"replace_all_with","","Replace all matches using a closure called on each match.…",2,[[["str"],["string"],["self"],["f"]]]],[11,"replace_all_with_bytes","","Replace all matches using raw bytes with a closure called…",2,[[["f"],["self"],["vec"]]]],[11,"stream_find_iter","","Returns an iterator of non-overlapping matches in the…",2,[[["read"],["self"]],[["streamfinditer"],["read"]]]],[11,"stream_replace_all","","Search for and replace all matches of this automaton in…",2,[[["w"],["self"],["r"]],["result"]]],[11,"stream_replace_all_with","","Search the given reader and replace all matches of this…",2,[[["w"],["f"],["self"],["r"]],["result"]]],[11,"match_kind","","Returns the match kind used by this automaton.",2,[[["self"]],["matchkind"]]],[11,"max_pattern_len","","Returns the length of the longest pattern matched by this…",2,[[["self"]],["usize"]]],[11,"pattern_count","","Return the total number of patterns matched by this…",2,[[["self"]],["usize"]]],[11,"supports_overlapping","","Returns true if and only if this automaton supports…",2,[[["self"]],["bool"]]],[11,"supports_stream","","Returns true if and only if this automaton supports stream…",2,[[["self"]],["bool"]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this…",2,[[["self"]],["usize"]]],[11,"new","","Create a new builder for configuring an Aho-Corasick…",3,[[],["ahocorasickbuilder"]]],[11,"build","","Build an Aho-Corasick automaton using the configuration…",3,[[["i"],["self"]],["ahocorasick"]]],[11,"build_with_size","","Build an Aho-Corasick automaton using the configuration…",3,[[["i"],["self"]],[["error"],["result",["ahocorasick","error"]],["ahocorasick"]]]],[11,"auto_configure","","Automatically configure the settings on this builder…",3,[[["self"]],["ahocorasickbuilder"]]],[11,"match_kind","","Set the desired match semantics.",3,[[["self"],["matchkind"]],["ahocorasickbuilder"]]],[11,"anchored","","Enable anchored mode, which requires all matches to start…",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"ascii_case_insensitive","","Enable ASCII-aware case insensitive matching.",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"dense_depth","","Set the limit on how many NFA states use a dense…",3,[[["self"],["usize"]],["ahocorasickbuilder"]]],[11,"dfa","","Compile the standard Aho-Corasick automaton into a…",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"prefilter","","Enable heuristic prefilter optimizations.",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"byte_classes","","Shrink the size of the transition alphabet by mapping…",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"premultiply","","Premultiply state identifiers in the transition table.…",3,[[["self"],["bool"]],["ahocorasickbuilder"]]],[11,"kind","","Return the kind of this error.",4,[[["self"]],["errorkind"]]],[0,"packed","","A lower level API for packed multiple substring search,…",null,null],[3,"Builder","aho_corasick::packed","A builder for constructing a packed searcher from a…",null,null],[3,"Config","","The configuration for a packed multiple pattern searcher.",null,null],[3,"FindIter","","An iterator over non-overlapping matches from a packed…",null,null],[3,"Searcher","","A packed searcher for quickly finding occurrences of…",null,null],[4,"MatchKind","","A knob for controlling the match semantics of a packed…",null,null],[13,"LeftmostFirst","","Use leftmost-first match semantics, which reports leftmost…",5,null],[13,"LeftmostLongest","","Use leftmost-longest match semantics, which reports…",5,null],[11,"new","","Create a new default configuration. A default…",6,[[],["config"]]],[11,"builder","","Create a packed builder from this configuration. The…",6,[[["self"]],["builder"]]],[11,"match_kind","","Set the match semantics for this configuration.",6,[[["matchkind"],["self"]],["config"]]],[11,"new","","Create a new builder for constructing a multi-pattern…",7,[[],["builder"]]],[11,"build","","Build a searcher from the patterns added to this builder…",7,[[["self"]],[["searcher"],["option",["searcher"]]]]],[11,"add","","Add the given pattern to this set to match.",7,[[["self"],["asref"]],["builder"]]],[11,"extend","","Add the given iterator of patterns to this set to match.",7,[[["self"],["i"]],["builder"]]],[11,"new","","A convenience function for constructing a searcher from an…",8,[[["i"]],[["searcher"],["option",["searcher"]]]]],[11,"find","","Return the first occurrence of any of the patterns in this…",8,[[["self"],["asref"]],[["match"],["option",["match"]]]]],[11,"find_at","","Return the first occurrence of any of the patterns in this…",8,[[["asref"],["usize"],["self"]],[["match"],["option",["match"]]]]],[11,"find_iter","","Return an iterator of non-overlapping occurrences of the…",8,[[["self"],["b"]],["finditer"]]],[11,"match_kind","","Returns the match kind used by this packed searcher.",8,[[["self"]],["matchkind"]]],[11,"minimum_len","","Returns the minimum length of a haystack that is required…",8,[[["self"]],["usize"]]],[11,"heap_bytes","","Returns the approximate total amount of heap used by this…",8,[[["self"]],["usize"]]],[8,"StateID","aho_corasick","A trait describing the representation of an automaton's…",null,null],[10,"from_usize","","Convert from a `usize` to this implementation's…",9,[[["usize"]],["self"]]],[10,"to_usize","","Convert this implementation's representation to a `usize`.",9,[[],["usize"]]],[10,"max_id","","Return the maximum state identifier supported by this…",9,[[],["usize"]]],[11,"pattern","","Returns the identifier of the pattern that matched.",10,[[["self"]],["usize"]]],[11,"start","","The starting position of the match.",10,[[["self"]],["usize"]]],[11,"end","","The ending position of the match.",10,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if this match is empty. That is,…",10,[[["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","aho_corasick::packed","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"into_iter","","",14,[[],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"next","aho_corasick","",11,[[["self"]],[["match"],["option",["match"]]]]],[11,"next","","",12,[[["self"]],[["match"],["option",["match"]]]]],[11,"next","","",13,[[["self"]],[["option",["result"]],["result",["match"]]]]],[11,"next","aho_corasick::packed","",14,[[["self"]],[["match"],["option",["match"]]]]],[11,"clone","aho_corasick","",2,[[["self"]],["ahocorasick"]]],[11,"clone","","",3,[[["self"]],["ahocorasickbuilder"]]],[11,"clone","","",0,[[["self"]],["matchkind"]]],[11,"clone","","",4,[[["self"]],["error"]]],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"clone","aho_corasick::packed","",5,[[["self"]],["matchkind"]]],[11,"clone","","",6,[[["self"]],["config"]]],[11,"clone","","",7,[[["self"]],["builder"]]],[11,"clone","","",8,[[["self"]],["searcher"]]],[11,"clone","aho_corasick","",10,[[["self"]],["match"]]],[11,"default","","",3,[[],["ahocorasickbuilder"]]],[11,"default","","",0,[[],["matchkind"]]],[11,"default","aho_corasick::packed","",5,[[],["matchkind"]]],[11,"default","","",6,[[],["config"]]],[11,"default","","",7,[[],["builder"]]],[11,"eq","aho_corasick","",0,[[["self"],["matchkind"]],["bool"]]],[11,"eq","aho_corasick::packed","",5,[[["matchkind"],["self"]],["bool"]]],[11,"eq","aho_corasick","",10,[[["match"],["self"]],["bool"]]],[11,"ne","","",10,[[["match"],["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","aho_corasick::packed","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","aho_corasick","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"description","","",4,[[["self"]],["str"]]]],"p":[[4,"MatchKind"],[4,"ErrorKind"],[3,"AhoCorasick"],[3,"AhoCorasickBuilder"],[3,"Error"],[4,"MatchKind"],[3,"Config"],[3,"Builder"],[3,"Searcher"],[8,"StateID"],[3,"Match"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"FindIter"]]};
searchIndex["arrayref"] = {"doc":"This package contains just four macros, which enable the…","i":[[14,"array_ref","arrayref","You can use `array_ref` to generate an array reference to…",null,null],[14,"array_refs","","You can use `array_refs` to generate a series of array…",null,null],[14,"mut_array_refs","","You can use `mut_array_refs` to generate a series of…",null,null],[14,"array_mut_ref","","You can use `array_mut_ref` to generate a mutable array…",null,null]],"p":[]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:…","i":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"new","","Create a new empty `ArrayString`.",0,[[],["arraystring"]]],[11,"from","","Create a new `ArrayString` from a `str`.",0,[[["str"]],[["capacityerror",["str"]],["result",["capacityerror"]]]]],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,[[["a"]],[["utf8error"],["result",["utf8error"]]]]],[11,"capacity","","Return the capacity of the `ArrayString`.",0,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,[[["self"]],["bool"]]],[11,"push","","Adds the given char to the end of the string.",0,[[["self"],["char"]]]],[11,"try_push","","Adds the given char to the end of the string.",0,[[["self"],["char"]],[["result",["capacityerror"]],["capacityerror",["char"]]]]],[11,"push_str","","Adds the given string slice to the end of the string.",0,[[["str"],["self"]]]],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,[[["self"],["str"]],[["result",["capacityerror"]],["capacityerror",["str"]]]]],[11,"pop","","Removes the last character from the string and returns it.",0,[[["self"]],[["option",["char"]],["char"]]]],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,[[["self"],["usize"]]]],[11,"remove","","Removes a `char` from this `ArrayString` at a byte…",0,[[["self"],["usize"]],["char"]]],[11,"clear","","Make the string empty.",0,[[["self"]]]],[11,"set_len","","Set the strings’s length.",0,[[["self"],["usize"]]]],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,[[["self"]],["str"]]],[11,"new","","Create a new `CapacityError` from `element`.",1,[[["t"]],["capacityerror"]]],[11,"element","","Extract the overflowing element",1,[[],["t"]]],[11,"simplify","","Convert into a `CapacityError` that does not carry an…",1,[[],["capacityerror"]]],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range…",null,null],[11,"start","","Start index (inclusive)",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"end","","End index (exclusive)",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"new","","Create a new empty `ArrayVec`.",4,[[],["arrayvec"]]],[11,"len","","Return the number of elements in the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,[[["self"]],["usize"]]],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,[[["self"]],["bool"]]],[11,"push","","Push `element` to the end of the vector.",4,[[["self"]]]],[11,"try_push","","Push `element` to the end of the vector.",4,[[["self"]],[["capacityerror"],["result",["capacityerror"]]]]],[11,"push_unchecked","","Push `element` to the end of the vector without checking…",4,[[["self"]]]],[11,"insert","","Insert `element` at position `index`.",4,[[["self"],["usize"]]]],[11,"try_insert","","Insert `element` at position `index`.",4,[[["self"],["usize"]],[["capacityerror"],["result",["capacityerror"]]]]],[11,"pop","","Remove the last element in the vector and return it.",4,[[["self"]],["option"]]],[11,"swap_remove","","Remove the element at `index` and swap the last element…",4,[[["self"],["usize"]]]],[11,"swap_pop","","Remove the element at `index` and swap the last element…",4,[[["self"],["usize"]],["option"]]],[11,"remove","","Remove the element at `index` and shift down the following…",4,[[["self"],["usize"]]]],[11,"pop_at","","Remove the element at `index` and shift down the following…",4,[[["self"],["usize"]],["option"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",4,[[["self"],["usize"]]]],[11,"clear","","Remove all elements in the vector.",4,[[["self"]]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"set_len","","Set the vector’s length without dropping or moving out…",4,[[["self"],["usize"]]]],[11,"drain","","Create a draining iterator that removes the specified…",4,[[["self"],["rangeargument"]],["drain"]]],[11,"into_inner","","Return the inner fixed size array, if it is full to its…",4,[[],["result"]]],[11,"dispose","","Dispose of `self` without the overwriting that is needed…",4,[[]]],[11,"as_slice","","Return a slice containing all elements of the vector.",4,[[["self"]]]],[11,"as_mut_slice","","Return a mutable slice containing all elements of the…",4,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",4,[[],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"deref","","",0,[[["self"]],["str"]]],[11,"deref","","",4,[[["self"]]]],[11,"deref_mut","","",0,[[["self"]],["str"]]],[11,"deref_mut","","",4,[[["self"]]]],[11,"from","","",4,[[["a"]],["self"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","","",0,[[["str"],["self"]],["bool"]]],[11,"eq","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"ne","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"]],["bool"]]],[11,"eq","","",4,[[["self"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"cmp","","",1,[[["capacityerror"],["self"]],["ordering"]]],[11,"cmp","","",4,[[["arrayvec"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"]],["bool"]]],[11,"le","","",0,[[["self"]],["bool"]]],[11,"gt","","",0,[[["self"]],["bool"]]],[11,"ge","","",0,[[["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["str"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["str"],["self"]],["bool"]]],[11,"le","","",0,[[["str"],["self"]],["bool"]]],[11,"gt","","",0,[[["str"],["self"]],["bool"]]],[11,"ge","","",0,[[["str"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["capacityerror"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"le","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"gt","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"ge","","",1,[[["capacityerror"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["arrayvec"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["self"]],["bool"]]],[11,"le","","",4,[[["self"]],["bool"]]],[11,"ge","","",4,[[["self"]],["bool"]]],[11,"gt","","",4,[[["self"]],["bool"]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"drop","","",6,[[["self"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,[[["self"]]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"extend","","",4,[[["self"],["intoiterator"]]]],[11,"from_iter","","",4,[[["intoiterator"]],["self"]]],[11,"into_iter","","",4,[[],["intoiter"]]],[11,"write_char","","",0,[[["self"],["char"]],["result"]]],[11,"write_str","","",0,[[["str"],["self"]],["result"]]],[11,"as_ref","","",0,[[["self"]],["str"]]],[11,"as_ref","","",4,[[["self"]]]],[11,"as_mut","","",4,[[["self"]]]],[11,"clone","","",0,[[["self"]],["arraystring"]]],[11,"clone_from","","",0,[[["self"],["self"]]]],[11,"clone","","",1,[[["self"]],["capacityerror"]]],[11,"clone","","",5,[[["self"]],["intoiter"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone_from","","",4,[[["self"],["self"]]]],[11,"default","","Return an empty `ArrayString`",0,[[],["arraystring"]]],[11,"default","","Return an empty array",4,[[],["arrayvec"]]],[11,"borrow","","",0,[[["self"]],["str"]]],[11,"borrow","","",4,[[["self"]]]],[11,"borrow_mut","","",4,[[["self"]]]],[11,"start","","Start index (inclusive)",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"end","","End index (exclusive)",3,[[["self"]],[["usize"],["option",["usize"]]]]]],"p":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","i":[[3,"Frame","backtrace","A trait representing one frame of a backtrace, yielded to…",null,null],[3,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[3,"SymbolName","","A wrapper around a symbol name to provide ergonomic…",null,null],[3,"BacktraceFmt","","A formatter for backtraces.",null,null],[3,"BacktraceFrameFmt","","A formatter for just one frame of a backtrace.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[4,"BytesOrWideString","","A platform independent representation of a string. When…",null,null],[13,"Bytes","","A slice, typically provided on Unix platforms.",0,null],[13,"Wide","","Wide strings typically from Windows.",0,null],[4,"PrintFmt","","The styles of printing that we can print",null,null],[13,"Short","","Prints a terser backtrace which ideally only contains…",1,null],[13,"Full","","Prints a backtrace that contains all possible information",1,null],[5,"trace_unsynchronized","","Same as `trace`, only unsafe as it's unsynchronized.",null,[[["fnmut"]]]],[5,"resolve_frame_unsynchronized","","Same as `resolve_frame`, only unsafe as it's unsynchronized.",null,[[["frame"],["f"]]]],[5,"resolve_unsynchronized","","Same as `resolve`, only unsafe as it's unsynchronized.",null,[[["f"]]]],[5,"clear_symbol_cache","","Attempt to reclaim that cached memory used to symbolicate…",null,[[]]],[5,"trace","","Inspects the current call-stack, passing all active frames…",null,[[["fnmut"]]]],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the…",null,[[["fnmut"]]]],[5,"resolve_frame","","Resolve a previously capture frame to a symbol, passing…",null,[[["frame"],["fnmut"]]]],[11,"ip","","Returns the current instruction pointer of this frame.",2,[[["self"]]]],[11,"symbol_address","","Returns the starting symbol address of the frame of this…",2,[[["self"]]]],[11,"name","","Returns the name of this function.",3,[[["self"]],[["option",["symbolname"]],["symbolname"]]]],[11,"addr","","Returns the starting address of this function.",3,[[["self"]],["option"]]],[11,"filename_raw","","Returns the raw filename as a slice. This is mainly useful…",3,[[["self"]],[["bytesorwidestring"],["option",["bytesorwidestring"]]]]],[11,"lineno","","Returns the line number for where this symbol is currently…",3,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"filename","","Returns the file name where this function was defined.",3,[[["self"]],[["option",["path"]],["path"]]]],[11,"new","","Creates a new symbol name from the raw underlying bytes.",4,[[],["symbolname"]]],[11,"as_str","","Returns the raw (mangled) symbol name as a `str` if the…",4,[[["self"]],[["str"],["option",["str"]]]]],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",4,[[["self"]]]],[11,"to_str_lossy","","Lossy converts to a `Cow<str>`, will allocate if `Bytes`…",0,[[["self"]],[["str"],["cow",["str"]]]]],[11,"into_path_buf","","Provides a `Path` representation of `BytesOrWideString`.",0,[[],["pathbuf"]]],[11,"new","","Create a new `BacktraceFmt` which will write output to the…",5,[[["printfmt"],["fnmut"],["formatter"]],["self"]]],[11,"add_context","","Prints a preamble for the backtrace about to be printed.",5,[[["self"]],["result"]]],[11,"frame","","Adds a frame to the backtrace output.",5,[[["self"]],["backtraceframefmt"]]],[11,"finish","","Completes the backtrace output.",5,[[["self"]],["result"]]],[11,"backtrace_frame","","Prints a `BacktraceFrame` with this frame formatter.",6,[[["backtraceframe"],["self"]],["result"]]],[11,"backtrace_symbol","","Prints a `BacktraceSymbol` within a `BacktraceFrame`.",6,[[["backtraceframe"],["self"],["backtracesymbol"]],["result"]]],[11,"symbol","","Prints a raw traced `Frame` and `Symbol`, typically from…",6,[[["self"],["frame"],["symbol"]],["result"]]],[11,"print_raw","","Adds a raw frame to the backtrace output.",6,[[["u32"],["symbolname"],["option",["symbolname"]],["bytesorwidestring"],["option",["u32"]],["self"],["option",["bytesorwidestring"]]],["result"]]],[11,"new","","Captures a backtrace at the callsite of this function,…",7,[[],["backtrace"]]],[11,"new_unresolved","","Similar to `new` except that this does not resolve any…",7,[[],["backtrace"]]],[11,"frames","","Returns the frames from when this backtrace was captured.",7,[[["self"]]]],[11,"resolve","","If this backtrace was created from `new_unresolved` then…",7,[[["self"]]]],[11,"ip","","Same as `Frame::ip`",8,[[["self"]]]],[11,"symbol_address","","Same as `Frame::symbol_address`",8,[[["self"]]]],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",8,[[["self"]]]],[11,"name","","Same as `Symbol::name`",9,[[["self"]],[["option",["symbolname"]],["symbolname"]]]],[11,"addr","","Same as `Symbol::addr`",9,[[["self"]],["option"]]],[11,"filename","","Same as `Symbol::filename`",9,[[["self"]],[["option",["path"]],["path"]]]],[11,"lineno","","Same as `Symbol::lineno`",9,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",7,[[["vec",["backtraceframe"]],["backtraceframe"]],["self"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",1,[[["self"],["printfmt"]],["bool"]]],[11,"drop","","",6,[[["self"]]]],[11,"into","","",7,[[],[["vec",["backtraceframe"]],["backtraceframe"]]]],[11,"clone","","",2,[[["self"]],["frame"]]],[11,"clone","","",1,[[["self"]],["printfmt"]]],[11,"clone","","",7,[[["self"]],["backtrace"]]],[11,"clone","","",8,[[["self"]],["backtraceframe"]]],[11,"clone","","",9,[[["self"]],["backtracesymbol"]]],[11,"default","","",7,[[],["backtrace"]]]],"p":[[4,"BytesOrWideString"],[4,"PrintFmt"],[3,"Frame"],[3,"Symbol"],[3,"SymbolName"],[3,"BacktraceFmt"],[3,"BacktraceFrameFmt"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"]]};
searchIndex["backtrace_sys"] = {"doc":"","i":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[4,"backtrace_state"]]};
searchIndex["base58"] = {"doc":"Base58-to-text encoding","i":[[4,"FromBase58Error","base58","Errors that can occur when decoding base58 encoded string.",null,null],[13,"InvalidBase58Character","","The input contained a character which is not a part of the…",0,null],[13,"InvalidBase58Length","","The input had invalid length.",0,null],[8,"ToBase58","","A trait for converting a value to base58 encoded string.",null,null],[10,"to_base58","","Converts a value of `self` to a base58 value, returning…",1,[[["self"]],["string"]]],[8,"FromBase58","","A trait for converting base58 encoded values.",null,null],[10,"from_base58","","Convert a value of `self`, interpreted as base58 encoded…",2,[[["self"]],[["result",["vec","frombase58error"]],["vec",["u8"]],["frombase58error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"eq","","",0,[[["self"],["frombase58error"]],["bool"]]],[11,"ne","","",0,[[["self"],["frombase58error"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"FromBase58Error"],[8,"ToBase58"],[8,"FromBase58"]]};
searchIndex["bip39"] = {"doc":"This is a Rust implementation of the…","i":[[3,"Mnemonic","bip39","The primary type in this crate, most tasks require…",null,null],[3,"Seed","","The secret value used to derive HD wallet addresses from a…",null,null],[4,"Language","","The language determines which words will be used in a…",null,null],[13,"English","","",0,null],[13,"ChineseSimplified","","",0,null],[13,"ChineseTraditional","","",0,null],[13,"French","","",0,null],[13,"Italian","","",0,null],[13,"Japanese","","",0,null],[13,"Korean","","",0,null],[13,"Spanish","","",0,null],[4,"MnemonicType","","Determines the number of words that will be present in a…",null,null],[13,"Words12","","",1,null],[13,"Words15","","",1,null],[13,"Words18","","",1,null],[13,"Words21","","",1,null],[13,"Words24","","",1,null],[4,"ErrorKind","","",null,null],[13,"InvalidChecksum","","",2,null],[13,"InvalidWord","","",2,null],[13,"InvalidKeysize","","",2,null],[13,"InvalidWordLength","","",2,null],[13,"InvalidEntropyLength","","",2,null],[11,"new","","Generates a new [`Mnemonic`][Mnemonic]",3,[[["language"],["mnemonictype"]],["mnemonic"]]],[11,"from_entropy","","Create a [`Mnemonic`][Mnemonic] from pre-generated entropy",3,[[["language"]],[["mnemonic"],["error"],["result",["mnemonic","error"]]]]],[11,"from_phrase","","Create a [`Mnemonic`][Mnemonic] from an existing mnemonic…",3,[[["language"],["s"]],[["mnemonic"],["error"],["result",["mnemonic","error"]]]]],[11,"validate","","Validate a mnemonic phrase",3,[[["str"],["language"]],[["result",["error"]],["error"]]]],[11,"phrase","","Get the mnemonic phrase as a string reference.",3,[[["self"]],["str"]]],[11,"into_phrase","","Consume the `Mnemonic` and return the phrase as a `String`.",3,[[],["string"]]],[11,"entropy","","Get the original entropy value of the mnemonic phrase as a…",3,[[["self"]]]],[11,"language","","Get the [`Language`][Language]",3,[[["self"]],["language"]]],[11,"for_word_count","","Get a `MnemonicType` for a mnemonic phrase with a specific…",1,[[["usize"]],[["error"],["result",["mnemonictype","error"]],["mnemonictype"]]]],[11,"for_key_size","","Get a `MnemonicType` for a mnemonic phrase representing…",1,[[["usize"]],[["error"],["result",["mnemonictype","error"]],["mnemonictype"]]]],[11,"for_phrase","","Get a `MnemonicType` for an existing mnemonic phrase",1,[[["str"]],[["error"],["result",["mnemonictype","error"]],["mnemonictype"]]]],[11,"total_bits","","Return the number of entropy+checksum bits",1,[[["self"]],["usize"]]],[11,"entropy_bits","","Return the number of entropy bits",1,[[["self"]],["usize"]]],[11,"checksum_bits","","Return the number of checksum bits",1,[[["self"]],["u8"]]],[11,"word_count","","Return the number of words",1,[[["self"]],["usize"]]],[11,"wordlist","","Get the word list for this language",0,[[["self"]],["wordlist"]]],[11,"wordmap","","Get a [`WordMap`][WordMap] that allows word -> index…",0,[[["self"]],["wordmap"]]],[11,"new","","Generates the seed from the [`Mnemonic`][Mnemonic] and the…",4,[[["str"],["mnemonic"]],["self"]]],[11,"as_bytes","","Get the seed value as a byte slice",4,[[["self"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"as_fail","","",2,[[["self"]],["fail"]]],[11,"as_ref","","",3,[[["self"]],["str"]]],[11,"as_ref","","",4,[[["self"]]]],[11,"clone","","",3,[[["self"]],["mnemonic"]]],[11,"clone","","",1,[[["self"]],["mnemonictype"]]],[11,"clone","","",0,[[["self"]],["language"]]],[11,"clone","","",4,[[["self"]],["seed"]]],[11,"default","","",1,[[],["mnemonictype"]]],[11,"default","","",0,[[],["language"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"name","","",2,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","",2,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","",2,[[["self"]],[["option",["backtrace"]],["backtrace"]]]]],"p":[[4,"Language"],[4,"MnemonicType"],[4,"ErrorKind"],[3,"Mnemonic"],[3,"Seed"]]};
searchIndex["bitmask"] = {"doc":"A bitmask generator for enum scoped bit flags.","i":[[14,"bitmask","bitmask","The macro that generates a bitmask and it's associated bit…",null,null]],"p":[]};
searchIndex["bitvec"] = {"doc":"`bitvec` – `[bool]` in overdrive.","i":[[0,"bits","bitvec","Permit use of Rust native types as bit collections.",null,null],[8,"Bits","bitvec::bits","Allows a type to be used as a sequence of immutable bits.",null,null],[16,"Store","","The underlying fundamental type of the implementor.",0,null],[10,"as_bitslice","","Constructs a `BitSlice` reference over data.",0,[[["self"]],["bitslice"]]],[8,"BitsMut","","Allows a type to be used as a sequence of mutable bits.",null,null],[10,"as_mut_bitslice","","Constructs a mutable `BitSlice` reference over data.",1,[[["self"]],["bitslice"]]],[0,"cursor","bitvec","Bit Cursors",null,null],[3,"BigEndian","bitvec::cursor","Traverses an element from `MSbit` to `LSbit`.",null,null],[3,"LittleEndian","","Traverses an element from `LSbit` to `MSbit`.",null,null],[8,"Cursor","","A cursor over an element.",null,null],[18,"TYPENAME","","Name of the cursor type, for use in text display.",2,null],[10,"at","","Translate a semantic bit index into an electrical bit…",2,[[["bitidx"]],["bitpos"]]],[0,"prelude","bitvec","`bitvec` Prelude",null,null],[0,"slice","","`BitSlice` Wide Reference",null,null],[3,"BitSlice","bitvec::slice","A compact slice of bits, whose cursor and storage types…",null,null],[3,"BitGuard","","Write reference to a single bit.",null,null],[3,"Chunks","","State keeper for chunked iteration over a `BitSlice`.",null,null],[3,"ChunksMut","","State keeper for mutable chunked iteration over a…",null,null],[3,"ChunksExact","","State keeper for exact chunked iteration over a `BitSlice`.",null,null],[3,"ChunksExactMut","","State keeper for mutable exact chunked iteration over a…",null,null],[3,"Iter","","State keeper for iteration over a `BitSlice`.",null,null],[3,"RChunks","","State keeper for reverse chunked iteration over a…",null,null],[3,"RChunksMut","","State keeper for mutable reverse chunked iteration over a…",null,null],[3,"RChunksExact","","State keeper for reverse exact iteration over a `BitSlice`.",null,null],[3,"RChunksExactMut","","State keeper for mutable reverse exact chunked iteration…",null,null],[3,"Windows","","State keeper for sliding-window iteration over a `BitSlice`.",null,null],[11,"empty","","Produces the empty slice. This is equivalent to `&[]` for…",3,[[],["self"]]],[11,"empty_mut","","Produces the empty mutable slice. This is equivalent to…",3,[[],["self"]]],[11,"from_element","","Produces an immutable `BitSlice` over a single element.",3,[[["t"]],["self"]]],[11,"from_element_mut","","Produces a mutable `BitSlice` over a single element.",3,[[["t"]],["self"]]],[11,"from_slice","","Wraps a `&[T: BitStore]` in a `&BitSlice<C: Cursor, T>`.…",3,[[],["self"]]],[11,"from_slice_mut","","Wraps a `&mut [T: BitStore]` in a `&mut BitSlice<C:…",3,[[],["self"]]],[11,"len","","Returns the number of bits contained in the `BitSlice`.",3,[[["self"]],["usize"]]],[11,"is_empty","","Tests if the slice is empty.",3,[[["self"]],["bool"]]],[11,"first","","Gets the first element of the slice, if present.",3,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"split_first","","Returns the first and all the rest of the bits of the…",3,[[["self"]],["option"]]],[11,"split_first_mut","","Returns the first and all the rest of the bits of the…",3,[[["self"]],["option"]]],[11,"split_last","","Returns the last and all the rest of the bits in the…",3,[[["self"]],["option"]]],[11,"split_last_mut","","Returns the last and all the rest of the bits in the…",3,[[["self"]],["option"]]],[11,"last","","Gets the last element of the slice, or `None` if it is…",3,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"get","","Gets the bit value at the given position.",3,[[["self"],["usize"]],[["option",["bool"]],["bool"]]]],[11,"get_unchecked","","Looks up a bit at an index, without doing bounds checking.",3,[[["self"],["usize"]],["bool"]]],[11,"set","","Sets the bit value at the given position.",3,[[["self"],["usize"],["bool"]]]],[11,"set_unchecked","","Sets a bit at an index, without doing bounds checking.",3,[[["self"],["usize"],["bool"]]]],[11,"at","","Produces a write reference to a single bit in the slice.",3,[[["self"],["usize"]],["bitguard"]]],[11,"as_ptr","","Retrieves a read pointer to the start of the underlying…",3,[[["self"]]]],[11,"as_mut_ptr","","Retrieves a write pointer to the start of the underlying…",3,[[["self"]]]],[11,"swap","","Swaps two bits in the slice.",3,[[["self"],["usize"]]]],[11,"reverse","","Reverses the order of bits in the slice, in place.",3,[[["self"]]]],[11,"iter","","Provides read-only iteration across the slice domain.",3,[[["self"]],["iter"]]],[11,"windows","","Produces a sliding iterator over consecutive windows in…",3,[[["self"],["usize"]],["windows"]]],[11,"chunks","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["chunks"]]],[11,"chunks_mut","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["chunksmut"]]],[11,"chunks_exact","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["chunksexact"]]],[11,"chunks_exact_mut","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["chunksexactmut"]]],[11,"rchunks","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["rchunks"]]],[11,"rchunks_mut","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["rchunksmut"]]],[11,"rchunks_exact","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["rchunksexact"]]],[11,"rchunks_exact_mut","","Produces a galloping iterator over consecutive chunks in…",3,[[["self"],["usize"]],["rchunksexactmut"]]],[11,"split_at","","Divides one slice into two at an index.",3,[[["self"],["usize"]]]],[11,"split_at_mut","","Divides one slice into two at an index.",3,[[["self"],["usize"]]]],[11,"starts_with","","Tests if the slice begins with the given prefix.",3,[[["bitslice"],["self"]],["bool"]]],[11,"ends_with","","Tests if the slice ends with the given suffix.",3,[[["bitslice"],["self"]],["bool"]]],[11,"rotate_left","","Rotates the slice, in place, to the left.",3,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the slice, in place, to the right.",3,[[["self"],["usize"]]]],[11,"all","","Tests if all bits in the slice domain are set (logical `∧`).",3,[[["self"]],["bool"]]],[11,"any","","Tests if any bit in the slice is set (logical `∨`).",3,[[["self"]],["bool"]]],[11,"not_all","","Tests if any bit in the slice is unset (logical `¬∧`).",3,[[["self"]],["bool"]]],[11,"not_any","","Tests if all bits in the slice are unset (logical `¬∨`).",3,[[["self"]],["bool"]]],[11,"some","","Tests whether the slice has some, but not all, bits set…",3,[[["self"]],["bool"]]],[11,"count_ones","","Counts how many bits are set high.",3,[[["self"]],["usize"]]],[11,"count_zeros","","Counts how many bits are set low.",3,[[["self"]],["usize"]]],[11,"set_all","","Set all bits in the slice to a value.",3,[[["self"],["bool"]]]],[11,"for_each","","Provides mutable traversal of the collection.",3,[[["self"],["f"]]]],[11,"add_assign_reverse","","Performs “reverse” addition (left to right instead of…",3,[[["self"],["i"]],["bool"]]],[11,"as_slice","","Accesses the backing storage of the `BitSlice` as a slice…",3,[[["self"]]]],[11,"as_mut_slice","","Accesses the underlying store.",3,[[["self"]]]],[11,"change_cursor","","Changes the cursor type of the slice handle.",3,[[["self"]],["bitslice"]]],[11,"change_cursor_mut","","Changes the cursor type of the slice handle.",3,[[["self"]],["bitslice"]]],[11,"bitptr","","Accesses the underlying pointer structure.",3,[[["self"]],["bitptr"]]],[11,"remainder","","Produces the remainder of the original slice, which will…",4,[[["self"]],["bitslice"]]],[11,"into_remainder","","Produces the remainder of the original slice, which will…",5,[[],["bitslice"]]],[11,"remainder","","Produces the remainder of the original slice, which will…",6,[[["self"]],["bitslice"]]],[11,"into_remainder","","Produces the remainder of the original slice, which will…",7,[[],["bitslice"]]],[0,"store","bitvec","Bit management",null,null],[8,"BitStore","bitvec::store","Generalizes over the fundamental types for use in `bitvec`…",null,null],[18,"BITS","","The width, in bits, of this type.",8,null],[18,"INDX","","The number of bits required to index a bit inside the…",8,null],[18,"MASK","","The bitmask to turn an arbitrary number into a bit index.…",8,null],[18,"TYPENAME","","Name of the implementing type. This is only necessary…",8,null],[11,"load","","Performs an unsynchronized load on the underlying element.",8,[[["self"]],["self"]]],[11,"set","","Sets a specific bit in an element to a given value.",8,[[["bitidx"],["self"],["bool"]]]],[11,"set_at","","Sets a specific bit in an element to a given value.",8,[[["bitpos"],["self"],["bool"]]]],[11,"get","","Gets a specific bit in an element.",8,[[["bitidx"],["self"]],["bool"]]],[11,"get_at","","Gets a specific bit in an element.",8,[[["bitpos"],["self"]],["bool"]]],[11,"mask_at","","Produces the bit mask which selects only the bit at the…",8,[[["bitpos"]],["self"]]],[11,"count_ones","","Counts how many bits in `self` are set to `1`.",8,[[["self"]],["usize"]]],[11,"count_zeros","","Counts how many bits in `self` are set to `0`.",8,[[["self"]],["usize"]]],[11,"bits","","Extends a single bit to fill the entire element.",8,[[["bool"]],["self"]]],[0,"boxed","bitvec","`BitBox` structure",null,null],[3,"BitBox","bitvec::boxed","A pointer type for owned bit sequences.",null,null],[3,"IntoIter","","",null,null],[11,"empty","","Constructs an empty boxed bitslice.",9,[[],["self"]]],[11,"from_element","","Produces a `BitBox` from a single element.",9,[[["t"]],["self"]]],[11,"from_slice","","Builds a `BitBox` from a borrowed slice of elements.",9,[[],["self"]]],[11,"from_bitslice","","Clones a `&BitSlice` into a `BitBox`.",9,[[["bitslice"]],["self"]]],[11,"from_boxed_slice","","Produces a `BitBox` from an owned slice of elements.",9,[[["box"]],["self"]]],[11,"into_boxed_slice","","Removes the `BitBox` wrapper from a `Box<[T]>`.",9,[[],["box"]]],[11,"from_raw","","Constructs a `BitBox` from a raw `BitPtr`.",9,[[["bitptr"]],["self"]]],[11,"into_raw","","Consumes the `BitBox`, returning the wrapped `BitPtr`…",9,[[],["bitptr"]]],[11,"leak","","Consumes and leaks the `BitBox`, returning a mutable…",9,[[],["bitslice"]]],[11,"add_reverse","","Performs “reverse” addition (left to right instead of…",9,[[["i"]],["self"]]],[11,"change_cursor","","Changes the cursor on a box handle, without changing the…",9,[[],["bitbox"]]],[11,"as_bitslice","","Accesses the `BitSlice<C, T>` to which the `BitBox` refers.",9,[[["self"]],["bitslice"]]],[11,"as_mut_bitslice","","Accesses the `BitSlice<C, T>` to which the `BitBox` refers.",9,[[["self"]],["bitslice"]]],[0,"vec","bitvec","`BitVec` structure",null,null],[3,"BitVec","bitvec::vec","A compact [`Vec`] of bits, whose cursor and storage type…",null,null],[3,"Drain","","State keeper for draining iteration.",null,null],[3,"IntoIter","","A consuming iterator for `BitVec`.",null,null],[3,"Splice","","A splicing iterator for `BitVec`.",null,null],[11,"new","","Constructs a new, empty, `BitVec<C, T>`.",10,[[],["self"]]],[11,"with_capacity","","Constructs a new, empty, `BitVec<T>` with the specified…",10,[[["usize"]],["self"]]],[11,"from_element","","Constructs a `BitVec` from a single element.",10,[[["t"]],["self"]]],[11,"from_slice","","Constructs a `BitVec` from a slice of elements.",10,[[],["self"]]],[11,"from_vec","","Consumes a `Vec<T>` and creates a `BitVec<C, T>` from it.",10,[[["vec"]],["self"]]],[11,"from_bitslice","","Clones a `&BitSlice` into a `BitVec`.",10,[[["bitslice"]],["self"]]],[11,"from_boxed_bitslice","","Converts a frozen `BitBox` allocation into a growable…",10,[[["bitbox"]],["self"]]],[11,"from_raw_parts","","Creates a new `BitVec<C, T>` directly from the raw parts…",10,[[["bitptr"],["usize"]],["self"]]],[11,"capacity","","Returns the number of bits the vector can hold without…",10,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more bits to…",10,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for at least `additional`…",10,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",10,[[["self"]]]],[11,"truncate","","Shortens the vector, keeping the first `len` bits and…",10,[[["self"],["usize"]]]],[11,"as_bitslice","","Produces a `BitSlice` containing the entire vector.",10,[[["self"]],["bitslice"]]],[11,"as_mut_bitslice","","Produces a mutable `BitSlice` containing the entire vector.",10,[[["self"]],["bitslice"]]],[11,"set_len","","Sets the length of the vector.",10,[[["self"],["usize"]]]],[11,"swap_remove","","Removes a bit from the vector and returns it.",10,[[["self"],["usize"]],["bool"]]],[11,"insert","","Inserts a bit at a position, shifting all bits after it to…",10,[[["self"],["usize"],["bool"]]]],[11,"remove","","Removes and returns the bit at position `index`, shifting…",10,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retains only the bits that pass the predicate.",10,[[["self"],["f"]]]],[11,"push","","Appends a bit to the back of the vector.",10,[[["self"],["bool"]]]],[11,"pop","","Removes the last bit from the collection, if present.",10,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",10,[[["bitvec"],["self"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",10,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",10,[[["self"]]]],[11,"split_off","","Splits the collection into two at the given index.",10,[[["self"],["usize"]],["self"]]],[11,"resize","","Resizes the `BitVec` in place so that `len` is equal to…",10,[[["self"],["usize"],["bool"]]]],[11,"splice","","Creates a splicing iterator that exchanges the specified…",10,[[["self"],["i"],["r"]],["splice"]]],[11,"set_elements","","Sets the backing storage to the provided element.",10,[[["self"],["t"]]]],[11,"add_reverse","","Performs “reverse” addition (left to right instead of…",10,[[["i"]],["self"]]],[11,"add_assign_reverse","","Performs “reverse” addition (left to right instead of…",10,[[["self"],["i"]]]],[11,"change_cursor","","Changes the cursor type on the vector handle, without…",10,[[],["bitvec"]]],[11,"into_boxed_bitslice","","Degrades a `BitVec` to a `BitBox`, freezing its size.",10,[[],["bitbox"]]],[11,"into_boxed_slice","","Degrades a `BitVec` to a standard boxed slice.",10,[[],["box"]]],[11,"into_vec","","Degrades a `BitVec` to a standard `Vec`.",10,[[],["vec"]]],[11,"bitptr","","Gets the raw `BitPtr` powering the vector.",10,[[["self"]],["bitptr"]]],[14,"bitvec","bitvec","Construct a `BitVec` out of a literal array in source…",null,null],[14,"bitbox","","Construct a `BitBox` out of a literal array in source…",null,null],[11,"from","bitvec::cursor","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","bitvec::slice","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"into_iter","","",14,[[],["i"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"into_iter","","",16,[[],["i"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"into_iter","","",17,[[],["i"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","bitvec::boxed","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"into_iter","","",9,[[],["i"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","bitvec::vec","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"at","bitvec::cursor","Maps a semantic count to a concrete position.",11,[[["bitidx"]],["bitpos"]]],[11,"at","","Maps a semantic count to a concrete position.",12,[[["bitidx"]],["bitpos"]]],[11,"drop","bitvec::slice","",13,[[["self"]]]],[11,"drop","bitvec::boxed","",9,[[["self"]]]],[11,"drop","bitvec::vec","Rebuild the interior `Vec` and let it run the deallocator.",10,[[["self"]]]],[11,"drop","","",21,[[["self"]]]],[11,"drop","","",23,[[["self"]]]],[11,"as_mut","bitvec::slice","Accesses the underlying store.",3,[[["self"]]]],[11,"as_mut","bitvec::boxed","",9,[[["self"]],["bitslice"]]],[11,"as_mut","","",9,[[["self"]]]],[11,"as_mut","bitvec::vec","",10,[[["self"]],["bitslice"]]],[11,"as_mut","","",10,[[["self"]]]],[11,"as_ref","bitvec::slice","Accesses the underlying store.",3,[[["self"]]]],[11,"as_ref","bitvec::boxed","",9,[[["self"]],["bitslice"]]],[11,"as_ref","","",9,[[["self"]]]],[11,"as_ref","bitvec::vec","",10,[[["self"]],["bitslice"]]],[11,"as_ref","","Accesses the underlying store.",10,[[["self"]]]],[11,"from","bitvec::boxed","",9,[[["bitslice"]],["self"]]],[11,"from","","",9,[[],["self"]]],[11,"from","","",9,[[["bitvec"]],["self"]]],[11,"from","","",9,[[["box"]],["self"]]],[11,"from","bitvec::vec","",10,[[["bitslice"]],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[["bitbox"]],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[["box"]],["self"]]],[11,"from","","",10,[[["vec"]],["self"]]],[11,"into","bitvec::boxed","",9,[[],["box"]]],[11,"into","bitvec::vec","",10,[[],["box"]]],[11,"into","","",10,[[],["vec"]]],[11,"next_back","bitvec::slice","Produces the next chunk from the back of the slice.",14,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the back of the slice.",15,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the back of the slice.",4,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the back of th eslice.",5,[[["self"]],["option"]]],[11,"next_back","","Produces the next bit from the back of the slice.",16,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the front of the slice.",17,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the front of the slice.",18,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the front of the slice.",6,[[["self"]],["option"]]],[11,"next_back","","Produces the next chunk from the front of the slice.",7,[[["self"]],["option"]]],[11,"next_back","","Produces the next window from the back of the slice.",19,[[["self"]],["option"]]],[11,"next_back","bitvec::boxed","",20,[[["self"]],["option"]]],[11,"next_back","bitvec::vec","",21,[[["self"]],["option"]]],[11,"next_back","","",22,[[["self"]],["option"]]],[11,"next_back","","",23,[[["self"]],["option"]]],[11,"extend","","Extends a `BitVec` from another bitstream.",10,[[["self"],["intoiterator"]]]],[11,"into_iter","bitvec::boxed","",9,[[]]],[11,"into_iter","bitvec::vec","Iterates over the vector.",10,[[]]],[11,"next","bitvec::slice","Advances the iterator by one, returning the first chunk in…",14,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",14,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",14,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",14,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",14,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",15,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",15,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",15,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",15,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",15,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",4,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",4,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",4,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",4,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",4,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",5,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",5,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",5,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",5,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",5,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first bit in…",16,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of bits remaining in the iterator.",16,[[["self"]]]],[11,"count","","Counts how many bits are live in the iterator, consuming it.",16,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` bits, starting from zero.",16,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final bit.",16,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",17,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",17,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",17,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",17,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",17,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",18,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",18,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",18,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",18,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final chunk.",18,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",6,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",6,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",6,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",6,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final bit.",6,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first chunk in…",7,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of chunks remaining in the iterator.",7,[[["self"]]]],[11,"count","","Counts how many chunks are live in the iterator, consuming…",7,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` chunks, starting from zero.",7,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final bit.",7,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first window…",19,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of windows remaining in the iterator.",19,[[["self"]]]],[11,"count","","Counts how many windows are live in the iterator,…",19,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` windows, starting from zero.",19,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the final window.",19,[[],["option"]]],[11,"next","bitvec::boxed","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,[[["self"]]]],[11,"count","","",20,[[],["usize"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"last","","",20,[[],["option"]]],[11,"next","bitvec::vec","",21,[[["self"]],["option"]]],[11,"size_hint","","",21,[[["self"]]]],[11,"count","","",21,[[],["usize"]]],[11,"nth","","",21,[[["self"],["usize"]],["option"]]],[11,"last","","",21,[[],["option"]]],[11,"next","","Advances the iterator by one, returning the first bit in…",22,[[["self"]],["option"]]],[11,"size_hint","","Hints at the number of bits remaining in the iterator.",22,[[["self"]]]],[11,"count","","Counts how many bits are live in the iterator, consuming it.",22,[[],["usize"]]],[11,"nth","","Advances the iterator by `n` bits, starting from zero.",22,[[["self"],["usize"]],["option"]]],[11,"last","","Consumes the iterator, returning only the last bit.",22,[[],["option"]]],[11,"next","","",23,[[["self"]],["option"]]],[11,"size_hint","","",23,[[["self"]]]],[11,"count","","",23,[[],["usize"]]],[11,"nth","","",23,[[["self"],["usize"]],["option"]]],[11,"last","","",23,[[],["option"]]],[11,"clone","bitvec::cursor","",11,[[["self"]],["bigendian"]]],[11,"clone","","",12,[[["self"]],["littleendian"]]],[11,"clone","bitvec::slice","",14,[[["self"]],["chunks"]]],[11,"clone","","",4,[[["self"]],["chunksexact"]]],[11,"clone","","",16,[[["self"]],["iter"]]],[11,"clone","","",17,[[["self"]],["rchunks"]]],[11,"clone","","",6,[[["self"]],["rchunksexact"]]],[11,"clone","","",19,[[["self"]],["windows"]]],[11,"clone","bitvec::boxed","",9,[[["self"]],["self"]]],[11,"clone","bitvec::vec","",10,[[["self"]],["self"]]],[11,"clone_from","","",10,[[["self"],["self"]]]],[11,"default","bitvec::boxed","",9,[[],["self"]]],[11,"default","bitvec::vec","",10,[[],["self"]]],[11,"cmp","bitvec::slice","",3,[[["self"]],["ordering"]]],[11,"cmp","bitvec::boxed","",9,[[["self"]],["ordering"]]],[11,"cmp","bitvec::vec","",10,[[["self"]],["ordering"]]],[11,"eq","bitvec::cursor","",11,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",12,[[["self"],["littleendian"]],["bool"]]],[11,"eq","bitvec::slice","Performas a comparison by `==`.",3,[[["self"],["bitslice"]],["bool"]]],[11,"eq","","",3,[[["self"],["bitvec"]],["bool"]]],[11,"eq","bitvec::boxed","",9,[[["bitbox"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["bitslice"]],["bool"]]],[11,"eq","bitvec::slice","",3,[[["bitbox"],["self"]],["bool"]]],[11,"eq","bitvec::vec","Performs a comparison by `==`.",10,[[["self"],["bitvec"]],["bool"]]],[11,"eq","","",10,[[["self"],["bitslice"]],["bool"]]],[11,"eq","","",10,[[["bitslice"],["self"]],["bool"]]],[11,"partial_cmp","bitvec::slice","Performs a comparison by `<` or `>`.",3,[[["self"],["bitslice"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["bitvec"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","bitvec::boxed","",9,[[["bitbox"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",9,[[["self"],["bitslice"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","bitvec::slice","",3,[[["bitbox"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","bitvec::vec","Performs a comparison by `<` or `>`.",10,[[["self"],["bitvec"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",10,[[["self"],["bitslice"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",10,[[["bitslice"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"to_owned","bitvec::slice","Clones a borrowed `BitSlice` into an owned `BitVec`.",3,[[["self"]]]],[11,"deref","","",13,[[["self"]]]],[11,"deref","bitvec::boxed","",9,[[["self"]]]],[11,"deref","bitvec::vec","Dereferences `&BitVec` down to `&BitSlice`.",10,[[["self"]]]],[11,"deref_mut","bitvec::slice","",13,[[["self"]]]],[11,"deref_mut","bitvec::boxed","",9,[[["self"]]]],[11,"deref_mut","bitvec::vec","Dereferences `&mut BitVec` down to `&mut BitSlice`.",10,[[["self"]]]],[11,"fmt","bitvec::cursor","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::slice","Renders the `BitSlice` type header and contents for debug.",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::boxed","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::vec","Renders the `BitVec` type header and contents for debug.",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::slice","Renders the `BitSlice` contents for display.",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::boxed","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","bitvec::vec","Renders the `BitVec` contents for display.",10,[[["formatter"],["self"]],["result"]]],[11,"sub","","Subtracts one `BitVec` from another.",10,[[]]],[11,"add","bitvec::boxed","",9,[[]]],[11,"add","bitvec::vec","Adds two `BitVec`s.",10,[[]]],[11,"neg","bitvec::boxed","",9,[[]]],[11,"neg","bitvec::vec","Numerically negates a `BitVec` using 2’s-complement…",10,[[]]],[11,"add_assign","bitvec::slice","Performs unsigned wrapping addition in place.",3,[[["self"],["i"]]]],[11,"add_assign","bitvec::boxed","",9,[[["self"]]]],[11,"add_assign","bitvec::vec","Adds another `BitVec` into `self`.",10,[[["self"]]]],[11,"sub_assign","","Subtracts another `BitVec` from `self`.",10,[[["self"]]]],[11,"not","bitvec::boxed","",9,[[]]],[11,"not","bitvec::vec","Inverts all bits in the vector.",10,[[]]],[11,"bitand","bitvec::boxed","",9,[[["i"]]]],[11,"bitand","bitvec::vec","`AND`s a vector and a bitstream, producing a new vector.",10,[[["i"]]]],[11,"bitor","bitvec::boxed","",9,[[["i"]]]],[11,"bitor","bitvec::vec","`OR`s a vector and a bitstream, producing a new vector.",10,[[["i"]]]],[11,"bitxor","bitvec::boxed","",9,[[["i"]]]],[11,"bitxor","bitvec::vec","`XOR`s a vector and a bitstream, producing a new vector.",10,[[["i"]]]],[11,"shl","bitvec::boxed","",9,[[["usize"]]]],[11,"shl","bitvec::vec","Shifts a `BitVec` to the left, shortening it.",10,[[["usize"]]]],[11,"shr","bitvec::boxed","",9,[[["usize"]]]],[11,"shr","bitvec::vec","Shifts a `BitVec` to the right, lengthening it and filling…",10,[[["usize"]]]],[11,"bitand_assign","bitvec::slice","`AND`s a bitstream into a slice.",3,[[["self"],["i"]]]],[11,"bitand_assign","bitvec::boxed","",9,[[["self"],["i"]]]],[11,"bitand_assign","bitvec::vec","`AND`s another bitstream into a vector.",10,[[["self"],["i"]]]],[11,"bitor_assign","bitvec::slice","`OR`s a bitstream into a slice.",3,[[["self"],["i"]]]],[11,"bitor_assign","bitvec::boxed","",9,[[["self"],["i"]]]],[11,"bitor_assign","bitvec::vec","`OR`s another bitstream into a vector.",10,[[["self"],["i"]]]],[11,"bitxor_assign","bitvec::slice","`XOR`s a bitstream into a slice.",3,[[["self"],["i"]]]],[11,"bitxor_assign","bitvec::boxed","",9,[[["self"],["i"]]]],[11,"bitxor_assign","bitvec::vec","`XOR`s another bitstream into a vector.",10,[[["self"],["i"]]]],[11,"shl_assign","bitvec::slice","Shifts a slice left, in place.",3,[[["self"],["usize"]]]],[11,"shl_assign","bitvec::boxed","",9,[[["self"],["usize"]]]],[11,"shl_assign","bitvec::vec","Shifts a `BitVec` to the left in place, shortening it.",10,[[["self"],["usize"]]]],[11,"shr_assign","bitvec::slice","Shifts a slice right, in place.",3,[[["self"],["usize"]]]],[11,"shr_assign","bitvec::boxed","",9,[[["self"],["usize"]]]],[11,"shr_assign","bitvec::vec","Shifts a `BitVec` to the right in place, lengthening it…",10,[[["self"],["usize"]]]],[11,"index","bitvec::slice","Looks up a single bit by semantic index.",3,[[["self"],["usize"]]]],[11,"index","","",3,[[["range",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["rangeinclusive",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["rangefrom",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["self"],["rangefull"]]]],[11,"index","","",3,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"index","bitvec::boxed","",9,[[["self"],["usize"]]]],[11,"index","","",9,[[["range",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["rangefrom",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["self"],["rangefull"]]]],[11,"index","","",9,[[["rangeinclusive",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"index","bitvec::vec","Looks up a single bit by semantic count.",10,[[["self"],["usize"]]]],[11,"index","","",10,[[["range",["usize"]],["self"],["usize"]]]],[11,"index","","",10,[[["rangefrom",["usize"]],["self"],["usize"]]]],[11,"index","","",10,[[["self"],["rangefull"]]]],[11,"index","","",10,[[["rangeinclusive",["usize"]],["self"],["usize"]]]],[11,"index","","",10,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index","","",10,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"index_mut","bitvec::slice","",3,[[["range",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",3,[[["self"],["usize"],["rangeinclusive",["usize"]]]]],[11,"index_mut","","",3,[[["self"],["rangefrom",["usize"]],["usize"]]]],[11,"index_mut","","",3,[[["self"],["rangefull"]]]],[11,"index_mut","","",3,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",3,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"index_mut","bitvec::boxed","",9,[[["range",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",9,[[["self"],["rangefrom",["usize"]],["usize"]]]],[11,"index_mut","","",9,[[["self"],["rangefull"]]]],[11,"index_mut","","",9,[[["self"],["usize"],["rangeinclusive",["usize"]]]]],[11,"index_mut","","",9,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",9,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"index_mut","bitvec::vec","",10,[[["range",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",10,[[["self"],["rangefrom",["usize"]],["usize"]]]],[11,"index_mut","","",10,[[["self"],["rangefull"]]]],[11,"index_mut","","",10,[[["self"],["usize"],["rangeinclusive",["usize"]]]]],[11,"index_mut","","",10,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",10,[[["rangetoinclusive",["usize"]],["self"],["usize"]]]],[11,"hash","bitvec::slice","Writes each bit of the `BitSlice`, as a full `bool`, into…",3,[[["self"],["h"]]]],[11,"hash","bitvec::boxed","",9,[[["self"],["h"]]]],[11,"hash","bitvec::vec","Writes each bit of the `BitVec`, as a full `bool`, into…",10,[[["self"],["h"]]]],[11,"from_iter","","Collects an iterator of `bool` into a vector.",10,[[["intoiterator"]],["self"]]],[11,"borrow","bitvec::boxed","",9,[[["self"]],["bitslice"]]],[11,"borrow","bitvec::vec","Borrows the `BitVec` as a `BitSlice`.",10,[[["self"]],["bitslice"]]],[11,"borrow_mut","bitvec::boxed","",9,[[["self"]],["bitslice"]]],[11,"borrow_mut","bitvec::vec","Mutably borrows the `BitVec` as a `BitSlice`.",10,[[["self"]],["bitslice"]]],[11,"write","","",10,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",10,[[["self"]],["result"]]]],"p":[[8,"Bits"],[8,"BitsMut"],[8,"Cursor"],[3,"BitSlice"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"RChunksExact"],[3,"RChunksExactMut"],[8,"BitStore"],[3,"BitBox"],[3,"BitVec"],[3,"BigEndian"],[3,"LittleEndian"],[3,"BitGuard"],[3,"Chunks"],[3,"ChunksMut"],[3,"Iter"],[3,"RChunks"],[3,"RChunksMut"],[3,"Windows"],[3,"IntoIter"],[3,"Drain"],[3,"IntoIter"],[3,"Splice"]]};
searchIndex["blake2_rfc"] = {"doc":"A pure Rust implementation of BLAKE2 based on RFC 7693.","i":[[5,"selftest","blake2_rfc","Runs the self-test for both BLAKE2b and BLAKE2s.",null,[[]]],[0,"blake2b","","The BLAKE2b hash function.",null,null],[3,"Blake2bResult","blake2_rfc::blake2b","Container for a hash result.",null,null],[3,"Blake2b","","State context.",null,null],[5,"blake2b","","Convenience function for all-in-one computation.",null,[[["usize"]],["blake2bresult"]]],[5,"selftest","","Runs the self-test for this hash function.",null,[[]]],[11,"as_bytes","","Returns the contained hash result as a byte string.",0,[[["self"]]]],[11,"len","","Returns the length of the hash result.",0,[[["self"]],["usize"]]],[11,"new","","Creates a new hashing context without a key.",1,[[["usize"]],["self"]]],[11,"with_key","","Creates a new hashing context with a key.",1,[[["usize"]],["self"]]],[11,"update","","Updates the hashing context with more data.",1,[[["self"]]]],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",1,[[],["blake2bresult"]]],[0,"blake2s","blake2_rfc","The BLAKE2s hash function.",null,null],[3,"Blake2sResult","blake2_rfc::blake2s","Container for a hash result.",null,null],[3,"Blake2s","","State context.",null,null],[5,"blake2s","","Convenience function for all-in-one computation.",null,[[["usize"]],["blake2sresult"]]],[5,"selftest","","Runs the self-test for this hash function.",null,[[]]],[11,"as_bytes","","Returns the contained hash result as a byte string.",2,[[["self"]]]],[11,"len","","Returns the length of the hash result.",2,[[["self"]],["usize"]]],[11,"new","","Creates a new hashing context without a key.",3,[[["usize"]],["self"]]],[11,"with_key","","Creates a new hashing context with a key.",3,[[["usize"]],["self"]]],[11,"update","","Updates the hashing context with more data.",3,[[["self"]]]],[11,"finalize","","Consumes the hashing context and returns the resulting hash.",3,[[],["blake2sresult"]]],[11,"from","blake2_rfc::blake2b","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","blake2_rfc::blake2s","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"fmt","blake2_rfc::blake2b","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","blake2_rfc::blake2s","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"eq","blake2_rfc::blake2b","",0,[[["self"]],["bool"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","blake2_rfc::blake2s","",2,[[["self"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"as_ref","blake2_rfc::blake2b","",0,[[["self"]]]],[11,"as_ref","blake2_rfc::blake2s","",2,[[["self"]]]],[11,"clone","blake2_rfc::blake2b","",0,[[["self"]],["blake2bresult"]]],[11,"clone","","",1,[[["self"]],["blake2b"]]],[11,"clone","blake2_rfc::blake2s","",2,[[["self"]],["blake2sresult"]]],[11,"clone","","",3,[[["self"]],["blake2s"]]],[11,"write","blake2_rfc::blake2b","",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",1,[[["self"]],["result"]]],[11,"write","blake2_rfc::blake2s","",3,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",3,[[["self"]],["result"]]]],"p":[[3,"Blake2bResult"],[3,"Blake2b"],[3,"Blake2sResult"],[3,"Blake2s"]]};
searchIndex["block_buffer"] = {"doc":"","i":[[3,"BlockBuffer","block_buffer","Buffer for block processing of data",null,null],[11,"input","","Process data in `input` in blocks of size `BlockSize`…",0,[[["self"],["f"]]]],[11,"input_lazy","","Variant that doesn't flush the buffer until there's…",0,[[["self"],["f"]]]],[11,"len64_padding","","Pad message with 0x80, zeros and 64-bit message length in…",0,[[["self"],["u64"],["f"]]]],[11,"len128_padding_be","","Pad message with 0x80, zeros and 128-bit message length in…",0,[[["self"],["u64"],["f"]]]],[11,"pad_with","","Pad message with a given padding `P`",0,[[["self"]],[["paderror"],["result",["genericarray","paderror"]],["genericarray"]]]],[11,"size","","Return size of the internall buffer in bytes",0,[[["self"]],["usize"]]],[11,"position","","Return current cursor position",0,[[["self"]],["usize"]]],[11,"remaining","","Return number of remaining bytes in the internall buffer",0,[[["self"]],["usize"]]],[11,"reset","","Reset buffer by setting cursor position to zero",0,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"clone","","",0,[[["self"]],["blockbuffer"]]],[11,"default","","",0,[[],["blockbuffer"]]]],"p":[[3,"BlockBuffer"]]};
searchIndex["block_padding"] = {"doc":"Padding and unpadding of messages divided into blocks.","i":[[3,"PadError","block_padding","Error for indicating failed padding operation",null,null],[3,"UnpadError","","Error for indicating failed unpadding operation",null,null],[4,"ZeroPadding","","Pad block with zeros.",null,null],[4,"Pkcs7","","Pad block with bytes with value equal to the number of…",null,null],[4,"AnsiX923","","Pad block with zeros except the last byte which will be…",null,null],[4,"Iso7816","","Pad block with byte sequence `\\x80 00...00 00`.",null,null],[4,"NoPadding","","Don't pad the data. Useful for key wrapping. Padding will…",null,null],[8,"Padding","","Trait for padding messages divided into blocks",null,null],[10,"pad_block","","Pads `block` filled with data up to `pos`.",0,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"pad","","Pads message with length `pos` in the provided buffer.",0,[[["usize"]],[["result",["paderror"]],["paderror"]]]],[10,"unpad","","Unpad given `data` by truncating it according to the used…",0,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"pad_block","","",3,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"pad","","",3,[[["usize"]],[["result",["paderror"]],["paderror"]]]],[11,"unpad","","",3,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"pad_block","","",4,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"unpad","","",4,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"pad_block","","",5,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"unpad","","",5,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"pad_block","","",6,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"unpad","","",6,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"pad_block","","",7,[[["usize"]],[["paderror"],["result",["paderror"]]]]],[11,"pad","","",7,[[["usize"]],[["result",["paderror"]],["paderror"]]]],[11,"unpad","","",7,[[],[["result",["unpaderror"]],["unpaderror"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"clone","","",1,[[["self"]],["paderror"]]],[11,"clone","","",2,[[["self"]],["unpaderror"]]]],"p":[[8,"Padding"],[3,"PadError"],[3,"UnpadError"],[4,"ZeroPadding"],[4,"Pkcs7"],[4,"AnsiX923"],[4,"Iso7816"],[4,"NoPadding"]]};
searchIndex["byte_slice_cast"] = {"doc":"Safely cast bytes slices from/to slices of built-in…","i":[[4,"Error","byte_slice_cast","Possible errors during slice conversion.",null,null],[13,"AlignmentMismatch","","The input slice is not properly aligned for the output…",0,null],[12,"dst_type","byte_slice_cast::Error","",0,null],[12,"dst_minimum_alignment","","",0,null],[13,"LengthMismatch","byte_slice_cast","A non-integer number of values from the output type would…",0,null],[12,"dst_type","byte_slice_cast::Error","",0,null],[12,"src_slice_size","","",0,null],[12,"dst_type_size","","",0,null],[13,"CapacityMismatch","byte_slice_cast","When converting a `Vec<T>` it had a capacity that allowed…",0,null],[12,"dst_type","byte_slice_cast::Error","",0,null],[12,"src_vec_capacity","","",0,null],[12,"dst_type_capacity","","",0,null],[8,"FromByteSlice","byte_slice_cast","Trait for converting from a byte slice to a slice of a…",null,null],[10,"from_byte_slice","","Convert from an immutable byte slice to a immutable slice…",1,[[["t"]],[["result",["error"]],["error"]]]],[10,"from_mut_byte_slice","","Convert from an mutable byte slice to a mutable slice of a…",1,[[["t"]],[["result",["error"]],["error"]]]],[8,"ToByteSlice","","Trait for converting from an immutable slice of a…",null,null],[10,"to_byte_slice","","Convert from an immutable slice of a fundamental, built-in…",2,[[["t"]]]],[8,"ToMutByteSlice","","Trait for converting from a mutable slice of a…",null,null],[10,"to_mut_byte_slice","","Convert from a mutable slice of a fundamental, built-in…",3,[[["t"]]]],[8,"FromByteVec","","Trait for converting from a byte `Vec<u8>` to a `Vec<T>`…",null,null],[10,"from_byte_vec","","Convert from a byte `Vec<u8>` to a `Vec<T>` of a…",4,[[["vec",["u8"]],["u8"]],[["vec"],["error"],["result",["vec","error"]]]]],[8,"AsSliceOf","","Trait for converting from a byte slice to a slice of a…",null,null],[10,"as_slice_of","","",5,[[["self"]],[["error"],["result",["error"]]]]],[8,"AsMutSliceOf","","Trait for converting from a mutable byte slice to a…",null,null],[10,"as_mut_slice_of","","",6,[[["self"]],[["result",["error"]],["error"]]]],[8,"AsByteSlice","","Trait for converting from an immutable slice of a…",null,null],[10,"as_byte_slice","","",7,[[["self"]]]],[8,"AsMutByteSlice","","Trait for converting from a mutable slice of a…",null,null],[10,"as_mut_byte_slice","","",8,[[["self"]]]],[8,"IntoVecOf","","Trait for converting from a byte `Vec<u8>` to a `Vec<T>`…",null,null],[10,"into_vec_of","","",9,[[],[["result",["vec","error"]],["error"],["vec"]]]],[8,"IntoByteVec","","Trait for converting from a `Vec<T>` of a fundamental,…",null,null],[10,"into_byte_vec","","",10,[[],[["vec",["u8"]],["u8"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"description","","",0,[[["self"]],["str"]]]],"p":[[4,"Error"],[8,"FromByteSlice"],[8,"ToByteSlice"],[8,"ToMutByteSlice"],[8,"FromByteVec"],[8,"AsSliceOf"],[8,"AsMutSliceOf"],[8,"AsByteSlice"],[8,"AsMutByteSlice"],[8,"IntoVecOf"],[8,"IntoByteVec"]]};
searchIndex["byte_tools"] = {"doc":"","i":[[5,"copy","byte_tools","Copy bytes from `src` to `dst`",null,[[]]],[5,"zero","","Zero all bytes in `dst`",null,[[]]],[5,"set","","Sets all bytes in `dst` equal to `value`",null,[[["u8"]]]]],"p":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and…","i":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For…",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],[["result",["u8"]],["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],[["i8"],["result",["i8"]]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],[["u16"],["result",["u16"]]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],[["result",["i16"]],["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],[["i32"],["result",["i32"]]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],[["i32"],["result",["i32"]]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],[["i64"],["result",["i64"]]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],[["i64"],["result",["i64"]]]]],[11,"read_u128","","Reads an unsigned 128 bit integer from the underlying…",0,[[["self"]],[["u128"],["result",["u128"]]]]],[11,"read_i128","","Reads a signed 128 bit integer from the underlying reader.",0,[[["self"]],[["i128"],["result",["i128"]]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying…",0,[[["self"],["usize"]],[["u64"],["result",["u64"]]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],[["i64"],["result",["i64"]]]]],[11,"read_uint128","","Reads an unsigned n-bytes integer from the underlying…",0,[[["self"],["usize"]],[["u128"],["result",["u128"]]]]],[11,"read_int128","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],[["i128"],["result",["i128"]]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point…",0,[[["self"]],[["f32"],["result",["f32"]]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point…",0,[[["self"]],[["result",["f64"]],["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u128_into","","Reads a sequence of unsigned 128 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i8_into","","Reads a sequence of signed 8 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i128_into","","Reads a sequence of signed 128 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes)…",0,[[["self"]],["result"]]],[11,"read_f32_into_unchecked","","DEPRECATED.",0,[[["self"]],["result"]]],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes)…",0,[[["self"]],["result"]]],[11,"read_f64_into_unchecked","","DEPRECATED.",0,[[["self"]],["result"]]],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For…",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["u16"],["self"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["i64"],["self"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["i64"],["self"]],["result"]]],[11,"write_u128","","Writes an unsigned 128 bit integer to the underlying writer.",1,[[["self"],["u128"]],["result"]]],[11,"write_i128","","Writes a signed 128 bit integer to the underlying writer.",1,[[["self"],["i128"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["i64"],["self"],["usize"]],["result"]]],[11,"write_uint128","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["usize"],["u128"]],["result"]]],[11,"write_int128","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i128"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point…",1,[[["f32"],["self"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point…",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as…",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,[[],["u16"]]],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,[[],["u32"]]],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,[[],["u32"]]],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,[[],["u64"]]],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,[[],["u64"]]],[10,"read_u128","","Reads an unsigned 128 bit integer from `buf`.",2,[[],["u128"]]],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,[[["usize"]],["u64"]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from `buf`.",2,[[["usize"]],["u128"]]],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,[[["u16"]]]],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in…",2,[[["u32"]]]],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,[[["u32"]]]],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in…",2,[[["u64"]]]],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,[[["u64"]]]],[10,"write_u128","","Writes an unsigned 128 bit integer `n` to `buf`.",2,[[["u128"]]]],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,[[["usize"],["u64"]]]],[10,"write_uint128","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,[[["usize"],["u128"]]]],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,[[],["i16"]]],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,[[],["i32"]]],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,[[],["i32"]]],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,[[],["i64"]]],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,[[],["i64"]]],[11,"read_i128","","Reads a signed 128 bit integer from `buf`.",2,[[],["i128"]]],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,[[["usize"]],["i64"]]],[11,"read_int128","","Reads a signed n-bytes integer from `buf`.",2,[[["usize"]],["i128"]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point…",2,[[],["f32"]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point…",2,[[],["f64"]]],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,[[["i16"]]]],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,[[["i32"]]]],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,[[["i32"]]]],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,[[["i64"]]]],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,[[["i64"]]]],[11,"write_i128","","Writes a signed 128 bit integer `n` to `buf`.",2,[[["i128"]]]],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,[[["i64"],["usize"]]]],[11,"write_int128","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,[[["i128"],["usize"]]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point…",2,[[["f32"]]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point…",2,[[["f64"]]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point…",2,[[]]],[11,"read_f32_into_unchecked","","DEPRECATED.",2,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point…",2,[[]]],[11,"read_f64_into_unchecked","","DEPRECATED.",2,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from `src` into `dst`.",2,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point…",2,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point…",2,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a…",2,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a…",2,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a…",2,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to a…",2,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a…",2,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a…",2,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a…",2,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a…",2,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4…",2,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8…",2,[[]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"read_u16","","",3,[[],["u16"]]],[11,"read_u32","","",3,[[],["u32"]]],[11,"read_u64","","",3,[[],["u64"]]],[11,"read_u128","","",3,[[],["u128"]]],[11,"read_uint","","",3,[[["usize"]],["u64"]]],[11,"read_uint128","","",3,[[["usize"]],["u128"]]],[11,"write_u16","","",3,[[["u16"]]]],[11,"write_u32","","",3,[[["u32"]]]],[11,"write_u64","","",3,[[["u64"]]]],[11,"write_u128","","",3,[[["u128"]]]],[11,"write_uint","","",3,[[["usize"],["u64"]]]],[11,"write_uint128","","",3,[[["usize"],["u128"]]]],[11,"read_u16_into","","",3,[[]]],[11,"read_u32_into","","",3,[[]]],[11,"read_u64_into","","",3,[[]]],[11,"read_u128_into","","",3,[[]]],[11,"write_u16_into","","",3,[[]]],[11,"write_u32_into","","",3,[[]]],[11,"write_u64_into","","",3,[[]]],[11,"write_u128_into","","",3,[[]]],[11,"from_slice_u16","","",3,[[]]],[11,"from_slice_u32","","",3,[[]]],[11,"from_slice_u64","","",3,[[]]],[11,"from_slice_u128","","",3,[[]]],[11,"from_slice_f32","","",3,[[]]],[11,"from_slice_f64","","",3,[[]]],[11,"read_u16","","",4,[[],["u16"]]],[11,"read_u32","","",4,[[],["u32"]]],[11,"read_u64","","",4,[[],["u64"]]],[11,"read_u128","","",4,[[],["u128"]]],[11,"read_uint","","",4,[[["usize"]],["u64"]]],[11,"read_uint128","","",4,[[["usize"]],["u128"]]],[11,"write_u16","","",4,[[["u16"]]]],[11,"write_u32","","",4,[[["u32"]]]],[11,"write_u64","","",4,[[["u64"]]]],[11,"write_u128","","",4,[[["u128"]]]],[11,"write_uint","","",4,[[["usize"],["u64"]]]],[11,"write_uint128","","",4,[[["usize"],["u128"]]]],[11,"read_u16_into","","",4,[[]]],[11,"read_u32_into","","",4,[[]]],[11,"read_u64_into","","",4,[[]]],[11,"read_u128_into","","",4,[[]]],[11,"write_u16_into","","",4,[[]]],[11,"write_u32_into","","",4,[[]]],[11,"write_u64_into","","",4,[[]]],[11,"write_u128_into","","",4,[[]]],[11,"from_slice_u16","","",4,[[]]],[11,"from_slice_u32","","",4,[[]]],[11,"from_slice_u64","","",4,[[]]],[11,"from_slice_u128","","",4,[[]]],[11,"from_slice_f32","","",4,[[]]],[11,"from_slice_f64","","",4,[[]]],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"default","","",3,[[],["bigendian"]]],[11,"default","","",4,[[],["littleendian"]]],[11,"cmp","","",3,[[["bigendian"],["self"]],["ordering"]]],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",3,[[["bigendian"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["bigendian"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],[["result",["u8"]],["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],[["i8"],["result",["i8"]]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],[["u16"],["result",["u16"]]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],[["result",["i16"]],["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],[["i32"],["result",["i32"]]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],[["result",["u32"]],["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],[["i32"],["result",["i32"]]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],[["i64"],["result",["i64"]]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],[["u64"],["result",["u64"]]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],[["i64"],["result",["i64"]]]]],[11,"read_u128","","Reads an unsigned 128 bit integer from the underlying…",0,[[["self"]],[["u128"],["result",["u128"]]]]],[11,"read_i128","","Reads a signed 128 bit integer from the underlying reader.",0,[[["self"]],[["i128"],["result",["i128"]]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying…",0,[[["self"],["usize"]],[["u64"],["result",["u64"]]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],[["i64"],["result",["i64"]]]]],[11,"read_uint128","","Reads an unsigned n-bytes integer from the underlying…",0,[[["self"],["usize"]],[["u128"],["result",["u128"]]]]],[11,"read_int128","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],[["i128"],["result",["i128"]]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point…",0,[[["self"]],[["f32"],["result",["f32"]]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point…",0,[[["self"]],[["result",["f64"]],["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_u128_into","","Reads a sequence of unsigned 128 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i8_into","","Reads a sequence of signed 8 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_i128_into","","Reads a sequence of signed 128 bit integers from the…",0,[[["self"]],["result"]]],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes)…",0,[[["self"]],["result"]]],[11,"read_f32_into_unchecked","","DEPRECATED.",0,[[["self"]],["result"]]],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes)…",0,[[["self"]],["result"]]],[11,"read_f64_into_unchecked","","DEPRECATED.",0,[[["self"]],["result"]]],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["u16"],["self"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["i64"],["self"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["i64"],["self"]],["result"]]],[11,"write_u128","","Writes an unsigned 128 bit integer to the underlying writer.",1,[[["self"],["u128"]],["result"]]],[11,"write_i128","","Writes a signed 128 bit integer to the underlying writer.",1,[[["self"],["i128"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["i64"],["self"],["usize"]],["result"]]],[11,"write_uint128","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["usize"],["u128"]],["result"]]],[11,"write_int128","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i128"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point…",1,[[["f32"],["self"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point…",1,[[["self"],["f64"]],["result"]]]],"p":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["c2_chacha"] = {"doc":"Pure Rust ChaCha with SIMD optimizations.","i":[[0,"guts","c2_chacha","",null,null],[8,"Machine","c2_chacha::guts","",null,null],[16,"u32x4","","",0,null],[16,"u64x2","","",0,null],[16,"u128x1","","",0,null],[16,"u32x4x2","","",0,null],[16,"u64x2x2","","",0,null],[16,"u64x4","","",0,null],[16,"u128x2","","",0,null],[16,"u32x4x4","","",0,null],[16,"u64x2x4","","",0,null],[16,"u128x4","","",0,null],[11,"unpack","","",0,[[["s"]],["v"]]],[11,"vec","","",0,[[["a"]],["v"]]],[11,"read_le","","",0,[[],["v"]]],[11,"read_be","","",0,[[],["v"]]],[10,"instance","","",0,[[],["self"]]],[3,"ChaCha","","",null,null],[3,"State","","",null,null],[11,"new","","",1,[[],["self"]]],[11,"refill4","","Produce 4 blocks of output, advancing the state",1,[[["self"],["u32"]]]],[11,"refill","","Produce a block of output, advancing the state",1,[[["self"],["u32"]]]],[11,"set_stream_param","","",1,[[["self"],["u32"],["u64"]]]],[11,"get_stream_param","","",1,[[["u32"],["self"]],["u64"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"clone","","",1,[[["self"]],["chacha"]]],[11,"clone","","",2,[[["self"]],["state"]]]],"p":[[8,"Machine"],[3,"ChaCha"],[3,"State"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate…",null,null]],"p":[]};
searchIndex["clear_on_drop"] = {"doc":"Helpers for clearing sensitive data on the stack and heap.","i":[[3,"ClearOnDrop","clear_on_drop","Zeroizes a storage location when dropped.",null,null],[5,"clear_stack_on_return","","Calls a closure and overwrites its stack on return.",null,[[["usize"],["f"]],["r"]]],[5,"clear_stack_on_return_fnonce","","Calls a closure and overwrites its stack on return.",null,[[["usize"],["f"]],["r"]]],[5,"clear_stack","","Overwrites a few pages of stack.",null,[[["usize"]]]],[0,"clear","","Traits to completely overwrite a value, without leaking…",null,null],[8,"Clear","clear_on_drop::clear","An operation to completely overwrite a value, without…",null,null],[10,"clear","","Completely overwrites this value.",0,[[["self"]]]],[8,"InitializableFromZeroed","","A type that can be initialized to a valid value, after…",null,null],[10,"initialize","","Called to initialize a place to a valid value, after it is…",1,[[]]],[8,"ZeroSafe","","Unsafe trait to indicate which types are safe to set to…",null,null],[11,"new","clear_on_drop","Creates a new `ClearOnDrop` which clears `place` on drop.",2,[[["p"]],["self"]]],[11,"into_place","","Consumes the `ClearOnDrop`, returning the `place` after…",2,[[],["p"]]],[11,"into_uncleared_place","","Consumes the `ClearOnDrop`, returning the `place` without…",2,[[],["p"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"deref","","",2,[[["self"]]]],[11,"deref_mut","","",2,[[["self"]]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"ne","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"cmp","","",2,[[["self"]],["ordering"]]],[11,"partial_cmp","","",2,[[["clearondrop"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"le","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"gt","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"ge","","",2,[[["clearondrop"],["self"]],["bool"]]],[11,"drop","","",2,[[["self"]]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"as_ref","","",2,[[["self"]],["t"]]],[11,"as_mut","","",2,[[["self"]],["t"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone_from","","",2,[[["self"],["self"]]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"p":[[8,"Clear"],[8,"InitializableFromZeroed"],[3,"ClearOnDrop"]]};
searchIndex["const_random"] = {"doc":"","i":[[14,"const_random","const_random","Random constants Allows you to insert random constants…",null,null]],"p":[]};
searchIndex["const_random_macro"] = {"doc":"","i":[[24,"proc_macro_hack_const_random","const_random_macro","",null,null]],"p":[]};
searchIndex["constant_time_eq"] = {"doc":"","i":[[5,"constant_time_eq","constant_time_eq","Compares two equal-sized byte strings in constant time.",null,[[],["bool"]]]],"p":[]};
searchIndex["crunchy"] = {"doc":"The crunchy unroller - deterministically unroll constant…","i":[[14,"unroll","crunchy","Unroll the given for loop",null,null]],"p":[]};
searchIndex["crypto_mac"] = {"doc":"This crate provides trait for Message Authentication Code…","i":[[3,"InvalidKeyLength","crypto_mac","Error type for signaling invalid key length for MAC…",null,null],[3,"MacError","","Error type for signaling failed MAC verification",null,null],[3,"MacResult","","`MacResult` is a thin wrapper around bytes array which…",null,null],[8,"Mac","","The `Mac` trait defines methods for a Message…",null,null],[16,"OutputSize","","",0,null],[16,"KeySize","","",0,null],[10,"new","","Create new MAC instance from key with fixed size.",0,[[["genericarray"]],["self"]]],[11,"new_varkey","","Create new MAC instance from key with variable size.",0,[[],[["result",["invalidkeylength"]],["invalidkeylength"]]]],[10,"input","","Process input data.",0,[[["self"]]]],[10,"reset","","Reset `Mac` instance.",0,[[["self"]]]],[10,"result","","Obtain the result of a `Mac` computation as a `MacResult`…",0,[[],["macresult"]]],[11,"result_reset","","Obtain the result of a `Mac` computation as a `MacResult`…",0,[[["self"]],["macresult"]]],[11,"verify","","Check if code is correct for the processed input.",0,[[],[["result",["macerror"]],["macerror"]]]],[11,"new","","Create a new MacResult.",1,[[["genericarray",["u8"]],["u8"]],["macresult"]]],[11,"code","","Get the code value as a bytes array.",1,[[],[["genericarray",["u8"]],["u8"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","","",3,[[["self"],["macerror"]],["bool"]]],[11,"eq","","",2,[[["self"],["invalidkeylength"]],["bool"]]],[11,"eq","","",1,[[["macresult"],["self"]],["bool"]]],[11,"clone","","",3,[[["self"]],["macerror"]]],[11,"clone","","",2,[[["self"]],["invalidkeylength"]]],[11,"clone","","",1,[[["self"]],["macresult"]]],[11,"default","","",3,[[],["macerror"]]],[11,"default","","",2,[[],["invalidkeylength"]]],[11,"ct_eq","","",1,[[["self"]],["choice"]]]],"p":[[8,"Mac"],[3,"MacResult"],[3,"InvalidKeyLength"],[3,"MacError"]]};
searchIndex["curve25519_dalek"] = {"doc":"Note that docs will only build on nightly Rust until RFC…","i":[[0,"scalar","curve25519_dalek","Arithmetic on scalars (integers mod the group order).",null,null],[3,"Scalar","curve25519_dalek::scalar","The `Scalar` struct holds an integer \\(s < 2^{255} \\)…",null,null],[11,"from_bytes_mod_order","","Construct a `Scalar` by reducing a 256-bit little-endian…",0,[[],["scalar"]]],[11,"from_bytes_mod_order_wide","","Construct a `Scalar` by reducing a 512-bit little-endian…",0,[[],["scalar"]]],[11,"from_canonical_bytes","","Attempt to construct a `Scalar` from a canonical byte…",0,[[],[["scalar"],["option",["scalar"]]]]],[11,"from_bits","","Construct a `Scalar` from the low 255 bits of a 256-bit…",0,[[],["scalar"]]],[11,"random","","Return a `Scalar` chosen uniformly at random using a…",0,[[["r"]],["self"]]],[11,"hash_from_bytes","","Hash a slice of bytes into a scalar.",0,[[],["scalar"]]],[11,"from_hash","","Construct a scalar from an existing `Digest` instance.",0,[[["d"]],["scalar"]]],[11,"to_bytes","","Convert this `Scalar` to its underlying sequence of bytes.",0,[[["self"]]]],[11,"as_bytes","","View the little-endian byte encoding of the integer…",0,[[["self"]]]],[11,"zero","","Construct the scalar \\( 0 \\).",0,[[],["self"]]],[11,"one","","Construct the scalar \\( 1 \\).",0,[[],["self"]]],[11,"invert","","Given a nonzero `Scalar`, compute its multiplicative…",0,[[["self"]],["scalar"]]],[11,"batch_invert","","Given a slice of nonzero (possibly secret) `Scalar`s,…",0,[[],["scalar"]]],[11,"reduce","","Reduce this `Scalar` modulo \\(\\ell\\).",0,[[["self"]],["scalar"]]],[11,"is_canonical","","Check whether this `Scalar` is the canonical…",0,[[["self"]],["bool"]]],[0,"montgomery","curve25519_dalek","Scalar multiplication on the Montgomery form of Curve25519.",null,null],[3,"MontgomeryPoint","curve25519_dalek::montgomery","Holds the \\(u\\)-coordinate of a point on the Montgomery…",null,null],[12,"0","","",1,null],[11,"as_bytes","","View this `MontgomeryPoint` as an array of bytes.",1,[[["self"]]]],[11,"to_bytes","","Convert this `MontgomeryPoint` to an array of bytes.",1,[[["self"]]]],[11,"to_edwards","","Attempt to convert to an `EdwardsPoint`, using the…",1,[[["self"],["u8"]],[["option",["edwardspoint"]],["edwardspoint"]]]],[0,"edwards","curve25519_dalek","Group operations for Curve25519, in Edwards form.",null,null],[3,"CompressedEdwardsY","curve25519_dalek::edwards","In \"Edwards y\" / \"Ed25519\" format, the curve point…",null,null],[12,"0","","",2,null],[3,"EdwardsPoint","","An `EdwardsPoint` represents a point on the Edwards form…",null,null],[3,"VartimeEdwardsPrecomputation","","Precomputation for variable-time multiscalar…",null,null],[3,"EdwardsBasepointTable","","A precomputed table of multiples of a basepoint, for…",null,null],[11,"as_bytes","","View this `CompressedEdwardsY` as an array of bytes.",2,[[["self"]]]],[11,"to_bytes","","Copy this `CompressedEdwardsY` to an array of bytes.",2,[[["self"]]]],[11,"decompress","","Attempt to decompress to an `EdwardsPoint`.",2,[[["self"]],[["option",["edwardspoint"]],["edwardspoint"]]]],[11,"from_slice","","Construct a `CompressedEdwardsY` from a slice of bytes.",2,[[],["compressededwardsy"]]],[11,"to_montgomery","","Convert this `EdwardsPoint` on the Edwards model to the…",3,[[["self"]],["montgomerypoint"]]],[11,"compress","","Compress this point to `CompressedEdwardsY` format.",3,[[["self"]],["compressededwardsy"]]],[11,"vartime_double_scalar_mul_basepoint","","Compute \\(aA + bB\\) in variable time, where \\(B\\) is the…",3,[[["edwardspoint"],["scalar"]],["edwardspoint"]]],[11,"create","","Create a table of precomputed multiples of `basepoint`.",4,[[["edwardspoint"]],["edwardsbasepointtable"]]],[11,"basepoint","","Get the basepoint for this table as an `EdwardsPoint`.",4,[[["self"]],["edwardspoint"]]],[11,"mul_by_cofactor","","Multiply by the cofactor: return \\([8]P\\).",3,[[["self"]],["edwardspoint"]]],[11,"is_small_order","","Determine if this point is of small order.",3,[[["self"]],["bool"]]],[11,"is_torsion_free","","Determine if this point is “torsion-free”, i.e., is…",3,[[["self"]],["bool"]]],[0,"ristretto","curve25519_dalek","An implementation of [Ristretto][ristretto_main], which…",null,null],[3,"CompressedRistretto","curve25519_dalek::ristretto","A Ristretto point, in compressed wire format.",null,null],[12,"0","","",5,null],[3,"RistrettoPoint","","A `RistrettoPoint` represents a point in the Ristretto…",null,null],[3,"VartimeRistrettoPrecomputation","","Precomputation for variable-time multiscalar…",null,null],[3,"RistrettoBasepointTable","","A precomputed table of multiples of a basepoint, used to…",null,null],[11,"to_bytes","","Copy the bytes of this `CompressedRistretto`.",5,[[["self"]]]],[11,"as_bytes","","View this `CompressedRistretto` as an array of bytes.",5,[[["self"]]]],[11,"from_slice","","Construct a `CompressedRistretto` from a slice of bytes.",5,[[],["compressedristretto"]]],[11,"decompress","","Attempt to decompress to an `RistrettoPoint`.",5,[[["self"]],[["option",["ristrettopoint"]],["ristrettopoint"]]]],[11,"compress","","Compress this point using the Ristretto encoding.",6,[[["self"]],["compressedristretto"]]],[11,"double_and_compress_batch","","Double-and-compress a batch of points. The Ristretto…",6,[[["i"]],[["vec",["compressedristretto"]],["compressedristretto"]]]],[11,"random","","Return a `RistrettoPoint` chosen uniformly at random using…",6,[[["r"]],["self"]]],[11,"hash_from_bytes","","Hash a slice of bytes into a `RistrettoPoint`.",6,[[],["ristrettopoint"]]],[11,"from_hash","","Construct a `RistrettoPoint` from an existing `Digest`…",6,[[["d"]],["ristrettopoint"]]],[11,"from_uniform_bytes","","Construct a `RistrettoPoint` from 64 bytes of data.",6,[[],["ristrettopoint"]]],[11,"vartime_double_scalar_mul_basepoint","","Compute \\(aA + bB\\) in variable time, where \\(B\\) is the…",6,[[["ristrettopoint"],["scalar"]],["ristrettopoint"]]],[11,"create","","Create a precomputed table of multiples of the given…",7,[[["ristrettopoint"]],["ristrettobasepointtable"]]],[11,"basepoint","","Get the basepoint for this table as a `RistrettoPoint`.",7,[[["self"]],["ristrettopoint"]]],[0,"constants","curve25519_dalek","Various constants, such as the Ristretto and Ed25519…",null,null],[17,"ED25519_BASEPOINT_POINT","curve25519_dalek::constants","The Ed25519 basepoint, as an `EdwardsPoint`.",null,null],[17,"EIGHT_TORSION","","The 8-torsion subgroup \\(\\mathcal E [8]\\).",null,null],[17,"ED25519_BASEPOINT_TABLE","","Table containing precomputed multiples of the Ed25519…",null,null],[17,"ED25519_BASEPOINT_COMPRESSED","","The Ed25519 basepoint, in `CompressedEdwardsY` format.",null,null],[17,"X25519_BASEPOINT","","The X25519 basepoint, in `MontgomeryPoint` format.",null,null],[17,"RISTRETTO_BASEPOINT_COMPRESSED","","The Ristretto basepoint, in `CompressedRistretto` format.",null,null],[17,"RISTRETTO_BASEPOINT_POINT","","The Ristretto basepoint, as a `RistrettoPoint`.",null,null],[17,"BASEPOINT_ORDER","","`BASEPOINT_ORDER` is the order of the Ristretto group and…",null,null],[17,"RISTRETTO_BASEPOINT_TABLE","","The Ristretto basepoint, as a `RistrettoBasepointTable`…",null,null],[0,"traits","curve25519_dalek","Module for common traits.",null,null],[8,"Identity","curve25519_dalek::traits","Trait for getting the identity element of a point type.",null,null],[10,"identity","","Returns the identity element of the curve. Can be used as…",8,[[],["self"]]],[8,"IsIdentity","","Trait for testing if a curve point is equivalent to the…",null,null],[10,"is_identity","","Return true if this element is the identity element of the…",9,[[["self"]],["bool"]]],[8,"MultiscalarMul","","A trait for constant-time multiscalar multiplication…",null,null],[16,"Point","","The type of point being multiplied, e.g., `RistrettoPoint`.",10,null],[10,"multiscalar_mul","","Given an iterator of (possibly secret) scalars and an…",10,[[["j"],["i"]]]],[8,"VartimeMultiscalarMul","","A trait for variable-time multiscalar multiplication…",null,null],[16,"Point","","The type of point being multiplied, e.g., `RistrettoPoint`.",11,null],[10,"optional_multiscalar_mul","","Given an iterator of public scalars and an iterator of…",11,[[["j"],["i"]],["option"]]],[11,"vartime_multiscalar_mul","","Given an iterator of public scalars and an iterator of…",11,[[["j"],["i"]]]],[8,"VartimePrecomputedMultiscalarMul","","A trait for variable-time multiscalar multiplication with…",null,null],[16,"Point","","The type of point to be multiplied, e.g., `RistrettoPoint`.",12,null],[10,"new","","Given the static points \\( B_i \\), perform precomputation…",12,[[["i"]],["self"]]],[11,"vartime_multiscalar_mul","","Given `static_scalars`, an iterator of public scalars…",12,[[["i"],["self"]]]],[11,"vartime_mixed_multiscalar_mul","","Given `static_scalars`, an iterator of public scalars…",12,[[["j"],["i"],["self"],["k"]]]],[10,"optional_mixed_multiscalar_mul","","Given `static_scalars`, an iterator of public scalars…",12,[[["j"],["i"],["self"],["k"]],["option"]]],[11,"from","curve25519_dalek::scalar","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"zeroize","","",0,[[["self"]]]],[11,"conditional_negate","","",0,[[["self"],["choice"]]]],[11,"from","curve25519_dalek::montgomery","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"zeroize","","",1,[[["self"]]]],[11,"is_identity","curve25519_dalek::edwards","",2,[[["self"]],["bool"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"is_identity","","",3,[[["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"conditional_negate","","",3,[[["self"],["choice"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"is_identity","curve25519_dalek::ristretto","",5,[[["self"]],["bool"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"is_identity","","",6,[[["self"]],["bool"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"conditional_negate","","",6,[[["self"],["choice"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"identity","curve25519_dalek::edwards","",2,[[],["compressededwardsy"]]],[11,"identity","","",3,[[],["edwardspoint"]]],[11,"identity","curve25519_dalek::ristretto","",5,[[],["compressedristretto"]]],[11,"identity","","",6,[[],["ristrettopoint"]]],[11,"multiscalar_mul","curve25519_dalek::edwards","",3,[[["j"],["i"]],["edwardspoint"]]],[11,"multiscalar_mul","curve25519_dalek::ristretto","",6,[[["j"],["i"]],["ristrettopoint"]]],[11,"optional_multiscalar_mul","curve25519_dalek::edwards","",3,[[["j"],["i"]],[["option",["edwardspoint"]],["edwardspoint"]]]],[11,"optional_multiscalar_mul","curve25519_dalek::ristretto","",6,[[["j"],["i"]],[["option",["ristrettopoint"]],["ristrettopoint"]]]],[11,"new","curve25519_dalek::edwards","",13,[[["i"]],["self"]]],[11,"optional_mixed_multiscalar_mul","","",13,[[["j"],["i"],["self"],["k"]],["option"]]],[11,"new","curve25519_dalek::ristretto","",14,[[["i"]],["self"]]],[11,"optional_mixed_multiscalar_mul","","",14,[[["j"],["i"],["self"],["k"]],["option"]]],[11,"from","curve25519_dalek::scalar","",0,[[["u8"]],["scalar"]]],[11,"from","","",0,[[["u16"]],["scalar"]]],[11,"from","","",0,[[["u32"]],["scalar"]]],[11,"from","","Construct a scalar from the given `u64`.",0,[[["u64"]],["scalar"]]],[11,"from","","",0,[[["u128"]],["scalar"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","curve25519_dalek::montgomery","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","curve25519_dalek::edwards","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","curve25519_dalek::ristretto","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"sub","curve25519_dalek::scalar","",0,[[["scalar"]],["scalar"]]],[11,"sub","","",0,[[["scalar"]],["scalar"]]],[11,"sub","curve25519_dalek::edwards","",3,[[["edwardspoint"]],["edwardspoint"]]],[11,"sub","","",3,[[["edwardspoint"]],["edwardspoint"]]],[11,"sub","curve25519_dalek::ristretto","",6,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"sub","","",6,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"eq","curve25519_dalek::scalar","",0,[[["self"]],["bool"]]],[11,"eq","curve25519_dalek::montgomery","",1,[[["self"],["montgomerypoint"]],["bool"]]],[11,"eq","curve25519_dalek::edwards","",2,[[["self"],["compressededwardsy"]],["bool"]]],[11,"ne","","",2,[[["self"],["compressededwardsy"]],["bool"]]],[11,"eq","","",3,[[["edwardspoint"],["self"]],["bool"]]],[11,"eq","curve25519_dalek::ristretto","",5,[[["compressedristretto"],["self"]],["bool"]]],[11,"ne","","",5,[[["compressedristretto"],["self"]],["bool"]]],[11,"eq","","",6,[[["ristrettopoint"],["self"]],["bool"]]],[11,"add","curve25519_dalek::scalar","",0,[[["scalar"]],["scalar"]]],[11,"add","","",0,[[["scalar"]],["scalar"]]],[11,"add","curve25519_dalek::edwards","",3,[[["edwardspoint"]],["edwardspoint"]]],[11,"add","","",3,[[["edwardspoint"]],["edwardspoint"]]],[11,"add","curve25519_dalek::ristretto","",6,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"add","","",6,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"mul","curve25519_dalek::scalar","",0,[[["scalar"]],["scalar"]]],[11,"mul","","",0,[[["scalar"]],["scalar"]]],[11,"mul","curve25519_dalek::montgomery","",1,[[["scalar"]],["montgomerypoint"]]],[11,"mul","","",1,[[["scalar"]],["montgomerypoint"]]],[11,"mul","curve25519_dalek::scalar","",0,[[["montgomerypoint"]],["montgomerypoint"]]],[11,"mul","","",0,[[["montgomerypoint"]],["montgomerypoint"]]],[11,"mul","curve25519_dalek::edwards","",3,[[["scalar"]],["edwardspoint"]]],[11,"mul","","",3,[[["scalar"]],["edwardspoint"]]],[11,"mul","curve25519_dalek::scalar","",0,[[["edwardspoint"]],["edwardspoint"]]],[11,"mul","","",0,[[["edwardspoint"]],["edwardspoint"]]],[11,"mul","curve25519_dalek::ristretto","",6,[[["scalar"]],["ristrettopoint"]]],[11,"mul","","",6,[[["scalar"]],["ristrettopoint"]]],[11,"mul","curve25519_dalek::scalar","",0,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"mul","","",0,[[["ristrettopoint"]],["ristrettopoint"]]],[11,"neg","","",0,[[],["scalar"]]],[11,"neg","curve25519_dalek::edwards","",3,[[],["edwardspoint"]]],[11,"neg","curve25519_dalek::ristretto","",6,[[],["ristrettopoint"]]],[11,"add_assign","curve25519_dalek::scalar","",0,[[["self"],["scalar"]]]],[11,"add_assign","","",0,[[["self"],["scalar"]]]],[11,"add_assign","curve25519_dalek::edwards","",3,[[["self"],["edwardspoint"]]]],[11,"add_assign","","",3,[[["self"],["edwardspoint"]]]],[11,"add_assign","curve25519_dalek::ristretto","",6,[[["self"],["ristrettopoint"]]]],[11,"add_assign","","",6,[[["self"],["ristrettopoint"]]]],[11,"sub_assign","curve25519_dalek::scalar","",0,[[["self"],["scalar"]]]],[11,"sub_assign","","",0,[[["self"],["scalar"]]]],[11,"sub_assign","curve25519_dalek::edwards","",3,[[["self"],["edwardspoint"]]]],[11,"sub_assign","","",3,[[["self"],["edwardspoint"]]]],[11,"sub_assign","curve25519_dalek::ristretto","",6,[[["self"],["ristrettopoint"]]]],[11,"sub_assign","","",6,[[["self"],["ristrettopoint"]]]],[11,"mul_assign","curve25519_dalek::scalar","",0,[[["self"],["scalar"]]]],[11,"mul_assign","","",0,[[["self"],["scalar"]]]],[11,"mul_assign","curve25519_dalek::montgomery","",1,[[["self"],["scalar"]]]],[11,"mul_assign","","",1,[[["self"],["scalar"]]]],[11,"mul_assign","curve25519_dalek::edwards","",3,[[["self"],["scalar"]]]],[11,"mul_assign","","",3,[[["self"],["scalar"]]]],[11,"mul_assign","curve25519_dalek::ristretto","",6,[[["self"],["scalar"]]]],[11,"mul_assign","","",6,[[["self"],["scalar"]]]],[11,"index","curve25519_dalek::scalar","Index the bytes of the representative for this `Scalar`.…",0,[[["self"],["usize"]],["u8"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","curve25519_dalek::edwards","",3,[[["i"]],["self"]]],[11,"sum","curve25519_dalek::ristretto","",6,[[["i"]],["self"]]],[11,"clone","curve25519_dalek::scalar","",0,[[["self"]],["scalar"]]],[11,"clone","curve25519_dalek::montgomery","",1,[[["self"]],["montgomerypoint"]]],[11,"clone","curve25519_dalek::edwards","",2,[[["self"]],["compressededwardsy"]]],[11,"clone","","",3,[[["self"]],["edwardspoint"]]],[11,"clone","","",4,[[["self"]],["edwardsbasepointtable"]]],[11,"clone","curve25519_dalek::ristretto","",5,[[["self"]],["compressedristretto"]]],[11,"clone","","",6,[[["self"]],["ristrettopoint"]]],[11,"clone","","",7,[[["self"]],["ristrettobasepointtable"]]],[11,"default","curve25519_dalek::scalar","",0,[[],["scalar"]]],[11,"default","curve25519_dalek::montgomery","",1,[[],["montgomerypoint"]]],[11,"default","curve25519_dalek::edwards","",2,[[],["compressededwardsy"]]],[11,"default","","",3,[[],["edwardspoint"]]],[11,"default","curve25519_dalek::ristretto","",5,[[],["compressedristretto"]]],[11,"default","","",6,[[],["ristrettopoint"]]],[11,"zeroize","curve25519_dalek::scalar","",0,[[["self"]]]],[11,"zeroize","curve25519_dalek::montgomery","",1,[[["self"]]]],[11,"ct_eq","curve25519_dalek::scalar","",0,[[["self"]],["choice"]]],[11,"ct_eq","curve25519_dalek::montgomery","",1,[[["self"],["montgomerypoint"]],["choice"]]],[11,"ct_eq","curve25519_dalek::edwards","",2,[[["self"],["compressededwardsy"]],["choice"]]],[11,"ct_eq","","",3,[[["edwardspoint"],["self"]],["choice"]]],[11,"ct_eq","curve25519_dalek::ristretto","",5,[[["compressedristretto"],["self"]],["choice"]]],[11,"ct_eq","","Test equality between two `RistrettoPoint`s.",6,[[["ristrettopoint"],["self"]],["choice"]]],[11,"conditional_select","curve25519_dalek::scalar","",0,[[["self"],["choice"]],["self"]]],[11,"conditional_select","curve25519_dalek::edwards","",3,[[["edwardspoint"],["choice"]],["edwardspoint"]]],[11,"conditional_select","curve25519_dalek::ristretto","Conditionally select between `self` and `other`.",6,[[["ristrettopoint"],["choice"]],["ristrettopoint"]]]],"p":[[3,"Scalar"],[3,"MontgomeryPoint"],[3,"CompressedEdwardsY"],[3,"EdwardsPoint"],[3,"EdwardsBasepointTable"],[3,"CompressedRistretto"],[3,"RistrettoPoint"],[3,"RistrettoBasepointTable"],[8,"Identity"],[8,"IsIdentity"],[8,"MultiscalarMul"],[8,"VartimeMultiscalarMul"],[8,"VartimePrecomputedMultiscalarMul"],[3,"VartimeEdwardsPrecomputation"],[3,"VartimeRistrettoPrecomputation"]]};
searchIndex["derive_more"] = {"doc":"`derive_more`","i":[],"p":[]};
searchIndex["digest"] = {"doc":"This crate provides traits which describe functionality of…","i":[[3,"InvalidOutputSize","digest","The error type for variable hasher initialization",null,null],[8,"Digest","","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","",0,null],[10,"new","","Create new hasher instance",0,[[],["self"]]],[10,"input","","Digest input data.",0,[[["self"],["asref"]]]],[10,"chain","","Digest input data in a chained manner.",0,[[["asref"]],["self"]]],[10,"result","","Retrieve result and consume hasher instance.",0,[[],[["genericarray",["u8"]],["u8"]]]],[10,"result_reset","","Retrieve result and reset hasher instance.",0,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[10,"reset","","Reset hasher instance to its initial state.",0,[[["self"]]]],[10,"output_size","","Get output size of the hasher",0,[[],["usize"]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",0,[[],[["genericarray",["u8"]],["u8"]]]],[8,"DynDigest","","The `DynDigest` trait is a modification of `Digest` trait…",null,null],[10,"input","","Digest input data.",1,[[["self"]]]],[10,"result_reset","","Retrieve result and reset hasher instance",1,[[["self"]],["box"]]],[10,"result","","Retrieve result and consume boxed hasher instance",1,[[["box"]],["box"]]],[10,"reset","","Reset hasher instance to its initial state.",1,[[["self"]]]],[10,"output_size","","Get output size of the hasher",1,[[["self"]],["usize"]]],[10,"box_clone","","Clone hasher state into a boxed trait object",1,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[8,"Input","","Trait for processing input data",null,null],[10,"input","","Digest input data.",2,[[["self"],["asref"]]]],[11,"chain","","Digest input data in a chained manner.",2,[[["asref"]],["self"]]],[8,"BlockInput","","Trait to indicate that digest function processes data in…",null,null],[16,"BlockSize","","",3,null],[8,"FixedOutput","","Trait for returning digest result with the fixed size",null,null],[16,"OutputSize","","",4,null],[10,"fixed_result","","Retrieve result and consume hasher instance.",4,[[],[["genericarray",["u8"]],["u8"]]]],[8,"VariableOutput","","Trait for returning digest result with the variable size",null,null],[10,"new","","Create new hasher instance with the given output size.",5,[[["usize"]],[["result",["invalidoutputsize"]],["invalidoutputsize"]]]],[10,"output_size","","Get output size of the hasher instance provided to the…",5,[[["self"]],["usize"]]],[10,"variable_result","","Retrieve result via closure and consume hasher.",5,[[["fnonce"]]]],[11,"vec_result","","Retrieve result into vector and consume hasher.",5,[[],[["u8"],["vec",["u8"]]]]],[8,"XofReader","","Trait for describing readers which are used to extract…",null,null],[10,"read","","Read output into the `buffer`. Can be called unlimited…",6,[[["self"]]]],[8,"ExtendableOutput","","Trait which describes extendable-output functions (XOF).",null,null],[16,"Reader","","",7,null],[10,"xof_result","","Retrieve XOF reader and consume hasher instance.",7,[[]]],[11,"vec_result","","Retrieve result into vector of specified length.",7,[[["usize"]],[["u8"],["vec",["u8"]]]]],[8,"Reset","","Trait for resetting hash instances",null,null],[10,"reset","","Reset hasher instance to its initial state and return…",8,[[["self"]]]],[14,"impl_write","","Implements `std::io::Write` trait for implementer of `Input`",null,null],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"clone","","",9,[[["self"]],["invalidoutputsize"]]],[11,"default","","",9,[[],["invalidoutputsize"]]],[11,"description","","",9,[[["self"]],["str"]]]],"p":[[8,"Digest"],[8,"DynDigest"],[8,"Input"],[8,"BlockInput"],[8,"FixedOutput"],[8,"VariableOutput"],[8,"XofReader"],[8,"ExtendableOutput"],[8,"Reset"],[3,"InvalidOutputSize"]]};
searchIndex["ed25519_dalek"] = {"doc":"A Rust implementation of ed25519 key generation, signing,…","i":[[3,"Sha512","ed25519_dalek","The SHA-512 hash algorithm with the SHA-512 initial hash…",null,null],[8,"Digest","","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","",0,null],[10,"new","","Create new hasher instance",0,[[],["self"]]],[10,"input","","Digest input data.",0,[[["self"],["b"]]]],[10,"chain","","Digest input data in a chained manner.",0,[[["b"]],["self"]]],[10,"result","","Retrieve result and consume hasher instance.",0,[[],[["genericarray",["u8"]],["u8"]]]],[10,"result_reset","","Retrieve result and reset hasher instance.",0,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[10,"reset","","Reset hasher instance to its initial state.",0,[[["self"]]]],[10,"output_size","","Get output size of the hasher",0,[[],["usize"]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",0,[[],[["genericarray",["u8"]],["u8"]]]],[3,"Sha512","","The SHA-512 hash algorithm with the SHA-512 initial hash…",null,null],[3,"SignatureError","","Errors which may occur while processing signatures and…",null,null],[3,"PublicKey","","An ed25519 public key.",null,null],[3,"SecretKey","","An EdDSA secret key.",null,null],[3,"ExpandedSecretKey","","An \"expanded\" secret key.",null,null],[3,"Signature","","An ed25519 signature.",null,null],[3,"Keypair","","An ed25519 keypair.",null,null],[12,"secret","","The secret half of this keypair.",1,null],[12,"public","","The public half of this keypair.",1,null],[11,"to_bytes","","Convert this keypair to bytes.",1,[[["self"]]]],[11,"from_bytes","","Construct a `Keypair` from the bytes of a `PublicKey` and…",1,[[],[["signatureerror"],["keypair"],["result",["keypair","signatureerror"]]]]],[11,"generate","","Generate an ed25519 keypair.",1,[[["r"]],["keypair"]]],[11,"sign","","Sign a message with this keypair's secret key.",1,[[["self"]],["signature"]]],[11,"sign_prehashed","","Sign a `prehashed_message` with this `Keypair` using the…",1,[[["option"],["d"],["self"]],["signature"]]],[11,"verify","","Verify a signature on a message with this keypair's public…",1,[[["signature"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"verify_prehashed","","Verify a `signature` on a `prehashed_message` using the…",1,[[["signature"],["option"],["d"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"verify_strict","","Strictly verify a signature on a message with this…",1,[[["signature"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"to_bytes","","Convert this public key to a byte array.",2,[[["self"]]]],[11,"as_bytes","","View this public key as a byte array.",2,[[["self"]]]],[11,"from_bytes","","Construct a `PublicKey` from a slice of bytes.",2,[[],[["signatureerror"],["result",["publickey","signatureerror"]],["publickey"]]]],[11,"verify","","Verify a signature on a message with this keypair's public…",2,[[["signature"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"verify_prehashed","","Verify a `signature` on a `prehashed_message` using the…",2,[[["signature"],["option"],["d"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"verify_strict","","Strictly verify a signature on a message with this…",2,[[["signature"],["self"]],[["result",["signatureerror"]],["signatureerror"]]]],[11,"to_bytes","","Convert this secret key to a byte array.",3,[[["self"]]]],[11,"as_bytes","","View this secret key as a byte array.",3,[[["self"]]]],[11,"from_bytes","","Construct a `SecretKey` from a slice of bytes.",3,[[],[["signatureerror"],["secretkey"],["result",["secretkey","signatureerror"]]]]],[11,"generate","","Generate a `SecretKey` from a `csprng`.",3,[[["t"]],["secretkey"]]],[11,"to_bytes","","Convert this `ExpandedSecretKey` into an array of 64 bytes.",4,[[["self"]]]],[11,"from_bytes","","Construct an `ExpandedSecretKey` from a slice of bytes.",4,[[],[["signatureerror"],["result",["expandedsecretkey","signatureerror"]],["expandedsecretkey"]]]],[11,"sign","","Sign a message with this `ExpandedSecretKey`.",4,[[["self"],["publickey"]],["signature"]]],[11,"sign_prehashed","","Sign a `prehashed_message` with this `ExpandedSecretKey`…",4,[[["publickey"],["option"],["d"],["self"]],["signature"]]],[11,"to_bytes","","Convert this `Signature` to a byte array.",5,[[["self"]]]],[11,"from_bytes","","Construct a `Signature` from a slice of bytes.",5,[[],[["signature"],["signatureerror"],["result",["signature","signatureerror"]]]]],[17,"SIGNATURE_LENGTH","","The length of a ed25519 `Signature`, in bytes.",null,null],[17,"SECRET_KEY_LENGTH","","The length of a ed25519 `SecretKey`, in bytes.",null,null],[17,"PUBLIC_KEY_LENGTH","","The length of an ed25519 `PublicKey`, in bytes.",null,null],[17,"KEYPAIR_LENGTH","","The length of an ed25519 `Keypair`, in bytes.",null,null],[17,"EXPANDED_SECRET_KEY_LENGTH","","The length of an \"expanded\" ed25519 key,…",null,null],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"clear","","",6,[[["self"]]]],[11,"initialize","","",6,[[]]],[11,"new","","",6,[[],["d"]]],[11,"input","","",6,[[["self"],["b"]]]],[11,"chain","","",6,[[["b"]],["d"]]],[11,"result","","",6,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",6,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",6,[[["self"]]]],[11,"output_size","","",6,[[],["usize"]]],[11,"digest","","",6,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",6,[[["self"]]]],[11,"result_reset","","",6,[[["self"]],["box"]]],[11,"result","","",6,[[["box"]],["box"]]],[11,"reset","","",6,[[["self"]]]],[11,"output_size","","",6,[[["self"]],["usize"]]],[11,"box_clone","","",6,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"clear","","",2,[[["self"]]]],[11,"initialize","","",2,[[]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"clear","","",3,[[["self"]]]],[11,"initialize","","",3,[[]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"clear","","",4,[[["self"]]]],[11,"initialize","","",4,[[]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"vzip","","",1,[[],["v"]]],[11,"reset","","",6,[[["self"]]]],[11,"write","","",6,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"flush","","",6,[[["self"]],[["error"],["result",["error"]]]]],[11,"input","","",6,[[["self"],["b"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"default","","",6,[[],["sha512"]]],[11,"fixed_result","","",6,[[],[["genericarray",["u8"]],["u8"]]]],[11,"clone","","",6,[[["self"]],["sha512"]]],[11,"from","","Derive this public key from its corresponding `SecretKey`.",2,[[["secretkey"]],["publickey"]]],[11,"from","","Derive this public key from its corresponding…",2,[[["expandedsecretkey"]],["publickey"]]],[11,"from","","Construct an `ExpandedSecretKey` from a `SecretKey`.",4,[[["secretkey"]],["expandedsecretkey"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"eq","","",7,[[["signatureerror"],["self"]],["bool"]]],[11,"ne","","",7,[[["signatureerror"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["publickey"]],["bool"]]],[11,"ne","","",2,[[["self"],["publickey"]],["bool"]]],[11,"eq","","",5,[[["signature"],["self"]],["bool"]]],[11,"ne","","",5,[[["signature"],["self"]],["bool"]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"as_ref","","",2,[[["self"]]]],[11,"as_ref","","",3,[[["self"]]]],[11,"clone","","",7,[[["self"]],["signatureerror"]]],[11,"clone","","",2,[[["self"]],["publickey"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"default","","",1,[[],["keypair"]]],[11,"default","","",2,[[],["publickey"]]],[11,"default","","",3,[[],["secretkey"]]],[11,"default","","",4,[[],["expandedsecretkey"]]],[11,"source","","",7,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[8,"Digest"],[3,"Keypair"],[3,"PublicKey"],[3,"SecretKey"],[3,"ExpandedSecretKey"],[3,"Signature"],[3,"Sha512"],[3,"SignatureError"]]};
searchIndex["environmental"] = {"doc":"Safe global references to stack variables.","i":[[14,"environmental","environmental","Declare a new global reference module whose underlying…",null,null]],"p":[]};
searchIndex["failure"] = {"doc":"An experimental new error-handling library. Guide-style…","i":[[3,"Backtrace","failure","A `Backtrace`.",null,null],[3,"Compat","","A compatibility wrapper around an error type from this…",null,null],[3,"Context","","An error with context around it.",null,null],[3,"SyncFailure","","Wrapper for `std` errors to make them `Sync`.",null,null],[3,"Error","","The `Error` type, which can contain any failure.",null,null],[3,"Causes","","A iterator over the causes of a `Fail`",null,null],[5,"err_msg","","Constructs a `Fail` type from a string.",null,[[["sync"],["display"],["debug"],["send"]],["error"]]],[11,"new","","Constructs a new backtrace. This will only create a real…",0,[[],["backtrace"]]],[11,"is_empty","","Returns true if displaying this backtrace would be an…",0,[[["self"]],["bool"]]],[11,"into_inner","","Unwraps this into the inner error.",1,[[],["e"]]],[11,"get_ref","","Gets a reference to the inner error.",1,[[["self"]],["e"]]],[11,"new","","Creates a new context without an underlying error message.",2,[[["d"]],["context"]]],[11,"get_context","","Returns a reference to the context provided with this error.",2,[[["self"]],["d"]]],[11,"map","","Maps `Context<D>` to `Context<T>` by applying a function…",2,[[["f"]],["context"]]],[11,"new","","Wraps a non-`Sync` `Error` in order to make it implement…",3,[[["e"]],["self"]]],[11,"from_boxed_compat","","Creates an `Error` from `Box<std::error::Error>`.",4,[[["box",["stderror"]],["stderror"]],["error"]]],[11,"as_fail","","Return a reference to the underlying failure that this…",4,[[["self"]],["fail"]]],[11,"name","","Returns the name of the underlying fail.",4,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","Returns a reference to the underlying cause of this…",4,[[["self"]],["fail"]]],[11,"backtrace","","Gets a reference to the `Backtrace` for this `Error`.",4,[[["self"]],["backtrace"]]],[11,"context","","Provides context for this `Error`.",4,[[["send"],["display"],["sync"]],[["context"],["send"],["display"],["sync"]]]],[11,"compat","","Wraps `Error` in a compatibility type.",4,[[],[["error"],["compat",["error"]]]]],[11,"downcast","","Attempts to downcast this `Error` to a particular `Fail`…",4,[[],[["error"],["result",["error"]],["fail"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this error - the last value in…",4,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this error with the…",4,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the…",4,[[["self"]],["causes"]]],[11,"downcast_ref","","Attempts to downcast this `Error` to a particular `Fail`…",4,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Attempts to downcast this `Error` to a particular `Fail`…",4,[[["self"]],[["option"],["t"]]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",4,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_causes`.",4,[[["self"]],["causes"]]],[6,"Fallible","","A common result with an `Error`.",null,null],[8,"AsFail","","The `AsFail` trait",null,null],[10,"as_fail","","Converts a reference to `Self` into a dynamic trait object…",5,[[["self"]],["fail"]]],[8,"ResultExt","","Extension methods for `Result`.",null,null],[10,"compat","","Wraps the error in `Compat` to make it compatible with…",6,[[],[["compat"],["result",["compat"]]]]],[10,"context","","Wraps the error type in a context type.",6,[[["d"]],[["context"],["result",["context"]]]]],[10,"with_context","","Wraps the error type in a context type generated by…",6,[[["f"]],[["context"],["result",["context"]]]]],[8,"Fail","","The `Fail` trait.",null,null],[11,"name","","Returns the \"name\" of the error.",7,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","Returns a reference to the underlying cause of this…",7,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","Returns a reference to the `Backtrace` carried by this…",7,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"context","","Provides context for this failure.",7,[[["d"]],["context"]]],[11,"compat","","Wraps this failure in a compatibility wrapper that…",7,[[],["compat"]]],[11,"downcast_ref","","Attempts to downcast this failure to a concrete type by…",7,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Attempts to downcast this failure to a concrete type by…",7,[[["self"]],[["option"],["t"]]]],[11,"find_root_cause","","Returns the \"root cause\" of this `Fail` - the last value…",7,[[["self"]],["fail"]]],[11,"iter_causes","","Returns a iterator over the causes of this `Fail` with the…",7,[[["self"]],["causes"]]],[11,"iter_chain","","Returns a iterator over all fails up the chain from the…",7,[[["self"]],["causes"]]],[11,"root_cause","","Deprecated alias to `find_root_cause`.",7,[[["self"]],["fail"]]],[11,"causes","","Deprecated alias to `iter_chain`.",7,[[["self"]],["causes"]]],[14,"bail","","Exits a function early with an `Error`.",null,null],[14,"ensure","","Exits a function early with an `Error` if the condition is…",null,null],[14,"format_err","","Constructs an `Error` using the standard string…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[],["t"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"as_fail","","",7,[[["self"]],["fail"]]],[11,"as_fail","","",4,[[["self"]],["fail"]]],[11,"name","","",2,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause","","",2,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"backtrace","","",2,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"as_ref","","",4,[[["self"]],["fail"]]],[11,"from","","",2,[[["d"]],["context"]]],[11,"from","","",4,[[["f"]],["error"]]],[11,"next","","",8,[[["self"]],[["option",["fail"]],["fail"]]]],[11,"clone","","",1,[[["self"]],["compat"]]],[11,"default","","",0,[[],["backtrace"]]],[11,"default","","",1,[[],["compat"]]],[11,"eq","","",1,[[["self"],["compat"]],["bool"]]],[11,"ne","","",1,[[["self"],["compat"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"description","","",1,[[["self"]],["str"]]]],"p":[[3,"Backtrace"],[3,"Compat"],[3,"Context"],[3,"SyncFailure"],[3,"Error"],[8,"AsFail"],[8,"ResultExt"],[8,"Fail"],[3,"Causes"]]};
searchIndex["failure_derive"] = {"doc":"","i":[[24,"Fail","failure_derive","",null,null]],"p":[]};
searchIndex["fake_simd"] = {"doc":"","i":[[3,"u32x4","fake_simd","",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[12,"3","","",0,null],[3,"u64x2","","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"sub","","",0,[[["u32x4"]],["u32x4"]]],[11,"eq","","",0,[[["u32x4"],["self"]],["bool"]]],[11,"ne","","",0,[[["u32x4"],["self"]],["bool"]]],[11,"add","","",0,[[["u32x4"]],["u32x4"]]],[11,"add","","",1,[[["u64x2"]],["u64x2"]]],[11,"bitand","","",0,[[["u32x4"]],["u32x4"]]],[11,"bitor","","",0,[[["u32x4"]],["u32x4"]]],[11,"bitxor","","",0,[[["u32x4"]],["u32x4"]]],[11,"shl","","",0,[[["usize"]],["u32x4"]]],[11,"shl","","",0,[[["u32x4"]],["u32x4"]]],[11,"shr","","",0,[[["usize"]],["u32x4"]]],[11,"shr","","",0,[[["u32x4"]],["u32x4"]]],[11,"clone","","",0,[[["self"]],["u32x4"]]],[11,"clone","","",1,[[["self"]],["u64x2"]]]],"p":[[3,"u32x4"],[3,"u64x2"]]};
searchIndex["fixed_hash"] = {"doc":"","i":[[14,"construct_fixed_hash","fixed_hash","Construct a fixed-size hash type.",null,null],[14,"impl_fixed_hash_conversions","","Implements lossy conversions between the given types.",null,null]],"p":[]};
searchIndex["frame_metadata"] = {"doc":"Decodable variant of the RuntimeMetadata.","i":[[3,"FunctionMetadata","frame_metadata","All the metadata about a function.",null,null],[12,"name","","",0,null],[12,"arguments","","",0,null],[12,"documentation","","",0,null],[3,"FunctionArgumentMetadata","","All the metadata about a function argument.",null,null],[12,"name","","",1,null],[12,"ty","","",1,null],[3,"FnEncode","","Newtype wrapper for support encoding functions (actual the…",null,null],[12,"0","","",2,null],[3,"OuterEventMetadata","","All the metadata about an outer event.",null,null],[12,"name","","",3,null],[12,"events","","",3,null],[3,"EventMetadata","","All the metadata about an event.",null,null],[12,"name","","",4,null],[12,"arguments","","",4,null],[12,"documentation","","",4,null],[3,"StorageEntryMetadata","","All the metadata about one storage entry.",null,null],[12,"name","","",5,null],[12,"modifier","","",5,null],[12,"ty","","",5,null],[12,"default","","",5,null],[12,"documentation","","",5,null],[3,"ModuleConstantMetadata","","All the metadata about one module constant.",null,null],[12,"name","","",6,null],[12,"ty","","",6,null],[12,"value","","",6,null],[12,"documentation","","",6,null],[3,"ErrorMetadata","","All the metadata about a module error.",null,null],[12,"name","","",7,null],[12,"documentation","","",7,null],[3,"DefaultByteGetter","","Wrapper over dyn pointer for accessing a cached once byte…",null,null],[12,"0","","",8,null],[3,"StorageMetadata","","All metadata of the storage.",null,null],[12,"prefix","","The common prefix used by all storage entries.",9,null],[12,"entries","","",9,null],[3,"RuntimeMetadataPrefixed","","Metadata prefixed by a u32 for reserved usage",null,null],[12,"0","","",10,null],[12,"1","","",10,null],[3,"RuntimeMetadataV10","","The metadata of a runtime.",null,null],[12,"modules","","",11,null],[3,"ModuleMetadata","","All metadata about an runtime module.",null,null],[12,"name","","",12,null],[12,"storage","","",12,null],[12,"calls","","",12,null],[12,"event","","",12,null],[12,"constants","","",12,null],[12,"errors","","",12,null],[4,"DecodeDifferent","","A type that decodes to a different type than it encodes.…",null,null],[13,"Encode","","",13,null],[13,"Decoded","","",13,null],[4,"StorageHasher","","Hasher used by storage maps",null,null],[13,"Blake2_128","","",14,null],[13,"Blake2_256","","",14,null],[13,"Blake2_128Concat","","",14,null],[13,"Twox128","","",14,null],[13,"Twox256","","",14,null],[13,"Twox64Concat","","",14,null],[4,"StorageEntryType","","A storage entry type.",null,null],[13,"Plain","","",15,null],[13,"Map","","",15,null],[12,"hasher","frame_metadata::StorageEntryType","",15,null],[12,"key","","",15,null],[12,"value","","",15,null],[12,"is_linked","","",15,null],[13,"DoubleMap","frame_metadata","",15,null],[12,"hasher","frame_metadata::StorageEntryType","",15,null],[12,"key1","","",15,null],[12,"key2","","",15,null],[12,"value","","",15,null],[12,"key2_hasher","","",15,null],[4,"StorageEntryModifier","frame_metadata","A storage entry modifier.",null,null],[13,"Optional","","",16,null],[13,"Default","","",16,null],[4,"RuntimeMetadata","","The metadata of a runtime. The version ID encoded/decoded…",null,null],[13,"V0","","Unused; enum filler.",17,null],[13,"V1","","Version 1 for runtime metadata. No longer used.",17,null],[13,"V2","","Version 2 for runtime metadata. No longer used.",17,null],[13,"V3","","Version 3 for runtime metadata. No longer used.",17,null],[13,"V4","","Version 4 for runtime metadata. No longer used.",17,null],[13,"V5","","Version 5 for runtime metadata. No longer used.",17,null],[13,"V6","","Version 6 for runtime metadata. No longer used.",17,null],[13,"V7","","Version 7 for runtime metadata. No longer used.",17,null],[13,"V8","","Version 8 for runtime metadata. No longer used.",17,null],[13,"V9","","Version 9 for runtime metadata. No longer used.",17,null],[13,"V10","","Version 10 for runtime metadata.",17,null],[4,"RuntimeMetadataDeprecated","","Enum that should fail.",null,null],[6,"DecodeDifferentArray","","",null,null],[6,"ByteGetter","","Decode different for static lazy initiated byte value.",null,null],[6,"RuntimeMetadataLastVersion","","The latest version of the metadata.",null,null],[17,"META_RESERVED","","Curent prefix of metadata",null,null],[8,"ModuleErrorMetadata","","All the metadata about errors in a module.",null,null],[10,"metadata","","",18,[[]]],[8,"DefaultByte","","A technical trait to store lazy initiated vec value as…",null,null],[10,"default_byte","","",19,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"size_hint","","",1,[[["self"]],["usize"]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"encode","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",1,[[["w"],["self"]]]],[11,"decode","","",1,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",1,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"size_hint","","",4,[[["self"]],["usize"]]],[11,"using_encoded","","",4,[[["self"],["f"]],["r"]]],[11,"encode","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",4,[[["w"],["self"]]]],[11,"decode","","",4,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",4,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"size_hint","","",5,[[["self"]],["usize"]]],[11,"using_encoded","","",5,[[["self"],["f"]],["r"]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",5,[[["w"],["self"]]]],[11,"decode","","",5,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",5,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"size_hint","","",6,[[["self"]],["usize"]]],[11,"using_encoded","","",6,[[["self"],["f"]],["r"]]],[11,"encode","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",6,[[["w"],["self"]]]],[11,"decode","","",6,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",6,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"size_hint","","",7,[[["self"]],["usize"]]],[11,"using_encoded","","",7,[[["self"],["f"]],["r"]]],[11,"encode","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",7,[[["w"],["self"]]]],[11,"decode","","",7,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",7,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"size_hint","","",8,[[["self"]],["usize"]]],[11,"using_encoded","","",8,[[["self"],["f"]],["r"]]],[11,"encode","","",8,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",8,[[["w"],["self"]]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"size_hint","","",9,[[["self"]],["usize"]]],[11,"using_encoded","","",9,[[["self"],["f"]],["r"]]],[11,"encode","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",9,[[["w"],["self"]]]],[11,"decode","","",9,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",9,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",9,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"size_hint","","",10,[[["self"]],["usize"]]],[11,"using_encoded","","",10,[[["self"],["f"]],["r"]]],[11,"encode","","",10,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",10,[[["w"],["self"]]]],[11,"decode","","",10,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",10,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",10,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",10,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"size_hint","","",11,[[["self"]],["usize"]]],[11,"using_encoded","","",11,[[["self"],["f"]],["r"]]],[11,"encode","","",11,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",11,[[["w"],["self"]]]],[11,"decode","","",11,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",11,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",11,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",11,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"size_hint","","",12,[[["self"]],["usize"]]],[11,"using_encoded","","",12,[[["self"],["f"]],["r"]]],[11,"encode","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",12,[[["w"],["self"]]]],[11,"decode","","",12,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",12,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",12,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"size_hint","","",13,[[["self"]],["usize"]]],[11,"using_encoded","","",13,[[["self"],["f"]],["r"]]],[11,"encode","","",13,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",13,[[["w"],["self"]]]],[11,"decode","","",13,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",13,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",13,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"size_hint","","",14,[[["self"]],["usize"]]],[11,"using_encoded","","",14,[[["self"],["f"]],["r"]]],[11,"encode","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",14,[[["w"],["self"]]]],[11,"decode","","",14,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",14,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",14,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"size_hint","","",15,[[["self"]],["usize"]]],[11,"using_encoded","","",15,[[["self"],["f"]],["r"]]],[11,"encode","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",15,[[["w"],["self"]]]],[11,"decode","","",15,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",15,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",15,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"size_hint","","",16,[[["self"]],["usize"]]],[11,"using_encoded","","",16,[[["self"],["f"]],["r"]]],[11,"encode","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",16,[[["w"],["self"]]]],[11,"decode","","",16,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",16,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",17,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"size_hint","","",20,[[["self"]],["usize"]]],[11,"using_encoded","","",20,[[["self"],["f"]],["r"]]],[11,"encode","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",20,[[["w"],["self"]]]],[11,"decode","","",20,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",20,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",20,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"vzip","","",20,[[],["v"]]],[11,"into","","",10,[[],["opaquemetadata"]]],[11,"into","","",21,[[],["runtimemetadataprefixed"]]],[11,"clone","","",13,[[["self"]],["decodedifferent"]]],[11,"clone","","",0,[[["self"]],["functionmetadata"]]],[11,"clone","","",1,[[["self"]],["functionargumentmetadata"]]],[11,"clone","","",2,[[["self"]],["fnencode"]]],[11,"clone","","",3,[[["self"]],["outereventmetadata"]]],[11,"clone","","",4,[[["self"]],["eventmetadata"]]],[11,"clone","","",5,[[["self"]],["storageentrymetadata"]]],[11,"clone","","",6,[[["self"]],["moduleconstantmetadata"]]],[11,"clone","","",7,[[["self"]],["errormetadata"]]],[11,"clone","","",8,[[["self"]],["defaultbytegetter"]]],[11,"clone","","",14,[[["self"]],["storagehasher"]]],[11,"clone","","",15,[[["self"]],["storageentrytype"]]],[11,"clone","","",16,[[["self"]],["storageentrymodifier"]]],[11,"clone","","",9,[[["self"]],["storagemetadata"]]],[11,"clone","","",12,[[["self"]],["modulemetadata"]]],[11,"eq","","",13,[[["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["functionmetadata"]],["bool"]]],[11,"ne","","",0,[[["self"],["functionmetadata"]],["bool"]]],[11,"eq","","",1,[[["self"],["functionargumentmetadata"]],["bool"]]],[11,"ne","","",1,[[["self"],["functionargumentmetadata"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"eq","","",3,[[["outereventmetadata"],["self"]],["bool"]]],[11,"ne","","",3,[[["outereventmetadata"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["eventmetadata"]],["bool"]]],[11,"ne","","",4,[[["self"],["eventmetadata"]],["bool"]]],[11,"eq","","",5,[[["storageentrymetadata"],["self"]],["bool"]]],[11,"ne","","",5,[[["storageentrymetadata"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["moduleconstantmetadata"]],["bool"]]],[11,"ne","","",6,[[["self"],["moduleconstantmetadata"]],["bool"]]],[11,"eq","","",7,[[["self"],["errormetadata"]],["bool"]]],[11,"ne","","",7,[[["self"],["errormetadata"]],["bool"]]],[11,"eq","","",8,[[["self"],["defaultbytegetter"]],["bool"]]],[11,"eq","","",14,[[["self"],["storagehasher"]],["bool"]]],[11,"eq","","",15,[[["storageentrytype"],["self"]],["bool"]]],[11,"ne","","",15,[[["storageentrytype"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["storageentrymodifier"]],["bool"]]],[11,"eq","","",9,[[["self"],["storagemetadata"]],["bool"]]],[11,"ne","","",9,[[["self"],["storagemetadata"]],["bool"]]],[11,"eq","","",10,[[["runtimemetadataprefixed"],["self"]],["bool"]]],[11,"ne","","",10,[[["runtimemetadataprefixed"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["runtimemetadata"]],["bool"]]],[11,"ne","","",17,[[["self"],["runtimemetadata"]],["bool"]]],[11,"eq","","",20,[[["runtimemetadatadeprecated"],["self"]],["bool"]]],[11,"eq","","",11,[[["runtimemetadatav10"],["self"]],["bool"]]],[11,"ne","","",11,[[["runtimemetadatav10"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["modulemetadata"]],["bool"]]],[11,"ne","","",12,[[["self"],["modulemetadata"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",13,[[["s"],["self"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["self"],["__s"]],["result"]]],[11,"serialize","","",8,[[["s"],["self"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",10,[[["self"],["__s"]],["result"]]],[11,"serialize","","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"encode_to","","",13,[[["w"],["self"]]]],[11,"encode_to","","",0,[[["self"],["encout"]]]],[11,"encode_to","","",1,[[["self"],["encout"]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"encode_to","","",3,[[["self"],["encout"]]]],[11,"encode_to","","",4,[[["self"],["encout"]]]],[11,"encode_to","","",5,[[["self"],["encout"]]]],[11,"encode_to","","",6,[[["self"],["encout"]]]],[11,"encode_to","","",7,[[["self"],["encout"]]]],[11,"encode_to","","",8,[[["w"],["self"]]]],[11,"encode_to","","",14,[[["self"],["encout"]]]],[11,"encode_to","","",15,[[["self"],["encout"]]]],[11,"encode_to","","",16,[[["self"],["encout"]]]],[11,"encode_to","","",9,[[["self"],["encout"]]]],[11,"encode_to","","",10,[[["self"],["encout"]]]],[11,"encode_to","","",17,[[["self"],["encout"]]]],[11,"encode_to","","",20,[[["w"],["self"]]]],[11,"encode_to","","",11,[[["self"],["encout"]]]],[11,"encode","","",11,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",11,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",12,[[["self"],["encout"]]]],[11,"decode","","",13,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",0,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",1,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",3,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",4,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",5,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",6,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",7,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",14,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",15,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",16,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",9,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",10,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",17,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",20,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",11,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",12,[[["decin"]],[["result",["error"]],["error"]]]]],"p":[[3,"FunctionMetadata"],[3,"FunctionArgumentMetadata"],[3,"FnEncode"],[3,"OuterEventMetadata"],[3,"EventMetadata"],[3,"StorageEntryMetadata"],[3,"ModuleConstantMetadata"],[3,"ErrorMetadata"],[3,"DefaultByteGetter"],[3,"StorageMetadata"],[3,"RuntimeMetadataPrefixed"],[3,"RuntimeMetadataV10"],[3,"ModuleMetadata"],[4,"DecodeDifferent"],[4,"StorageHasher"],[4,"StorageEntryType"],[4,"StorageEntryModifier"],[4,"RuntimeMetadata"],[8,"ModuleErrorMetadata"],[8,"DefaultByte"],[4,"RuntimeMetadataDeprecated"],[6,"RuntimeMetadataLastVersion"]]};
searchIndex["frame_support"] = {"doc":"Support code for the runtime.","i":[[6,"ConsensusEngineId","frame_support","Consensus engine unique ID.",null,null],[5,"print","","Print something that implements `Printable` from the…",null,[[]]],[8,"Printable","","Trait for things which can be printed from the runtime.",null,null],[10,"print","","Print the object.",0,[[["self"]]]],[14,"decl_storage","","Declares strongly-typed wrappers around codec-compatible…",null,null],[14,"construct_runtime","","Construct a runtime, with the given name and the given…",null,null],[3,"Twox256","","Hash storage keys with twox 256",null,null],[3,"Twox128","","Hash storage keys with twox 128",null,null],[3,"Blake2_256","","Hash storage keys with blake2 256",null,null],[3,"Blake2_128","","Hash storage keys with blake2 128",null,null],[3,"Twox64Concat","","Hash storage keys with `concat(twox64(key), key)`",null,null],[3,"Blake2_128Concat","","Hash storage keys with `concat(blake2_128(key), key)`",null,null],[4,"Void","","The void type - it cannot exist.",null,null],[0,"debug","","Runtime debugging and logging utilities.",null,null],[14,"info","frame_support::debug","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[3,"Writer","","A target for `core::write!` macro - constructs a string in…",null,null],[3,"RuntimeLogger","","Runtime logger implementation - `log` crate backend.",null,null],[5,"debug","","Print out the debuggable type.",null,[[]]],[0,"native","","Native-only logging.",null,null],[14,"info","frame_support::debug::native","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[11,"print","frame_support::debug","Print the content of this `Writer` out.",1,[[["self"]]]],[11,"init","","Initialize the logger.",2,[[]]],[0,"dispatch","frame_support","Dispatch system. Contains a macro for defining runtime…",null,null],[0,"result","frame_support::dispatch","Error handling with the `Result` type.",null,null],[4,"Result","frame_support::dispatch::result","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",3,null],[13,"Err","","Contains the error value",3,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant…",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a…",null,null],[0,"fmt","frame_support::dispatch","Utilities for formatting and printing `String`s.",null,null],[5,"format","frame_support::dispatch::fmt","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments"]],["string"]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",4,null],[13,"Right","","Indication that contents should be right-aligned.",4,null],[13,"Center","","Indication that contents should be center-aligned.",4,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["write"],["arguments"]],[["result",["error"]],["error"]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",5,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",6,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",7,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",8,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",9,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",9,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",9,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",10,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",11,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",12,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",13,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",14,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[3,"Vec","frame_support::dispatch","A contiguous growable array type, written `Vec<T>` but…",null,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",15,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",15,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",16,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",16,[[["rhs"],["self"]],["bool"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[0,"marker","","Primitive traits and types representing basic properties…",null,null],[8,"Send","frame_support::dispatch::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement `Unpin`.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[8,"Codec","frame_support::dispatch","Trait that allows zero-copy read/write of value-references…",null,null],[8,"EncodeLike","","A marker trait that tells the compiler that a type encode…",null,null],[8,"Decode","","Trait that allows zero-copy read of value-references from…",null,null],[10,"decode","","Attempt to deserialise the value from input.",17,[[["i"]],[["result",["error"]],["error"]]]],[24,"Decode","","Derive `parity_scale_codec::Decode` and for struct and enum.",null,null],[8,"Encode","","Trait that allows zero-copy write of value-references to…",null,null],[11,"size_hint","","If possible give a hint of expected size of the encoding.",18,[[["self"]],["usize"]]],[11,"encode_to","","Convert self to a slice and append it to the destination.",18,[[["self"],["t"]]]],[11,"encode","","Convert self to an owned vector.",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","Convert self to a slice and then invoke the given closure…",18,[[["self"],["f"]],["r"]]],[24,"Encode","","Derive `parity_scale_codec::Encode` and…",null,null],[8,"Input","","Trait that allows reading of data into a slice.",null,null],[10,"remaining_len","","Should return the remaining length of the input data. If…",19,[[["self"]],[["result",["option","error"]],["option",["usize"]],["error"]]]],[10,"read","","Read the exact number of bytes required to fill the given…",19,[[["self"]],[["result",["error"]],["error"]]]],[11,"read_byte","","Read a single byte from the input.",19,[[["self"]],[["result",["u8","error"]],["error"],["u8"]]]],[8,"Output","","Trait that allows writing of data.",null,null],[10,"write","","Write to the output.",20,[[["self"]]]],[11,"push_byte","","Write a single byte to the output.",20,[[["self"],["u8"]]]],[11,"push","","Write encoding of given value to the output.",20,[[["self"],["v"]]]],[8,"HasCompact","","Trait that tells you if a given type can be…",null,null],[16,"Type","","The compact type; this can be",21,null],[8,"EncodeAsRef","","Something that can be encoded as a reference.",null,null],[16,"RefType","","The reference type that is used for encoding.",22,null],[3,"FunctionMetadata","","All the metadata about a function.",null,null],[12,"name","","",23,null],[12,"arguments","","",23,null],[12,"documentation","","",23,null],[4,"DecodeDifferent","","A type that decodes to a different type than it encodes.…",null,null],[13,"Encode","","",24,null],[13,"Decoded","","",24,null],[6,"DecodeDifferentArray","","",null,null],[3,"FunctionArgumentMetadata","","All the metadata about a function argument.",null,null],[12,"name","","",25,null],[12,"ty","","",25,null],[3,"ModuleConstantMetadata","","All the metadata about one module constant.",null,null],[12,"name","","",26,null],[12,"ty","","",26,null],[12,"value","","",26,null],[12,"documentation","","",26,null],[8,"DefaultByte","","A technical trait to store lazy initiated vec value as…",null,null],[10,"default_byte","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[3,"DefaultByteGetter","","Wrapper over dyn pointer for accessing a cached once byte…",null,null],[12,"0","","",28,null],[8,"ModuleErrorMetadata","","All the metadata about errors in a module.",null,null],[10,"metadata","","",29,[[]]],[3,"ErrorMetadata","","All the metadata about a module error.",null,null],[12,"name","","",30,null],[12,"documentation","","",30,null],[6,"TransactionPriority","","Priority for a transaction. Additive. Higher is better.",null,null],[8,"Dispatchable","","A lazy call (module function and argument values) that can…",null,null],[16,"Origin","","Every function call from your runtime has an origin, which…",31,null],[16,"Trait","","...",31,null],[10,"dispatch","","Actually dispatch this call and result the result of it.",31,[[],[["dispatcherror"],["result",["dispatcherror"]]]]],[4,"DispatchError","","Reason why a dispatch call failed",null,null],[13,"Other","","Some error occurred.",32,null],[13,"CannotLookup","","Failed to lookup some data.",32,null],[13,"BadOrigin","","A bad origin.",32,null],[13,"Module","","A custom error in a module",32,null],[12,"index","frame_support::dispatch::DispatchError","Module index, matching the metadata module index",32,null],[12,"error","","Module specific error value",32,null],[12,"message","","Optional error message.",32,null],[6,"DispatchResult","frame_support::dispatch","Result of a module function call; either nothing…",null,null],[4,"Never","","A type that cannot be instantiated.",null,null],[6,"CallableCallFor","","",null,null],[8,"Callable","","Serializable version of Dispatchable. This value can be…",null,null],[16,"Call","","",33,null],[8,"Parameter","","A type that can be used as a parameter in a dispatchable…",null,null],[8,"IsSubType","","",null,null],[10,"is_sub_type","","",34,[[["self"]],[["option",["callablecallfor"]],["callablecallfor"]]]],[0,"storage","frame_support","Stuff to do with the runtime's storage.",null,null],[3,"PrefixIterator","frame_support::storage","Iterator for prefixed map.",null,null],[0,"unhashed","","Operation on unhashed runtime storage.",null,null],[5,"get","frame_support::storage::unhashed","Return the value of the item in storage under `key`, or…",null,[[],[["decode"],["sized"],["option"]]]],[5,"get_or_default","","Return the value of the item in storage under `key`, or…",null,[[],[["decode"],["sized"],["default"]]]],[5,"get_or","","Return the value of the item in storage under `key`, or…",null,[[["decode"],["sized"]],[["decode"],["sized"]]]],[5,"get_or_else","","Return the value of the item in storage under `key`, or…",null,[[["fnonce"]],[["decode"],["sized"]]]],[5,"put","","Put `value` in storage under `key`.",null,[[["t"]]]],[5,"take","","Remove `key` from storage, returning its value if it had…",null,[[],[["decode"],["sized"],["option"]]]],[5,"take_or_default","","Remove `key` from storage, returning its value, or, if…",null,[[],[["decode"],["sized"],["default"]]]],[5,"take_or","","Return the value of the item in storage under `key`, or…",null,[[["decode"],["sized"]],[["decode"],["sized"]]]],[5,"take_or_else","","Return the value of the item in storage under `key`, or…",null,[[["fnonce"]],[["decode"],["sized"]]]],[5,"exists","","Check to see if `key` has an explicit entry in storage.",null,[[],["bool"]]],[5,"kill","","Ensure `key` has no explicit entry in storage.",null,[[]]],[5,"kill_prefix","","Ensure keys with the given `prefix` have no entries in…",null,[[]]],[5,"get_raw","","Get a Vec of bytes from storage.",null,[[],[["option",["vec"]],["vec",["u8"]]]]],[5,"put_raw","","Put a raw byte slice into storage.",null,[[]]],[0,"hashed","frame_support::storage","Operation on runtime storage using hashed keys.",null,null],[5,"get","frame_support::storage::hashed","Return the value of the item in storage under `key`, or…",null,[[["hashfn"]],["option"]]],[5,"get_or_default","","Return the value of the item in storage under `key`, or…",null,[[["hashfn"]],["t"]]],[5,"get_or","","Return the value of the item in storage under `key`, or…",null,[[["hashfn"],["t"]],["t"]]],[5,"get_or_else","","Return the value of the item in storage under `key`, or…",null,[[["hashfn"],["f"]],["t"]]],[5,"put","","Put `value` in storage under `key`.",null,[[["hashfn"],["t"]]]],[5,"take","","Remove `key` from storage, returning its value if it had…",null,[[["hashfn"]],["option"]]],[5,"take_or_default","","Remove `key` from storage, returning its value, or, if…",null,[[["hashfn"]],["t"]]],[5,"take_or","","Return the value of the item in storage under `key`, or…",null,[[["hashfn"],["t"]],["t"]]],[5,"take_or_else","","Return the value of the item in storage under `key`, or…",null,[[["hashfn"],["f"]],["t"]]],[5,"exists","","Check to see if `key` has an explicit entry in storage.",null,[[["hashfn"]],["bool"]]],[5,"kill","","Ensure `key` has no explicit entry in storage.",null,[[["hashfn"]]]],[5,"get_raw","","Get a Vec of bytes from storage.",null,[[["hashfn"]],[["option",["vec"]],["vec",["u8"]]]]],[5,"put_raw","","Put a raw byte slice into storage.",null,[[["hashfn"]]]],[0,"child","frame_support::storage","Operation on runtime child storages.",null,null],[4,"ChildInfo","frame_support::storage::child","Information related to a child state.",null,null],[13,"Default","","",35,null],[5,"get","","Return the value of the item in storage under `key`, or…",null,[[["childinfo"]],[["decode"],["sized"],["option"]]]],[5,"get_or_default","","Return the value of the item in storage under `key`, or…",null,[[["childinfo"]],[["decode"],["sized"],["default"]]]],[5,"get_or","","Return the value of the item in storage under `key`, or…",null,[[["decode"],["sized"],["childinfo"]],[["decode"],["sized"]]]],[5,"get_or_else","","Return the value of the item in storage under `key`, or…",null,[[["fnonce"],["childinfo"]],[["decode"],["sized"]]]],[5,"put","","Put `value` in storage under `key`.",null,[[["t"],["childinfo"]]]],[5,"take","","Remove `key` from storage, returning its value if it had…",null,[[["childinfo"]],[["decode"],["sized"],["option"]]]],[5,"take_or_default","","Remove `key` from storage, returning its value, or, if…",null,[[["childinfo"]],[["default"],["sized"],["codec"]]]],[5,"take_or","","Return the value of the item in storage under `key`, or…",null,[[["sized"],["childinfo"],["codec"]],[["sized"],["codec"]]]],[5,"take_or_else","","Return the value of the item in storage under `key`, or…",null,[[["fnonce"],["childinfo"]],[["sized"],["codec"]]]],[5,"exists","","Check to see if `key` has an explicit entry in storage.",null,[[["childinfo"]],["bool"]]],[5,"kill_storage","","Remove all `storage_key` key/values",null,[[["childinfo"]]]],[5,"kill","","Ensure `key` has no explicit entry in storage.",null,[[["childinfo"]]]],[5,"get_raw","","Get a Vec of bytes from storage.",null,[[["childinfo"]],[["option",["vec"]],["vec",["u8"]]]]],[5,"put_raw","","Put a raw byte slice into storage.",null,[[["childinfo"]]]],[5,"child_root","","Calculate current child root value.",null,[[],[["vec",["u8"]],["u8"]]]],[0,"generator","frame_support::storage","Generators are a set of trait on which storage traits are…",null,null],[3,"Enumerator","frame_support::storage::generator","A key-value pair iterator for enumerable map.",null,null],[3,"Linkage","","Linkage data of an element (it's successor and predecessor)",null,null],[12,"previous","","Previous element key in storage (None for the first element)",36,null],[12,"next","","Next element key in storage (None for the last element)",36,null],[8,"StorageLinkedMap","","Generator for `StorageLinkedMap` used by `decl_storage`.",null,null],[16,"Query","","The type that get/take returns.",37,null],[16,"KeyFormat","","The family of key formats used for this map.",37,null],[10,"from_optional_value_to_query","","Convert an optional value retrieved from storage to the…",37,[[["option"]]]],[10,"from_query_to_optional_value","","Convert a query to an optional value into storage.",37,[[],["option"]]],[11,"storage_linked_map_final_key","","Generate the full key used in top storage.",37,[[["keyarg"]],[["vec",["u8"]],["u8"]]]],[11,"storage_linked_map_final_head_key","","Generate the hashed key for head",37,[[],[["vec",["u8"]],["u8"]]]],[8,"LinkedMapKeyFormat","","A type-abstracted key format used for a family of…",null,null],[16,"Hasher","","Hasher. Used for generating final key and final head key.",38,null],[10,"module_prefix","","Module prefix. Used for generating final key.",38,[[]]],[10,"storage_prefix","","Storage prefix. Used for generating final key.",38,[[]]],[10,"head_prefix","","Storage prefix. Used for generating final head key.",38,[[]]],[11,"storage_linked_map_final_key","","Generate the full key used in top storage.",38,[[["k"]],[["vec",["u8"]],["u8"]]]],[11,"storage_linked_map_final_head_key","","Generate the full key used in top storage to store the…",38,[[],[["vec",["u8"]],["u8"]]]],[8,"StorageMap","","Generator for `StorageMap` used by `decl_storage`.",null,null],[16,"Query","","The type that get/take returns.",39,null],[16,"Hasher","","Hasher. Used for generating final key.",39,null],[10,"module_prefix","","Module prefix. Used for generating final key.",39,[[]]],[10,"storage_prefix","","Storage prefix. Used for generating final key.",39,[[]]],[10,"from_optional_value_to_query","","Convert an optional value retrieved from storage to the…",39,[[["option"]]]],[10,"from_query_to_optional_value","","Convert a query to an optional value into storage.",39,[[],["option"]]],[11,"storage_map_final_key","","Generate the full key used in top storage.",39,[[["keyarg"]],[["vec",["u8"]],["u8"]]]],[8,"StorageDoubleMap","","Generator for `StorageDoubleMap` used by `decl_storage`.",null,null],[16,"Query","","The type that get/take returns.",40,null],[16,"Hasher1","","Hasher for the first key.",40,null],[16,"Hasher2","","Hasher for the second key.",40,null],[10,"module_prefix","","Module prefix. Used for generating final key.",40,[[]]],[10,"storage_prefix","","Storage prefix. Used for generating final key.",40,[[]]],[10,"from_optional_value_to_query","","Convert an optional value retrieved from storage to the…",40,[[["option"]]]],[10,"from_query_to_optional_value","","Convert a query to an optional value into storage.",40,[[],["option"]]],[11,"storage_double_map_final_key1","","Generate the first part of the key used in top storage.",40,[[["karg1"]],[["vec",["u8"]],["u8"]]]],[11,"storage_double_map_final_key","","Generate the full key used in top storage.",40,[[["karg1"],["karg2"]],[["vec",["u8"]],["u8"]]]],[8,"StorageValue","","Generator for `StorageValue` used by `decl_storage`.",null,null],[16,"Query","","The type that get/take returns.",41,null],[10,"module_prefix","","Module prefix. Used for generating final key.",41,[[]]],[10,"storage_prefix","","Storage prefix. Used for generating final key.",41,[[]]],[10,"from_optional_value_to_query","","Convert an optional value retrieved from storage to the…",41,[[["option"]]]],[10,"from_query_to_optional_value","","Convert a query to an optional value into storage.",41,[[],["option"]]],[11,"storage_value_final_key","","Generate the full key used in top storage.",41,[[]]],[8,"StorageValue","frame_support::storage","A trait for working with macro-generated storage values…",null,null],[16,"Query","","The type that get/take return.",42,null],[10,"hashed_key","","Get the storage key.",42,[[]]],[10,"exists","","Does the value (explicitly) exist in storage?",42,[[],["bool"]]],[10,"get","","Load the value from the provided storage instance.",42,[[]]],[10,"translate","","Translate a value from some previous type (`O`) to the…",42,[[["fnonce"]],[["result",["option"]],["option"]]]],[10,"put","","Store a value under this key into the provided storage…",42,[[["encodelike"]]]],[10,"mutate","","Mutate the value",42,[[["fnonce"]],["r"]]],[10,"kill","","Clear the storage value.",42,[[]]],[10,"take","","Take a value from storage, removing it afterwards.",42,[[]]],[10,"append","","Append the given item to the value in the storage.",42,[[["items"]],[["result",["str"]],["str"]]]],[10,"append_or_put","","Append the given items to the value in the storage.",42,[[["items"]]]],[10,"decode_len","","Read the length of the value in a fast way, without…",42,[[],[["str"],["result",["usize","str"]],["usize"]]]],[8,"StorageMap","","A strongly-typed map in storage.",null,null],[16,"Query","","The type that get/take return.",43,null],[10,"hashed_key_for","","Get the storage key used to fetch a value corresponding to…",43,[[["encodelike"]],[["vec",["u8"]],["u8"]]]],[10,"exists","","Does the value (explicitly) exist in storage?",43,[[["encodelike"]],["bool"]]],[10,"get","","Load the value associated with the given key from the map.",43,[[["encodelike"]]]],[10,"swap","","Swap the values of two keys.",43,[[["encodelike"]]]],[10,"insert","","Store a value to be associated with the given key from the…",43,[[["encodelike"],["encodelike"]]]],[10,"remove","","Remove the value under a key.",43,[[["encodelike"]]]],[10,"mutate","","Mutate the value under a key.",43,[[["encodelike"],["fnonce"]],["r"]]],[10,"take","","Take the value under a key.",43,[[["encodelike"]]]],[10,"append","","Append the given items to the value in the storage.",43,[[["items"],["keyarg"]],[["result",["str"]],["str"]]]],[10,"append_or_insert","","Safely append the given items to the value in the storage.…",43,[[["items"],["keyarg"]]]],[10,"decode_len","","Read the length of the value in a fast way, without…",43,[[["encodelike"]],[["str"],["result",["usize","str"]],["usize"]]]],[8,"StorageLinkedMap","","A strongly-typed linked map in storage.",null,null],[16,"Query","","The type that get/take return.",44,null],[16,"Enumerator","","The type that iterates over all `(key, value)`.",44,null],[10,"exists","","Does the value (explicitly) exist in storage?",44,[[["encodelike"]],["bool"]]],[10,"get","","Load the value associated with the given key from the map.",44,[[["encodelike"]]]],[10,"swap","","Swap the values of two keys.",44,[[["encodelike"]]]],[10,"insert","","Store a value to be associated with the given key from the…",44,[[["encodelike"],["encodelike"]]]],[10,"remove","","Remove the value under a key.",44,[[["encodelike"]]]],[10,"mutate","","Mutate the value under a key.",44,[[["encodelike"],["fnonce"]],["r"]]],[10,"take","","Take the value under a key.",44,[[["encodelike"]]]],[10,"head","","Return current head element.",44,[[],["option"]]],[10,"enumerate","","Enumerate all elements in the map.",44,[[]]],[10,"decode_len","","Read the length of the value in a fast way, without…",44,[[["encodelike"]],[["str"],["result",["usize","str"]],["usize"]]]],[10,"translate","","Translate the keys and values from some previous `(K2,…",44,[[["tv"],["tk"]],[["result",["option"]],["option"]]]],[8,"StorageDoubleMap","","An implementation of a map with a two keys.",null,null],[16,"Query","","The type that get/take returns.",45,null],[10,"hashed_key_for","","",45,[[["karg1"],["karg2"]],[["vec",["u8"]],["u8"]]]],[10,"exists","","",45,[[["karg1"],["karg2"]],["bool"]]],[10,"get","","",45,[[["karg1"],["karg2"]]]],[10,"take","","",45,[[["karg1"],["karg2"]]]],[10,"swap","","Swap the values of two key-pairs.",45,[[["xkarg2"],["ykarg1"],["xkarg1"],["ykarg2"]]]],[10,"insert","","",45,[[["karg1"],["varg"],["karg2"]]]],[10,"remove","","",45,[[["karg1"],["karg2"]]]],[10,"remove_prefix","","",45,[[["sized"]]]],[10,"iter_prefix","","",45,[[["sized"]],["prefixiterator"]]],[10,"mutate","","",45,[[["karg1"],["f"],["karg2"]],["r"]]],[10,"append","","",45,[[["items"],["karg1"],["karg2"]],[["result",["str"]],["str"]]]],[10,"append_or_insert","","",45,[[["items"],["karg1"],["karg2"]]]],[10,"decode_len","","Read the length of the value in a fast way, without…",45,[[["karg1"],["karg2"]],[["str"],["result",["usize","str"]],["usize"]]]],[8,"StoragePrefixedMap","","Trait for maps that store all its value after a unique…",null,null],[10,"module_prefix","","Module prefix. Used for generating final key.",46,[[]]],[10,"storage_prefix","","Storage prefix. Used for generating final key.",46,[[]]],[11,"final_prefix","","",46,[[]]],[11,"remove_all","","",46,[[]]],[11,"iter","","",46,[[],["prefixiterator"]]],[0,"event","frame_support","Macros that define an Event types. Events can be used to…",null,null],[3,"EventMetadata","frame_support::event","All the metadata about an event.",null,null],[12,"name","","",47,null],[12,"arguments","","",47,null],[12,"documentation","","",47,null],[4,"DecodeDifferent","","A type that decodes to a different type than it encodes.…",null,null],[13,"Encode","","",24,null],[13,"Decoded","","",24,null],[3,"OuterEventMetadata","","All the metadata about an outer event.",null,null],[12,"name","","",48,null],[12,"events","","",48,null],[3,"FnEncode","","Newtype wrapper for support encoding functions (actual the…",null,null],[12,"0","","",49,null],[0,"metadata","frame_support","",null,null],[4,"DecodeDifferent","frame_support::metadata","A type that decodes to a different type than it encodes.…",null,null],[13,"Encode","","",24,null],[13,"Decoded","","",24,null],[3,"FnEncode","","Newtype wrapper for support encoding functions (actual the…",null,null],[12,"0","","",49,null],[4,"RuntimeMetadata","","The metadata of a runtime. The version ID encoded/decoded…",null,null],[13,"V0","","Unused; enum filler.",50,null],[13,"V1","","Version 1 for runtime metadata. No longer used.",50,null],[13,"V2","","Version 2 for runtime metadata. No longer used.",50,null],[13,"V3","","Version 3 for runtime metadata. No longer used.",50,null],[13,"V4","","Version 4 for runtime metadata. No longer used.",50,null],[13,"V5","","Version 5 for runtime metadata. No longer used.",50,null],[13,"V6","","Version 6 for runtime metadata. No longer used.",50,null],[13,"V7","","Version 7 for runtime metadata. No longer used.",50,null],[13,"V8","","Version 8 for runtime metadata. No longer used.",50,null],[13,"V9","","Version 9 for runtime metadata. No longer used.",50,null],[13,"V10","","Version 10 for runtime metadata.",50,null],[3,"ModuleMetadata","","All metadata about an runtime module.",null,null],[12,"name","","",51,null],[12,"storage","","",51,null],[12,"calls","","",51,null],[12,"event","","",51,null],[12,"constants","","",51,null],[12,"errors","","",51,null],[6,"RuntimeMetadataLastVersion","","The latest version of the metadata.",null,null],[3,"DefaultByteGetter","","Wrapper over dyn pointer for accessing a cached once byte…",null,null],[12,"0","","",28,null],[3,"RuntimeMetadataPrefixed","","Metadata prefixed by a u32 for reserved usage",null,null],[12,"0","","",52,null],[12,"1","","",52,null],[3,"StorageEntryMetadata","","All the metadata about one storage entry.",null,null],[12,"name","","",53,null],[12,"modifier","","",53,null],[12,"ty","","",53,null],[12,"default","","",53,null],[12,"documentation","","",53,null],[3,"StorageMetadata","","All metadata of the storage.",null,null],[12,"prefix","","The common prefix used by all storage entries.",54,null],[12,"entries","","",54,null],[4,"StorageEntryType","","A storage entry type.",null,null],[13,"Plain","","",55,null],[13,"Map","","",55,null],[12,"hasher","frame_support::metadata::StorageEntryType","",55,null],[12,"key","","",55,null],[12,"value","","",55,null],[12,"is_linked","","",55,null],[13,"DoubleMap","frame_support::metadata","",55,null],[12,"hasher","frame_support::metadata::StorageEntryType","",55,null],[12,"key1","","",55,null],[12,"key2","","",55,null],[12,"value","","",55,null],[12,"key2_hasher","","",55,null],[4,"StorageEntryModifier","frame_support::metadata","A storage entry modifier.",null,null],[13,"Optional","","",56,null],[13,"Default","","",56,null],[8,"DefaultByte","","A technical trait to store lazy initiated vec value as…",null,null],[10,"default_byte","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[4,"StorageHasher","","Hasher used by storage maps",null,null],[13,"Blake2_128","","",57,null],[13,"Blake2_256","","",57,null],[13,"Blake2_128Concat","","",57,null],[13,"Twox128","","",57,null],[13,"Twox256","","",57,null],[13,"Twox64Concat","","",57,null],[8,"ModuleErrorMetadata","","All the metadata about errors in a module.",null,null],[10,"metadata","","",29,[[]]],[0,"inherent","frame_support","",null,null],[0,"unsigned","","",null,null],[0,"error","","Macro for declaring a module error.",null,null],[0,"traits","","Traits for SRML.",null,null],[3,"SplitTwoWays","frame_support::traits","Split an unbalanced amount two ways between a common…",null,null],[3,"WithdrawReasons","","Reasons for moving funds out of an account.",null,null],[4,"UpdateBalanceOutcome","","Outcome of a balance update.",null,null],[13,"Updated","","Account balance was simply updated.",58,null],[13,"AccountKilled","","The update led to killing the account.",58,null],[4,"ExistenceRequirement","","Simple boolean for whether an account needs to be kept in…",null,null],[13,"KeepAlive","","Operation must not result in the account going out of…",59,null],[13,"AllowDeath","","Operation may result in account going out of existence.",59,null],[4,"SignedImbalance","","Either a positive or a negative imbalance.",null,null],[13,"Positive","","A positive imbalance (funds have been created but none…",60,null],[13,"Negative","","A negative imbalance (funds have been destroyed but none…",60,null],[4,"WithdrawReason","","Reason for moving funds out of an account.",null,null],[13,"TransactionPayment","","In order to pay for (system) transaction costs.",61,null],[13,"Transfer","","In order to transfer ownership.",61,null],[13,"Reserve","","In order to reserve some funds for a later return or…",61,null],[13,"Fee","","In order to pay some other (higher-level) fees.",61,null],[13,"Tip","","In order to tip a validator for transaction inclusion.",61,null],[6,"LockIdentifier","","An identifier for a lock. Used for disambiguating…",null,null],[8,"Len","","Anything that can have a `::len()` method.",null,null],[10,"len","","Return the length of data type.",62,[[["self"]],["usize"]]],[8,"Get","","A trait for querying a single fixed value from a type.",null,null],[10,"get","","Return a constant value.",63,[[],["t"]]],[8,"Contains","","A trait for querying whether a type can be said to…",null,null],[10,"contains","","Return `true` if this \"contains\" the given value `t`.",64,[[["t"]],["bool"]]],[8,"OnFreeBalanceZero","","The account with the given id was killed.",null,null],[10,"on_free_balance_zero","","The account was the given id was killed.",65,[[["accountid"]]]],[8,"FindAuthor","","A trait for finding the author of a block header based on…",null,null],[10,"find_author","","Find the author of a block based on the pre-runtime digests.",66,[[["i"]],["option"]]],[8,"VerifySeal","","A trait for verifying the seal of a header and returning…",null,null],[10,"verify_seal","","Verify a header and return the author, if any.",67,[[["header"]],[["option"],["str"],["result",["option","str"]]]]],[8,"KeyOwnerProofSystem","","Something which can compute and check proofs of a…",null,null],[16,"Proof","","The proof of membership itself.",68,null],[16,"IdentificationTuple","","The full identification of a key owner and the stash…",68,null],[10,"prove","","Prove membership of a key owner in the current block-state.",68,[[["key"]],["option"]]],[10,"check_proof","","Check a proof of membership on-chain. Return `Some` iff…",68,[[["key"]],["option"]]],[8,"OnUnbalanced","","Handler for when some currency \"account\" decreased in…",null,null],[11,"on_unbalanced","","Handler for some imbalance. Infallible.",69,[[["imbalance"]]]],[10,"on_nonzero_unbalanced","","Actually handle a non-zero imbalance. You probably want to…",69,[[["imbalance"]]]],[8,"TryDrop","","A type for which some values make sense to be able to drop…",null,null],[10,"try_drop","","Drop an instance cleanly. Only works if its value…",70,[[],["result"]]],[8,"Imbalance","","A trait for a not-quite Linear Type that tracks an…",null,null],[16,"Opposite","","The oppositely imbalanced type. They come in pairs.",71,null],[10,"zero","","The zero imbalance. Can be destroyed with `drop_zero`.",71,[[],["self"]]],[10,"drop_zero","","Drop an instance cleanly. Only works if its `self.value()`…",71,[[],["result"]]],[10,"split","","Consume `self` and return two independent instances; the…",71,[[["balance"]]]],[10,"merge","","Consume `self` and an `other` to return a new instance…",71,[[],["self"]]],[11,"maybe_merge","","Consume `self` and maybe an `other` to return a new…",71,[[["option"]],["self"]]],[10,"subsume","","Consume an `other` to mutate `self` into a new instance…",71,[[["self"]]]],[11,"maybe_subsume","","Maybe consume an `other` to mutate `self` into a new…",71,[[["self"],["option"]]]],[10,"offset","","Consume self and along with an opposite counterpart to…",71,[[],["result"]]],[10,"peek","","The raw value of self.",71,[[["self"]],["balance"]]],[8,"Currency","","Abstraction over a fungible assets system.",null,null],[16,"Balance","","The balance of an account.",72,null],[16,"PositiveImbalance","","The opaque token type for an imbalance. This is returned…",72,null],[16,"NegativeImbalance","","The opaque token type for an imbalance. This is returned…",72,null],[10,"total_balance","","The combined balance of `who`.",72,[[["accountid"]]]],[10,"can_slash","","Same result as `slash(who, value)` (but without the…",72,[[["accountid"]],["bool"]]],[10,"total_issuance","","The total amount of issuance in the system.",72,[[]]],[10,"minimum_balance","","The minimum balance any single account may have. This is…",72,[[]]],[10,"burn","","Reduce the total issuance by `amount` and return the…",72,[[]]],[10,"issue","","Increase the total issuance by `amount` and return the…",72,[[]]],[10,"free_balance","","The 'free' balance of a given account.",72,[[["accountid"]]]],[10,"ensure_can_withdraw","","Returns `Ok` iff the account is able to make a withdrawal…",72,[[["accountid"],["withdrawreasons"]],["dispatchresult"]]],[10,"transfer","","Transfer some liquid free balance to another staker.",72,[[["accountid"],["existencerequirement"]],["dispatchresult"]]],[10,"slash","","Deducts up to `value` from the combined balance of `who`,…",72,[[["accountid"]]]],[10,"deposit_into_existing","","Mints `value` to the free balance of `who`.",72,[[["accountid"]],[["dispatcherror"],["result",["dispatcherror"]]]]],[11,"resolve_into_existing","","Similar to deposit_creating, only accepts a…",72,[[["accountid"]],["result"]]],[10,"deposit_creating","","Adds up to `value` to the free balance of `who`. If `who`…",72,[[["accountid"]]]],[11,"resolve_creating","","Similar to deposit_creating, only accepts a…",72,[[["accountid"]]]],[10,"withdraw","","Removes some free balance from `who` account for `reason`…",72,[[["accountid"],["existencerequirement"],["withdrawreasons"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[11,"settle","","Similar to withdraw, only accepts a `PositiveImbalance`…",72,[[["accountid"],["existencerequirement"],["withdrawreasons"]],["result"]]],[10,"make_free_balance_be","","Ensure an account's free balance equals some value; this…",72,[[["accountid"]]]],[8,"ReservableCurrency","","A currency where funds can be reserved from the user.",null,null],[10,"can_reserve","","Same result as `reserve(who, value)` (but without the…",73,[[["accountid"]],["bool"]]],[10,"slash_reserved","","Deducts up to `value` from reserved balance of `who`. This…",73,[[["accountid"]]]],[10,"reserved_balance","","The amount of the balance of a given account that is…",73,[[["accountid"]]]],[10,"reserve","","Moves `value` from balance to reserved balance.",73,[[["accountid"]],["dispatchresult"]]],[10,"unreserve","","Moves up to `value` from reserved balance to free balance.…",73,[[["accountid"]]]],[10,"repatriate_reserved","","Moves up to `value` from reserved balance of account…",73,[[["accountid"]],[["result",["dispatcherror"]],["dispatcherror"]]]],[8,"LockableCurrency","","A currency whose accounts can have liquidity restrictions.",null,null],[16,"Moment","","The quantity used to denote time; usually just a…",74,null],[10,"set_lock","","Create a new balance lock on account `who`.",74,[[["accountid"],["lockidentifier"],["withdrawreasons"]]]],[10,"extend_lock","","Changes a balance lock (selected by `id`) so that it…",74,[[["accountid"],["lockidentifier"],["withdrawreasons"]]]],[10,"remove_lock","","Remove an existing lock.",74,[[["accountid"],["lockidentifier"]]]],[8,"VestingCurrency","","A currency whose accounts can have balances which vest…",null,null],[16,"Moment","","The quantity used to denote time; usually just a…",75,null],[10,"vesting_balance","","Get the amount that is currently being vested and cannot…",75,[[["accountid"]]]],[10,"add_vesting_schedule","","Adds a vesting schedule to a given account.",75,[[["accountid"]],["dispatchresult"]]],[10,"remove_vesting_schedule","","Remove a vesting schedule for a given account.",75,[[["accountid"]]]],[8,"Time","","",null,null],[16,"Moment","","",76,null],[10,"now","","",76,[[]]],[8,"ChangeMembers","","Trait for type that can handle incremental changes to a…",null,null],[11,"change_members","","A number of members `incoming` just joined the set and…",77,[[["vec"]]]],[10,"change_members_sorted","","A number of members `_incoming` just joined the set and…",77,[[]]],[11,"set_members_sorted","","Set the new members; they must already be sorted. This…",77,[[]]],[11,"compute_members_diff","","Set the new members; they must already be sorted. This…",77,[[]]],[8,"InitializeMembers","","Trait for type that can handle the initialization of…",null,null],[10,"initialize_members","","Initialize the members to the given `members`.",78,[[]]],[8,"Randomness","","",null,null],[10,"random","","Get a \"random\" value",79,[[],["output"]]],[11,"random_seed","","Get the basic random seed.",79,[[],["output"]]],[8,"ValidatorRegistration","","Implementors of this trait provide information about…",null,null],[10,"is_registered","","Returns true if the provided validator ID has been…",80,[[["validatorid"]],["bool"]]],[8,"ModuleToIndex","","Something that can convert a given module into the index…",null,null],[10,"module_to_index","","Convert the given module `M` into an index.",81,[[],[["option",["usize"]],["usize"]]]],[11,"zero","","",60,[[],["self"]]],[11,"drop_zero","","",60,[[],["result"]]],[11,"merge","","Consume `self` and an `other` to return a new instance…",60,[[],["self"]]],[11,"none","","Create a new mask with all flags unset.",82,[[],["self"]]],[11,"all","","Create a new mask with all flags set.",82,[[],["self"]]],[11,"set","","Set all `other` flags.",82,[[["self"],["t"]]]],[11,"unset","","Unset all `other` flags.",82,[[["self"],["t"]]]],[11,"toggle","","Toggle all `other` flags.",82,[[["self"],["t"]]]],[11,"contains","","Check if the mask contains all of `other`'s flags.",82,[[["self"],["t"]],["bool"]]],[11,"intersects","","Check if the mask has common flags with `other`.",82,[[["self"],["t"]],["bool"]]],[11,"is_all","","Check if all flags are set.",82,[[["self"]],["bool"]]],[11,"is_none","","Check if all flags are unset.",82,[[["self"]],["bool"]]],[11,"except","","Choose all variants except for `one`.",82,[[["withdrawreason"]],["withdrawreasons"]]],[0,"weights","frame_support","Primitives for transaction weighting.",null,null],[6,"TransactionPriority","frame_support::weights","Re-export priority as type Priority for a transaction.…",null,null],[3,"DispatchInfo","","A bundle of static information collected from the…",null,null],[12,"weight","","Weight of this transaction.",83,null],[12,"class","","Class of this transaction.",83,null],[12,"pays_fee","","Does this transaction pay fees.",83,null],[4,"DispatchClass","","A generalized group of dispatch types. This is only…",null,null],[13,"Normal","","A normal dispatch.",84,null],[13,"Operational","","An operational dispatch.",84,null],[4,"SimpleDispatchInfo","","Default type used with the `#[weight = x]` attribute in a…",null,null],[13,"FixedNormal","","A normal dispatch with fixed weight.",85,null],[13,"MaxNormal","","A normal dispatch with the maximum weight.",85,null],[13,"FreeNormal","","A normal dispatch with no weight.",85,null],[13,"FixedOperational","","An operational dispatch with fixed weight.",85,null],[13,"MaxOperational","","An operational dispatch with the maximum weight.",85,null],[13,"FreeOperational","","An operational dispatch with no weight.",85,null],[6,"Weight","","Numeric range of a transaction weight.",null,null],[8,"WeighData","","Means of weighing some particular kind of data (`T`).",null,null],[10,"weigh_data","","Weigh the data `T` given by `target`. When implementing…",86,[[["self"],["t"]],["weight"]]],[8,"ClassifyDispatch","","Means of classifying a dispatchable function.",null,null],[10,"classify_dispatch","","Classify the dispatch function based on input data…",87,[[["self"],["t"]],["dispatchclass"]]],[8,"WeighBlock","","Means of determining the weight of a block's lifecycle…",null,null],[11,"on_initialize","","Return the weight of the block's on_initialize hook.",88,[[["blocknumber"]],["weight"]]],[11,"on_finalize","","Return the weight of the block's on_finalize hook.",88,[[["blocknumber"]],["weight"]]],[8,"PaysFee","","Indicates if dispatch function should pay fees or not. If…",null,null],[11,"pays_fee","","",89,[[["self"]],["bool"]]],[8,"GetDispatchInfo","","A `Dispatchable` function (aka transaction) that can carry…",null,null],[10,"get_dispatch_info","","Return a `DispatchInfo`, containing relevant information…",90,[[["self"]],["dispatchinfo"]]],[11,"zero","","An additive zero variant of SimpleDispatchInfo.",85,[[],["self"]]],[8,"Hashable","frame_support","",null,null],[10,"blake2_128","","",91,[[["self"]]]],[10,"blake2_256","","",91,[[["self"]]]],[10,"blake2_128_concat","","",91,[[["self"]],[["vec",["u8"]],["u8"]]]],[10,"twox_128","","",91,[[["self"]]]],[10,"twox_256","","",91,[[["self"]]]],[10,"twox_64_concat","","",91,[[["self"]],[["vec",["u8"]],["u8"]]]],[14,"runtime_print","","Print out a formatted message.",null,null],[14,"decl_module","","Declares a `Module` struct and a `Call` enum, which…",null,null],[14,"impl_outer_dispatch","","Implement a meta-dispatch module to dispatch to other…",null,null],[14,"decl_event","","Implement the `Event` for a module.",null,null],[14,"impl_outer_event","","Constructs an Event type for a runtime. This is usually…",null,null],[14,"impl_outer_origin","","Constructs an Origin type for a runtime. This is usually…",null,null],[14,"impl_runtime_metadata","","Implements the metadata support for the given runtime and…",null,null],[14,"impl_outer_inherent","","Implement the outer inherent. All given modules need to…",null,null],[14,"impl_outer_validate_unsigned","","Implement `ValidateUnsigned` for `Runtime`. All given…",null,null],[14,"decl_error","","Declare an error type for a runtime module.",null,null],[14,"parameter_types","","Macro for easily creating a new implementation of the…",null,null],[14,"fail","","Return Err of the expression: `return Err($expression);`.",null,null],[14,"ensure","","Evaluate `$x:expr` and if not true return `Err($y:expr)`.",null,null],[14,"assert_noop","","Evaluate an expression, assert it returns an expected…",null,null],[14,"assert_err","","Panic if an expression doesn't evaluate to an `Err`.",null,null],[14,"assert_ok","","Panic if an expression doesn't evaluate to `Ok`.",null,null],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"unchecked_into","","",92,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"vzip","","",92,[[],["v"]]],[11,"unique_saturated_into","","",92,[[],["t"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"unchecked_into","","",93,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"vzip","","",93,[[],["v"]]],[11,"unique_saturated_into","","",93,[[],["t"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"unchecked_into","","",94,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"vzip","","",94,[[],["v"]]],[11,"unique_saturated_into","","",94,[[],["t"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"unchecked_into","","",95,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"vzip","","",95,[[],["v"]]],[11,"unique_saturated_into","","",95,[[],["t"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"unchecked_into","","",96,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"vzip","","",96,[[],["v"]]],[11,"unique_saturated_into","","",96,[[],["t"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"unchecked_into","","",97,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"vzip","","",97,[[],["v"]]],[11,"unique_saturated_into","","",97,[[],["t"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"unchecked_into","","",98,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"vzip","","",98,[[],["v"]]],[11,"unique_saturated_into","","",98,[[],["t"]]],[11,"from","frame_support::debug","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"unique_saturated_into","","",1,[[],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"unique_saturated_into","","",2,[[],["t"]]],[11,"len","frame_support::dispatch::result","",3,[[["self"]],["usize"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"into_ffi_value","","",3,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",3,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unique_saturated_into","","",3,[[],["t"]]],[11,"len","","",99,[[["self"]],["usize"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"into_iter","","",99,[[],["i"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"unchecked_into","","",99,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",99,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",99,[[["outer"]],["t"]]],[11,"vzip","","",99,[[],["v"]]],[11,"unique_saturated_into","","",99,[[],["t"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"into_iter","","",100,[[],["i"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"unchecked_into","","",100,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",100,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",100,[[["outer"]],["t"]]],[11,"vzip","","",100,[[],["v"]]],[11,"unique_saturated_into","","",100,[[],["t"]]],[11,"len","","",101,[[["self"]],["usize"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"into_iter","","",101,[[],["i"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"unchecked_into","","",101,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"vzip","","",101,[[],["v"]]],[11,"unique_saturated_into","","",101,[[],["t"]]],[11,"from","frame_support::dispatch::fmt","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"unique_saturated_into","","",4,[[],["t"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"to_string","","",102,[[["self"]],["string"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"unchecked_into","","",102,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"vzip","","",102,[[],["v"]]],[11,"clear","","",102,[[["self"]]]],[11,"initialize","","",102,[[]]],[11,"as_fail","","",102,[[["self"]],["fail"]]],[11,"is_clear","","",102,[[["self"]],["bool"]]],[11,"clear","","",102,[[],["t"]]],[11,"unique_saturated_into","","",102,[[],["t"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"to_string","","",103,[[["self"]],["string"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"unchecked_into","","",103,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"vzip","","",103,[[],["v"]]],[11,"unique_saturated_into","","",103,[[],["t"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"unchecked_into","","",104,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"vzip","","",104,[[],["v"]]],[11,"unique_saturated_into","","",104,[[],["t"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"record_debug","","",105,[[["debug"],["self"],["field"]]]],[11,"unchecked_into","","",105,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"vzip","","",105,[[],["v"]]],[11,"unique_saturated_into","","",105,[[],["t"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"unchecked_into","","",106,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"vzip","","",106,[[],["v"]]],[11,"unique_saturated_into","","",106,[[],["t"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"record_debug","","",107,[[["debug"],["self"],["field"]]]],[11,"unchecked_into","","",107,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"vzip","","",107,[[],["v"]]],[11,"unique_saturated_into","","",107,[[],["t"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"unchecked_into","","",108,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"vzip","","",108,[[],["v"]]],[11,"unique_saturated_into","","",108,[[],["t"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"unchecked_into","","",109,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"vzip","","",109,[[],["v"]]],[11,"unique_saturated_into","","",109,[[],["t"]]],[11,"len","frame_support::dispatch","",110,[[["self"]],["usize"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"into_iter","","",110,[[],["i"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"write","","",110,[[["self"]]]],[11,"size_hint","","",110,[[["self"]],["usize"]]],[11,"using_encoded","","",110,[[["self"],["f"]],["r"]]],[11,"encode","","",110,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",110,[[["w"],["self"]]]],[11,"decode","","",110,[[["i"]],[["result",["error"]],["error"]]]],[11,"and","","",110,[[["v"]],["t"]]],[11,"to_keyed_vec","","",110,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",110,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",110,[[],["t"]]],[11,"zeroize","","",110,[[["self"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"vzip","","",110,[[],["v"]]],[11,"into_ffi_value","","",110,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",110,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",110,[[["self"]]]],[11,"initialize","","",110,[[]]],[11,"encode_hex","","",110,[[["self"]],["u"]]],[11,"encode_hex_upper","","",110,[[["self"]],["u"]]],[11,"is_clear","","",110,[[["self"]],["bool"]]],[11,"clear","","",110,[[],["t"]]],[11,"unique_saturated_into","","",110,[[],["t"]]],[11,"from","frame_support::dispatch::marker","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"size_hint","","",111,[[["self"]],["usize"]]],[11,"using_encoded","","",111,[[["self"],["f"]],["r"]]],[11,"encode","","",111,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",111,[[["w"],["self"]]]],[11,"decode","","",111,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",111,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",111,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",111,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"vzip","","",111,[[],["v"]]],[11,"clear","","",111,[[["self"]]]],[11,"initialize","","",111,[[]]],[11,"is_clear","","",111,[[["self"]],["bool"]]],[11,"clear","","",111,[[],["t"]]],[11,"unique_saturated_into","","",111,[[],["t"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"unchecked_into","","",112,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"vzip","","",112,[[],["v"]]],[11,"unique_saturated_into","","",112,[[],["t"]]],[11,"from","frame_support::dispatch","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"size_hint","","",23,[[["self"]],["usize"]]],[11,"using_encoded","","",23,[[["self"],["f"]],["r"]]],[11,"encode","","",23,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",23,[[["w"],["self"]]]],[11,"decode","","",23,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",23,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",23,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",23,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"vzip","","",23,[[],["v"]]],[11,"unique_saturated_into","","",23,[[],["t"]]],[11,"from","frame_support::metadata","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"size_hint","","",24,[[["self"]],["usize"]]],[11,"using_encoded","","",24,[[["self"],["f"]],["r"]]],[11,"encode","","",24,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",24,[[["w"],["self"]]]],[11,"decode","","",24,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",24,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",24,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",24,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"vzip","","",24,[[],["v"]]],[11,"unique_saturated_into","","",24,[[],["t"]]],[11,"from","frame_support::dispatch","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"size_hint","","",25,[[["self"]],["usize"]]],[11,"using_encoded","","",25,[[["self"],["f"]],["r"]]],[11,"encode","","",25,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",25,[[["w"],["self"]]]],[11,"decode","","",25,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",25,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",25,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",25,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"vzip","","",25,[[],["v"]]],[11,"unique_saturated_into","","",25,[[],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"size_hint","","",26,[[["self"]],["usize"]]],[11,"using_encoded","","",26,[[["self"],["f"]],["r"]]],[11,"encode","","",26,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",26,[[["w"],["self"]]]],[11,"decode","","",26,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",26,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",26,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",26,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"vzip","","",26,[[],["v"]]],[11,"unique_saturated_into","","",26,[[],["t"]]],[11,"from","frame_support::metadata","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"size_hint","","",28,[[["self"]],["usize"]]],[11,"using_encoded","","",28,[[["self"],["f"]],["r"]]],[11,"encode","","",28,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",28,[[["w"],["self"]]]],[11,"unchecked_into","","",28,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"vzip","","",28,[[],["v"]]],[11,"unique_saturated_into","","",28,[[],["t"]]],[11,"from","frame_support::dispatch","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"size_hint","","",30,[[["self"]],["usize"]]],[11,"using_encoded","","",30,[[["self"],["f"]],["r"]]],[11,"encode","","",30,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",30,[[["w"],["self"]]]],[11,"decode","","",30,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",30,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",30,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",30,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"vzip","","",30,[[],["v"]]],[11,"unique_saturated_into","","",30,[[],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"size_hint","","",32,[[["self"]],["usize"]]],[11,"using_encoded","","",32,[[["self"],["f"]],["r"]]],[11,"encode","","",32,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",32,[[["w"],["self"]]]],[11,"decode","","",32,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",32,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",32,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",32,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"vzip","","",32,[[],["v"]]],[11,"unique_saturated_into","","",32,[[],["t"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"unchecked_into","","",113,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"vzip","","",113,[[],["v"]]],[11,"unique_saturated_into","","",113,[[],["t"]]],[11,"from","frame_support::storage","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"into_iter","","",114,[[],["i"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"unchecked_into","","",114,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"vzip","","",114,[[],["v"]]],[11,"unique_saturated_into","","",114,[[],["t"]]],[11,"from","frame_support::storage::child","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"unchecked_into","","",35,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"vzip","","",35,[[],["v"]]],[11,"unique_saturated_into","","",35,[[],["t"]]],[11,"from","frame_support::storage::generator","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"into_iter","","",115,[[],["i"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"unchecked_into","","",115,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"vzip","","",115,[[],["v"]]],[11,"unique_saturated_into","","",115,[[],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"size_hint","","",36,[[["self"]],["usize"]]],[11,"using_encoded","","",36,[[["self"],["f"]],["r"]]],[11,"encode","","",36,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",36,[[["w"],["self"]]]],[11,"decode","","",36,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",36,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",36,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",36,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"vzip","","",36,[[],["v"]]],[11,"clear","","",36,[[["self"]]]],[11,"initialize","","",36,[[]]],[11,"unique_saturated_into","","",36,[[],["t"]]],[11,"from","frame_support::event","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"size_hint","","",47,[[["self"]],["usize"]]],[11,"using_encoded","","",47,[[["self"],["f"]],["r"]]],[11,"encode","","",47,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",47,[[["w"],["self"]]]],[11,"decode","","",47,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",47,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",47,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",47,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",47,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",47,[[["outer"]],["t"]]],[11,"vzip","","",47,[[],["v"]]],[11,"unique_saturated_into","","",47,[[],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"size_hint","","",48,[[["self"]],["usize"]]],[11,"using_encoded","","",48,[[["self"],["f"]],["r"]]],[11,"encode","","",48,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",48,[[["w"],["self"]]]],[11,"decode","","",48,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",48,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",48,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",48,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",48,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",48,[[["outer"]],["t"]]],[11,"vzip","","",48,[[],["v"]]],[11,"unique_saturated_into","","",48,[[],["t"]]],[11,"from","frame_support::metadata","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"size_hint","","",49,[[["self"]],["usize"]]],[11,"using_encoded","","",49,[[["self"],["f"]],["r"]]],[11,"encode","","",49,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",49,[[["w"],["self"]]]],[11,"unchecked_into","","",49,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",49,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",49,[[["outer"]],["t"]]],[11,"vzip","","",49,[[],["v"]]],[11,"unique_saturated_into","","",49,[[],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"size_hint","","",50,[[["self"]],["usize"]]],[11,"using_encoded","","",50,[[["self"],["f"]],["r"]]],[11,"encode","","",50,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",50,[[["w"],["self"]]]],[11,"decode","","",50,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",50,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",50,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",50,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",50,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",50,[[["outer"]],["t"]]],[11,"vzip","","",50,[[],["v"]]],[11,"unique_saturated_into","","",50,[[],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"size_hint","","",51,[[["self"]],["usize"]]],[11,"using_encoded","","",51,[[["self"],["f"]],["r"]]],[11,"encode","","",51,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",51,[[["w"],["self"]]]],[11,"decode","","",51,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",51,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",51,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",51,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",51,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",51,[[["outer"]],["t"]]],[11,"vzip","","",51,[[],["v"]]],[11,"unique_saturated_into","","",51,[[],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"size_hint","","",52,[[["self"]],["usize"]]],[11,"using_encoded","","",52,[[["self"],["f"]],["r"]]],[11,"encode","","",52,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",52,[[["w"],["self"]]]],[11,"decode","","",52,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",52,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",52,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",52,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",52,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",52,[[["outer"]],["t"]]],[11,"vzip","","",52,[[],["v"]]],[11,"unique_saturated_into","","",52,[[],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"size_hint","","",53,[[["self"]],["usize"]]],[11,"using_encoded","","",53,[[["self"],["f"]],["r"]]],[11,"encode","","",53,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",53,[[["w"],["self"]]]],[11,"decode","","",53,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",53,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",53,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",53,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",53,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",53,[[["outer"]],["t"]]],[11,"vzip","","",53,[[],["v"]]],[11,"unique_saturated_into","","",53,[[],["t"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"size_hint","","",54,[[["self"]],["usize"]]],[11,"using_encoded","","",54,[[["self"],["f"]],["r"]]],[11,"encode","","",54,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",54,[[["w"],["self"]]]],[11,"decode","","",54,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",54,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",54,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",54,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",54,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",54,[[["outer"]],["t"]]],[11,"vzip","","",54,[[],["v"]]],[11,"unique_saturated_into","","",54,[[],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"size_hint","","",55,[[["self"]],["usize"]]],[11,"using_encoded","","",55,[[["self"],["f"]],["r"]]],[11,"encode","","",55,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",55,[[["w"],["self"]]]],[11,"decode","","",55,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",55,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",55,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",55,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",55,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",55,[[["outer"]],["t"]]],[11,"vzip","","",55,[[],["v"]]],[11,"unique_saturated_into","","",55,[[],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"size_hint","","",56,[[["self"]],["usize"]]],[11,"using_encoded","","",56,[[["self"],["f"]],["r"]]],[11,"encode","","",56,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",56,[[["w"],["self"]]]],[11,"decode","","",56,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",56,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",56,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",56,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",56,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",56,[[["outer"]],["t"]]],[11,"vzip","","",56,[[],["v"]]],[11,"unique_saturated_into","","",56,[[],["t"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"size_hint","","",57,[[["self"]],["usize"]]],[11,"using_encoded","","",57,[[["self"],["f"]],["r"]]],[11,"encode","","",57,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",57,[[["w"],["self"]]]],[11,"decode","","",57,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",57,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",57,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",57,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",57,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",57,[[["outer"]],["t"]]],[11,"vzip","","",57,[[],["v"]]],[11,"unique_saturated_into","","",57,[[],["t"]]],[11,"from","frame_support::traits","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"unchecked_into","","",116,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"vzip","","",116,[[],["v"]]],[11,"unique_saturated_into","","",116,[[],["t"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"size_hint","","",82,[[["self"]],["usize"]]],[11,"using_encoded","","",82,[[["self"],["f"]],["r"]]],[11,"encode","","",82,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",82,[[["w"],["self"]]]],[11,"decode","","",82,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",82,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",82,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",82,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",82,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",82,[[["outer"]],["t"]]],[11,"vzip","","",82,[[],["v"]]],[11,"unique_saturated_into","","",82,[[],["t"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"unchecked_into","","",58,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",58,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",58,[[["outer"]],["t"]]],[11,"vzip","","",58,[[],["v"]]],[11,"unique_saturated_into","","",58,[[],["t"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"unchecked_into","","",59,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",59,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",59,[[["outer"]],["t"]]],[11,"vzip","","",59,[[],["v"]]],[11,"unique_saturated_into","","",59,[[],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"unchecked_into","","",60,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",60,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",60,[[["outer"]],["t"]]],[11,"vzip","","",60,[[],["v"]]],[11,"unique_saturated_into","","",60,[[],["t"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"size_hint","","",61,[[["self"]],["usize"]]],[11,"using_encoded","","",61,[[["self"],["f"]],["r"]]],[11,"encode","","",61,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",61,[[["w"],["self"]]]],[11,"decode","","",61,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",61,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",61,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",61,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",61,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",61,[[["outer"]],["t"]]],[11,"vzip","","",61,[[],["v"]]],[11,"unique_saturated_into","","",61,[[],["t"]]],[11,"from","frame_support::weights","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"size_hint","","",83,[[["self"]],["usize"]]],[11,"using_encoded","","",83,[[["self"],["f"]],["r"]]],[11,"encode","","",83,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",83,[[["w"],["self"]]]],[11,"decode","","",83,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",83,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",83,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",83,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",83,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",83,[[["outer"]],["t"]]],[11,"vzip","","",83,[[],["v"]]],[11,"clear","","",83,[[["self"]]]],[11,"initialize","","",83,[[]]],[11,"is_clear","","",83,[[["self"]],["bool"]]],[11,"clear","","",83,[[],["t"]]],[11,"unique_saturated_into","","",83,[[],["t"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"size_hint","","",84,[[["self"]],["usize"]]],[11,"using_encoded","","",84,[[["self"],["f"]],["r"]]],[11,"encode","","",84,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",84,[[["w"],["self"]]]],[11,"decode","","",84,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",84,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",84,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",84,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",84,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",84,[[["outer"]],["t"]]],[11,"vzip","","",84,[[],["v"]]],[11,"clear","","",84,[[["self"]]]],[11,"initialize","","",84,[[]]],[11,"is_clear","","",84,[[["self"]],["bool"]]],[11,"clear","","",84,[[],["t"]]],[11,"unique_saturated_into","","",84,[[],["t"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"unchecked_into","","",85,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",85,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",85,[[["outer"]],["t"]]],[11,"vzip","","",85,[[],["v"]]],[11,"clear","","",85,[[["self"]]]],[11,"initialize","","",85,[[]]],[11,"unique_saturated_into","","",85,[[],["t"]]],[11,"report","frame_support::dispatch::result","",3,[[],["i32"]]],[11,"report","","",3,[[],["i32"]]],[11,"write","frame_support::dispatch","",110,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"write_vectored","","",110,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"write_all","","",110,[[["self"]],[["result",["error"]],["error"]]]],[11,"flush","","",110,[[["self"]],[["result",["error"]],["error"]]]],[11,"description","frame_support::dispatch::fmt","",102,[[["self"]],["str"]]],[11,"from","frame_support::dispatch","Converts a [`CString`] into a [`Vec`]`<u8>`.",110,[[["cstring"]],[["u8"],["vec",["u8"]]]]],[11,"into_result","frame_support::dispatch::result","",3,[[],["result"]]],[11,"from_ok","","",3,[[["t"]],["result"]]],[11,"from_error","","",3,[[["e"]],["result"]]],[11,"clone","frame_support::dispatch::fmt","",102,[[["self"]],["error"]]],[11,"clone","frame_support::dispatch::result","",99,[[["self"]],["iter"]]],[11,"clone","frame_support::dispatch::marker","",111,[[["self"]],["phantomdata"]]],[11,"clone","","",112,[[["self"]],["phantompinned"]]],[11,"clone","frame_support::dispatch::result","",3,[[["self"]],["result"]]],[11,"clone_from","","",3,[[["self"],["result"]]]],[11,"clone","","",101,[[["self"]],["intoiter"]]],[11,"clone","frame_support::dispatch::fmt","",103,[[["self"]],["arguments"]]],[11,"into_iter","frame_support::dispatch::result","Returns a consuming iterator over the possibly contained…",3,[[],["intoiter"]]],[11,"next_back","","",101,[[["self"]],["option"]]],[11,"next_back","","",99,[[["self"]],[["t"],["option"]]]],[11,"next_back","","",100,[[["self"]],[["t"],["option"]]]],[11,"eq","frame_support::dispatch::marker","",111,[[["phantomdata"],["self"]],["bool"]]],[11,"eq","frame_support::dispatch::fmt","",102,[[["error"],["self"]],["bool"]]],[11,"eq","frame_support::dispatch::result","",3,[[["self"],["result"]],["bool"]]],[11,"ne","","",3,[[["self"],["result"]],["bool"]]],[11,"eq","frame_support::dispatch::marker","",112,[[["phantompinned"],["self"]],["bool"]]],[11,"fmt","frame_support::dispatch::fmt","",102,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"sum","frame_support::dispatch::result","Takes each element in the `Iterator`: if it is an `Err`,…",3,[[["i"]],["result"]]],[11,"fmt","frame_support::dispatch::fmt","",4,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::result","",100,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::fmt","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::result","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::marker","",111,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::fmt","",102,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::marker","",112,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch::result","",99,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"cmp","","",3,[[["self"],["result"]],["ordering"]]],[11,"cmp","frame_support::dispatch::marker","",112,[[["phantompinned"],["self"]],["ordering"]]],[11,"cmp","frame_support::dispatch::fmt","",102,[[["error"],["self"]],["ordering"]]],[11,"cmp","frame_support::dispatch::marker","",111,[[["phantomdata"],["self"]],["ordering"]]],[11,"write_str","frame_support::dispatch::fmt","",109,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","",109,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","",109,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"hash","","",102,[[["self"],["__h"]]]],[11,"hash","frame_support::dispatch::marker","",111,[[["self"],["h"]]]],[11,"hash","frame_support::dispatch::result","",3,[[["self"],["__h"]]]],[11,"hash","frame_support::dispatch::marker","",112,[[["self"],["__h"]]]],[11,"product","frame_support::dispatch::result","Takes each element in the `Iterator`: if it is an `Err`,…",3,[[["i"]],["result"]]],[11,"default","frame_support::dispatch::marker","",111,[[],["phantomdata"]]],[11,"default","frame_support::dispatch::fmt","",102,[[],["error"]]],[11,"next","frame_support::dispatch::result","",100,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",100,[[["self"]]]],[11,"next","","",101,[[["self"]],["option"]]],[11,"size_hint","","",101,[[["self"]]]],[11,"next","","",99,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",99,[[["self"]]]],[11,"partial_cmp","frame_support::dispatch::marker","",111,[[["phantomdata"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","frame_support::dispatch::result","",3,[[["self"],["result"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["self"],["result"]],["bool"]]],[11,"le","","",3,[[["self"],["result"]],["bool"]]],[11,"gt","","",3,[[["self"],["result"]],["bool"]]],[11,"ge","","",3,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","frame_support::dispatch::marker","",112,[[["phantompinned"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","frame_support::dispatch::fmt","",102,[[["error"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"from_iter","frame_support::dispatch::result","Takes each element in the `Iterator`: if it is an `Err`,…",3,[[["i"]],["result"]]],[11,"deref","frame_support::dispatch","",110,[[["self"]]]],[11,"cmp","","",110,[[["vec"],["self"]],["ordering"]]],[11,"index","","",110,[[["i"],["self"]]]],[11,"default","","Creates an empty `Vec<T>`.",110,[[],["vec"]]],[11,"index_mut","","",110,[[["self"],["i"]]]],[11,"borrow","","",110,[[["self"]]]],[11,"from_iter","","",110,[[["i"]],["vec"]]],[11,"extend","","",110,[[["self"],["i"]]]],[11,"extend","","",110,[[["self"],["i"]]]],[11,"deref_mut","","",110,[[["self"]]]],[11,"from","","",110,[[["cow"]],["vec"]]],[11,"from","","Converts the given `String` to a vector `Vec` that holds…",110,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",110,[[],["vec"]]],[11,"from","","",110,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",110,[[["vecdeque"]],["vec"]]],[11,"from","","",110,[[["binaryheap"]],["vec"]]],[11,"from","","",110,[[],["vec"]]],[11,"from","","",110,[[["box"]],["vec"]]],[11,"fmt","","",110,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_mut","","",110,[[["self"]],["vec"]]],[11,"as_mut","","",110,[[["self"]]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",110,[[],["intoiter"]]],[11,"partial_cmp","","",110,[[["vec"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"eq","","",110,[[["self"]],["bool"]]],[11,"ne","","",110,[[["self"]],["bool"]]],[11,"eq","","",110,[[["self"]],["bool"]]],[11,"ne","","",110,[[["self"]],["bool"]]],[11,"eq","","",110,[[["vec"],["self"]],["bool"]]],[11,"ne","","",110,[[["vec"],["self"]],["bool"]]],[11,"eq","","",110,[[["self"]],["bool"]]],[11,"ne","","",110,[[["self"]],["bool"]]],[11,"eq","","",110,[[["self"]],["bool"]]],[11,"ne","","",110,[[["self"]],["bool"]]],[11,"borrow_mut","","",110,[[["self"]]]],[11,"hash","","",110,[[["self"],["h"]]]],[11,"clone","","",110,[[["self"]],["vec"]]],[11,"clone_from","","",110,[[["vec"],["self"]]]],[11,"drop","","",110,[[["self"]]]],[11,"as_ref","","",110,[[["self"]]]],[11,"as_ref","","",110,[[["self"]],["vec"]]],[11,"record","frame_support::dispatch::fmt","",103,[[["visit"],["self"],["field"]]]],[11,"record_debug","","",105,[[["debug"],["self"],["field"]]]],[11,"record_debug","","",107,[[["debug"],["self"],["field"]]]],[11,"deserialize","frame_support::dispatch::marker","",111,[[["d"]],["result"]]],[11,"into_deserializer","frame_support::dispatch","",110,[[]]],[11,"deserialize","frame_support::dispatch::result","",3,[[["d"]],[["result"],["result",["result"]]]]],[11,"deserialize","frame_support::dispatch","",110,[[["d"]],[["result",["vec"]],["vec"]]]],[11,"deserialize_in_place","","",110,[[["d"],["vec"]],["result"]]],[11,"deserialize","frame_support::dispatch::marker","",111,[[["d"]],[["phantomdata"],["result",["phantomdata"]]]]],[11,"serialize","frame_support::dispatch::fmt","",103,[[["s"],["self"]],["result"]]],[11,"serialize","frame_support::dispatch::marker","",111,[[["s"],["self"]],["result"]]],[11,"serialize","frame_support::dispatch::result","",3,[[["s"],["self"]],["result"]]],[11,"serialize","frame_support::dispatch","",110,[[["s"],["self"]],["result"]]],[11,"decode","frame_support::dispatch::result","",3,[[["i"]],[["result"],["result",["result","error"]],["error"]]]],[11,"decode","frame_support::dispatch::marker","",111,[[["i"]],[["result",["phantomdata","error"]],["phantomdata"],["error"]]]],[11,"decode","frame_support::dispatch","",110,[[["i"]],[["vec"],["result",["vec","error"]],["error"]]]],[11,"encode_to","frame_support::dispatch::marker","",111,[[["w"],["self"]]]],[11,"size_hint","frame_support::dispatch::result","",3,[[["self"]],["usize"]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"append","frame_support::dispatch","",110,[[["vec",["u8"]],["i"],["u8"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"append_or_new","","",110,[[["vec",["u8"]],["i"],["u8"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[11,"len","","",110,[[],[["error"],["result",["usize","error"]],["usize"]]]],[11,"consolidate","","",110,[[["vec"],["self"]]]],[11,"as_bytes_ref","","",110,[[["self"]]]],[11,"extend_from_slice","","",110,[[["self"]]]],[11,"push","","",110,[[["self"],["t"]]]],[11,"zeroize","","\"Best effort\" zeroization for `Vec`.",110,[[["self"]]]],[11,"from_ffi_value","","",110,[[["functioncontext"],["u64"]],[["result",["vec","string"]],["vec"],["string"]]]],[11,"into_ffi_value","","",110,[[["functioncontext"]],[["result",["u64","string"]],["u64"],["string"]]]],[11,"from","","",110,[[["unparsed"]],[["u8"],["vec",["u8"]]]]],[11,"clone","frame_support::storage::child","",35,[[["self"]],["childinfo"]]],[11,"compat","frame_support::dispatch::result","",3,[[],[["result",["compat"]],["compat",["error"]]]]],[11,"context","","",3,[[["d"]],[["context"],["result",["context"]]]]],[11,"with_context","","",3,[[["f"]],[["context"],["result",["context"]]]]],[11,"compat","","",3,[[],[["result",["compat"]],["compat"]]]],[11,"context","","",3,[[["d"]],[["context"],["result",["context"]]]]],[11,"with_context","","",3,[[["f"]],[["context"],["result",["context"]]]]],[11,"from_hex","frame_support::dispatch","",110,[[["t"]],[["result",["vec"]],["vec",["u8"]]]]],[11,"extend_from_slice","","",110,[[["self"]]]],[11,"size_of","","",110,[[["self"],["mallocsizeofops"]],["usize"]]],[11,"size_of","frame_support::dispatch::marker","",111,[[["self"],["mallocsizeofops"]],["usize"]]],[11,"size_of","frame_support::dispatch::result","",3,[[["self"],["mallocsizeofops"]],["usize"]]],[11,"decode","frame_support::event","",48,[[["decin"]],[["outereventmetadata"],["result",["outereventmetadata","error"]],["error"]]]],[11,"decode","frame_support::metadata","",24,[[["i"]],[["result",["decodedifferent","error"]],["error"],["decodedifferent"]]]],[11,"decode","frame_support::event","",47,[[["decin"]],[["eventmetadata"],["result",["eventmetadata","error"]],["error"]]]],[11,"decode","frame_support::metadata","",57,[[["decin"]],[["result",["storagehasher","error"]],["storagehasher"],["error"]]]],[11,"decode","frame_support::dispatch","",25,[[["decin"]],[["result",["functionargumentmetadata","error"]],["error"],["functionargumentmetadata"]]]],[11,"decode","frame_support::metadata","",56,[[["decin"]],[["result",["storageentrymodifier","error"]],["storageentrymodifier"],["error"]]]],[11,"decode","","",55,[[["decin"]],[["storageentrytype"],["result",["storageentrytype","error"]],["error"]]]],[11,"decode","","",52,[[["decin"]],[["runtimemetadataprefixed"],["result",["runtimemetadataprefixed","error"]],["error"]]]],[11,"decode","","",51,[[["decin"]],[["error"],["result",["modulemetadata","error"]],["modulemetadata"]]]],[11,"decode","frame_support::dispatch","",26,[[["decin"]],[["moduleconstantmetadata"],["error"],["result",["moduleconstantmetadata","error"]]]]],[11,"decode","","",30,[[["decin"]],[["error"],["result",["errormetadata","error"]],["errormetadata"]]]],[11,"decode","frame_support::metadata","",50,[[["decin"]],[["runtimemetadata"],["result",["runtimemetadata","error"]],["error"]]]],[11,"decode","","",53,[[["decin"]],[["result",["storageentrymetadata","error"]],["error"],["storageentrymetadata"]]]],[11,"decode","","",54,[[["decin"]],[["result",["storagemetadata","error"]],["storagemetadata"],["error"]]]],[11,"decode","frame_support::dispatch","",23,[[["decin"]],[["result",["functionmetadata","error"]],["functionmetadata"],["error"]]]],[11,"fmt","frame_support::metadata","",52,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::event","",48,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",51,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",55,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",57,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch","",30,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",49,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch","",26,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",24,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",56,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch","",23,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",50,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",54,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::dispatch","",25,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",53,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::event","",47,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","frame_support::metadata","",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"into","","",52,[[],["opaquemetadata"]]],[11,"clone","","",56,[[["self"]],["storageentrymodifier"]]],[11,"clone","frame_support::event","",47,[[["self"]],["eventmetadata"]]],[11,"clone","frame_support::metadata","",57,[[["self"]],["storagehasher"]]],[11,"clone","","",28,[[["self"]],["defaultbytegetter"]]],[11,"clone","frame_support::dispatch","",30,[[["self"]],["errormetadata"]]],[11,"clone","frame_support::metadata","",51,[[["self"]],["modulemetadata"]]],[11,"clone","","",49,[[["self"]],["fnencode"]]],[11,"clone","","",54,[[["self"]],["storagemetadata"]]],[11,"clone","frame_support::dispatch","",25,[[["self"]],["functionargumentmetadata"]]],[11,"clone","frame_support::metadata","",24,[[["self"]],["decodedifferent"]]],[11,"clone","","",55,[[["self"]],["storageentrytype"]]],[11,"clone","frame_support::event","",48,[[["self"]],["outereventmetadata"]]],[11,"clone","frame_support::dispatch","",26,[[["self"]],["moduleconstantmetadata"]]],[11,"clone","","",23,[[["self"]],["functionmetadata"]]],[11,"clone","frame_support::metadata","",53,[[["self"]],["storageentrymetadata"]]],[11,"eq","frame_support::dispatch","",30,[[["errormetadata"],["self"]],["bool"]]],[11,"ne","","",30,[[["errormetadata"],["self"]],["bool"]]],[11,"eq","frame_support::metadata","",54,[[["self"],["storagemetadata"]],["bool"]]],[11,"ne","","",54,[[["self"],["storagemetadata"]],["bool"]]],[11,"eq","","",49,[[["self"],["fnencode"]],["bool"]]],[11,"eq","","",55,[[["storageentrytype"],["self"]],["bool"]]],[11,"ne","","",55,[[["storageentrytype"],["self"]],["bool"]]],[11,"eq","","",51,[[["self"],["modulemetadata"]],["bool"]]],[11,"ne","","",51,[[["self"],["modulemetadata"]],["bool"]]],[11,"eq","frame_support::event","",48,[[["outereventmetadata"],["self"]],["bool"]]],[11,"ne","","",48,[[["outereventmetadata"],["self"]],["bool"]]],[11,"eq","frame_support::metadata","",52,[[["runtimemetadataprefixed"],["self"]],["bool"]]],[11,"ne","","",52,[[["runtimemetadataprefixed"],["self"]],["bool"]]],[11,"eq","frame_support::dispatch","",25,[[["self"],["functionargumentmetadata"]],["bool"]]],[11,"ne","","",25,[[["self"],["functionargumentmetadata"]],["bool"]]],[11,"eq","frame_support::metadata","",50,[[["runtimemetadata"],["self"]],["bool"]]],[11,"ne","","",50,[[["runtimemetadata"],["self"]],["bool"]]],[11,"eq","","",28,[[["defaultbytegetter"],["self"]],["bool"]]],[11,"eq","frame_support::dispatch","",23,[[["self"],["functionmetadata"]],["bool"]]],[11,"ne","","",23,[[["self"],["functionmetadata"]],["bool"]]],[11,"eq","frame_support::metadata","",53,[[["self"],["storageentrymetadata"]],["bool"]]],[11,"ne","","",53,[[["self"],["storageentrymetadata"]],["bool"]]],[11,"eq","frame_support::dispatch","",26,[[["self"],["moduleconstantmetadata"]],["bool"]]],[11,"ne","","",26,[[["self"],["moduleconstantmetadata"]],["bool"]]],[11,"eq","frame_support::metadata","",24,[[["self"],["decodedifferent"]],["bool"]]],[11,"eq","","",57,[[["self"],["storagehasher"]],["bool"]]],[11,"eq","frame_support::event","",47,[[["self"],["eventmetadata"]],["bool"]]],[11,"ne","","",47,[[["self"],["eventmetadata"]],["bool"]]],[11,"eq","frame_support::metadata","",56,[[["self"],["storageentrymodifier"]],["bool"]]],[11,"serialize","","",52,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::dispatch","",30,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::metadata","",49,[[["s"],["self"]],["result"]]],[11,"serialize","","",24,[[["s"],["self"]],["result"]]],[11,"serialize","","",57,[[["self"],["__s"]],["result"]]],[11,"serialize","","",50,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::dispatch","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::event","",47,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::metadata","",55,[[["self"],["__s"]],["result"]]],[11,"serialize","","",53,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::dispatch","",26,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::metadata","",56,[[["self"],["__s"]],["result"]]],[11,"serialize","","",54,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::event","",48,[[["self"],["__s"]],["result"]]],[11,"serialize","frame_support::metadata","",51,[[["self"],["__s"]],["result"]]],[11,"serialize","","",28,[[["s"],["self"]],["result"]]],[11,"serialize","frame_support::dispatch","",25,[[["self"],["__s"]],["result"]]],[11,"encode_to","","",23,[[["self"],["encout"]]]],[11,"encode_to","frame_support::event","",48,[[["self"],["encout"]]]],[11,"encode_to","frame_support::metadata","",57,[[["self"],["encout"]]]],[11,"encode_to","frame_support::dispatch","",26,[[["self"],["encout"]]]],[11,"encode_to","frame_support::event","",47,[[["self"],["encout"]]]],[11,"encode_to","frame_support::metadata","",54,[[["self"],["encout"]]]],[11,"encode_to","","",53,[[["self"],["encout"]]]],[11,"encode_to","","",51,[[["self"],["encout"]]]],[11,"encode_to","","",24,[[["w"],["self"]]]],[11,"encode_to","frame_support::dispatch","",25,[[["self"],["encout"]]]],[11,"encode_to","frame_support::metadata","",50,[[["self"],["encout"]]]],[11,"encode_to","","",28,[[["w"],["self"]]]],[11,"encode_to","frame_support::dispatch","",30,[[["self"],["encout"]]]],[11,"encode_to","frame_support::metadata","",49,[[["w"],["self"]]]],[11,"encode_to","","",55,[[["self"],["encout"]]]],[11,"encode_to","","",52,[[["self"],["encout"]]]],[11,"encode_to","","",56,[[["self"],["encout"]]]],[11,"eq","frame_support::dispatch","",32,[[["dispatcherror"],["self"]],["bool"]]],[11,"ne","","",32,[[["dispatcherror"],["self"]],["bool"]]],[11,"from","","",32,[[["str"]],["dispatcherror"]]],[11,"from","","",32,[[["badorigin"]],["dispatcherror"]]],[11,"from","","",32,[[["lookuperror"]],["dispatcherror"]]],[11,"from","frame_support::dispatch::result","",3,[[["dispatcherror"]],[["dispatcherror"],["result",["dispatcherror"]]]]],[11,"encode_to","frame_support::dispatch","",32,[[["self"],["encout"]]]],[11,"print","","",32,[[["self"]]]],[11,"serialize","","",32,[[["self"],["__s"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"into","","",32,[[],["str"]]],[11,"clone","","",32,[[["self"]],["dispatcherror"]]],[11,"decode","","",32,[[["decin"]],[["dispatcherror"],["error"],["result",["dispatcherror","error"]]]]],[11,"on_nonzero_unbalanced","frame_support::traits","",116,[[["i"]]]],[11,"weigh_data","frame_support::weights","",85,[[["self"],["t"]],["weight"]]],[11,"classify_dispatch","","",85,[[["self"],["t"]],["dispatchclass"]]],[11,"pays_fee","","",85,[[["self"]],["bool"]]],[11,"from","frame_support::traits","Create a mask from a single flag.",82,[[["withdrawreason"]],["self"]]],[11,"from","frame_support::weights","",84,[[["simpledispatchinfo"]],["self"]]],[11,"next","frame_support::storage::generator","",115,[[["self"]],["option"]]],[11,"next","frame_support::storage","",114,[[["self"]],["option"]]],[11,"clone","frame_support::traits","",59,[[["self"]],["existencerequirement"]]],[11,"clone","","",61,[[["self"]],["withdrawreason"]]],[11,"clone","","",82,[[["self"]],["withdrawreasons"]]],[11,"clone","frame_support::weights","",84,[[["self"]],["dispatchclass"]]],[11,"clone","","",83,[[["self"]],["dispatchinfo"]]],[11,"clone","","",85,[[["self"]],["simpledispatchinfo"]]],[11,"clone","frame_support","",98,[[["self"]],["void"]]],[11,"default","frame_support::debug","",1,[[],["writer"]]],[11,"default","frame_support::storage::generator","",36,[[],["self"]]],[11,"default","frame_support::weights","",84,[[],["self"]]],[11,"default","","",83,[[],["dispatchinfo"]]],[11,"default","","",85,[[],["self"]]],[11,"cmp","frame_support::traits","",61,[[["withdrawreason"],["self"]],["ordering"]]],[11,"cmp","","",82,[[["withdrawreasons"],["self"]],["ordering"]]],[11,"eq","","",59,[[["self"],["existencerequirement"]],["bool"]]],[11,"eq","","",61,[[["withdrawreason"],["self"]],["bool"]]],[11,"eq","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"ne","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"eq","frame_support::weights","",84,[[["self"],["dispatchclass"]],["bool"]]],[11,"eq","","",83,[[["self"],["dispatchinfo"]],["bool"]]],[11,"ne","","",83,[[["self"],["dispatchinfo"]],["bool"]]],[11,"eq","frame_support","",98,[[["self"],["void"]],["bool"]]],[11,"partial_cmp","frame_support::traits","",61,[[["withdrawreason"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",82,[[["withdrawreasons"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"le","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"gt","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"ge","","",82,[[["withdrawreasons"],["self"]],["bool"]]],[11,"deref","","Deref to the internal type.",82,[[["self"]],["i8"]]],[11,"deref","","Deref to the internal type.",61,[[["self"]],["i8"]]],[11,"fmt","","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","frame_support::weights","",84,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"fmt","frame_support","",98,[[["self"],["formatter"]],["result"]]],[11,"not","frame_support::traits","",82,[[]]],[11,"not","","",61,[[]]],[11,"bitand","","",82,[[["withdrawreasons"]]]],[11,"bitand","","",82,[[["withdrawreason"]]]],[11,"bitand","","",61,[[["withdrawreasons"]]]],[11,"bitand","","",61,[[["withdrawreason"]]]],[11,"bitor","","",82,[[["withdrawreasons"]]]],[11,"bitor","","",82,[[["withdrawreason"]]]],[11,"bitor","","",61,[[["withdrawreasons"]]]],[11,"bitor","","",61,[[["withdrawreason"]]]],[11,"bitxor","","",82,[[["withdrawreasons"]]]],[11,"bitxor","","",82,[[["withdrawreason"]]]],[11,"bitxor","","",61,[[["withdrawreasons"]]]],[11,"bitxor","","",61,[[["withdrawreason"]]]],[11,"bitand_assign","","",82,[[["withdrawreasons"],["self"]]]],[11,"bitand_assign","","",82,[[["self"],["withdrawreason"]]]],[11,"bitor_assign","","",82,[[["withdrawreasons"],["self"]]]],[11,"bitor_assign","","",82,[[["self"],["withdrawreason"]]]],[11,"bitxor_assign","","",82,[[["withdrawreasons"],["self"]]]],[11,"bitxor_assign","","",82,[[["self"],["withdrawreason"]]]],[11,"hash","","",61,[[["self"],["__h"]]]],[11,"hash","","",82,[[["self"],["__h"]]]],[11,"write_str","frame_support::debug","",1,[[["str"],["self"]],["result"]]],[11,"serialize","frame_support::weights","",84,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",84,[[["__d"]],["result"]]],[11,"encode_to","frame_support::storage::generator","",36,[[["self"],["encout"]]]],[11,"encode_to","frame_support::traits","",61,[[["self"],["encout"]]]],[11,"encode_to","","",82,[[["self"],["encout"]]]],[11,"encode","","",82,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",82,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","frame_support::weights","",84,[[["self"],["encout"]]]],[11,"encode_to","","",83,[[["self"],["encout"]]]],[11,"decode","frame_support::storage::generator","",36,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","frame_support::traits","",61,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",82,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","frame_support::weights","",84,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",83,[[["decin"]],[["result",["error"]],["error"]]]],[11,"enabled","frame_support::debug","",2,[[["self"],["metadata"]],["bool"]]],[11,"log","","",2,[[["record"],["self"]]]],[11,"flush","","",2,[[["self"]]]],[11,"is_ok","frame_support::dispatch::result","Returns `true` if the result is [`Ok`].",3,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",3,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",3,[[["self"],["u"]],["bool"]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",3,[[["f"],["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",3,[[],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",3,[[],["option"]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",3,[[["self"]],[["result"],["t"],["e"]]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",3,[[["self"]],[["e"],["t"],["result"]]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",3,[[["f"]],["result"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",3,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",3,[[["d"],["f"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",3,[[["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",3,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",3,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",3,[[["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",3,[[["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",3,[[["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",3,[[["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else,…",3,[[["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If…",3,[[["f"]],["t"]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",3,[[],["result"]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",3,[[],["result"]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",3,[[],["result"]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",3,[[],["result"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",3,[[],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",3,[[["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",3,[[],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",3,[[["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",3,[[],["t"]]],[11,"as_deref_ok","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",3,[[["self"]],[["e"],["result"]]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",3,[[["self"]],[["t"],["result"]]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",3,[[["self"]],["result"]]],[11,"as_deref_mut_ok","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",3,[[["self"]],[["result"],["e"]]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",3,[[["self"]],[["result"],["t"]]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",3,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",3,[[],[["result"],["option",["result"]]]]],[11,"entry","frame_support::dispatch::fmt","Adds a new entry to the list output.",104,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",104,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",104,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the map output.",105,[[["self"],["debug"]],["debugmap"]]],[11,"key","","Adds the key part of a new entry to the map output.",105,[[["self"],["debug"]],["debugmap"]]],[11,"value","","Adds the value part of a new entry to the map output.",105,[[["self"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",105,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",105,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the set output.",106,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",106,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",106,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated struct output.",107,[[["str"],["self"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",107,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",108,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",108,[[["self"]],[["result",["error"]],["error"]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",109,[[["str"],["self"],["bool"]],[["result",["error"]],["error"]]]],[11,"pad","","This function takes a string slice and emits it to the…",109,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",109,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",109,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"flags","","Flags for formatting",109,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",109,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",109,[[["self"]],[["alignment"],["option",["alignment"]]]]],[11,"width","","Optionally specified integer width that the output should…",109,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",109,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",109,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",109,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",109,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",109,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",109,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",109,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",109,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",109,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",109,[[["self"]],["debugmap"]]],[11,"new","frame_support::dispatch","Constructs a new, empty `Vec<T>`.",110,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",110,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",110,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",110,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",110,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",110,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",110,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",110,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",110,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",110,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",110,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",110,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",110,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",110,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",110,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",110,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",110,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",110,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",110,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",110,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",110,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",110,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",110,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",110,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",110,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",110,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",110,[[["self"],["vec"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",110,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",110,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",110,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",110,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",110,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",110,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",110,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",110,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",110,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",110,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",110,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",110,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",110,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",110,[[["self"],["f"]],["drainfilter"]]],[11,"stripped","","Return the same error but without the attached message.",32,[[],["dispatcherror"]]],[11,"new_default","frame_support::storage::child","Instantiates information for a default child trie.",35,[[],["childinfo"]]],[11,"to_owned","","Instantiates a owned version of this child info.",35,[[["self"]],["ownedchildinfo"]]],[11,"resolve_child_info","","Create child info from a linear byte packed value and a…",35,[[["u32"]],[["childinfo"],["option",["childinfo"]]]]],[11,"info","","Return a single byte vector containing packed child info…",35,[[["self"]]]],[11,"keyspace","","Return byte sequence (keyspace) that can be use by…",35,[[["self"]]]],[11,"storage_linked_map_final_key","frame_support::storage::generator","Generate the full key used in top storage.",37,[[["keyarg"]],[["vec",["u8"]],["u8"]]]],[11,"storage_linked_map_final_head_key","","Generate the hashed key for head",37,[[],[["vec",["u8"]],["u8"]]]],[11,"storage_linked_map_final_key","","Generate the full key used in top storage.",38,[[["k"]],[["vec",["u8"]],["u8"]]]],[11,"storage_linked_map_final_head_key","","Generate the full key used in top storage to store the…",38,[[],[["vec",["u8"]],["u8"]]]],[11,"storage_map_final_key","","Generate the full key used in top storage.",39,[[["keyarg"]],[["vec",["u8"]],["u8"]]]],[11,"storage_double_map_final_key1","","Generate the first part of the key used in top storage.",40,[[["karg1"]],[["vec",["u8"]],["u8"]]]],[11,"storage_double_map_final_key","","Generate the full key used in top storage.",40,[[["karg1"],["karg2"]],[["vec",["u8"]],["u8"]]]],[11,"storage_value_final_key","","Generate the full key used in top storage.",41,[[]]]],"p":[[8,"Printable"],[3,"Writer"],[3,"RuntimeLogger"],[4,"Result"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[8,"Clone"],[8,"PartialEq"],[8,"Decode"],[8,"Encode"],[8,"Input"],[8,"Output"],[8,"HasCompact"],[8,"EncodeAsRef"],[3,"FunctionMetadata"],[4,"DecodeDifferent"],[3,"FunctionArgumentMetadata"],[3,"ModuleConstantMetadata"],[8,"DefaultByte"],[3,"DefaultByteGetter"],[8,"ModuleErrorMetadata"],[3,"ErrorMetadata"],[8,"Dispatchable"],[4,"DispatchError"],[8,"Callable"],[8,"IsSubType"],[4,"ChildInfo"],[3,"Linkage"],[8,"StorageLinkedMap"],[8,"LinkedMapKeyFormat"],[8,"StorageMap"],[8,"StorageDoubleMap"],[8,"StorageValue"],[8,"StorageValue"],[8,"StorageMap"],[8,"StorageLinkedMap"],[8,"StorageDoubleMap"],[8,"StoragePrefixedMap"],[3,"EventMetadata"],[3,"OuterEventMetadata"],[3,"FnEncode"],[4,"RuntimeMetadata"],[3,"ModuleMetadata"],[3,"RuntimeMetadataPrefixed"],[3,"StorageEntryMetadata"],[3,"StorageMetadata"],[4,"StorageEntryType"],[4,"StorageEntryModifier"],[4,"StorageHasher"],[4,"UpdateBalanceOutcome"],[4,"ExistenceRequirement"],[4,"SignedImbalance"],[4,"WithdrawReason"],[8,"Len"],[8,"Get"],[8,"Contains"],[8,"OnFreeBalanceZero"],[8,"FindAuthor"],[8,"VerifySeal"],[8,"KeyOwnerProofSystem"],[8,"OnUnbalanced"],[8,"TryDrop"],[8,"Imbalance"],[8,"Currency"],[8,"ReservableCurrency"],[8,"LockableCurrency"],[8,"VestingCurrency"],[8,"Time"],[8,"ChangeMembers"],[8,"InitializeMembers"],[8,"Randomness"],[8,"ValidatorRegistration"],[8,"ModuleToIndex"],[3,"WithdrawReasons"],[3,"DispatchInfo"],[4,"DispatchClass"],[4,"SimpleDispatchInfo"],[8,"WeighData"],[8,"ClassifyDispatch"],[8,"WeighBlock"],[8,"PaysFee"],[8,"GetDispatchInfo"],[8,"Hashable"],[3,"Twox256"],[3,"Twox128"],[3,"Blake2_256"],[3,"Blake2_128"],[3,"Twox64Concat"],[3,"Blake2_128Concat"],[4,"Void"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"Vec"],[3,"PhantomData"],[3,"PhantomPinned"],[4,"Never"],[3,"PrefixIterator"],[3,"Enumerator"],[3,"SplitTwoWays"]]};
searchIndex["frame_support_procedural"] = {"doc":"Proc macro of Support code for the runtime.","i":[[14,"decl_storage","frame_support_procedural","Declares strongly-typed wrappers around codec-compatible…",null,null],[14,"construct_runtime","","Construct a runtime, with the given name and the given…",null,null]],"p":[]};
searchIndex["frame_support_procedural_tools"] = {"doc":"Proc macro helpers for procedural macros","i":[[24,"Parse","frame_support_procedural_tools","self defined parsing struct or enum. not meant for any…",null,null],[24,"ToTokens","","self defined parsing struct or enum. not meant for any…",null,null],[5,"generate_crate_access","","Generates the access to the `frame-support` crate.",null,[[["str"]],["tokenstream"]]],[5,"generate_hidden_includes","","Generates the hidden includes that are required to make…",null,[[["str"]],["tokenstream"]]],[5,"clean_type_string","","",null,[[["str"]],["string"]]],[0,"syn_ext","","Extension to syn types, mainly for parsing",null,null],[3,"StopParse","frame_support_procedural_tools::syn_ext","stop parsing here getting remaining token as content Warn…",null,null],[12,"inner","","",0,null],[3,"Braces","","",null,null],[12,"token","","",1,null],[12,"content","","",1,null],[3,"Brackets","","",null,null],[12,"token","","",2,null],[12,"content","","",2,null],[3,"Parens","","",null,null],[12,"token","","",3,null],[12,"content","","",3,null],[3,"PunctuatedInner","","",null,null],[12,"inner","","",4,null],[12,"variant","","",4,null],[3,"NoTrailing","","",null,null],[3,"Trailing","","",null,null],[3,"Meta","","Note that syn Meta is almost fine for use case (lacks only…",null,null],[12,"inner","","",5,null],[3,"OuterAttributes","","",null,null],[12,"inner","","",6,null],[3,"Opt","","",null,null],[12,"inner","","",7,null],[5,"extract_type_option","","",null,[[["type"]],[["option",["type"]],["type"]]]],[5,"type_contains_ident","","Check if a `Type` contains the given `Ident`.",null,[[["type"],["ident"]],["bool"]]],[5,"expr_contains_ident","","Check if a `Expr` contains the given `Ident`.",null,[[["ident"],["expr"]],["bool"]]],[6,"Punctuated","","",null,null],[6,"PunctuatedTrailing","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["notrailing"]]],[11,"clone","","",9,[[["self"]],["trailing"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","","",5,[[["self"]],["meta"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"to_tokens","","",0,[[["tokenstream"],["self"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"parse","","",0,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",3,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",7,[[["parsestream"]],["result"]]]],"p":[[3,"StopParse"],[3,"Braces"],[3,"Brackets"],[3,"Parens"],[3,"PunctuatedInner"],[3,"Meta"],[3,"OuterAttributes"],[3,"Opt"],[3,"NoTrailing"],[3,"Trailing"]]};
searchIndex["frame_support_procedural_tools_derive"] = {"doc":"Use to derive parsing for parsing struct.","i":[[24,"Parse","frame_support_procedural_tools_derive","self defined parsing struct or enum. not meant for any…",null,null],[24,"ToTokens","","self defined parsing struct or enum. not meant for any…",null,null]],"p":[]};
searchIndex["frame_system"] = {"doc":"System Module","i":[[3,"Module","frame_system","",null,null],[3,"EventRecord","","Record of an event happening.",null,null],[12,"phase","","The phase of the block it happened in.",0,null],[12,"event","","The event itself.",0,null],[12,"topics","","The list of the topics this event has.",0,null],[3,"GenesisConfig","","",null,null],[12,"changes_trie_config","","",1,null],[12,"code","","",1,null],[3,"AccountNonce","","Extrinsics nonce for accounts.",null,null],[3,"BlockHash","","Map of block numbers to block hashes.",null,null],[3,"EnsureRoot","","",null,null],[3,"EnsureSigned","","",null,null],[3,"EnsureSignedBy","","",null,null],[3,"EnsureNone","","",null,null],[3,"EnsureNever","","",null,null],[3,"CheckWeight","","resource limit check.",null,null],[3,"CheckNonce","","Nonce check and increment to give replay protection for…",null,null],[3,"CheckEra","","Check for transaction mortality.",null,null],[3,"CheckGenesis","","Nonce check and increment to give replay protection for…",null,null],[3,"CheckVersion","","Ensure the runtime version registered in the transaction…",null,null],[3,"ChainContext","","",null,null],[4,"Call","","Dispatchable calls.",null,null],[13,"fill_block","","A big dispatch that will disallow any other transaction to…",2,null],[13,"remark","","Make some on-chain remark.",2,null],[13,"set_heap_pages","","Set the number of pages in the WebAssembly environment's…",2,null],[13,"set_code","","Set the new code.",2,null],[13,"set_storage","","Set some items of storage.",2,null],[13,"kill_storage","","Kill some items from storage.",2,null],[13,"kill_prefix","","Kill all storage items with a key that starts with the…",2,null],[4,"Phase","","A phase of a block's execution.",null,null],[13,"ApplyExtrinsic","","Applying an extrinsic.",3,null],[13,"Finalization","","The end.",3,null],[4,"Event","","Events for this module.",null,null],[13,"ExtrinsicSuccess","","An extrinsic completed successfully.",4,null],[13,"ExtrinsicFailed","","An extrinsic failed.",4,null],[4,"Error","","Error for the System module",null,null],[4,"RawOrigin","","Origin for the System module.",null,null],[13,"Root","","The system itself ordained this dispatch to happen: this…",5,null],[13,"Signed","","It is signed by some public key and we provide the…",5,null],[13,"None","","It is signed by nobody, can be either: * included and…",5,null],[5,"extrinsics_root","","Compute the trie root of a list of extrinsics.",null,[[]]],[5,"extrinsics_data_root","","Compute the trie root of a list of extrinsics.",null,[[["vec",["u8"]],["vec",["vec"]]]]],[5,"ensure_signed","","Ensure that the origin `o` represents a signed extrinsic…",null,[[["outerorigin"]],[["result",["badorigin"]],["badorigin"]]]],[5,"ensure_root","","Ensure that the origin `o` represents the root. Returns…",null,[[["outerorigin"]],[["result",["badorigin"]],["badorigin"]]]],[5,"ensure_none","","Ensure that the origin `o` represents an unsigned…",null,[[["outerorigin"]],[["result",["badorigin"]],["badorigin"]]]],[0,"offchain","","Module helpers for offchain calls.",null,null],[3,"TransactionSubmitter","frame_system::offchain","A default type used to submit transactions to the pool.",null,null],[8,"Signer","","A trait responsible for signing a payload using given…",null,null],[10,"sign","","Sign any encodable payload with given account and produce…",6,[[["public"],["payload"]],["option"]]],[8,"CreateTransaction","","Creates a runtime-specific signed transaction.",null,null],[16,"Public","","A `Public` key representing a particular `AccountId`.",7,null],[16,"Signature","","A `Signature` generated by the `Signer`.",7,null],[10,"create_transaction","","Attempt to create signed extrinsic data that encodes call…",7,[[],["option"]]],[8,"SubmitSignedTransaction","","A trait to sign and submit transactions in offchain calls.",null,null],[16,"Extrinsic","","Unchecked extrinsic type.",8,null],[16,"CreateTransaction","","A runtime-specific type to produce signed data for the…",8,null],[16,"Signer","","A type used to sign transactions created using…",8,null],[11,"sign_and_submit","","Sign given call and submit it to the transaction pool.",8,[[],["result"]]],[8,"SubmitUnsignedTransaction","","A trait to submit unsigned transactions in off-chain calls.",null,null],[16,"Extrinsic","","Unchecked extrinsic type.",9,null],[11,"submit_unsigned","","Submit given call to the transaction pool as unsigned…",9,[[],["result"]]],[6,"DigestOf","frame_system","",null,null],[6,"DigestItemOf","","",null,null],[6,"Key","","",null,null],[6,"KeyValue","","",null,null],[6,"Origin","","Exposed trait-generic origin type.",null,null],[8,"OnNewAccount","","Handler for when a new account has been created.",null,null],[10,"on_new_account","","A new account `who` has been registered.",10,[[["accountid"]]]],[8,"IsDeadAccount","","Determiner to say whether a given account is unused.",null,null],[10,"is_dead_account","","Is the given account dead?",11,[[["accountid"]],["bool"]]],[8,"Trait","","",null,null],[16,"Origin","","The aggregated `Origin` type used by dispatchable calls.",12,null],[16,"Call","","The aggregated `Call` type.",12,null],[16,"Index","","Account index (aka nonce) type. This stores the number of…",12,null],[16,"BlockNumber","","The block number type used by the runtime.",12,null],[16,"Hash","","The output of the `Hashing` function.",12,null],[16,"Hashing","","The hashing system (algorithm) being used in the runtime…",12,null],[16,"AccountId","","The user account identifier type for the runtime.",12,null],[16,"Lookup","","Converting trait to take a source type and convert to…",12,null],[16,"Header","","The block header.",12,null],[16,"Event","","The aggregated event type of the runtime.",12,null],[16,"BlockHashCount","","Maximum number of block number to block hash mappings to…",12,null],[16,"MaximumBlockWeight","","The maximum weight of a block.",12,null],[16,"MaximumBlockLength","","The maximum length of a block (in bytes).",12,null],[16,"AvailableBlockRatio","","The portion of the block that is available to normal…",12,null],[16,"Version","","Get the chain's current version.",12,null],[16,"ModuleToIndex","","Convert a module to its index in the runtime.",12,null],[11,"set_code","","Set the new code.",13,[[["vec",["u8"]],["u8"]],["dispatchresult"]]],[11,"account_nonce","","Extrinsics nonce for accounts.",13,[[["encodelike"]]]],[11,"block_hash","","Map of block numbers to block hashes.",13,[[["encodelike"]]]],[11,"extrinsic_data","","Extrinsics data for the current block (maps an extrinsic's…",13,[[["encodelike",["u32"]],["u32"]],[["vec",["u8"]],["u8"]]]],[11,"block_number","","The current block number being processed. Set by…",13,[[]]],[11,"parent_hash","","Hash of the previous block.",13,[[]]],[11,"extrinsics_root","","Extrinsics root of the current block, also part of the…",13,[[]]],[11,"digest","","Digest of the current block, also part of the block header.",13,[[],["digestof"]]],[11,"events","","Events deposited for the current block.",13,[[],[["vec",["eventrecord"]],["eventrecord"]]]],[11,"event_count","","The number of events in the `Events<T>` list.",13,[[],["u32"]]],[11,"event_topics","","",13,[[["karg1"],["karg2"]],["vec"]]],[11,"build_storage","","",1,[[["self"]],[["string"],["storage"],["result",["storage","string"]]]]],[11,"assimilate_storage","","Assimilate the storage for this module into pre-existing…",1,[[["self"],["storage"]],[["string"],["result",["string"]]]]],[11,"deposit_event","","Deposits an event into this block's event record.",13,[[]]],[11,"deposit_event_indexed","","Deposits an event into this block's event record adding…",13,[[]]],[11,"extrinsic_index","","Gets the index of extrinsic that is currently executing.",13,[[],[["option",["u32"]],["u32"]]]],[11,"extrinsic_count","","Gets extrinsics count.",13,[[],["u32"]]],[11,"all_extrinsics_weight","","Gets a total weight of all executed extrinsics.",13,[[],["weight"]]],[11,"all_extrinsics_len","","",13,[[],["u32"]]],[11,"register_extra_weight_unchecked","","Inform the system module of some additional weight that…",13,[[["weight"]]]],[11,"initialize","","Start the execution of a particular block.",13,[[["digestof"]]]],[11,"finalize","","Remove temporary \"environment\" entries in storage.",13,[[]]],[11,"deposit_log","","Deposits a log and ensures it matches the block's log data.",13,[[["digestitemof"]]]],[11,"externalities","","Get the basic externalities for this module, useful for…",13,[[],["testexternalities"]]],[11,"set_block_number","","Set the block number to something in particular. Can be…",13,[[]]],[11,"set_extrinsic_index","","Sets the index of extrinsic that is currently executing.",13,[[["u32"]]]],[11,"set_parent_hash","","Set the parent hash number to something in particular. Can…",13,[[]]],[11,"set_block_limits","","Set the current block weight. This should only be used in…",13,[[["usize"],["weight"]]]],[11,"runtime_version","","Return the chain's current runtime version.",13,[[],["runtimeversion"]]],[11,"inc_account_nonce","","Increment a particular account's nonce by 1.",13,[[]]],[11,"note_extrinsic","","Note what the extrinsic data of the current extrinsic…",13,[[["vec",["u8"]],["u8"]]]],[11,"note_applied_extrinsic","","To be called immediately after an extrinsic has been…",13,[[["dispatchinfo"],["dispatchoutcome"],["u32"]]]],[11,"note_finished_extrinsics","","To be called immediately after `note_applied_extrinsic` of…",13,[[]]],[11,"derive_extrinsics","","Remove all extrinsic data and save the extrinsics trie root.",13,[[]]],[11,"new","","Creates new `SignedExtension` to check weight of the…",14,[[],["self"]]],[11,"from","","utility constructor. Used only in client/factory code.",15,[[],["self"]]],[11,"from","","utility constructor. Used only in client/factory code.",16,[[["era"]],["self"]]],[11,"new","","Creates new `SignedExtension` to check genesis hash.",17,[[],["self"]]],[11,"new","","Create new `SignedExtension` to check runtime version.",18,[[],["self"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",13,[[],["t"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",0,[[],["t"]]],[11,"vzip","","",0,[[],["v"]]],[11,"blake2_128","","",0,[[["self"]]]],[11,"blake2_256","","",0,[[["self"]]]],[11,"blake2_128_concat","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",0,[[["self"]]]],[11,"twox_256","","",0,[[["self"]]]],[11,"twox_64_concat","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",1,[[],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"unchecked_into","","",19,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",19,[[],["t"]]],[11,"vzip","","",19,[[],["v"]]],[11,"hashed_key_for","","",19,[[["keyarg"]],[["u8"],["vec",["u8"]]]]],[11,"swap","","",19,[[["keyarg1"],["keyarg2"]]]],[11,"exists","","",19,[[["keyarg"]],["bool"]]],[11,"get","","",19,[[["keyarg"]]]],[11,"insert","","",19,[[["valarg"],["keyarg"]]]],[11,"remove","","",19,[[["keyarg"]]]],[11,"mutate","","",19,[[["f"],["keyarg"]],["r"]]],[11,"take","","",19,[[["keyarg"]]]],[11,"append","","",19,[[["items"],["keyarg"]],[["str"],["result",["str"]]]]],[11,"append_or_insert","","",19,[[["items"],["keyarg"]]]],[11,"decode_len","","",19,[[["keyarg"]],[["str"],["usize"],["result",["usize","str"]]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"unchecked_into","","",20,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",20,[[],["t"]]],[11,"vzip","","",20,[[],["v"]]],[11,"hashed_key_for","","",20,[[["keyarg"]],[["u8"],["vec",["u8"]]]]],[11,"swap","","",20,[[["keyarg1"],["keyarg2"]]]],[11,"exists","","",20,[[["keyarg"]],["bool"]]],[11,"get","","",20,[[["keyarg"]]]],[11,"insert","","",20,[[["valarg"],["keyarg"]]]],[11,"remove","","",20,[[["keyarg"]]]],[11,"mutate","","",20,[[["f"],["keyarg"]],["r"]]],[11,"take","","",20,[[["keyarg"]]]],[11,"append","","",20,[[["items"],["keyarg"]],[["str"],["result",["str"]]]]],[11,"append_or_insert","","",20,[[["items"],["keyarg"]]]],[11,"decode_len","","",20,[[["keyarg"]],[["str"],["usize"],["result",["usize","str"]]]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"unchecked_into","","",21,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",21,[[],["t"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"unchecked_into","","",22,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",22,[[],["t"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"unchecked_into","","",23,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",23,[[],["t"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"unchecked_into","","",24,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",24,[[],["t"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"unchecked_into","","",25,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",25,[[],["t"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"size_hint","","",14,[[["self"]],["usize"]]],[11,"using_encoded","","",14,[[["self"],["f"]],["r"]]],[11,"encode","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",14,[[["w"],["self"]]]],[11,"decode","","",14,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",14,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",14,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",14,[[],["t"]]],[11,"vzip","","",14,[[],["v"]]],[11,"blake2_128","","",14,[[["self"]]]],[11,"blake2_256","","",14,[[["self"]]]],[11,"blake2_128_concat","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",14,[[["self"]]]],[11,"twox_256","","",14,[[["self"]]]],[11,"twox_64_concat","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"size_hint","","",15,[[["self"]],["usize"]]],[11,"using_encoded","","",15,[[["self"],["f"]],["r"]]],[11,"encode","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",15,[[["w"],["self"]]]],[11,"decode","","",15,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",15,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",15,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",15,[[],["t"]]],[11,"vzip","","",15,[[],["v"]]],[11,"blake2_128","","",15,[[["self"]]]],[11,"blake2_256","","",15,[[["self"]]]],[11,"blake2_128_concat","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",15,[[["self"]]]],[11,"twox_256","","",15,[[["self"]]]],[11,"twox_64_concat","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"size_hint","","",16,[[["self"]],["usize"]]],[11,"using_encoded","","",16,[[["self"],["f"]],["r"]]],[11,"encode","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",16,[[["w"],["self"]]]],[11,"decode","","",16,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",16,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",16,[[],["t"]]],[11,"vzip","","",16,[[],["v"]]],[11,"blake2_128","","",16,[[["self"]]]],[11,"blake2_256","","",16,[[["self"]]]],[11,"blake2_128_concat","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",16,[[["self"]]]],[11,"twox_256","","",16,[[["self"]]]],[11,"twox_64_concat","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",17,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",17,[[],["t"]]],[11,"vzip","","",17,[[],["v"]]],[11,"blake2_128","","",17,[[["self"]]]],[11,"blake2_256","","",17,[[["self"]]]],[11,"blake2_128_concat","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",17,[[["self"]]]],[11,"twox_256","","",17,[[["self"]]]],[11,"twox_64_concat","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"size_hint","","",18,[[["self"]],["usize"]]],[11,"using_encoded","","",18,[[["self"],["f"]],["r"]]],[11,"encode","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",18,[[["w"],["self"]]]],[11,"decode","","",18,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",18,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",18,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",18,[[],["t"]]],[11,"vzip","","",18,[[],["v"]]],[11,"blake2_128","","",18,[[["self"]]]],[11,"blake2_256","","",18,[[["self"]]]],[11,"blake2_128_concat","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",18,[[["self"]]]],[11,"twox_256","","",18,[[["self"]]]],[11,"twox_64_concat","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"unchecked_into","","",26,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",26,[[],["t"]]],[11,"vzip","","",26,[[],["v"]]],[11,"clear","","",26,[[["self"]]]],[11,"initialize","","",26,[[]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",2,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",2,[[],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"blake2_128","","",2,[[["self"]]]],[11,"blake2_256","","",2,[[["self"]]]],[11,"blake2_128_concat","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",2,[[["self"]]]],[11,"twox_256","","",2,[[["self"]]]],[11,"twox_64_concat","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",3,[[],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"blake2_128","","",3,[[["self"]]]],[11,"blake2_256","","",3,[[["self"]]]],[11,"blake2_128_concat","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",3,[[["self"]]]],[11,"twox_256","","",3,[[["self"]]]],[11,"twox_64_concat","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"size_hint","","",4,[[["self"]],["usize"]]],[11,"using_encoded","","",4,[[["self"],["f"]],["r"]]],[11,"encode","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",4,[[["w"],["self"]]]],[11,"decode","","",4,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",4,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",4,[[],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"blake2_128","","",4,[[["self"]]]],[11,"blake2_256","","",4,[[["self"]]]],[11,"blake2_128_concat","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",4,[[["self"]]]],[11,"twox_256","","",4,[[["self"]]]],[11,"twox_64_concat","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"unchecked_into","","",27,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",27,[[],["t"]]],[11,"vzip","","",27,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",5,[[],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","frame_system::offchain","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"unchecked_into","","",28,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",28,[[],["t"]]],[11,"vzip","","",28,[[],["v"]]],[11,"clear","","",28,[[["self"]]]],[11,"initialize","","",28,[[]]],[11,"from","frame_system","",5,[[["option"]],["raworigin"]]],[11,"clone","","",13,[[["self"]],["module"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["phase"]]],[11,"clone","","",0,[[["self"]],["eventrecord"]]],[11,"clone","","",4,[[["self"]],["event"]]],[11,"clone","","",5,[[["self"]],["raworigin"]]],[11,"clone","","",14,[[["self"]],["checkweight"]]],[11,"clone","","",15,[[["self"]],["checknonce"]]],[11,"clone","","",16,[[["self"]],["checkera"]]],[11,"clone","","",17,[[["self"]],["checkgenesis"]]],[11,"clone","","",18,[[["self"]],["checkversion"]]],[11,"default","frame_system::offchain","",28,[[],["self"]]],[11,"default","frame_system","",1,[[],["self"]]],[11,"default","","",26,[[],["self"]]],[11,"eq","","",13,[[["self"],["module"]],["bool"]]],[11,"ne","","",13,[[["self"],["module"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"eq","","",3,[[["phase"],["self"]],["bool"]]],[11,"ne","","",3,[[["phase"],["self"]],["bool"]]],[11,"eq","","",0,[[["eventrecord"],["self"]],["bool"]]],[11,"ne","","",0,[[["eventrecord"],["self"]],["bool"]]],[11,"eq","","",4,[[["event"],["self"]],["bool"]]],[11,"ne","","",4,[[["event"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["raworigin"]],["bool"]]],[11,"ne","","",5,[[["self"],["raworigin"]],["bool"]]],[11,"eq","","",14,[[["self"],["checkweight"]],["bool"]]],[11,"ne","","",14,[[["self"],["checkweight"]],["bool"]]],[11,"eq","","",15,[[["self"],["checknonce"]],["bool"]]],[11,"ne","","",15,[[["self"],["checknonce"]],["bool"]]],[11,"eq","","",16,[[["self"],["checkera"]],["bool"]]],[11,"ne","","",16,[[["self"],["checkera"]],["bool"]]],[11,"eq","","",17,[[["checkgenesis"],["self"]],["bool"]]],[11,"ne","","",17,[[["checkgenesis"],["self"]],["bool"]]],[11,"eq","","",18,[[["self"],["checkversion"]],["bool"]]],[11,"ne","","",18,[[["self"],["checkversion"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"encode_to","","",2,[[["self"],["encout"]]]],[11,"encode_to","","",3,[[["self"],["encout"]]]],[11,"encode_to","","",0,[[["self"],["encout"]]]],[11,"encode_to","","",4,[[["self"],["encout"]]]],[11,"encode_to","","",14,[[["self"],["encout"]]]],[11,"encode","","",14,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",14,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",15,[[["self"],["encout"]]]],[11,"encode","","",15,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",15,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",16,[[["self"],["encout"]]]],[11,"encode","","",16,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",16,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",17,[[["self"],["encout"]]]],[11,"encode","","",17,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",17,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",18,[[["self"],["encout"]]]],[11,"encode","","",18,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",18,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",2,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",3,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",0,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",4,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",14,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",15,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",16,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",17,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",18,[[["decin"]],[["result",["error"]],["error"]]]],[11,"try_origin","","",21,[[["o"]],["result"]]],[11,"try_origin","","",22,[[["o"]],["result"]]],[11,"try_origin","","",23,[[["o"]],["result"]]],[11,"try_origin","","",24,[[["o"]],["result"]]],[11,"try_origin","","",25,[[["o"]],["result"]]],[11,"lookup","","",26,[[["self"]],[["result",["lookuperror"]],["lookuperror"]]]],[11,"dispatch","","",2,[[],["dispatchresult"]]],[11,"additional_signed","","",14,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"pre_dispatch","","",14,[[["usize"]],[["result",["transactionvalidityerror"]],["transactionvalidityerror"]]]],[11,"validate","","",14,[[["usize"],["self"]],["transactionvalidity"]]],[11,"additional_signed","","",15,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"pre_dispatch","","",15,[[["usize"]],[["result",["transactionvalidityerror"]],["transactionvalidityerror"]]]],[11,"validate","","",15,[[["usize"],["self"]],["transactionvalidity"]]],[11,"validate","","",16,[[["usize"],["self"]],["transactionvalidity"]]],[11,"additional_signed","","",16,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"additional_signed","","",17,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"additional_signed","","",18,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"build_module_genesis_storage","","",1,[[["self"],["storage"]],[["string"],["result",["string"]]]]],[11,"metadata","","",13,[[]]],[11,"metadata","","",27,[[]]],[11,"get_dispatch_info","","",2,[[["self"]],["dispatchinfo"]]],[11,"module_prefix","","",19,[[]]],[11,"storage_prefix","","",19,[[]]],[11,"from_optional_value_to_query","","",19,[[["option"]]]],[11,"from_query_to_optional_value","","",19,[[],["option"]]],[11,"module_prefix","","",20,[[]]],[11,"storage_prefix","","",20,[[]]],[11,"from_optional_value_to_query","","",20,[[["option"]]]],[11,"from_query_to_optional_value","","",20,[[],["option"]]],[11,"module_prefix","","",19,[[]]],[11,"storage_prefix","","",19,[[]]],[11,"module_prefix","","",20,[[]]],[11,"storage_prefix","","",20,[[]]]],"p":[[3,"EventRecord"],[3,"GenesisConfig"],[4,"Call"],[4,"Phase"],[4,"Event"],[4,"RawOrigin"],[8,"Signer"],[8,"CreateTransaction"],[8,"SubmitSignedTransaction"],[8,"SubmitUnsignedTransaction"],[8,"OnNewAccount"],[8,"IsDeadAccount"],[8,"Trait"],[3,"Module"],[3,"CheckWeight"],[3,"CheckNonce"],[3,"CheckEra"],[3,"CheckGenesis"],[3,"CheckVersion"],[3,"AccountNonce"],[3,"BlockHash"],[3,"EnsureRoot"],[3,"EnsureSigned"],[3,"EnsureSignedBy"],[3,"EnsureNone"],[3,"EnsureNever"],[3,"ChainContext"],[4,"Error"],[3,"TransactionSubmitter"]]};
searchIndex["generic_array"] = {"doc":"This crate implements a structure that can be used as a…","i":[[3,"GenericArray","generic_array","Struct representing a generic array - `GenericArray<T, N>`…",null,null],[0,"arr","","Implementation for `arr!` macro.",null,null],[6,"Inc","generic_array::arr","Helper type for `arr!` macro",null,null],[8,"AddLength","","Helper trait for `arr!` macro",null,null],[16,"Output","","Resulting length",0,null],[0,"functional","generic_array","Functional programming with generic sequences",null,null],[6,"MappedSequence","generic_array::functional","Accessor type for a mapped generic sequence",null,null],[8,"MappedGenericSequence","","Defines the relationship between one generic sequence and…",null,null],[16,"Mapped","","Mapped sequence type",1,null],[8,"FunctionalSequence","","Defines functional programming methods for generic sequences",null,null],[11,"map","","Maps a `GenericSequence` to another `GenericSequence`.",2,[[["f"]],["mappedsequence"]]],[11,"zip","","Combines two `GenericSequence` instances and iterates…",2,[[["rhs"],["f"]],["mappedsequence"]]],[11,"fold","","Folds (or reduces) a sequence of data into a single value.",2,[[["u"],["f"]],["u"]]],[0,"iter","generic_array","`GenericArray` iterator implementation.",null,null],[3,"GenericArrayIter","generic_array::iter","An iterator that moves out of a `GenericArray`",null,null],[11,"as_slice","","Returns the remaining items of this iterator as a slice",3,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",3,[[["self"]]]],[0,"sequence","generic_array","Useful traits for manipulating sequences of data stored in…",null,null],[6,"SequenceItem","generic_array::sequence","Accessor for `GenericSequence` item type, which is really…",null,null],[8,"GenericSequence","","Defines some sequence with an associated length and…",null,null],[16,"Length","","`GenericArray` associated length",4,null],[16,"Sequence","","Concrete sequence type used in conjuction with reference…",4,null],[10,"generate","","Initializes a new sequence instance using the given…",4,[[["f"]]]],[8,"Lengthen","","Defines any `GenericSequence` which can be lengthened or…",null,null],[16,"Longer","","`GenericSequence` that has one more element than `Self`",5,null],[10,"append","","Returns a new array with the given element appended to the…",5,[[["t"]]]],[10,"prepend","","Returns a new array with the given element prepended to…",5,[[["t"]]]],[8,"Shorten","","Defines a `GenericSequence` which can be shortened by…",null,null],[16,"Shorter","","`GenericSequence` that has one less element than `Self`",6,null],[10,"pop_back","","Returns a new array without the last element, and the last…",6,[[]]],[10,"pop_front","","Returns a new array without the first element, and the…",6,[[]]],[8,"Split","","Defines a `GenericSequence` that can be split into two…",null,null],[16,"First","","First part of the resulting split array",7,null],[16,"Second","","Second part of the resulting split array",7,null],[10,"split","","Splits an array at the given index, returning the separate…",7,[[]]],[8,"Concat","","Defines `GenericSequence`s which can be joined together,…",null,null],[16,"Rest","","Sequence to be concatenated with `self`",8,null],[16,"Output","","Resulting sequence formed by the concatenation.",8,null],[10,"concat","","Concatenate, or join, two sequences.",8,[[]]],[8,"ArrayLength","generic_array","Trait making `GenericArray` work, marking types to be used…",null,null],[16,"ArrayType","","Associated type representing the array type for the number",9,null],[11,"as_slice","","Extracts a slice containing the entire array.",10,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice containing the entire array.",10,[[["self"]]]],[11,"from_slice","","Converts slice to a generic array reference with inferred…",10,[[],["genericarray"]]],[11,"from_mut_slice","","Converts mutable slice to a mutable generic array reference",10,[[],["genericarray"]]],[11,"clone_from_slice","","Construct a `GenericArray` from a slice by cloning its…",10,[[],["genericarray"]]],[11,"from_exact_iter","","Creates a new `GenericArray` instance from an iterator…",10,[[["i"]],["option"]]],[14,"arr","","Macro allowing for easy generation of Generic Arrays.…",null,null],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","generic_array::iter","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"map","generic_array","",10,[[["f"]],["mappedsequence"]]],[11,"zip","","",10,[[["rhs"],["f"]],["mappedsequence"]]],[11,"fold","","",10,[[["u"],["f"]],["u"]]],[11,"generate","","",10,[[["f"]],["genericarray"]]],[11,"append","","",10,[[["t"]]]],[11,"prepend","","",10,[[["t"]]]],[11,"pop_back","","",10,[[]]],[11,"pop_front","","",10,[[]]],[11,"split","","",10,[[]]],[11,"concat","","",10,[[]]],[11,"deref","","",10,[[["self"]]]],[11,"deref_mut","","",10,[[["self"]]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","generic_array::iter","",3,[[["formatter"],["self"]],["result"]]],[11,"eq","generic_array","",10,[[["self"]],["bool"]]],[11,"cmp","","",10,[[["self"],["genericarray"]],["ordering"]]],[11,"partial_cmp","","",10,[[["self"],["genericarray"]],[["option",["ordering"]],["ordering"]]]],[11,"drop","generic_array::iter","",3,[[["self"]]]],[11,"hash","generic_array","",10,[[["self"],["h"]]]],[11,"next","generic_array::iter","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,[[["self"]]]],[11,"count","","",3,[[],["usize"]]],[11,"nth","","",3,[[["self"],["usize"]],["option"]]],[11,"last","","",3,[[],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"from_iter","generic_array","",10,[[["i"]],["genericarray"]]],[11,"into_iter","","",10,[[]]],[11,"len","generic_array::iter","",3,[[["self"]],["usize"]]],[11,"as_ref","generic_array","",10,[[["self"]]]],[11,"as_mut","","",10,[[["self"]]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"into","","",10,[[]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"clone","","",10,[[["self"]],["genericarray"]]],[11,"clone","generic_array::iter","",3,[[["self"]],["self"]]],[11,"default","generic_array","",10,[[],["self"]]],[11,"borrow","","",10,[[["self"]]]],[11,"borrow_mut","","",10,[[["self"]]]]],"p":[[8,"AddLength"],[8,"MappedGenericSequence"],[8,"FunctionalSequence"],[3,"GenericArrayIter"],[8,"GenericSequence"],[8,"Lengthen"],[8,"Shorten"],[8,"Split"],[8,"Concat"],[8,"ArrayLength"],[3,"GenericArray"]]};
searchIndex["getrandom"] = {"doc":"Interface to the random number generator of the operating…","i":[[3,"Error","getrandom","A small and `no_std` compatible error type.",null,null],[5,"getrandom","","Fill `dest` with random bytes from the system's preferred…",null,[[],[["result",["error"]],["error"]]]],[18,"UNKNOWN","","Unknown error.",0,null],[18,"UNAVAILABLE","","System entropy source is unavailable.",0,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive…",0,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to…",0,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from the…",0,[[],[["i32"],["option",["i32"]]]]],[11,"code","","Extract the bare error code.",0,[[],["nonzerou32"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["nonzerou32"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]]],"p":[[3,"Error"]]};
searchIndex["hash256_std_hasher"] = {"doc":"","i":[[3,"Hash256StdHasher","hash256_std_hasher","Hasher that just takes 8 bytes of the provided value. May…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"default","","",0,[[],["hash256stdhasher"]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,[[["self"]]]]],"p":[[3,"Hash256StdHasher"]]};
searchIndex["hash_db"] = {"doc":"Database of byte-slices keyed to their hash.","i":[[6,"Prefix","hash_db","A trie node prefix, it is the nibble path from the trie…",null,null],[7,"EMPTY_PREFIX","","An empty prefix constant. Can be use when the prefix is…",null,null],[8,"MaybeDebug","","",null,null],[8,"Hasher","","Trait describing an object that can hash a slice of bytes.…",null,null],[16,"Out","","The output type of the `Hasher`",0,null],[16,"StdHasher","","What to use to build `HashMap`s with this `Hasher`.",0,null],[18,"LENGTH","","The length in bytes of the `Hasher` output.",0,null],[10,"hash","","Compute the hash of the provided slice of bytes returning…",0,[[]]],[8,"PlainDB","","Trait modelling a plain datastore whose key is a fixed…",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",1,[[["k"],["self"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",1,[[["k"],["self"]],["bool"]]],[10,"emplace","","Insert a datum item into the DB. Insertions are counted…",1,[[["self"],["k"],["v"]]]],[10,"remove","","Remove a datum previously inserted. Insertions can be…",1,[[["k"],["self"]]]],[8,"PlainDBRef","","Trait for immutable reference of PlainDB.",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",2,[[["k"],["self"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",2,[[["k"],["self"]],["bool"]]],[8,"HashDB","","Trait modelling datastore keyed by a hash defined by the…",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",3,[[["self"],["prefix"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",3,[[["self"],["prefix"]],["bool"]]],[10,"insert","","Insert a datum item into the DB and return the datum's…",3,[[["self"],["prefix"]]]],[10,"emplace","","Like `insert()`, except you provide the key and the data…",3,[[["self"],["t"],["prefix"]]]],[10,"remove","","Remove a datum previously inserted. Insertions can be…",3,[[["self"],["prefix"]]]],[8,"HashDBRef","","Trait for immutable reference of HashDB.",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",4,[[["self"],["prefix"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",4,[[["self"],["prefix"]],["bool"]]],[8,"AsHashDB","","Upcast trait for HashDB.",null,null],[10,"as_hash_db","","Perform upcast to HashDB for anything that derives from…",5,[[["self"]],["hashdb"]]],[10,"as_hash_db_mut","","Perform mutable upcast to HashDB for anything that derives…",5,[[["self"]],["hashdb"]]],[8,"AsPlainDB","","Upcast trait for PlainDB.",null,null],[10,"as_plain_db","","Perform upcast to PlainDB for anything that derives from…",6,[[["self"]],["plaindb"]]],[10,"as_plain_db_mut","","Perform mutable upcast to PlainDB for anything that…",6,[[["self"]],["plaindb"]]]],"p":[[8,"Hasher"],[8,"PlainDB"],[8,"PlainDBRef"],[8,"HashDB"],[8,"HashDBRef"],[8,"AsHashDB"],[8,"AsPlainDB"]]};
searchIndex["hashbrown"] = {"doc":"This crate is a Rust port of Google's high-performance…","i":[[3,"HashMap","hashbrown","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is…",null,null],[4,"CollectionAllocErr","","Augments `AllocErr` with a `CapacityOverflow` variant.",null,null],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the…",0,null],[13,"AllocErr","","Error due to the allocator.",0,null],[12,"layout","hashbrown::CollectionAllocErr","The layout of the allocation request that failed.",0,null],[11,"new","hashbrown","Creates an empty `HashMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",1,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash…",1,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity,…",1,[[["s"],["usize"]],["self"]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",1,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the map can hold without…",1,[[["self"]],["usize"]]],[11,"keys","","An iterator visiting all keys in arbitrary order. The…",1,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The…",1,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary…",1,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary…",1,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary…",1,[[["self"]],["itermut"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an…",1,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the…",1,[[["self"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",1,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",1,[[["self"],["usize"]],[["collectionallocerr"],["result",["collectionallocerr"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",1,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It…",1,[[["self"],["usize"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",1,[[["self"],["k"]],["entry"]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["q"]],[["v"],["option"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",1,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",1,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",1,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",1,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",1,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and…",1,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"raw_entry_mut","","Creates a raw entry builder for the HashMap.",1,[[["self"]],["rawentrybuildermut"]]],[11,"raw_entry","","Creates a raw immutable entry builder for the HashMap.",1,[[["self"]],["rawentrybuilder"]]],[11,"new","","Creates an empty `HashSet`.",2,[[],["self"]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",2,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the set can hold without…",2,[[["self"]],["usize"]]],[11,"iter","","An iterator visiting all elements in arbitrary order. The…",2,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",2,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",2,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",2,[[["self"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given…",2,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with the specified capacity,…",2,[[["s"],["usize"]],["self"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",2,[[["self"]],["s"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",2,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",2,[[["self"],["usize"]],[["collectionallocerr"],["result",["collectionallocerr"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It…",2,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It…",2,[[["self"],["usize"]]]],[11,"difference","","Visits the values representing the difference, i.e., the…",2,[[["self"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",2,[[["self"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",2,[[["self"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",2,[[["self"]],["union"]]],[11,"contains","","Returns `true` if the set contains a value.",2,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",2,[[["self"],["q"]],[["t"],["option"]]]],[11,"get_or_insert","","Inserts the given `value` into the set if it is not…",2,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the set if the…",2,[[["self"],["f"],["q"]],["t"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",2,[[["self"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",2,[[["self"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",2,[[["self"]],["bool"]]],[11,"insert","","Adds a value to the set.",2,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",2,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",2,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",2,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",2,[[["self"],["f"]]]],[0,"hash_map","","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"HashMap","hashbrown::hash_map","A hash map implemented with quadratic probing and SIMD…",null,null],[3,"Iter","","An iterator over the entries of a `HashMap`.",null,null],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",null,null],[3,"Keys","","An iterator over the keys of a `HashMap`.",null,null],[3,"Values","","An iterator over the values of a `HashMap`.",null,null],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",null,null],[3,"RawEntryBuilderMut","","A builder for computing where in a [`HashMap`] a key-value…",null,null],[3,"RawOccupiedEntryMut","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"RawVacantEntryMut","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[3,"RawEntryBuilder","","A builder for computing where in a [`HashMap`] a key-value…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part…",null,null],[3,"VacantEntry","","A view into a vacant entry in a `HashMap`. It is part of…",null,null],[4,"RawEntryMut","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",3,null],[13,"Vacant","","A vacant entry.",3,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Occupied","","An occupied entry.",4,null],[13,"Vacant","","A vacant entry.",4,null],[6,"DefaultHashBuilder","","Default hasher for `HashMap`.",null,null],[0,"hash_set","hashbrown","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"HashSet","hashbrown::hash_set","A hash set implemented as a `HashMap` where the value is…",null,null],[3,"Iter","","An iterator over the items of a `HashSet`.",null,null],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",null,null],[3,"Drain","","A draining iterator over the items of a `HashSet`.",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[11,"from","hashbrown","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","hashbrown::hash_map","",5,[[["t"]],["t"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into_iter","","",7,[[],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into_iter","","",9,[[],["i"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","hashbrown::hash_set","",18,[[["t"]],["t"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into_iter","","",19,[[],["i"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"fmt","hashbrown","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","hashbrown::hash_map","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","hashbrown","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","hashbrown::hash_set","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","hashbrown","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["collectionallocerr"]],["bool"]]],[11,"ne","","",0,[[["self"],["collectionallocerr"]],["bool"]]],[11,"index","","Returns a reference to the value corresponding to the…",1,[[["self"],["q"]],["v"]]],[11,"next","hashbrown::hash_map","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,[[["self"]]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,[[["self"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,[[["self"]]]],[11,"next","","",8,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",8,[[["self"]]]],[11,"next","","",9,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",9,[[["self"]]]],[11,"next","","",11,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",11,[[["self"]]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,[[["self"]]]],[11,"next","hashbrown::hash_set","",18,[[["self"]],[["option"],["k"]]]],[11,"size_hint","","",18,[[["self"]]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,[[["self"]]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,[[["self"]]]],[11,"next","","",21,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",21,[[["self"]]]],[11,"next","","",22,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",22,[[["self"]]]],[11,"next","","",23,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",23,[[["self"]]]],[11,"next","","",24,[[["self"]],[["option"],["t"]]]],[11,"size_hint","","",24,[[["self"]]]],[11,"extend","hashbrown","",1,[[["self"],["intoiterator"]]]],[11,"extend","","",1,[[["self"],["intoiterator"]]]],[11,"extend","","",2,[[["self"],["intoiterator"]]]],[11,"extend","","",2,[[["self"],["intoiterator"]]]],[11,"from_iter","","",1,[[["intoiterator"]],["self"]]],[11,"from_iter","","",2,[[["intoiterator"]],["self"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",1,[[],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each…",2,[[],["intoiter"]]],[11,"len","hashbrown::hash_map","",5,[[["self"]],["usize"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"len","","",9,[[["self"]],["usize"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"len","hashbrown::hash_set","",18,[[["self"]],["usize"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"len","","",20,[[["self"]],["usize"]]],[11,"clone","hashbrown","",1,[[["self"]],["hashmap"]]],[11,"clone","hashbrown::hash_map","",5,[[["self"]],["self"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"clone","hashbrown","",2,[[["self"]],["hashset"]]],[11,"clone","hashbrown::hash_set","",18,[[["self"]],["self"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"clone","","",24,[[["self"]],["self"]]],[11,"clone","hashbrown","",0,[[["self"]],["collectionallocerr"]]],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default`…",1,[[],["self"]]],[11,"default","","Creates an empty `HashSet<T, S>` with the `Default` value…",2,[[],["self"]]],[11,"from_key","hashbrown::hash_map","Creates a `RawEntryMut` from the given key.",12,[[["q"]],["rawentrymut"]]],[11,"from_key_hashed_nocheck","","Creates a `RawEntryMut` from the given key and its hash.",12,[[["u64"],["q"]],["rawentrymut"]]],[11,"from_hash","","Creates a `RawEntryMut` from the given hash.",12,[[["u64"],["f"]],["rawentrymut"]]],[11,"from_key","","Access an entry by key.",15,[[["q"]],["option"]]],[11,"from_key_hashed_nocheck","","Access an entry by a key and its hash.",15,[[["u64"],["q"]],["option"]]],[11,"from_hash","","Access an entry by hash.",15,[[["u64"],["f"]],["option"]]],[11,"insert","","Sets the value of the entry, and returns a…",3,[[["k"],["v"]],["rawoccupiedentrymut"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",3,[[["k"],["v"]]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",3,[[["f"]]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",3,[[["f"]],["self"]]],[11,"key","","Gets a reference to the key in the entry.",13,[[["self"]],["k"]]],[11,"key_mut","","Gets a mutable reference to the key in the entry.",13,[[["self"]],["k"]]],[11,"into_key","","Converts the entry into a mutable reference to the key in…",13,[[],["k"]]],[11,"get","","Gets a reference to the value in the entry.",13,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",13,[[],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",13,[[["self"]],["v"]]],[11,"get_key_value","","Gets a reference to the key and value in the entry.",13,[[["self"]]]],[11,"get_key_value_mut","","Gets a mutable reference to the key and value in the entry.",13,[[["self"]]]],[11,"into_key_value","","Converts the OccupiedEntry into a mutable reference to the…",13,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",13,[[["self"],["v"]],["v"]]],[11,"insert_key","","Sets the value of the entry, and returns the entry's old…",13,[[["self"],["k"]],["k"]]],[11,"remove","","Takes the value out of the entry, and returns it.",13,[[],["v"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",13,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",14,[[["k"],["v"]]]],[11,"insert_hashed_nocheck","","Sets the value of the entry with the VacantEntry's key,…",14,[[["v"],["u64"],["k"]]]],[11,"insert_with_hasher","","Set the value of an entry with a custom hasher function.",14,[[["k"],["h"],["u64"],["v"]]]],[11,"insert","","Sets the value of the entry, and returns an OccupiedEntry.",4,[[["v"]],["occupiedentry"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",4,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",4,[[["fnonce"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",4,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",4,[[["f"]],["self"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",4,[[],["v"]]],[11,"key","","Gets a reference to the key in the entry.",16,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",16,[[]]],[11,"get","","Gets a reference to the value in the entry.",16,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",16,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",16,[[],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old…",16,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",16,[[],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The…",16,[[["v"]]]],[11,"replace_key","","Replaces the key in the hash map with the key used to…",16,[[],["k"]]],[11,"key","","Gets a reference to the key that would be used when…",17,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",17,[[],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",17,[[["v"]],["v"]]]],"p":[[4,"CollectionAllocErr"],[3,"HashMap"],[3,"HashSet"],[4,"RawEntryMut"],[4,"Entry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]};
searchIndex["hex"] = {"doc":"Encoding and decoding hex strings.","i":[[4,"FromHexError","hex","The error type for decoding a hex string into `Vec<u8>` or…",null,null],[13,"InvalidHexCharacter","","An invalid character was found. Valid ones are: `0...9`,…",0,null],[12,"c","hex::FromHexError","",0,null],[12,"index","","",0,null],[13,"OddLength","hex","A hex string's length needs to be even, as two digits…",0,null],[13,"InvalidStringLength","","If the hex string is decoded into a fixed sized container,…",0,null],[5,"encode","","Encodes `data` as hex string using lowercase characters.",null,[[["asref"]],["string"]]],[5,"encode_upper","","Encodes `data` as hex string using uppercase characters.",null,[[["asref"]],["string"]]],[5,"decode","","Decodes a hex string into raw bytes.",null,[[["asref"]],[["result",["vec","fromhexerror"]],["vec",["u8"]],["fromhexerror"]]]],[5,"decode_to_slice","","Decode a hex string into a mutable bytes slice.",null,[[["asref"]],[["result",["fromhexerror"]],["fromhexerror"]]]],[8,"ToHex","","Encoding values as hex string.",null,null],[10,"encode_hex","","Encode the hex strict representing `self` into the…",1,[[["self"]],[["fromiterator",["char"]],["char"]]]],[10,"encode_hex_upper","","Encode the hex strict representing `self` into the…",1,[[["self"]],[["fromiterator",["char"]],["char"]]]],[8,"FromHex","","Types that can be decoded from a hex string.",null,null],[16,"Error","","",2,null],[10,"from_hex","","Creates an instance of type `Self` from the given hex…",2,[[["asref"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["fromhexerror"]]],[11,"eq","","",0,[[["self"],["fromhexerror"]],["bool"]]],[11,"ne","","",0,[[["self"],["fromhexerror"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]]],"p":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"]]};
searchIndex["hmac"] = {"doc":"Generic implementation of Hash-based Message…","i":[[8,"Mac","hmac","The `Mac` trait defines methods for a Message…",null,null],[16,"OutputSize","","",0,null],[16,"KeySize","","",0,null],[10,"new","","Create new MAC instance from key with fixed size.",0,[[["genericarray"]],["self"]]],[11,"new_varkey","","Create new MAC instance from key with variable size.",0,[[],[["result",["invalidkeylength"]],["invalidkeylength"]]]],[10,"input","","Process input data.",0,[[["self"]]]],[10,"reset","","Reset `Mac` instance.",0,[[["self"]]]],[10,"result","","Obtain the result of a `Mac` computation as a `MacResult`…",0,[[],["macresult"]]],[11,"result_reset","","Obtain the result of a `Mac` computation as a `MacResult`…",0,[[["self"]],["macresult"]]],[11,"verify","","Check if code is correct for the processed input.",0,[[],[["macerror"],["result",["macerror"]]]]],[3,"Hmac","","The `Hmac` struct represents an HMAC using a given hash…",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"clone","","",1,[[["self"]],["hmac"]]],[11,"new","","",1,[[["genericarray"]],["self"]]],[11,"new_varkey","","",1,[[],[["result",["invalidkeylength"]],["invalidkeylength"]]]],[11,"input","","",1,[[["self"]]]],[11,"result","","",1,[[],["macresult"]]],[11,"reset","","",1,[[["self"]]]]],"p":[[8,"Mac"],[3,"Hmac"]]};
searchIndex["hmac_drbg"] = {"doc":"","i":[[3,"HmacDRBG","hmac_drbg","",null,null],[11,"new","","",0,[[],["self"]]],[11,"count","","",0,[[["self"]],["usize"]]],[11,"reseed","","",0,[[["self"],["option"]]]],[11,"generate","","",0,[[["self"],["option"]],[["genericarray",["u8"]],["arraylength",["u8"]],["u8"]]]],[11,"generate_to_slice","","",0,[[["option"],["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"HmacDRBG"]]};
searchIndex["impl_codec"] = {"doc":"Parity Codec serialization support for uint and fixed hash.","i":[[14,"impl_uint_codec","impl_codec","Add Parity Codec serialization support to an integer…",null,null],[14,"impl_fixed_hash_codec","","Add Parity Codec serialization support to a fixed-sized…",null,null]],"p":[]};
searchIndex["impl_serde"] = {"doc":"Serde serialization support for uint and fixed hash.","i":[[14,"impl_uint_serde","impl_serde","Add Serde serialization support to an integer created by…",null,null],[14,"impl_fixed_hash_serde","","Add Serde serialization support to a fixed-sized hash type…",null,null]],"p":[]};
searchIndex["impl_trait_for_tuples"] = {"doc":"  ","i":[[23,"impl_for_tuples","impl_trait_for_tuples","See crate documentation.",null,null]],"p":[]};
searchIndex["inflector"] = {"doc":"Adds String based inflections for Rust. Snake, kebab,…","i":[[0,"cases","inflector","Provides case inflections - Camel case - Class case -…",null,null],[0,"classcase","inflector::cases","Provides conversion to and detection of class case strings.",null,null],[5,"to_class_case","inflector::cases::classcase","Converts a `&str` to `ClassCase` `String`",null,[[["str"]],["string"]]],[5,"is_class_case","","Determines if a `&str` is `ClassCase` `bool`",null,[[["str"]],["bool"]]],[0,"camelcase","inflector::cases","Provides conversion to and detection of camel case strings.",null,null],[5,"to_camel_case","inflector::cases::camelcase","Converts a `&str` to camelCase `String`",null,[[["str"]],["string"]]],[5,"is_camel_case","","Determines if a `&str` is camelCase bool``",null,[[["str"]],["bool"]]],[0,"snakecase","inflector::cases","Provides conversion to and detection of snake case strings.",null,null],[5,"to_snake_case","inflector::cases::snakecase","Converts a `&str` to `snake_case` `String`",null,[[["str"]],["string"]]],[5,"is_snake_case","","Determines of a `&str` is `snake_case`",null,[[["str"]],["bool"]]],[0,"screamingsnakecase","inflector::cases","Provides conversion to and detection of screaming snake…",null,null],[5,"to_screaming_snake_case","inflector::cases::screamingsnakecase","Converts a `&str` to `SCREAMING_SNAKE_CASE` `String`",null,[[["str"]],["string"]]],[5,"is_screaming_snake_case","","Determines of a `&str` is `SCREAMING_SNAKE_CASE`",null,[[["str"]],["bool"]]],[0,"kebabcase","inflector::cases","Provides conversion to and detection of kebab case strings.",null,null],[5,"is_kebab_case","inflector::cases::kebabcase","Determines if a `&str` is `kebab-case`",null,[[["str"]],["bool"]]],[5,"to_kebab_case","","Converts a `&str` to `kebab-case` `String`",null,[[["str"]],["string"]]],[0,"traincase","inflector::cases","Provides conversion to and detection of train case strings.",null,null],[5,"is_train_case","inflector::cases::traincase","Determines if a `&str` is `Train-Case`",null,[[["str"]],["bool"]]],[5,"to_train_case","","Converts a `&str` to `Train-Case` `String`",null,[[["str"]],["string"]]],[0,"sentencecase","inflector::cases","Provides conversion to and detection of sentence case…",null,null],[5,"to_sentence_case","inflector::cases::sentencecase","Converts a `&str` to `Sentence case` `String`",null,[[["str"]],["string"]]],[5,"is_sentence_case","","Determines of a `&str` is `Sentence case`",null,[[["str"]],["bool"]]],[0,"titlecase","inflector::cases","Provides conversion to and detection of title case strings.",null,null],[5,"to_title_case","inflector::cases::titlecase","Converts a `&str` to `Title Case` `String`",null,[[["str"]],["string"]]],[5,"is_title_case","","Determines if a `&str` is `Title Case`",null,[[["str"]],["bool"]]],[0,"tablecase","inflector::cases","Provides conversion to and detection of table case strings.",null,null],[5,"to_table_case","inflector::cases::tablecase","Converts a `&str` to `table-case` `String`",null,[[["str"]],["string"]]],[5,"is_table_case","","Determines if a `&str` is `table-case`",null,[[["str"]],["bool"]]],[0,"pascalcase","inflector::cases","Provides conversion to pascal case strings.",null,null],[5,"to_pascal_case","inflector::cases::pascalcase","Converts a `&str` to pascalCase `String`",null,[[["str"]],["string"]]],[5,"is_pascal_case","","Determines if a `&str` is pascalCase bool``",null,[[["str"]],["bool"]]],[0,"numbers","inflector","Provides number inflections - Ordinalize - Deordinalize",null,null],[0,"ordinalize","inflector::numbers","Provides ordinalization of a string.",null,null],[5,"ordinalize","inflector::numbers::ordinalize","Orginalizes a `&str`",null,[[["str"]],["string"]]],[0,"deordinalize","inflector::numbers","Provides deordinalization of a string.",null,null],[5,"deordinalize","inflector::numbers::deordinalize","Deorginalizes a `&str`",null,[[["str"]],["string"]]],[0,"suffix","inflector","Provides suffix inflections - Foreign key",null,null],[0,"foreignkey","inflector::suffix","Provides foreign key conversion for String.",null,null],[5,"to_foreign_key","inflector::suffix::foreignkey","Converts a `&str` to a `foreign_key`",null,[[["str"]],["string"]]],[5,"is_foreign_key","","Determines if a `&str` is a `foreign_key`",null,[[["str"]],["bool"]]],[0,"string","inflector","Provides string inflections - Deconstantize - Demodulize -…",null,null],[0,"demodulize","inflector::string","Provides demodulize a string.",null,null],[5,"demodulize","inflector::string::demodulize","Demodulize a `&str`",null,[[["str"]],["string"]]],[0,"deconstantize","inflector::string","Provides deconstantizea string.",null,null],[5,"deconstantize","inflector::string::deconstantize","Deconstantizes a `&str`",null,[[["str"]],["string"]]],[0,"pluralize","inflector::string","Provides conversion to plural strings.",null,null],[5,"to_plural","inflector::string::pluralize","Converts a `&str` to pluralized `String`",null,[[["str"]],["string"]]],[0,"singularize","inflector::string","Provides conversion to singular strings.",null,null],[5,"to_singular","inflector::string::singularize","Converts a `&str` to singularized `String`",null,[[["str"]],["string"]]],[8,"Inflector","inflector","",null,null],[10,"to_camel_case","","",0,[[["self"]],["string"]]],[10,"is_camel_case","","",0,[[["self"]],["bool"]]],[10,"to_pascal_case","","",0,[[["self"]],["string"]]],[10,"is_pascal_case","","",0,[[["self"]],["bool"]]],[10,"to_snake_case","","",0,[[["self"]],["string"]]],[10,"is_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_screaming_snake_case","","",0,[[["self"]],["string"]]],[10,"is_screaming_snake_case","","",0,[[["self"]],["bool"]]],[10,"to_kebab_case","","",0,[[["self"]],["string"]]],[10,"is_kebab_case","","",0,[[["self"]],["bool"]]],[10,"to_train_case","","",0,[[["self"]],["string"]]],[10,"is_train_case","","",0,[[["self"]],["bool"]]],[10,"to_sentence_case","","",0,[[["self"]],["string"]]],[10,"is_sentence_case","","",0,[[["self"]],["bool"]]],[10,"to_title_case","","",0,[[["self"]],["string"]]],[10,"is_title_case","","",0,[[["self"]],["bool"]]],[10,"ordinalize","","",0,[[["self"]],["string"]]],[10,"deordinalize","","",0,[[["self"]],["string"]]],[10,"to_foreign_key","","",0,[[["self"]],["string"]]],[10,"is_foreign_key","","",0,[[["self"]],["bool"]]],[10,"demodulize","","",0,[[["self"]],["string"]]],[10,"deconstantize","","",0,[[["self"]],["string"]]],[10,"to_class_case","","",0,[[["self"]],["string"]]],[10,"is_class_case","","",0,[[["self"]],["bool"]]],[10,"to_table_case","","",0,[[["self"]],["string"]]],[10,"is_table_case","","",0,[[["self"]],["bool"]]],[10,"to_plural","","",0,[[["self"]],["string"]]],[10,"to_singular","","",0,[[["self"]],["string"]]],[8,"InflectorNumbers","","",null,null],[10,"ordinalize","","",1,[[["self"]],["string"]]]],"p":[[8,"Inflector"],[8,"InflectorNumbers"]]};
searchIndex["integer_sqrt"] = {"doc":"This module contains the single trait…","i":[[8,"IntegerSquareRoot","integer_sqrt","A trait implementing integer square root.",null,null],[11,"integer_sqrt","","Find the integer square root.",0,[[["self"]],["self"]]],[10,"integer_sqrt_checked","","Find the integer square root, returning `None` if the…",0,[[["self"]],["option"]]]],"p":[[8,"IntegerSquareRoot"]]};
searchIndex["keccak"] = {"doc":"Keccak sponge function.","i":[[5,"f1600","keccak","Keccak-f[1600] sponge function",null,[[]]]],"p":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","i":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes…",null,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy…",null,null],[14,"lazy_static","","",null,null]],"p":[]};
searchIndex["libc"] = {"doc":"libc - Raw FFI bindings to platforms' system libraries","i":[[4,"c_void","libc","Equivalent to C's `void` type when used as a [pointer].",null,null],[3,"group","","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",6,null],[12,"ipv6mr_interface","","",6,null],[3,"hostent","","",null,null],[12,"h_name","","",7,null],[12,"h_aliases","","",7,null],[12,"h_addrtype","","",7,null],[12,"h_length","","",7,null],[12,"h_addr_list","","",7,null],[3,"iovec","","",null,null],[12,"iov_base","","",8,null],[12,"iov_len","","",8,null],[3,"pollfd","","",null,null],[12,"fd","","",9,null],[12,"events","","",9,null],[12,"revents","","",9,null],[3,"winsize","","",null,null],[12,"ws_row","","",10,null],[12,"ws_col","","",10,null],[12,"ws_xpixel","","",10,null],[12,"ws_ypixel","","",10,null],[3,"linger","","",null,null],[12,"l_onoff","","",11,null],[12,"l_linger","","",11,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",12,null],[3,"itimerval","","",null,null],[12,"it_interval","","",13,null],[12,"it_value","","",13,null],[3,"tms","","",null,null],[12,"tms_utime","","",14,null],[12,"tms_stime","","",14,null],[12,"tms_cutime","","",14,null],[12,"tms_cstime","","",14,null],[3,"servent","","",null,null],[12,"s_name","","",15,null],[12,"s_aliases","","",15,null],[12,"s_port","","",15,null],[12,"s_proto","","",15,null],[3,"protoent","","",null,null],[12,"p_name","","",16,null],[12,"p_aliases","","",16,null],[12,"p_proto","","",16,null],[3,"in_addr","","",null,null],[12,"s_addr","","",17,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",18,null],[12,"imr_interface","","",18,null],[3,"ip_mreq_source","","",null,null],[12,"imr_multiaddr","","",19,null],[12,"imr_interface","","",19,null],[12,"imr_sourceaddr","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_next","","",23,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",24,null],[12,"sll_protocol","","",24,null],[12,"sll_ifindex","","",24,null],[12,"sll_hatype","","",24,null],[12,"sll_pkttype","","",24,null],[12,"sll_halen","","",24,null],[12,"sll_addr","","",24,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",25,null],[12,"tm_min","","",25,null],[12,"tm_hour","","",25,null],[12,"tm_mday","","",25,null],[12,"tm_mon","","",25,null],[12,"tm_year","","",25,null],[12,"tm_wday","","",25,null],[12,"tm_yday","","",25,null],[12,"tm_isdst","","",25,null],[12,"tm_gmtoff","","",25,null],[12,"tm_zone","","",25,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",26,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",27,null],[12,"dli_fbase","","",27,null],[12,"dli_sname","","",27,null],[12,"dli_saddr","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"in_pktinfo","","",null,null],[12,"ipi_ifindex","","",29,null],[12,"ipi_spec_dst","","",29,null],[12,"ipi_addr","","",29,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",30,null],[12,"ifa_name","","",30,null],[12,"ifa_flags","","",30,null],[12,"ifa_addr","","",30,null],[12,"ifa_netmask","","",30,null],[12,"ifa_ifu","","",30,null],[12,"ifa_data","","",30,null],[3,"in6_rtmsg","","",null,null],[3,"arpreq","","",null,null],[12,"arp_pa","","",31,null],[12,"arp_ha","","",31,null],[12,"arp_flags","","",31,null],[12,"arp_netmask","","",31,null],[12,"arp_dev","","",31,null],[3,"arpreq_old","","",null,null],[12,"arp_pa","","",32,null],[12,"arp_ha","","",32,null],[12,"arp_flags","","",32,null],[12,"arp_netmask","","",32,null],[3,"arphdr","","",null,null],[12,"ar_hrd","","",33,null],[12,"ar_pro","","",33,null],[12,"ar_hln","","",33,null],[12,"ar_pln","","",33,null],[12,"ar_op","","",33,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",34,null],[12,"msg_len","","",34,null],[3,"epoll_event","","",null,null],[12,"events","","",35,null],[12,"u64","","",35,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",36,null],[12,"sun_path","","",36,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",37,null],[3,"utsname","","",null,null],[12,"sysname","","",38,null],[12,"nodename","","",38,null],[12,"release","","",38,null],[12,"version","","",38,null],[12,"machine","","",38,null],[12,"domainname","","",38,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",39,null],[12,"sigev_signo","","",39,null],[12,"sigev_notify","","",39,null],[12,"sigev_notify_thread_id","","",39,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",40,null],[12,"rlim_max","","",40,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"passwd","","",null,null],[12,"pw_name","","",42,null],[12,"pw_passwd","","",42,null],[12,"pw_uid","","",42,null],[12,"pw_gid","","",42,null],[12,"pw_gecos","","",42,null],[12,"pw_dir","","",42,null],[12,"pw_shell","","",42,null],[3,"spwd","","",null,null],[12,"sp_namp","","",43,null],[12,"sp_pwdp","","",43,null],[12,"sp_lstchg","","",43,null],[12,"sp_min","","",43,null],[12,"sp_max","","",43,null],[12,"sp_warn","","",43,null],[12,"sp_inact","","",43,null],[12,"sp_expire","","",43,null],[12,"sp_flag","","",43,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",44,null],[12,"dqb_bsoftlimit","","",44,null],[12,"dqb_curspace","","",44,null],[12,"dqb_ihardlimit","","",44,null],[12,"dqb_isoftlimit","","",44,null],[12,"dqb_curinodes","","",44,null],[12,"dqb_btime","","",44,null],[12,"dqb_itime","","",44,null],[12,"dqb_valid","","",44,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",45,null],[12,"ssi_errno","","",45,null],[12,"ssi_code","","",45,null],[12,"ssi_pid","","",45,null],[12,"ssi_uid","","",45,null],[12,"ssi_fd","","",45,null],[12,"ssi_tid","","",45,null],[12,"ssi_band","","",45,null],[12,"ssi_overrun","","",45,null],[12,"ssi_trapno","","",45,null],[12,"ssi_status","","",45,null],[12,"ssi_int","","",45,null],[12,"ssi_ptr","","",45,null],[12,"ssi_utime","","",45,null],[12,"ssi_stime","","",45,null],[12,"ssi_addr","","",45,null],[12,"ssi_addr_lsb","","",45,null],[12,"ssi_syscall","","",45,null],[12,"ssi_call_addr","","",45,null],[12,"ssi_arch","","",45,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",46,null],[12,"it_value","","",46,null],[3,"fsid_t","","",null,null],[3,"packet_mreq","","",null,null],[12,"mr_ifindex","","",47,null],[12,"mr_type","","",47,null],[12,"mr_alen","","",47,null],[12,"mr_address","","",47,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",48,null],[12,"if_name","","",48,null],[3,"msginfo","","",null,null],[12,"msgpool","","",49,null],[12,"msgmap","","",49,null],[12,"msgmax","","",49,null],[12,"msgmnb","","",49,null],[12,"msgmni","","",49,null],[12,"msgssz","","",49,null],[12,"msgtql","","",49,null],[12,"msgseg","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Ehdr","","",null,null],[12,"e_ident","","",66,null],[12,"e_type","","",66,null],[12,"e_machine","","",66,null],[12,"e_version","","",66,null],[12,"e_entry","","",66,null],[12,"e_phoff","","",66,null],[12,"e_shoff","","",66,null],[12,"e_flags","","",66,null],[12,"e_ehsize","","",66,null],[12,"e_phentsize","","",66,null],[12,"e_phnum","","",66,null],[12,"e_shentsize","","",66,null],[12,"e_shnum","","",66,null],[12,"e_shstrndx","","",66,null],[3,"Elf64_Ehdr","","",null,null],[12,"e_ident","","",67,null],[12,"e_type","","",67,null],[12,"e_machine","","",67,null],[12,"e_version","","",67,null],[12,"e_entry","","",67,null],[12,"e_phoff","","",67,null],[12,"e_shoff","","",67,null],[12,"e_flags","","",67,null],[12,"e_ehsize","","",67,null],[12,"e_phentsize","","",67,null],[12,"e_phnum","","",67,null],[12,"e_shentsize","","",67,null],[12,"e_shnum","","",67,null],[12,"e_shstrndx","","",67,null],[3,"Elf32_Sym","","",null,null],[12,"st_name","","",68,null],[12,"st_value","","",68,null],[12,"st_size","","",68,null],[12,"st_info","","",68,null],[12,"st_other","","",68,null],[12,"st_shndx","","",68,null],[3,"Elf64_Sym","","",null,null],[12,"st_name","","",69,null],[12,"st_info","","",69,null],[12,"st_other","","",69,null],[12,"st_shndx","","",69,null],[12,"st_value","","",69,null],[12,"st_size","","",69,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",70,null],[12,"p_offset","","",70,null],[12,"p_vaddr","","",70,null],[12,"p_paddr","","",70,null],[12,"p_filesz","","",70,null],[12,"p_memsz","","",70,null],[12,"p_flags","","",70,null],[12,"p_align","","",70,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",71,null],[12,"p_flags","","",71,null],[12,"p_offset","","",71,null],[12,"p_vaddr","","",71,null],[12,"p_paddr","","",71,null],[12,"p_filesz","","",71,null],[12,"p_memsz","","",71,null],[12,"p_align","","",71,null],[3,"Elf32_Shdr","","",null,null],[12,"sh_name","","",72,null],[12,"sh_type","","",72,null],[12,"sh_flags","","",72,null],[12,"sh_addr","","",72,null],[12,"sh_offset","","",72,null],[12,"sh_size","","",72,null],[12,"sh_link","","",72,null],[12,"sh_info","","",72,null],[12,"sh_addralign","","",72,null],[12,"sh_entsize","","",72,null],[3,"Elf64_Shdr","","",null,null],[12,"sh_name","","",73,null],[12,"sh_type","","",73,null],[12,"sh_flags","","",73,null],[12,"sh_addr","","",73,null],[12,"sh_offset","","",73,null],[12,"sh_size","","",73,null],[12,"sh_link","","",73,null],[12,"sh_info","","",73,null],[12,"sh_addralign","","",73,null],[12,"sh_entsize","","",73,null],[3,"Elf32_Chdr","","",null,null],[12,"ch_type","","",74,null],[12,"ch_size","","",74,null],[12,"ch_addralign","","",74,null],[3,"Elf64_Chdr","","",null,null],[12,"ch_type","","",75,null],[12,"ch_reserved","","",75,null],[12,"ch_size","","",75,null],[12,"ch_addralign","","",75,null],[3,"ucred","","",null,null],[12,"pid","","",76,null],[12,"uid","","",76,null],[12,"gid","","",76,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",77,null],[12,"mnt_dir","","",77,null],[12,"mnt_type","","",77,null],[12,"mnt_opts","","",77,null],[12,"mnt_freq","","",77,null],[12,"mnt_passno","","",77,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[12,"cmd","","",78,null],[12,"version","","",78,null],[12,"reserved","","",78,null],[3,"in6_pktinfo","","",null,null],[12,"ipi6_addr","","",79,null],[12,"ipi6_ifindex","","",79,null],[3,"arpd_request","","",null,null],[12,"req","","",80,null],[12,"ip","","",80,null],[12,"dev","","",80,null],[12,"stamp","","",80,null],[12,"updated","","",80,null],[12,"ha","","",80,null],[3,"inotify_event","","",null,null],[12,"wd","","",81,null],[12,"mask","","",81,null],[12,"cookie","","",81,null],[12,"len","","",81,null],[3,"sockaddr_vm","","",null,null],[12,"svm_family","","",82,null],[12,"svm_reserved1","","",82,null],[12,"svm_port","","",82,null],[12,"svm_cid","","",82,null],[12,"svm_zero","","",82,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",83,null],[12,"nl_pid","","",83,null],[12,"nl_groups","","",83,null],[3,"dirent","","",null,null],[12,"d_ino","","",84,null],[12,"d_off","","",84,null],[12,"d_reclen","","",84,null],[12,"d_type","","",84,null],[12,"d_name","","",84,null],[3,"dirent64","","",null,null],[12,"d_ino","","",85,null],[12,"d_off","","",85,null],[12,"d_reclen","","",85,null],[12,"d_type","","",85,null],[12,"d_name","","",85,null],[3,"sockaddr_alg","","",null,null],[12,"salg_family","","",86,null],[12,"salg_type","","",86,null],[12,"salg_feat","","",86,null],[12,"salg_mask","","",86,null],[12,"salg_name","","",86,null],[3,"af_alg_iv","","",null,null],[12,"ivlen","","",87,null],[12,"iv","","",87,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",88,null],[12,"mq_maxmsg","","",88,null],[12,"mq_msgsize","","",88,null],[12,"mq_curmsgs","","",88,null],[3,"statx","","",null,null],[12,"stx_mask","","",89,null],[12,"stx_blksize","","",89,null],[12,"stx_attributes","","",89,null],[12,"stx_nlink","","",89,null],[12,"stx_uid","","",89,null],[12,"stx_gid","","",89,null],[12,"stx_mode","","",89,null],[12,"__statx_pad1","","",89,null],[12,"stx_ino","","",89,null],[12,"stx_size","","",89,null],[12,"stx_blocks","","",89,null],[12,"stx_attributes_mask","","",89,null],[12,"stx_atime","","",89,null],[12,"stx_btime","","",89,null],[12,"stx_ctime","","",89,null],[12,"stx_mtime","","",89,null],[12,"stx_rdev_major","","",89,null],[12,"stx_rdev_minor","","",89,null],[12,"stx_dev_major","","",89,null],[12,"stx_dev_minor","","",89,null],[12,"__statx_pad2","","",89,null],[3,"statx_timestamp","","",null,null],[12,"tv_sec","","",90,null],[12,"tv_nsec","","",90,null],[12,"__statx_timestamp_pad1","","",90,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",91,null],[12,"aio_lio_opcode","","",91,null],[12,"aio_reqprio","","",91,null],[12,"aio_buf","","",91,null],[12,"aio_nbytes","","",91,null],[12,"aio_sigevent","","",91,null],[12,"aio_offset","","",91,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",92,null],[12,"e_exit","","",92,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",93,null],[12,"tv_usec","","",93,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",94,null],[12,"gl_pathv","","",94,null],[12,"gl_offs","","",94,null],[12,"gl_flags","","",94,null],[3,"msghdr","","",null,null],[12,"msg_name","","",95,null],[12,"msg_namelen","","",95,null],[12,"msg_iov","","",95,null],[12,"msg_iovlen","","",95,null],[12,"msg_control","","",95,null],[12,"msg_controllen","","",95,null],[12,"msg_flags","","",95,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",96,null],[12,"cmsg_level","","",96,null],[12,"cmsg_type","","",96,null],[3,"termios","","",null,null],[12,"c_iflag","","",97,null],[12,"c_oflag","","",97,null],[12,"c_cflag","","",97,null],[12,"c_lflag","","",97,null],[12,"c_line","","",97,null],[12,"c_cc","","",97,null],[12,"c_ispeed","","",97,null],[12,"c_ospeed","","",97,null],[3,"mallinfo","","",null,null],[12,"arena","","",98,null],[12,"ordblks","","",98,null],[12,"smblks","","",98,null],[12,"hblks","","",98,null],[12,"hblkhd","","",98,null],[12,"usmblks","","",98,null],[12,"fsmblks","","",98,null],[12,"uordblks","","",98,null],[12,"fordblks","","",98,null],[12,"keepcost","","",98,null],[3,"nlmsghdr","","",null,null],[12,"nlmsg_len","","",99,null],[12,"nlmsg_type","","",99,null],[12,"nlmsg_flags","","",99,null],[12,"nlmsg_seq","","",99,null],[12,"nlmsg_pid","","",99,null],[3,"nlmsgerr","","",null,null],[12,"error","","",100,null],[12,"msg","","",100,null],[3,"nl_pktinfo","","",null,null],[12,"group","","",101,null],[3,"nl_mmap_req","","",null,null],[12,"nm_block_size","","",102,null],[12,"nm_block_nr","","",102,null],[12,"nm_frame_size","","",102,null],[12,"nm_frame_nr","","",102,null],[3,"nl_mmap_hdr","","",null,null],[12,"nm_status","","",103,null],[12,"nm_len","","",103,null],[12,"nm_group","","",103,null],[12,"nm_pid","","",103,null],[12,"nm_uid","","",103,null],[12,"nm_gid","","",103,null],[3,"nlattr","","",null,null],[12,"nla_len","","",104,null],[12,"nla_type","","",104,null],[3,"rtentry","","",null,null],[12,"rt_pad1","","",105,null],[12,"rt_dst","","",105,null],[12,"rt_gateway","","",105,null],[12,"rt_genmask","","",105,null],[12,"rt_flags","","",105,null],[12,"rt_pad2","","",105,null],[12,"rt_pad3","","",105,null],[12,"rt_tos","","",105,null],[12,"rt_class","","",105,null],[12,"rt_pad4","","",105,null],[12,"rt_metric","","",105,null],[12,"rt_dev","","",105,null],[12,"rt_mtu","","",105,null],[12,"rt_window","","",105,null],[12,"rt_irtt","","",105,null],[3,"utmpx","","",null,null],[12,"ut_type","","",106,null],[12,"ut_pid","","",106,null],[12,"ut_line","","",106,null],[12,"ut_id","","",106,null],[12,"ut_user","","",106,null],[12,"ut_host","","",106,null],[12,"ut_exit","","",106,null],[12,"ut_session","","",106,null],[12,"ut_tv","","",106,null],[12,"ut_addr_v6","","",106,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",107,null],[12,"loads","","",107,null],[12,"totalram","","",107,null],[12,"freeram","","",107,null],[12,"sharedram","","",107,null],[12,"bufferram","","",107,null],[12,"totalswap","","",107,null],[12,"freeswap","","",107,null],[12,"procs","","",107,null],[12,"pad","","",107,null],[12,"totalhigh","","",107,null],[12,"freehigh","","",107,null],[12,"mem_unit","","",107,null],[12,"_f","","",107,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",108,null],[12,"msg_stime","","",108,null],[12,"msg_rtime","","",108,null],[12,"msg_ctime","","",108,null],[12,"msg_qnum","","",108,null],[12,"msg_qbytes","","",108,null],[12,"msg_lspid","","",108,null],[12,"msg_lrpid","","",108,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",109,null],[12,"sa_mask","","",109,null],[12,"sa_flags","","",109,null],[12,"sa_restorer","","",109,null],[3,"statfs","","",null,null],[12,"f_type","","",110,null],[12,"f_bsize","","",110,null],[12,"f_blocks","","",110,null],[12,"f_bfree","","",110,null],[12,"f_bavail","","",110,null],[12,"f_files","","",110,null],[12,"f_ffree","","",110,null],[12,"f_fsid","","",110,null],[12,"f_namelen","","",110,null],[12,"f_frsize","","",110,null],[3,"flock","","",null,null],[12,"l_type","","",111,null],[12,"l_whence","","",111,null],[12,"l_start","","",111,null],[12,"l_len","","",111,null],[12,"l_pid","","",111,null],[3,"flock64","","",null,null],[12,"l_type","","",112,null],[12,"l_whence","","",112,null],[12,"l_start","","",112,null],[12,"l_len","","",112,null],[12,"l_pid","","",112,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",113,null],[12,"si_errno","","",113,null],[12,"si_code","","",113,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",114,null],[12,"ss_flags","","",114,null],[12,"ss_size","","",114,null],[3,"stat","","",null,null],[12,"st_dev","","",115,null],[12,"st_ino","","",115,null],[12,"st_nlink","","",115,null],[12,"st_mode","","",115,null],[12,"st_uid","","",115,null],[12,"st_gid","","",115,null],[12,"st_rdev","","",115,null],[12,"st_size","","",115,null],[12,"st_blksize","","",115,null],[12,"st_blocks","","",115,null],[12,"st_atime","","",115,null],[12,"st_atime_nsec","","",115,null],[12,"st_mtime","","",115,null],[12,"st_mtime_nsec","","",115,null],[12,"st_ctime","","",115,null],[12,"st_ctime_nsec","","",115,null],[3,"stat64","","",null,null],[12,"st_dev","","",116,null],[12,"st_ino","","",116,null],[12,"st_nlink","","",116,null],[12,"st_mode","","",116,null],[12,"st_uid","","",116,null],[12,"st_gid","","",116,null],[12,"st_rdev","","",116,null],[12,"st_size","","",116,null],[12,"st_blksize","","",116,null],[12,"st_blocks","","",116,null],[12,"st_atime","","",116,null],[12,"st_atime_nsec","","",116,null],[12,"st_mtime","","",116,null],[12,"st_mtime_nsec","","",116,null],[12,"st_ctime","","",116,null],[12,"st_ctime_nsec","","",116,null],[3,"statfs64","","",null,null],[12,"f_type","","",117,null],[12,"f_bsize","","",117,null],[12,"f_blocks","","",117,null],[12,"f_bfree","","",117,null],[12,"f_bavail","","",117,null],[12,"f_files","","",117,null],[12,"f_ffree","","",117,null],[12,"f_fsid","","",117,null],[12,"f_namelen","","",117,null],[12,"f_frsize","","",117,null],[12,"f_flags","","",117,null],[12,"f_spare","","",117,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",118,null],[12,"f_frsize","","",118,null],[12,"f_blocks","","",118,null],[12,"f_bfree","","",118,null],[12,"f_bavail","","",118,null],[12,"f_files","","",118,null],[12,"f_ffree","","",118,null],[12,"f_favail","","",118,null],[12,"f_fsid","","",118,null],[12,"f_flag","","",118,null],[12,"f_namemax","","",118,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",119,null],[12,"exponent","","",119,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",120,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",121,null],[12,"swd","","",121,null],[12,"ftw","","",121,null],[12,"fop","","",121,null],[12,"rip","","",121,null],[12,"rdp","","",121,null],[12,"mxcsr","","",121,null],[12,"mxcr_mask","","",121,null],[12,"_st","","",121,null],[12,"_xmm","","",121,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",122,null],[12,"r14","","",122,null],[12,"r13","","",122,null],[12,"r12","","",122,null],[12,"rbp","","",122,null],[12,"rbx","","",122,null],[12,"r11","","",122,null],[12,"r10","","",122,null],[12,"r9","","",122,null],[12,"r8","","",122,null],[12,"rax","","",122,null],[12,"rcx","","",122,null],[12,"rdx","","",122,null],[12,"rsi","","",122,null],[12,"rdi","","",122,null],[12,"orig_rax","","",122,null],[12,"rip","","",122,null],[12,"cs","","",122,null],[12,"eflags","","",122,null],[12,"rsp","","",122,null],[12,"ss","","",122,null],[12,"fs_base","","",122,null],[12,"gs_base","","",122,null],[12,"ds","","",122,null],[12,"es","","",122,null],[12,"fs","","",122,null],[12,"gs","","",122,null],[3,"user","","",null,null],[12,"regs","","",123,null],[12,"u_fpvalid","","",123,null],[12,"i387","","",123,null],[12,"u_tsize","","",123,null],[12,"u_dsize","","",123,null],[12,"u_ssize","","",123,null],[12,"start_code","","",123,null],[12,"start_stack","","",123,null],[12,"signal","","",123,null],[12,"u_ar0","","",123,null],[12,"u_fpstate","","",123,null],[12,"magic","","",123,null],[12,"u_comm","","",123,null],[12,"u_debugreg","","",123,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",124,null],[12,"fpregs","","",124,null],[3,"ipc_perm","","",null,null],[12,"__key","","",125,null],[12,"uid","","",125,null],[12,"gid","","",125,null],[12,"cuid","","",125,null],[12,"cgid","","",125,null],[12,"mode","","",125,null],[12,"__seq","","",125,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",126,null],[12,"shm_segsz","","",126,null],[12,"shm_atime","","",126,null],[12,"shm_dtime","","",126,null],[12,"shm_ctime","","",126,null],[12,"shm_cpid","","",126,null],[12,"shm_lpid","","",126,null],[12,"shm_nattch","","",126,null],[3,"termios2","","",null,null],[12,"c_iflag","","",127,null],[12,"c_oflag","","",127,null],[12,"c_cflag","","",127,null],[12,"c_lflag","","",127,null],[12,"c_line","","",127,null],[12,"c_cc","","",127,null],[12,"c_ispeed","","",127,null],[12,"c_ospeed","","",127,null],[3,"ip_mreqn","","",null,null],[12,"imr_multiaddr","","",128,null],[12,"imr_address","","",128,null],[12,"imr_ifindex","","",128,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",129,null],[12,"swd","","",129,null],[12,"ftw","","",129,null],[12,"fop","","",129,null],[12,"rip","","",129,null],[12,"rdp","","",129,null],[12,"mxcsr","","",129,null],[12,"mxcr_mask","","",129,null],[12,"st_space","","",129,null],[12,"xmm_space","","",129,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",130,null],[12,"uc_link","","",130,null],[12,"uc_stack","","",130,null],[12,"uc_mcontext","","",130,null],[12,"uc_sigmask","","",130,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",131,null],[12,"f_frsize","","",131,null],[12,"f_blocks","","",131,null],[12,"f_bfree","","",131,null],[12,"f_bavail","","",131,null],[12,"f_files","","",131,null],[12,"f_ffree","","",131,null],[12,"f_favail","","",131,null],[12,"f_fsid","","",131,null],[12,"f_flag","","",131,null],[12,"f_namemax","","",131,null],[3,"max_align_t","","",null,null],[3,"sem_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",132,null],[4,"DIR","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"CMSG_FIRSTHDR","","",null,[[]]],[5,"CMSG_DATA","","",null,[[]]],[5,"CMSG_SPACE","","",null,[[["c_uint"]],["c_uint"]]],[5,"CMSG_LEN","","",null,[[["c_uint"]],["c_uint"]]],[5,"FD_CLR","","",null,[[["c_int"]]]],[5,"FD_ISSET","","",null,[[["c_int"]],["bool"]]],[5,"FD_SET","","",null,[[["c_int"]]]],[5,"FD_ZERO","","",null,[[]]],[5,"WIFSTOPPED","","",null,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",null,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",null,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",null,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",null,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",null,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",null,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",null,[[["c_int"]],["bool"]]],[5,"QCMD","","",null,[[["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",null,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",null,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",null,[[["u8"]],["u8"]]],[5,"IPTOS_ECN","","",null,[[["u8"]],["u8"]]],[5,"NLA_ALIGN","","",null,[[["c_int"]],["c_int"]]],[5,"CMSG_NXTHDR","","",null,[[]]],[5,"CPU_ZERO","","",null,[[["cpu_set_t"]]]],[5,"CPU_SET","","",null,[[["cpu_set_t"],["usize"]]]],[5,"CPU_CLR","","",null,[[["cpu_set_t"],["usize"]]]],[5,"CPU_ISSET","","",null,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",null,[[["cpu_set_t"]],["bool"]]],[5,"major","","",null,[[["dev_t"]],["c_uint"]]],[5,"minor","","",null,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",null,[[["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",null,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",null,[[["u8"]],["u8"]]],[5,"RT_TOS","","",null,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",null,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",null,[[["u32"]],["bool"]]],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"isblank","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strcasecmp","","",null,null],[5,"strncasecmp","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setegid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"ttyname_r","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"strcasestr","","",null,null],[5,"getline","","",null,null],[5,"getsid","","",null,null],[5,"truncate","","",null,null],[5,"pause","","",null,null],[5,"readlinkat","","",null,null],[5,"mkdirat","","",null,null],[5,"openat","","",null,null],[5,"fdopendir","","",null,null],[5,"readdir_r","","The 64-bit libc on Solaris and illumos only has readdir_r.…",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetspeed","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_init","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"login_tty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"uname","","",null,null],[5,"strerror_r","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"fallocate64","","",null,null],[5,"posix_fallocate","","",null,null],[5,"posix_fallocate64","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_timedreceive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_timedsend","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sem_getvalue","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"fread_unlocked","","",null,null],[5,"inotify_rm_watch","","",null,null],[5,"inotify_init","","",null,null],[5,"inotify_init1","","",null,null],[5,"inotify_add_watch","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"utmpname","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"mallopt","","",null,null],[5,"gettimeofday","","",null,null],[5,"statx","","",null,null],[5,"getrandom","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"pthread_getname_np","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"si_addr","","",113,[[["self"]]]],[11,"si_value","","",113,[[["self"]],["sigval"]]],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"locale_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"Elf64_Sxword","","",null,null],[6,"Elf32_Section","","",null,null],[6,"Elf64_Section","","",null,null],[6,"pthread_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"__rlimit_resource_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"ARPOP_REQUEST","","",null,null],[17,"ARPOP_REPLY","","",null,null],[17,"ATF_COM","","",null,null],[17,"ATF_PERM","","",null,null],[17,"ATF_PUBL","","",null,null],[17,"ATF_USETRAILERS","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_ALG","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TOS","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_PKTINFO","","",null,null],[17,"IP_RECVTOS","","",null,null],[17,"IP_RECVERR","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_ADD_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_DROP_SOURCE_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADDRFORM","","",null,null],[17,"IPV6_2292PKTINFO","","",null,null],[17,"IPV6_2292HOPOPTS","","",null,null],[17,"IPV6_2292DSTOPTS","","",null,null],[17,"IPV6_2292RTHDR","","",null,null],[17,"IPV6_2292PKTOPTIONS","","",null,null],[17,"IPV6_CHECKSUM","","",null,null],[17,"IPV6_2292HOPLIMIT","","",null,null],[17,"IPV6_NEXTHOP","","",null,null],[17,"IPV6_FLOWINFO","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ROUTER_ALERT","","",null,null],[17,"IPV6_MTU_DISCOVER","","",null,null],[17,"IPV6_MTU","","",null,null],[17,"IPV6_RECVERR","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"IPV6_JOIN_ANYCAST","","",null,null],[17,"IPV6_LEAVE_ANYCAST","","",null,null],[17,"IPV6_RECVPKTINFO","","",null,null],[17,"IPV6_PKTINFO","","",null,null],[17,"IPV6_RECVTCLASS","","",null,null],[17,"IPV6_TCLASS","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"IPTOS_LOWDELAY","","",null,null],[17,"IPTOS_THROUGHPUT","","",null,null],[17,"IPTOS_RELIABILITY","","",null,null],[17,"IPTOS_MINCOST","","",null,null],[17,"IPTOS_PREC_NETCONTROL","","",null,null],[17,"IPTOS_PREC_INTERNETCONTROL","","",null,null],[17,"IPTOS_PREC_CRITIC_ECP","","",null,null],[17,"IPTOS_PREC_FLASHOVERRIDE","","",null,null],[17,"IPTOS_PREC_FLASH","","",null,null],[17,"IPTOS_PREC_IMMEDIATE","","",null,null],[17,"IPTOS_PREC_PRIORITY","","",null,null],[17,"IPTOS_PREC_ROUTINE","","",null,null],[17,"IPTOS_ECN_MASK","","",null,null],[17,"IPTOS_ECN_ECT1","","",null,null],[17,"IPTOS_ECN_ECT0","","",null,null],[17,"IPTOS_ECN_CE","","",null,null],[17,"IPOPT_COPY","","",null,null],[17,"IPOPT_CLASS_MASK","","",null,null],[17,"IPOPT_NUMBER_MASK","","",null,null],[17,"IPOPT_CONTROL","","",null,null],[17,"IPOPT_RESERVED1","","",null,null],[17,"IPOPT_MEASUREMENT","","",null,null],[17,"IPOPT_RESERVED2","","",null,null],[17,"IPOPT_END","","",null,null],[17,"IPOPT_NOOP","","",null,null],[17,"IPOPT_SEC","","",null,null],[17,"IPOPT_LSRR","","",null,null],[17,"IPOPT_TIMESTAMP","","",null,null],[17,"IPOPT_RR","","",null,null],[17,"IPOPT_SID","","",null,null],[17,"IPOPT_SSRR","","",null,null],[17,"IPOPT_RA","","",null,null],[17,"IPVERSION","","",null,null],[17,"MAXTTL","","",null,null],[17,"IPDEFTTL","","",null,null],[17,"IPOPT_OPTVAL","","",null,null],[17,"IPOPT_OLEN","","",null,null],[17,"IPOPT_OFFSET","","",null,null],[17,"IPOPT_MINOFF","","",null,null],[17,"MAX_IPOPTLEN","","",null,null],[17,"IPOPT_NOP","","",null,null],[17,"IPOPT_EOL","","",null,null],[17,"IPOPT_TS","","",null,null],[17,"IPOPT_TS_TSONLY","","",null,null],[17,"IPOPT_TS_TSANDADDR","","",null,null],[17,"IPOPT_TS_PRESPEC","","",null,null],[17,"ARPOP_RREQUEST","","",null,null],[17,"ARPOP_RREPLY","","",null,null],[17,"ARPOP_InREQUEST","","",null,null],[17,"ARPOP_InREPLY","","",null,null],[17,"ARPOP_NAK","","",null,null],[17,"ATF_NETMASK","","",null,null],[17,"ATF_DONTPUB","","",null,null],[17,"ARPHRD_NETROM","","",null,null],[17,"ARPHRD_ETHER","","",null,null],[17,"ARPHRD_EETHER","","",null,null],[17,"ARPHRD_AX25","","",null,null],[17,"ARPHRD_PRONET","","",null,null],[17,"ARPHRD_CHAOS","","",null,null],[17,"ARPHRD_IEEE802","","",null,null],[17,"ARPHRD_ARCNET","","",null,null],[17,"ARPHRD_APPLETLK","","",null,null],[17,"ARPHRD_DLCI","","",null,null],[17,"ARPHRD_ATM","","",null,null],[17,"ARPHRD_METRICOM","","",null,null],[17,"ARPHRD_IEEE1394","","",null,null],[17,"ARPHRD_EUI64","","",null,null],[17,"ARPHRD_INFINIBAND","","",null,null],[17,"ARPHRD_SLIP","","",null,null],[17,"ARPHRD_CSLIP","","",null,null],[17,"ARPHRD_SLIP6","","",null,null],[17,"ARPHRD_CSLIP6","","",null,null],[17,"ARPHRD_RSRVD","","",null,null],[17,"ARPHRD_ADAPT","","",null,null],[17,"ARPHRD_ROSE","","",null,null],[17,"ARPHRD_X25","","",null,null],[17,"ARPHRD_HWX25","","",null,null],[17,"ARPHRD_PPP","","",null,null],[17,"ARPHRD_CISCO","","",null,null],[17,"ARPHRD_HDLC","","",null,null],[17,"ARPHRD_LAPB","","",null,null],[17,"ARPHRD_DDCMP","","",null,null],[17,"ARPHRD_RAWHDLC","","",null,null],[17,"ARPHRD_TUNNEL","","",null,null],[17,"ARPHRD_TUNNEL6","","",null,null],[17,"ARPHRD_FRAD","","",null,null],[17,"ARPHRD_SKIP","","",null,null],[17,"ARPHRD_LOOPBACK","","",null,null],[17,"ARPHRD_LOCALTLK","","",null,null],[17,"ARPHRD_FDDI","","",null,null],[17,"ARPHRD_BIF","","",null,null],[17,"ARPHRD_SIT","","",null,null],[17,"ARPHRD_IPDDP","","",null,null],[17,"ARPHRD_IPGRE","","",null,null],[17,"ARPHRD_PIMREG","","",null,null],[17,"ARPHRD_HIPPI","","",null,null],[17,"ARPHRD_ASH","","",null,null],[17,"ARPHRD_ECONET","","",null,null],[17,"ARPHRD_IRDA","","",null,null],[17,"ARPHRD_FCPP","","",null,null],[17,"ARPHRD_FCAL","","",null,null],[17,"ARPHRD_FCPL","","",null,null],[17,"ARPHRD_FCFABRIC","","",null,null],[17,"ARPHRD_IEEE802_TR","","",null,null],[17,"ARPHRD_IEEE80211","","",null,null],[17,"ARPHRD_IEEE80211_PRISM","","",null,null],[17,"ARPHRD_IEEE80211_RADIOTAP","","",null,null],[17,"ARPHRD_IEEE802154","","",null,null],[17,"ARPHRD_VOID","","",null,null],[17,"ARPHRD_NONE","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_SEAL_FUTURE_WRITE","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFA_UNSPEC","","",null,null],[17,"IFA_ADDRESS","","",null,null],[17,"IFA_LOCAL","","",null,null],[17,"IFA_LABEL","","",null,null],[17,"IFA_BROADCAST","","",null,null],[17,"IFA_ANYCAST","","",null,null],[17,"IFA_CACHEINFO","","",null,null],[17,"IFA_MULTICAST","","",null,null],[17,"IFA_F_SECONDARY","","",null,null],[17,"IFA_F_TEMPORARY","","",null,null],[17,"IFA_F_NODAD","","",null,null],[17,"IFA_F_OPTIMISTIC","","",null,null],[17,"IFA_F_DADFAILED","","",null,null],[17,"IFA_F_HOMEADDRESS","","",null,null],[17,"IFA_F_DEPRECATED","","",null,null],[17,"IFA_F_TENTATIVE","","",null,null],[17,"IFA_F_PERMANENT","","",null,null],[17,"IFLA_UNSPEC","","",null,null],[17,"IFLA_ADDRESS","","",null,null],[17,"IFLA_BROADCAST","","",null,null],[17,"IFLA_IFNAME","","",null,null],[17,"IFLA_MTU","","",null,null],[17,"IFLA_LINK","","",null,null],[17,"IFLA_QDISC","","",null,null],[17,"IFLA_STATS","","",null,null],[17,"IFLA_COST","","",null,null],[17,"IFLA_PRIORITY","","",null,null],[17,"IFLA_MASTER","","",null,null],[17,"IFLA_WIRELESS","","",null,null],[17,"IFLA_PROTINFO","","",null,null],[17,"IFLA_TXQLEN","","",null,null],[17,"IFLA_MAP","","",null,null],[17,"IFLA_WEIGHT","","",null,null],[17,"IFLA_OPERSTATE","","",null,null],[17,"IFLA_LINKMODE","","",null,null],[17,"IFLA_LINKINFO","","",null,null],[17,"IFLA_NET_NS_PID","","",null,null],[17,"IFLA_IFALIAS","","",null,null],[17,"IFLA_NUM_VF","","",null,null],[17,"IFLA_VFINFO_LIST","","",null,null],[17,"IFLA_STATS64","","",null,null],[17,"IFLA_VF_PORTS","","",null,null],[17,"IFLA_PORT_SELF","","",null,null],[17,"IFLA_AF_SPEC","","",null,null],[17,"IFLA_GROUP","","",null,null],[17,"IFLA_NET_NS_FD","","",null,null],[17,"IFLA_EXT_MASK","","",null,null],[17,"IFLA_PROMISCUITY","","",null,null],[17,"IFLA_NUM_TX_QUEUES","","",null,null],[17,"IFLA_NUM_RX_QUEUES","","",null,null],[17,"IFLA_CARRIER","","",null,null],[17,"IFLA_PHYS_PORT_ID","","",null,null],[17,"IFLA_CARRIER_CHANGES","","",null,null],[17,"IFLA_PHYS_SWITCH_ID","","",null,null],[17,"IFLA_LINK_NETNSID","","",null,null],[17,"IFLA_PHYS_PORT_NAME","","",null,null],[17,"IFLA_PROTO_DOWN","","",null,null],[17,"IFLA_INFO_UNSPEC","","",null,null],[17,"IFLA_INFO_KIND","","",null,null],[17,"IFLA_INFO_DATA","","",null,null],[17,"IFLA_INFO_XSTATS","","",null,null],[17,"IFLA_INFO_SLAVE_KIND","","",null,null],[17,"IFLA_INFO_SLAVE_DATA","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"SCHED_RESET_ON_FORK","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"AF_XDP","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"PF_XDP","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IP_ORIGDSTADDR","","",null,null],[17,"IP_RECVORIGDSTADDR","","",null,null],[17,"IPV6_ORIGDSTADDR","","",null,null],[17,"IPV6_RECVORIGDSTADDR","","",null,null],[17,"IPV6_FLOWLABEL_MGR","","",null,null],[17,"IPV6_FLOWINFO_SEND","","",null,null],[17,"IPV6_FLOWINFO_FLOWLABEL","","",null,null],[17,"IPV6_FLOWINFO_PRIORITY","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"MFD_HUGETLB","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NFNLGRP_NONE","","",null,null],[17,"NFNLGRP_CONNTRACK_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_DESTROY","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_NEW","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_UPDATE","","",null,null],[17,"NFNLGRP_CONNTRACK_EXP_DESTROY","","",null,null],[17,"NFNLGRP_NFTABLES","","",null,null],[17,"NFNLGRP_ACCT_QUOTA","","",null,null],[17,"NFNETLINK_V0","","",null,null],[17,"NFNL_SUBSYS_NONE","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_EXP","","",null,null],[17,"NFNL_SUBSYS_QUEUE","","",null,null],[17,"NFNL_SUBSYS_ULOG","","",null,null],[17,"NFNL_SUBSYS_OSF","","",null,null],[17,"NFNL_SUBSYS_IPSET","","",null,null],[17,"NFNL_SUBSYS_ACCT","","",null,null],[17,"NFNL_SUBSYS_CTNETLINK_TIMEOUT","","",null,null],[17,"NFNL_SUBSYS_CTHELPER","","",null,null],[17,"NFNL_SUBSYS_NFTABLES","","",null,null],[17,"NFNL_SUBSYS_NFT_COMPAT","","",null,null],[17,"NFNL_SUBSYS_COUNT","","",null,null],[17,"NFNL_MSG_BATCH_BEGIN","","",null,null],[17,"NFNL_MSG_BATCH_END","","",null,null],[17,"NFULNL_MSG_PACKET","","",null,null],[17,"NFULNL_MSG_CONFIG","","",null,null],[17,"NFULA_UNSPEC","","",null,null],[17,"NFULA_PACKET_HDR","","",null,null],[17,"NFULA_MARK","","",null,null],[17,"NFULA_TIMESTAMP","","",null,null],[17,"NFULA_IFINDEX_INDEV","","",null,null],[17,"NFULA_IFINDEX_OUTDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSINDEV","","",null,null],[17,"NFULA_IFINDEX_PHYSOUTDEV","","",null,null],[17,"NFULA_HWADDR","","",null,null],[17,"NFULA_PAYLOAD","","",null,null],[17,"NFULA_PREFIX","","",null,null],[17,"NFULA_UID","","",null,null],[17,"NFULA_SEQ","","",null,null],[17,"NFULA_SEQ_GLOBAL","","",null,null],[17,"NFULA_GID","","",null,null],[17,"NFULA_HWTYPE","","",null,null],[17,"NFULA_HWHEADER","","",null,null],[17,"NFULA_HWLEN","","",null,null],[17,"NFULA_CT","","",null,null],[17,"NFULA_CT_INFO","","",null,null],[17,"NFULNL_CFG_CMD_NONE","","",null,null],[17,"NFULNL_CFG_CMD_BIND","","",null,null],[17,"NFULNL_CFG_CMD_UNBIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_BIND","","",null,null],[17,"NFULNL_CFG_CMD_PF_UNBIND","","",null,null],[17,"NFULA_CFG_UNSPEC","","",null,null],[17,"NFULA_CFG_CMD","","",null,null],[17,"NFULA_CFG_MODE","","",null,null],[17,"NFULA_CFG_NLBUFSIZ","","",null,null],[17,"NFULA_CFG_TIMEOUT","","",null,null],[17,"NFULA_CFG_QTHRESH","","",null,null],[17,"NFULA_CFG_FLAGS","","",null,null],[17,"NFULNL_COPY_NONE","","",null,null],[17,"NFULNL_COPY_META","","",null,null],[17,"NFULNL_COPY_PACKET","","",null,null],[17,"NFULNL_CFG_F_SEQ","","",null,null],[17,"NFULNL_CFG_F_SEQ_GLOBAL","","",null,null],[17,"NFULNL_CFG_F_CONNTRACK","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"PACKET_ADD_MEMBERSHIP","","",null,null],[17,"PACKET_DROP_MEMBERSHIP","","",null,null],[17,"PACKET_MR_MULTICAST","","",null,null],[17,"PACKET_MR_PROMISC","","",null,null],[17,"PACKET_MR_ALLMULTI","","",null,null],[17,"PACKET_MR_UNICAST","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"SIOCADDRT","","",null,null],[17,"SIOCDELRT","","",null,null],[17,"SIOCGIFNAME","","",null,null],[17,"SIOCSIFLINK","","",null,null],[17,"SIOCGIFCONF","","",null,null],[17,"SIOCGIFFLAGS","","",null,null],[17,"SIOCSIFFLAGS","","",null,null],[17,"SIOCGIFADDR","","",null,null],[17,"SIOCSIFADDR","","",null,null],[17,"SIOCGIFDSTADDR","","",null,null],[17,"SIOCSIFDSTADDR","","",null,null],[17,"SIOCGIFBRDADDR","","",null,null],[17,"SIOCSIFBRDADDR","","",null,null],[17,"SIOCGIFNETMASK","","",null,null],[17,"SIOCSIFNETMASK","","",null,null],[17,"SIOCGIFMETRIC","","",null,null],[17,"SIOCSIFMETRIC","","",null,null],[17,"SIOCGIFMEM","","",null,null],[17,"SIOCSIFMEM","","",null,null],[17,"SIOCGIFMTU","","",null,null],[17,"SIOCSIFMTU","","",null,null],[17,"SIOCSIFHWADDR","","",null,null],[17,"SIOCGIFENCAP","","",null,null],[17,"SIOCSIFENCAP","","",null,null],[17,"SIOCGIFHWADDR","","",null,null],[17,"SIOCGIFSLAVE","","",null,null],[17,"SIOCSIFSLAVE","","",null,null],[17,"SIOCADDMULTI","","",null,null],[17,"SIOCDELMULTI","","",null,null],[17,"SIOCDARP","","",null,null],[17,"SIOCGARP","","",null,null],[17,"SIOCSARP","","",null,null],[17,"SIOCDRARP","","",null,null],[17,"SIOCGRARP","","",null,null],[17,"SIOCSRARP","","",null,null],[17,"SIOCGIFMAP","","",null,null],[17,"SIOCSIFMAP","","",null,null],[17,"IPTOS_TOS_MASK","","",null,null],[17,"IPTOS_PREC_MASK","","",null,null],[17,"IPTOS_ECN_NOT_ECT","","",null,null],[17,"RTF_UP","","",null,null],[17,"RTF_GATEWAY","","",null,null],[17,"RTF_HOST","","",null,null],[17,"RTF_REINSTATE","","",null,null],[17,"RTF_DYNAMIC","","",null,null],[17,"RTF_MODIFIED","","",null,null],[17,"RTF_MTU","","",null,null],[17,"RTF_MSS","","",null,null],[17,"RTF_WINDOW","","",null,null],[17,"RTF_IRTT","","",null,null],[17,"RTF_REJECT","","",null,null],[17,"RTF_STATIC","","",null,null],[17,"RTF_XRESOLVE","","",null,null],[17,"RTF_NOFORWARD","","",null,null],[17,"RTF_THROW","","",null,null],[17,"RTF_NOPMTUDISC","","",null,null],[17,"RTF_DEFAULT","","",null,null],[17,"RTF_ALLONLINK","","",null,null],[17,"RTF_ADDRCONF","","",null,null],[17,"RTF_LINKRT","","",null,null],[17,"RTF_NONEXTHOP","","",null,null],[17,"RTF_CACHE","","",null,null],[17,"RTF_FLOW","","",null,null],[17,"RTF_POLICY","","",null,null],[17,"RTCF_VALVE","","",null,null],[17,"RTCF_MASQ","","",null,null],[17,"RTCF_NAT","","",null,null],[17,"RTCF_DOREDIRECT","","",null,null],[17,"RTCF_LOG","","",null,null],[17,"RTCF_DIRECTSRC","","",null,null],[17,"RTF_LOCAL","","",null,null],[17,"RTF_INTERFACE","","",null,null],[17,"RTF_MULTICAST","","",null,null],[17,"RTF_BROADCAST","","",null,null],[17,"RTF_NAT","","",null,null],[17,"RTF_ADDRCLASSMASK","","",null,null],[17,"RT_CLASS_UNSPEC","","",null,null],[17,"RT_CLASS_DEFAULT","","",null,null],[17,"RT_CLASS_MAIN","","",null,null],[17,"RT_CLASS_LOCAL","","",null,null],[17,"RT_CLASS_MAX","","",null,null],[17,"NUD_NONE","","",null,null],[17,"NUD_INCOMPLETE","","",null,null],[17,"NUD_REACHABLE","","",null,null],[17,"NUD_STALE","","",null,null],[17,"NUD_DELAY","","",null,null],[17,"NUD_PROBE","","",null,null],[17,"NUD_FAILED","","",null,null],[17,"NUD_NOARP","","",null,null],[17,"NUD_PERMANENT","","",null,null],[17,"NTF_USE","","",null,null],[17,"NTF_SELF","","",null,null],[17,"NTF_MASTER","","",null,null],[17,"NTF_PROXY","","",null,null],[17,"NTF_ROUTER","","",null,null],[17,"NDA_UNSPEC","","",null,null],[17,"NDA_DST","","",null,null],[17,"NDA_LLADDR","","",null,null],[17,"NDA_CACHEINFO","","",null,null],[17,"NDA_PROBES","","",null,null],[17,"NDA_VLAN","","",null,null],[17,"NDA_PORT","","",null,null],[17,"NDA_VNI","","",null,null],[17,"NDA_IFINDEX","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TCA_UNSPEC","","",null,null],[17,"TCA_KIND","","",null,null],[17,"TCA_OPTIONS","","",null,null],[17,"TCA_STATS","","",null,null],[17,"TCA_XSTATS","","",null,null],[17,"TCA_RATE","","",null,null],[17,"TCA_FCNT","","",null,null],[17,"TCA_STATS2","","",null,null],[17,"TCA_STAB","","",null,null],[17,"RTM_NEWLINK","","",null,null],[17,"RTM_DELLINK","","",null,null],[17,"RTM_GETLINK","","",null,null],[17,"RTM_SETLINK","","",null,null],[17,"RTM_NEWADDR","","",null,null],[17,"RTM_DELADDR","","",null,null],[17,"RTM_GETADDR","","",null,null],[17,"RTM_NEWROUTE","","",null,null],[17,"RTM_DELROUTE","","",null,null],[17,"RTM_GETROUTE","","",null,null],[17,"RTM_NEWNEIGH","","",null,null],[17,"RTM_DELNEIGH","","",null,null],[17,"RTM_GETNEIGH","","",null,null],[17,"RTM_NEWRULE","","",null,null],[17,"RTM_DELRULE","","",null,null],[17,"RTM_GETRULE","","",null,null],[17,"RTM_NEWQDISC","","",null,null],[17,"RTM_DELQDISC","","",null,null],[17,"RTM_GETQDISC","","",null,null],[17,"RTM_NEWTCLASS","","",null,null],[17,"RTM_DELTCLASS","","",null,null],[17,"RTM_GETTCLASS","","",null,null],[17,"RTM_NEWTFILTER","","",null,null],[17,"RTM_DELTFILTER","","",null,null],[17,"RTM_GETTFILTER","","",null,null],[17,"RTM_NEWACTION","","",null,null],[17,"RTM_DELACTION","","",null,null],[17,"RTM_GETACTION","","",null,null],[17,"RTM_NEWPREFIX","","",null,null],[17,"RTM_GETMULTICAST","","",null,null],[17,"RTM_GETANYCAST","","",null,null],[17,"RTM_NEWNEIGHTBL","","",null,null],[17,"RTM_GETNEIGHTBL","","",null,null],[17,"RTM_SETNEIGHTBL","","",null,null],[17,"RTM_NEWNDUSEROPT","","",null,null],[17,"RTM_NEWADDRLABEL","","",null,null],[17,"RTM_DELADDRLABEL","","",null,null],[17,"RTM_GETADDRLABEL","","",null,null],[17,"RTM_GETDCB","","",null,null],[17,"RTM_SETDCB","","",null,null],[17,"RTM_NEWNETCONF","","",null,null],[17,"RTM_GETNETCONF","","",null,null],[17,"RTM_NEWMDB","","",null,null],[17,"RTM_DELMDB","","",null,null],[17,"RTM_GETMDB","","",null,null],[17,"RTM_NEWNSID","","",null,null],[17,"RTM_DELNSID","","",null,null],[17,"RTM_GETNSID","","",null,null],[17,"RTM_F_NOTIFY","","",null,null],[17,"RTM_F_CLONED","","",null,null],[17,"RTM_F_EQUALIZE","","",null,null],[17,"RTM_F_PREFIX","","",null,null],[17,"RTA_UNSPEC","","",null,null],[17,"RTA_DST","","",null,null],[17,"RTA_SRC","","",null,null],[17,"RTA_IIF","","",null,null],[17,"RTA_OIF","","",null,null],[17,"RTA_GATEWAY","","",null,null],[17,"RTA_PRIORITY","","",null,null],[17,"RTA_PREFSRC","","",null,null],[17,"RTA_METRICS","","",null,null],[17,"RTA_MULTIPATH","","",null,null],[17,"RTA_PROTOINFO","","",null,null],[17,"RTA_FLOW","","",null,null],[17,"RTA_CACHEINFO","","",null,null],[17,"RTA_SESSION","","",null,null],[17,"RTA_MP_ALGO","","",null,null],[17,"RTA_TABLE","","",null,null],[17,"RTA_MARK","","",null,null],[17,"RTA_MFC_STATS","","",null,null],[17,"RTN_UNSPEC","","",null,null],[17,"RTN_UNICAST","","",null,null],[17,"RTN_LOCAL","","",null,null],[17,"RTN_BROADCAST","","",null,null],[17,"RTN_ANYCAST","","",null,null],[17,"RTN_MULTICAST","","",null,null],[17,"RTN_BLACKHOLE","","",null,null],[17,"RTN_UNREACHABLE","","",null,null],[17,"RTN_PROHIBIT","","",null,null],[17,"RTN_THROW","","",null,null],[17,"RTN_NAT","","",null,null],[17,"RTN_XRESOLVE","","",null,null],[17,"RTPROT_UNSPEC","","",null,null],[17,"RTPROT_REDIRECT","","",null,null],[17,"RTPROT_KERNEL","","",null,null],[17,"RTPROT_BOOT","","",null,null],[17,"RTPROT_STATIC","","",null,null],[17,"RT_SCOPE_UNIVERSE","","",null,null],[17,"RT_SCOPE_SITE","","",null,null],[17,"RT_SCOPE_LINK","","",null,null],[17,"RT_SCOPE_HOST","","",null,null],[17,"RT_SCOPE_NOWHERE","","",null,null],[17,"RT_TABLE_UNSPEC","","",null,null],[17,"RT_TABLE_COMPAT","","",null,null],[17,"RT_TABLE_DEFAULT","","",null,null],[17,"RT_TABLE_MAIN","","",null,null],[17,"RT_TABLE_LOCAL","","",null,null],[17,"RTMSG_OVERRUN","","",null,null],[17,"RTMSG_NEWDEVICE","","",null,null],[17,"RTMSG_DELDEVICE","","",null,null],[17,"RTMSG_NEWROUTE","","",null,null],[17,"RTMSG_DELROUTE","","",null,null],[17,"RTMSG_NEWRULE","","",null,null],[17,"RTMSG_DELRULE","","",null,null],[17,"RTMSG_CONTROL","","",null,null],[17,"RTMSG_AR_FAILED","","",null,null],[17,"MAX_ADDR_LEN","","",null,null],[17,"ARPD_UPDATE","","",null,null],[17,"ARPD_LOOKUP","","",null,null],[17,"ARPD_FLUSH","","",null,null],[17,"ATF_MAGIC","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",null,null],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",null,null],[17,"SOF_TIMESTAMPING_TX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_TX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RX_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SOFTWARE","","",null,null],[17,"SOF_TIMESTAMPING_SYS_HARDWARE","","",null,null],[17,"SOF_TIMESTAMPING_RAW_HARDWARE","","",null,null],[17,"ALG_SET_KEY","","",null,null],[17,"ALG_SET_IV","","",null,null],[17,"ALG_SET_OP","","",null,null],[17,"ALG_SET_AEAD_ASSOCLEN","","",null,null],[17,"ALG_SET_AEAD_AUTHSIZE","","",null,null],[17,"ALG_OP_DECRYPT","","",null,null],[17,"ALG_OP_ENCRYPT","","",null,null],[17,"VMADDR_CID_ANY","","",null,null],[17,"VMADDR_CID_HYPERVISOR","","",null,null],[17,"VMADDR_CID_RESERVED","","",null,null],[17,"VMADDR_CID_HOST","","",null,null],[17,"VMADDR_PORT_ANY","","",null,null],[17,"IN_ACCESS","","",null,null],[17,"IN_MODIFY","","",null,null],[17,"IN_ATTRIB","","",null,null],[17,"IN_CLOSE_WRITE","","",null,null],[17,"IN_CLOSE_NOWRITE","","",null,null],[17,"IN_CLOSE","","",null,null],[17,"IN_OPEN","","",null,null],[17,"IN_MOVED_FROM","","",null,null],[17,"IN_MOVED_TO","","",null,null],[17,"IN_MOVE","","",null,null],[17,"IN_CREATE","","",null,null],[17,"IN_DELETE","","",null,null],[17,"IN_DELETE_SELF","","",null,null],[17,"IN_MOVE_SELF","","",null,null],[17,"IN_UNMOUNT","","",null,null],[17,"IN_Q_OVERFLOW","","",null,null],[17,"IN_IGNORED","","",null,null],[17,"IN_ONLYDIR","","",null,null],[17,"IN_DONT_FOLLOW","","",null,null],[17,"IN_ISDIR","","",null,null],[17,"IN_ONESHOT","","",null,null],[17,"IN_ALL_EVENTS","","",null,null],[17,"IN_CLOEXEC","","",null,null],[17,"IN_NONBLOCK","","",null,null],[17,"FUTEX_WAIT","","",null,null],[17,"FUTEX_WAKE","","",null,null],[17,"FUTEX_FD","","",null,null],[17,"FUTEX_REQUEUE","","",null,null],[17,"FUTEX_CMP_REQUEUE","","",null,null],[17,"FUTEX_WAKE_OP","","",null,null],[17,"FUTEX_LOCK_PI","","",null,null],[17,"FUTEX_UNLOCK_PI","","",null,null],[17,"FUTEX_TRYLOCK_PI","","",null,null],[17,"FUTEX_WAIT_BITSET","","",null,null],[17,"FUTEX_WAKE_BITSET","","",null,null],[17,"FUTEX_WAIT_REQUEUE_PI","","",null,null],[17,"FUTEX_CMP_REQUEUE_PI","","",null,null],[17,"FUTEX_PRIVATE_FLAG","","",null,null],[17,"FUTEX_CLOCK_REALTIME","","",null,null],[17,"FUTEX_CMD_MASK","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_NFC","","",null,null],[17,"SOL_XDP","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_SHARED_VALIDATE","","",null,null],[17,"MAP_FIXED_NOREPLACE","","",null,null],[17,"ENOTSUP","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening…",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"TCA_PAD","","",null,null],[17,"TCA_DUMP_INVISIBLE","","",null,null],[17,"TCA_CHAIN","","",null,null],[17,"TCA_HW_OFFLOAD","","",null,null],[17,"RTM_DELNETCONF","","",null,null],[17,"RTM_NEWSTATS","","",null,null],[17,"RTM_GETSTATS","","",null,null],[17,"RTM_NEWCACHEREPORT","","",null,null],[17,"RTM_F_LOOKUP_TABLE","","",null,null],[17,"RTM_F_FIB_MATCH","","",null,null],[17,"RTA_VIA","","",null,null],[17,"RTA_NEWDST","","",null,null],[17,"RTA_PREF","","",null,null],[17,"RTA_ENCAP_TYPE","","",null,null],[17,"RTA_ENCAP","","",null,null],[17,"RTA_EXPIRES","","",null,null],[17,"RTA_PAD","","",null,null],[17,"RTA_UID","","",null,null],[17,"RTA_TTL_PROPAGATE","","",null,null],[17,"NTF_EXT_LEARNED","","",null,null],[17,"NTF_OFFLOADED","","",null,null],[17,"NDA_MASTER","","",null,null],[17,"NDA_LINK_NETNSID","","",null,null],[17,"NDA_SRC_VNI","","",null,null],[17,"IFA_FLAGS","","",null,null],[17,"IFA_F_MANAGETEMPADDR","","",null,null],[17,"IFA_F_NOPREFIXROUTE","","",null,null],[17,"IFA_F_MCAUTOJOIN","","",null,null],[17,"IFA_F_STABLE_PRIVACY","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"M_MXFAST","","",null,null],[17,"M_NLBLKS","","",null,null],[17,"M_GRAIN","","",null,null],[17,"M_KEEP","","",null,null],[17,"M_TRIM_THRESHOLD","","",null,null],[17,"M_TOP_PAD","","",null,null],[17,"M_MMAP_THRESHOLD","","",null,null],[17,"M_MMAP_MAX","","",null,null],[17,"M_CHECK_ACTION","","",null,null],[17,"M_PERTURB","","",null,null],[17,"M_ARENA_TEST","","",null,null],[17,"M_ARENA_MAX","","",null,null],[17,"AT_STATX_SYNC_TYPE","","",null,null],[17,"AT_STATX_SYNC_AS_STAT","","",null,null],[17,"AT_STATX_FORCE_SYNC","","",null,null],[17,"AT_STATX_DONT_SYNC","","",null,null],[17,"STATX_TYPE","","",null,null],[17,"STATX_MODE","","",null,null],[17,"STATX_NLINK","","",null,null],[17,"STATX_UID","","",null,null],[17,"STATX_GID","","",null,null],[17,"STATX_ATIME","","",null,null],[17,"STATX_MTIME","","",null,null],[17,"STATX_CTIME","","",null,null],[17,"STATX_INO","","",null,null],[17,"STATX_SIZE","","",null,null],[17,"STATX_BLOCKS","","",null,null],[17,"STATX_BASIC_STATS","","",null,null],[17,"STATX_BTIME","","",null,null],[17,"STATX_ALL","","",null,null],[17,"STATX__RESERVED","","",null,null],[17,"STATX_ATTR_COMPRESSED","","",null,null],[17,"STATX_ATTR_IMMUTABLE","","",null,null],[17,"STATX_ATTR_APPEND","","",null,null],[17,"STATX_ATTR_NODUMP","","",null,null],[17,"STATX_ATTR_ENCRYPTED","","",null,null],[17,"STATX_ATTR_AUTOMOUNT","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"VEOF","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCGRS485","","",null,null],[17,"TIOCSRS485","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"F_RDLCK","","",null,null],[17,"F_WRLCK","","",null,null],[17,"F_UNLCK","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"REG_R8","","",null,null],[17,"REG_R9","","",null,null],[17,"REG_R10","","",null,null],[17,"REG_R11","","",null,null],[17,"REG_R12","","",null,null],[17,"REG_R13","","",null,null],[17,"REG_R14","","",null,null],[17,"REG_R15","","",null,null],[17,"REG_RDI","","",null,null],[17,"REG_RSI","","",null,null],[17,"REG_RBP","","",null,null],[17,"REG_RBX","","",null,null],[17,"REG_RDX","","",null,null],[17,"REG_RAX","","",null,null],[17,"REG_RCX","","",null,null],[17,"REG_RSP","","",null,null],[17,"REG_RIP","","",null,null],[17,"REG_EFL","","",null,null],[17,"REG_CSGSFS","","",null,null],[17,"REG_ERR","","",null,null],[17,"REG_TRAPNO","","",null,null],[17,"REG_OLDMASK","","",null,null],[17,"REG_CR2","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",null,null],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null],[17,"SYS_statx","","",null,null],[11,"from","","",133,[[["t"]],["t"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"into","","",133,[[],["u"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"into","","",134,[[],["u"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"into","","",135,[[],["u"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"into","","",44,[[],["u"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"into","","",46,[[],["u"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"into","","",136,[[],["u"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"into","","",137,[[],["u"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"into","","",48,[[],["u"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"into","","",49,[[],["u"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"into","","",52,[[],["u"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"into","","",53,[[],["u"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"into","","",54,[[],["u"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"into","","",55,[[],["u"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"into","","",56,[[],["u"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"into","","",57,[[],["u"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"into","","",60,[[],["u"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"into","","",61,[[],["u"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"into","","",62,[[],["u"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"into","","",66,[[],["u"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"into","","",67,[[],["u"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"into","","",68,[[],["u"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"into","","",69,[[],["u"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"into","","",71,[[],["u"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"into","","",72,[[],["u"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"into","","",73,[[],["u"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"into","","",74,[[],["u"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"into","","",75,[[],["u"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"into","","",76,[[],["u"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"into","","",77,[[],["u"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"into","","",138,[[],["u"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"into","","",139,[[],["u"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"into","","",78,[[],["u"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"into","","",79,[[],["u"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"into","","",80,[[],["u"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"into","","",81,[[],["u"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"into","","",82,[[],["u"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"into","","",83,[[],["u"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"into","","",84,[[],["u"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"into","","",86,[[],["u"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"into","","",88,[[],["u"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"into","","",89,[[],["u"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"into","","",90,[[],["u"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"into","","",91,[[],["u"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"into","","",92,[[],["u"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"into","","",93,[[],["u"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"into","","",94,[[],["u"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"into","","",95,[[],["u"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"into","","",96,[[],["u"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"into","","",97,[[],["u"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"into","","",98,[[],["u"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"into","","",99,[[],["u"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"into","","",100,[[],["u"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"into","","",101,[[],["u"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"into","","",102,[[],["u"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"into","","",103,[[],["u"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"into","","",105,[[],["u"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"into","","",106,[[],["u"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"into","","",140,[[],["u"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"into","","",107,[[],["u"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"into","","",108,[[],["u"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"into","","",109,[[],["u"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"into","","",110,[[],["u"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"into","","",111,[[],["u"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"into","","",112,[[],["u"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"into","","",113,[[],["u"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"into","","",114,[[],["u"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"into","","",115,[[],["u"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"into","","",116,[[],["u"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"into","","",117,[[],["u"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"into","","",118,[[],["u"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"into","","",141,[[],["u"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"into","","",119,[[],["u"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"into","","",120,[[],["u"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"into","","",121,[[],["u"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"into","","",122,[[],["u"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"into","","",123,[[],["u"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"into","","",124,[[],["u"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"into","","",125,[[],["u"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"into","","",126,[[],["u"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"into","","",127,[[],["u"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"into","","",128,[[],["u"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"into","","",129,[[],["u"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"into","","",130,[[],["u"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"into","","",131,[[],["u"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"into","","",142,[[],["u"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"into","","",143,[[],["u"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"into","","",144,[[],["u"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"into","","",145,[[],["u"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"into","","",146,[[],["u"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"into","","",147,[[],["u"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"into","","",148,[[],["u"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"into","","",149,[[],["u"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"into","","",132,[[],["u"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"into","","",150,[[],["u"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"into","","",151,[[],["u"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"into","","",152,[[],["u"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"into","","",153,[[],["u"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"into","","",154,[[],["u"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"fmt","","",133,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"clone","","",150,[[["self"]],["dir"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",7,[[["self"]],["hostent"]]],[11,"clone","","",8,[[["self"]],["iovec"]]],[11,"clone","","",9,[[["self"]],["pollfd"]]],[11,"clone","","",10,[[["self"]],["winsize"]]],[11,"clone","","",11,[[["self"]],["linger"]]],[11,"clone","","",12,[[["self"]],["sigval"]]],[11,"clone","","",13,[[["self"]],["itimerval"]]],[11,"clone","","",14,[[["self"]],["tms"]]],[11,"clone","","",15,[[["self"]],["servent"]]],[11,"clone","","",16,[[["self"]],["protoent"]]],[11,"clone","","",151,[[["self"]],["file"]]],[11,"clone","","",152,[[["self"]],["fpos_t"]]],[11,"clone","","",153,[[["self"]],["timezone"]]],[11,"clone","","",17,[[["self"]],["in_addr"]]],[11,"clone","","",18,[[["self"]],["ip_mreq"]]],[11,"clone","","",19,[[["self"]],["ip_mreq_source"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["addrinfo"]]],[11,"clone","","",24,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",134,[[["self"]],["fd_set"]]],[11,"clone","","",25,[[["self"]],["tm"]]],[11,"clone","","",26,[[["self"]],["sched_param"]]],[11,"clone","","",27,[[["self"]],["dl_info"]]],[11,"clone","","",28,[[["self"]],["lconv"]]],[11,"clone","","",29,[[["self"]],["in_pktinfo"]]],[11,"clone","","",30,[[["self"]],["ifaddrs"]]],[11,"clone","","",135,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",31,[[["self"]],["arpreq"]]],[11,"clone","","",32,[[["self"]],["arpreq_old"]]],[11,"clone","","",33,[[["self"]],["arphdr"]]],[11,"clone","","",34,[[["self"]],["mmsghdr"]]],[11,"clone","","",35,[[["self"]],["epoll_event"]]],[11,"clone","","",36,[[["self"]],["sockaddr_un"]]],[11,"clone","","",37,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",38,[[["self"]],["utsname"]]],[11,"clone","","",39,[[["self"]],["sigevent"]]],[11,"clone","","",154,[[["self"]],["fpos64_t"]]],[11,"clone","","",40,[[["self"]],["rlimit64"]]],[11,"clone","","",41,[[["self"]],["glob_t"]]],[11,"clone","","",42,[[["self"]],["passwd"]]],[11,"clone","","",43,[[["self"]],["spwd"]]],[11,"clone","","",44,[[["self"]],["dqblk"]]],[11,"clone","","",45,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",46,[[["self"]],["itimerspec"]]],[11,"clone","","",136,[[["self"]],["fsid_t"]]],[11,"clone","","",47,[[["self"]],["packet_mreq"]]],[11,"clone","","",137,[[["self"]],["cpu_set_t"]]],[11,"clone","","",48,[[["self"]],["if_nameindex"]]],[11,"clone","","",49,[[["self"]],["msginfo"]]],[11,"clone","","",50,[[["self"]],["sembuf"]]],[11,"clone","","",51,[[["self"]],["input_event"]]],[11,"clone","","",52,[[["self"]],["input_id"]]],[11,"clone","","",53,[[["self"]],["input_absinfo"]]],[11,"clone","","",54,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",55,[[["self"]],["input_mask"]]],[11,"clone","","",56,[[["self"]],["ff_replay"]]],[11,"clone","","",57,[[["self"]],["ff_trigger"]]],[11,"clone","","",58,[[["self"]],["ff_envelope"]]],[11,"clone","","",59,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",60,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",61,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",62,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",63,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",64,[[["self"]],["ff_effect"]]],[11,"clone","","",65,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",66,[[["self"]],["elf32_ehdr"]]],[11,"clone","","",67,[[["self"]],["elf64_ehdr"]]],[11,"clone","","",68,[[["self"]],["elf32_sym"]]],[11,"clone","","",69,[[["self"]],["elf64_sym"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["elf32_shdr"]]],[11,"clone","","",73,[[["self"]],["elf64_shdr"]]],[11,"clone","","",74,[[["self"]],["elf32_chdr"]]],[11,"clone","","",75,[[["self"]],["elf64_chdr"]]],[11,"clone","","",76,[[["self"]],["ucred"]]],[11,"clone","","",77,[[["self"]],["mntent"]]],[11,"clone","","",138,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",139,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",78,[[["self"]],["genlmsghdr"]]],[11,"clone","","",79,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",80,[[["self"]],["arpd_request"]]],[11,"clone","","",81,[[["self"]],["inotify_event"]]],[11,"clone","","",82,[[["self"]],["sockaddr_vm"]]],[11,"clone","","",83,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",84,[[["self"]],["dirent"]]],[11,"clone","","",85,[[["self"]],["dirent64"]]],[11,"clone","","",86,[[["self"]],["sockaddr_alg"]]],[11,"clone","","",87,[[["self"]],["af_alg_iv"]]],[11,"clone","","",88,[[["self"]],["mq_attr"]]],[11,"clone","","",89,[[["self"]],["statx"]]],[11,"clone","","",90,[[["self"]],["statx_timestamp"]]],[11,"clone","","",91,[[["self"]],["aiocb"]]],[11,"clone","","",92,[[["self"]],["__exit_status"]]],[11,"clone","","",93,[[["self"]],["__timeval"]]],[11,"clone","","",94,[[["self"]],["glob64_t"]]],[11,"clone","","",95,[[["self"]],["msghdr"]]],[11,"clone","","",96,[[["self"]],["cmsghdr"]]],[11,"clone","","",97,[[["self"]],["termios"]]],[11,"clone","","",98,[[["self"]],["mallinfo"]]],[11,"clone","","",99,[[["self"]],["nlmsghdr"]]],[11,"clone","","",100,[[["self"]],["nlmsgerr"]]],[11,"clone","","",101,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",102,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",103,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",104,[[["self"]],["nlattr"]]],[11,"clone","","",105,[[["self"]],["rtentry"]]],[11,"clone","","",106,[[["self"]],["utmpx"]]],[11,"clone","","",140,[[["self"]],["sigset_t"]]],[11,"clone","","",107,[[["self"]],["sysinfo"]]],[11,"clone","","",108,[[["self"]],["msqid_ds"]]],[11,"clone","","",109,[[["self"]],["sigaction"]]],[11,"clone","","",110,[[["self"]],["statfs"]]],[11,"clone","","",111,[[["self"]],["flock"]]],[11,"clone","","",112,[[["self"]],["flock64"]]],[11,"clone","","",113,[[["self"]],["siginfo_t"]]],[11,"clone","","",114,[[["self"]],["stack_t"]]],[11,"clone","","",115,[[["self"]],["stat"]]],[11,"clone","","",116,[[["self"]],["stat64"]]],[11,"clone","","",117,[[["self"]],["statfs64"]]],[11,"clone","","",118,[[["self"]],["statvfs64"]]],[11,"clone","","",141,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",119,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",120,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",121,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",122,[[["self"]],["user_regs_struct"]]],[11,"clone","","",123,[[["self"]],["user"]]],[11,"clone","","",124,[[["self"]],["mcontext_t"]]],[11,"clone","","",125,[[["self"]],["ipc_perm"]]],[11,"clone","","",126,[[["self"]],["shmid_ds"]]],[11,"clone","","",127,[[["self"]],["termios2"]]],[11,"clone","","",128,[[["self"]],["ip_mreqn"]]],[11,"clone","","",129,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",130,[[["self"]],["ucontext_t"]]],[11,"clone","","",131,[[["self"]],["statvfs"]]],[11,"clone","","",142,[[["self"]],["max_align_t"]]],[11,"clone","","",143,[[["self"]],["sem_t"]]],[11,"clone","","",144,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",145,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",146,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",147,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",148,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",149,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",132,[[["self"]],["in6_addr"]]]],"p":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreq_source"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"Elf32_Chdr"],[3,"Elf64_Chdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"sockaddr_vm"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"af_alg_iv"],[3,"mq_attr"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"utmpx"],[3,"sysinfo"],[3,"msqid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"ip_mreqn"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"in6_addr"],[4,"c_void"],[3,"fd_set"],[3,"in6_rtmsg"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"sigset_t"],[3,"pthread_attr_t"],[3,"max_align_t"],[3,"sem_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[4,"timezone"],[4,"fpos64_t"]]};
searchIndex["lock_api"] = {"doc":"This library provides type-safe and fully-featured `Mutex`…","i":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock…",null,null],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock…",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared…",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When…",null,null],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which…",null,null],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant…",null,null],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by…",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a…",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access…",null,null],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access…",null,null],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by…",null,null],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by…",null,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is…",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],[["mutexguard"],["option",["mutexguard"]]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,[[["self"]],[["mutexguard"],["option",["mutexguard"]]]]],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,[[["self"]],[["mutexguard"],["option",["mutexguard"]]]]],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the…",1,[[["f"]],[["sized"],["mappedmutexguard"]]]],[11,"try_map","","Attempts to make a new `MappedMutexGuard` for a component…",1,[[["f"]],[["result",["mappedmutexguard"]],["mappedmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there…",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the…",2,[[["f"]],[["sized"],["mappedmutexguard"]]]],[11,"try_map","","Attempts to make a new `MappedMutexGuard` for a component…",2,[[["f"]],[["result",["mappedmutexguard"]],["mappedmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready…",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread…",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],[["option",["reentrantmutexguard"]],["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock protocol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,[[["self"]],[["option",["reentrantmutexguard"]],["reentrantmutexguard"]]]],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,[[["self"]],[["option",["reentrantmutexguard"]],["reentrantmutexguard"]]]],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of…",4,[[["f"]],[["mappedreentrantmutexguard"],["sized"]]]],[11,"try_map","","Attempts to make a new `MappedReentrantMutexGuard` for a…",4,[[["f"]],[["result",["mappedreentrantmutexguard"]],["mappedreentrantmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there…",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of…",5,[[["f"]],[["mappedreentrantmutexguard"],["sized"]]]],[11,"try_map","","Attempts to make a new `MappedReentrantMutexGuard` for a…",5,[[["f"]],[["result",["mappedreentrantmutexguard"]],["mappedreentrantmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the…",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking…",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],[["option",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access…",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access…",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write…",6,[[["self"]],[["option",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write…",6,[[["self"]],[["option",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the…",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access…",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access…",6,[[["self"]],[["rwlockreadguard"],["option",["rwlockreadguard"]]]]],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking…",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read…",6,[[["self"]],[["rwlockupgradablereadguard"],["option",["rwlockupgradablereadguard"]]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read…",6,[[["self"]],[["rwlockupgradablereadguard"],["option",["rwlockupgradablereadguard"]]]]],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read…",6,[[["self"]],[["rwlockupgradablereadguard"],["option",["rwlockupgradablereadguard"]]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock…",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the…",7,[[["f"]],[["sized"],["mappedrwlockreadguard"]]]],[11,"try_map","","Attempts to make a new `MappedRwLockReadGuard` for a…",7,[[["f"]],[["result",["mappedrwlockreadguard"]],["mappedrwlockreadguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given…",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given…",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if…",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock…",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the…",8,[[["f"]],[["mappedrwlockwriteguard"],["sized"]]]],[11,"try_map","","Attempts to make a new `MappedRwLockWriteGuard` for a…",8,[[["f"]],[["mappedrwlockwriteguard"],["result",["mappedrwlockwriteguard"]]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given…",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock…",8,[[],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read…",8,[[],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given…",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if…",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock…",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given…",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a…",9,[[],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a…",9,[[],[["result",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given…",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if…",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a…",9,[[],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a…",9,[[],[["result",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a…",9,[[],[["result",["rwlockwriteguard"]],["rwlockwriteguard"]]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the…",10,[[["f"]],[["sized"],["mappedrwlockreadguard"]]]],[11,"try_map","","Attempts to make a new `MappedRwLockReadGuard` for a…",10,[[["f"]],[["result",["mappedrwlockreadguard"]],["mappedrwlockreadguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the…",11,[[["f"]],[["mappedrwlockwriteguard"],["sized"]]]],[11,"try_map","","Attempts to make a new `MappedRwLockWriteGuard` for a…",11,[[["f"]],[["mappedrwlockwriteguard"],["result",["mappedrwlockwriteguard"]]]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock…",11,[[],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[]]],[8,"RawMutex","","Basic operations for a mutex.",null,null],[18,"INIT","","Initial value for an unlocked mutex.",12,null],[16,"GuardMarker","","Marker type which determines whether a lock guard should…",12,null],[10,"lock","","Acquires this mutex, blocking the current thread until it…",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",null,null],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there…",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with…",null,null],[16,"Duration","","Duration type used for `try_lock_for`.",14,null],[16,"Instant","","Instant type used for `try_lock_until`.",14,null],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,[[["self"]],["bool"]]],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,[[["self"]],["bool"]]],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",null,null],[18,"INIT","","Initial value.",15,null],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current…",15,[[["self"]],["nonzerousize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",null,null],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,null],[16,"GuardMarker","","Marker type which determines whether a lock guard should…",16,null],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until…",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread…",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",null,null],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if…",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread…",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically…",null,null],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock…",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with…",null,null],[16,"Duration","","Duration type used for `try_lock_for`.",19,null],[16,"Instant","","Instant type used for `try_lock_until`.",19,null],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is…",19,[[["self"]],["bool"]]],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is…",19,[[["self"]],["bool"]]],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is…",19,[[["self"]],["bool"]]],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is…",19,[[["self"]],["bool"]]],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive…",null,null],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a…",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in…",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive…",null,null],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is…",21,[[["self"]],["bool"]]],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is…",21,[[["self"]],["bool"]]],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically…",null,null],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread…",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive…",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable…",null,null],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread…",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable…",null,null],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable…",null,null],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is…",25,[[["self"]],["bool"]]],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is…",25,[[["self"]],["bool"]]],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive…",25,[[["self"]],["bool"]]],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive…",25,[[["self"]],["bool"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",0,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref","","",9,[[["self"]],["t"]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"drop","","",2,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"drop","","",7,[[["self"]]]],[11,"drop","","",8,[[["self"]]]],[11,"drop","","",9,[[["self"]]]],[11,"drop","","",10,[[["self"]]]],[11,"drop","","",11,[[["self"]]]],[11,"default","","",0,[[],["mutex"]]],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"default","","",6,[[],["rwlock"]]],[18,"INIT","","Initial value for an unlocked mutex.",12,null],[11,"bump","","Temporarily yields the mutex to a waiting thread if there…",13,[[["self"]]]],[18,"INIT","","Initial value.",15,null],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,null],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if…",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread…",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread…",23,[[["self"]]]]],"p":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"],[3,"GuardSend"],[3,"GuardNoSend"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",null,null],[4,"Level","","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters…",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter"]]],[5,"set_boxed_logger","","Sets the global logger to a `Box<Log>`.",null,[[["box",["log"]],["log"]],[["result",["setloggererror"]],["setloggererror"]]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,[[["log"]],[["result",["setloggererror"]],["setloggererror"]]]],[5,"set_logger_racy","","A thread-unsafe version of [`set_logger`].",null,[[["log"]],[["result",["setloggererror"]],["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",null,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["record"],["self"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],[["option",["level"]],["level"]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"module_path_static","","The module path of the message, if it is a `'static` string.",3,[[["self"]],[["option",["str"]],["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"file_static","","The module path of the message, if it is a `'static` string.",3,[[["self"]],[["option",["str"]],["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"module_path_static","","Set `module_path` to a `'static` string",4,[[["option",["str"]],["self"],["str"]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"file_static","","Set `file` to a `'static` string.",4,[[["option",["str"]],["self"],["str"]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]],["u32"]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in…",null,null],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",1,[[["levelfilter"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["metadata"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["metadatabuilder"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"eq","","",5,[[["metadata"],["self"]],["bool"]]],[11,"ne","","",5,[[["metadata"],["self"]],["bool"]]],[11,"eq","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"ne","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["levelfilter"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["levelfilter"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["metadata"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["metadata"],["self"]],["bool"]]],[11,"le","","",5,[[["metadata"],["self"]],["bool"]]],[11,"gt","","",5,[[["metadata"],["self"]],["bool"]]],[11,"ge","","",5,[[["metadata"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["metadatabuilder"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"le","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"gt","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"ge","","",6,[[["metadatabuilder"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"from_str","","",0,[[["str"]],[["result",["level"]],["level"]]]],[11,"from_str","","",1,[[["str"]],[["result",["levelfilter"]],["levelfilter"]]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"description","","",8,[[["self"]],["str"]]]],"p":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["malloc_size_of_derive"] = {"doc":"A crate for deriving the MallocSizeOf trait.","i":[[24,"MallocSizeOf","malloc_size_of_derive","",null,null]],"p":[]};
searchIndex["maybe_uninit"] = {"doc":"","i":[[19,"MaybeUninit","maybe_uninit","A wrapper type to construct uninitialized instances of `T`.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["maybeuninit"]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a new `MaybeUninit<T>` initialized with the given…",0,[[["t"]],["maybeuninit"]]],[11,"uninit","","Creates a new `MaybeUninit<T>` in an uninitialized state.",0,[[],["maybeuninit"]]],[11,"uninit_array","","Create a new array of `MaybeUninit<T>` items, in an…",0,[[]]],[18,"UNINIT","","A promotable constant, equivalent to `uninit()`.",0,null],[11,"zeroed","","Creates a new `MaybeUninit<T>` in an uninitialized state,…",0,[[],["maybeuninit"]]],[11,"write","","Sets the value of the `MaybeUninit<T>`. This overwrites…",0,[[["self"],["t"]],["t"]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this…",0,[[["self"]]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading…",0,[[["self"]]]],[11,"assume_init","","Extracts the value from the `MaybeUninit<T>` container.…",0,[[],["t"]]],[11,"read","","Reads the value from the `MaybeUninit<T>` container. The…",0,[[["self"]],["t"]]],[11,"get_ref","","Gets a shared reference to the contained value.",0,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable (unique) reference to the contained value.",0,[[["self"]],["t"]]],[11,"slice_get_ref","","Assuming all the elements are initialized, get a slice to…",0,[[]]],[11,"slice_get_mut","","Assuming all the elements are initialized, get a mutable…",0,[[]]],[11,"first_ptr","","Gets a pointer to the first element of the array.",0,[[]]],[11,"first_ptr_mut","","Gets a mutable pointer to the first element of the array.",0,[[]]]],"p":[[19,"MaybeUninit"]]};
searchIndex["memchr"] = {"doc":"The `memchr` crate provides heavily optimized routines for…","i":[[3,"Memchr","memchr","An iterator for `memchr`.",null,null],[3,"Memchr2","","An iterator for `memchr2`.",null,null],[3,"Memchr3","","An iterator for `memchr3`.",null,null],[5,"memchr_iter","","An iterator over all occurrences of the needle in a…",null,[[["u8"]],["memchr"]]],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],["memchr2"]]],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],["memchr3"]]],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a…",null,[[["u8"]],[["rev",["memchr"]],["memchr"]]]],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],[["memchr2"],["rev",["memchr2"]]]]],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a…",null,[[["u8"]],[["rev",["memchr3"]],["memchr3"]]]],[5,"memchr","","Search for the first occurrence of a byte in a slice.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",null,[[["u8"]],[["option",["usize"]],["usize"]]]],[11,"new","","Creates a new iterator that yields all positions of needle…",0,[[["u8"]],["memchr"]]],[11,"new","","Creates a new iterator that yields all positions of needle…",1,[[["u8"]],["memchr2"]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a…",2,[[["u8"]],["memchr3"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",0,[[["self"]]]],[11,"next","","",1,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",1,[[["self"]]]],[11,"next","","",2,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",2,[[["self"]]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["memory_db"] = {"doc":"Reference-counted memory-based `HashDB` implementation.","i":[[3,"MemoryDB","memory_db","Reference-counted memory-based `HashDB` implementation.",null,null],[3,"HashKey","","Key function that only uses the hash",null,null],[3,"PrefixedKey","","Key function that concatenates prefix and hash.",null,null],[3,"LegacyPrefixedKey","","Key function that concatenates prefix and hash. This is…",null,null],[5,"hash_key","","Make database key from hash only.",null,[[["prefix"]]]],[5,"prefixed_key","","Derive a database key from hash value of the node (key)…",null,[[["prefix"]],[["vec",["u8"]],["u8"]]]],[5,"legacy_prefixed_key","","Legacy method for db using previous version of prefix…",null,[[["prefix"]],[["vec",["u8"]],["u8"]]]],[8,"MaybeDebug","","",null,null],[8,"KeyFunction","","",null,null],[16,"Key","","",0,null],[10,"key","","",0,[[["prefix"]]]],[11,"remove_and_purge","","Remove an element and delete it from storage if reference…",1,[[["self"],["prefix"]],["option"]]],[11,"from_null_node","","Create a new `MemoryDB` from a given null key/data",1,[[["t"]],["self"]]],[11,"new","","Create a new instance of `Self`.",1,[[],["self"]]],[11,"default_with_root","","Create a new default instance of `Self` and returns `Self`…",1,[[]]],[11,"clear","","Clear all data from the database.",1,[[["self"]]]],[11,"purge","","Purge all zero-referenced data from the database.",1,[[["self"]]]],[11,"drain","","Return the internal map of hashes to data, clearing the…",1,[[["self"]],["hashmap"]]],[11,"raw","","Grab the raw information associated with a key. Returns…",1,[[["prefix"],["self"]],["option"]]],[11,"consolidate","","Consolidate all the entries of `other` into `self`.",1,[[["self"]]]],[11,"keys","","Get the keys in the database together with number of…",1,[[["self"]],[["i32"],["hashmap",["i32"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"key","","",2,[[["prefix"]]]],[11,"key","","",3,[[["prefix"]],[["vec",["u8"]],["u8"]]]],[11,"key","","",4,[[["prefix"]],[["vec",["u8"]],["u8"]]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",4,[[["self"]],["legacyprefixedkey"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",1,[[["memorydb"],["self"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"get","","",1,[[["self"]],["option"]]],[11,"contains","","",1,[[["self"]],["bool"]]],[11,"emplace","","",1,[[["self"],["t"]]]],[11,"remove","","",1,[[["self"]]]],[11,"get","","",1,[[["self"]],["option"]]],[11,"contains","","",1,[[["self"]],["bool"]]],[11,"get","","",1,[[["prefix"],["self"]],["option"]]],[11,"contains","","",1,[[["prefix"],["self"]],["bool"]]],[11,"emplace","","",1,[[["prefix"],["self"],["t"]]]],[11,"insert","","",1,[[["prefix"],["self"]]]],[11,"remove","","",1,[[["prefix"],["self"]]]],[11,"get","","",1,[[["prefix"],["self"]],["option"]]],[11,"contains","","",1,[[["prefix"],["self"]],["bool"]]],[11,"as_hash_db","","",1,[[["self"]],["hashdb"]]],[11,"as_hash_db_mut","","",1,[[["self"]],["hashdb"]]],[11,"as_plain_db","","",1,[[["self"]],["plaindb"]]],[11,"as_plain_db_mut","","",1,[[["self"]],["plaindb"]]],[11,"size_of","","",1,[[["mallocsizeofops"],["self"]],["usize"]]]],"p":[[8,"KeyFunction"],[3,"MemoryDB"],[3,"HashKey"],[3,"PrefixedKey"],[3,"LegacyPrefixedKey"]]};
searchIndex["memory_units"] = {"doc":"Crate for safe conversion between units of memory.","i":[[3,"Bytes","memory_units","Memory size specified in bytes.",null,null],[12,"0","","",0,null],[5,"size_of","","Returns the size of a type in [`Bytes`].",null,[[],["bytes"]]],[0,"wasm32","","WebAssembly-specific sizes and units.",null,null],[3,"Words","memory_units::wasm32","Memory size specified in `wasm32` words.",null,null],[12,"0","","",1,null],[3,"Pages","","Memory size specified in WebAssembly [memory pages][memory…",null,null],[12,"0","","",2,null],[0,"target","memory_units","Sizes and units for the current compilation target.",null,null],[3,"Words","memory_units::target","Memory size specified in words.",null,null],[12,"0","","",3,null],[3,"Pages","","Memory size specified in [memory pages][memory page].",null,null],[12,"0","","",4,null],[8,"RoundUpTo","memory_units","A trait defining round up conversion between various…",null,null],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space…",5,[[],["t"]]],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",null,null],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",6,[[],["bytes"]]],[11,"round_up_to","","",0,[[],["bytes"]]],[11,"round_up_to","","",0,[[],["words"]]],[11,"round_up_to","","",0,[[],["pages"]]],[11,"round_up_to","","",0,[[],["words"]]],[11,"round_up_to","","",0,[[],["pages"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"round_up_to","memory_units::wasm32","",1,[[],["bytes"]]],[11,"round_up_to","","",1,[[],["words"]]],[11,"round_up_to","","",1,[[],["pages"]]],[11,"round_up_to","","",1,[[],["words"]]],[11,"round_up_to","","",1,[[],["pages"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"round_up_to","","",2,[[],["bytes"]]],[11,"round_up_to","","",2,[[],["words"]]],[11,"round_up_to","","",2,[[],["pages"]]],[11,"round_up_to","","",2,[[],["words"]]],[11,"round_up_to","","",2,[[],["pages"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"round_up_to","memory_units::target","",3,[[],["bytes"]]],[11,"round_up_to","","",3,[[],["words"]]],[11,"round_up_to","","",3,[[],["pages"]]],[11,"round_up_to","","",3,[[],["words"]]],[11,"round_up_to","","",3,[[],["pages"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"round_up_to","","",4,[[],["bytes"]]],[11,"round_up_to","","",4,[[],["words"]]],[11,"round_up_to","","",4,[[],["pages"]]],[11,"round_up_to","","",4,[[],["words"]]],[11,"round_up_to","","",4,[[],["pages"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"byte_size","memory_units","",0,[[],["bytes"]]],[11,"byte_size","memory_units::wasm32","",1,[[],["bytes"]]],[11,"byte_size","","",2,[[],["bytes"]]],[11,"byte_size","memory_units::target","",3,[[],["bytes"]]],[11,"byte_size","","",4,[[],["bytes"]]],[11,"from","memory_units","",0,[[["words"]],["bytes"]]],[11,"from","","",0,[[["pages"]],["bytes"]]],[11,"from","","",0,[[["words"]],["bytes"]]],[11,"from","","",0,[[["pages"]],["bytes"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","memory_units::wasm32","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","memory_units::target","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"div","memory_units","",0,[[["t"]],["self"]]],[11,"div","memory_units::wasm32","",1,[[["t"]],["self"]]],[11,"div","","",2,[[["t"]],["self"]]],[11,"div","memory_units::target","",3,[[["t"]],["self"]]],[11,"div","","",4,[[["t"]],["self"]]],[11,"sub","memory_units","",0,[[["t"]],["self"]]],[11,"sub","memory_units::wasm32","",1,[[["t"]],["self"]]],[11,"sub","","",2,[[["t"]],["self"]]],[11,"sub","memory_units::target","",3,[[["t"]],["self"]]],[11,"sub","","",4,[[["t"]],["self"]]],[11,"eq","memory_units","",0,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",0,[[["self"],["bytes"]],["bool"]]],[11,"eq","memory_units::wasm32","",1,[[["self"],["words"]],["bool"]]],[11,"ne","","",1,[[["self"],["words"]],["bool"]]],[11,"eq","","",2,[[["self"],["pages"]],["bool"]]],[11,"ne","","",2,[[["self"],["pages"]],["bool"]]],[11,"eq","memory_units::target","",3,[[["self"],["words"]],["bool"]]],[11,"ne","","",3,[[["self"],["words"]],["bool"]]],[11,"eq","","",4,[[["pages"],["self"]],["bool"]]],[11,"ne","","",4,[[["pages"],["self"]],["bool"]]],[11,"cmp","memory_units","",0,[[["self"],["bytes"]],["ordering"]]],[11,"cmp","memory_units::wasm32","",1,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["pages"]],["ordering"]]],[11,"cmp","memory_units::target","",3,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",4,[[["pages"],["self"]],["ordering"]]],[11,"partial_cmp","memory_units","",0,[[["self"],["bytes"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"le","","",0,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",0,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",0,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","memory_units::wasm32","",1,[[["self"],["words"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["self"],["words"]],["bool"]]],[11,"le","","",1,[[["self"],["words"]],["bool"]]],[11,"gt","","",1,[[["self"],["words"]],["bool"]]],[11,"ge","","",1,[[["self"],["words"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["pages"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",2,[[["self"],["pages"]],["bool"]]],[11,"le","","",2,[[["self"],["pages"]],["bool"]]],[11,"gt","","",2,[[["self"],["pages"]],["bool"]]],[11,"ge","","",2,[[["self"],["pages"]],["bool"]]],[11,"partial_cmp","memory_units::target","",3,[[["self"],["words"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["self"],["words"]],["bool"]]],[11,"le","","",3,[[["self"],["words"]],["bool"]]],[11,"gt","","",3,[[["self"],["words"]],["bool"]]],[11,"ge","","",3,[[["self"],["words"]],["bool"]]],[11,"partial_cmp","","",4,[[["pages"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["pages"],["self"]],["bool"]]],[11,"le","","",4,[[["pages"],["self"]],["bool"]]],[11,"gt","","",4,[[["pages"],["self"]],["bool"]]],[11,"ge","","",4,[[["pages"],["self"]],["bool"]]],[11,"add","memory_units","",0,[[["t"]],["self"]]],[11,"add","memory_units::wasm32","",1,[[["t"]],["self"]]],[11,"add","","",2,[[["t"]],["self"]]],[11,"add","memory_units::target","",3,[[["t"]],["self"]]],[11,"add","","",4,[[["t"]],["self"]]],[11,"mul","memory_units","",0,[[["t"]],["self"]]],[11,"mul","memory_units::wasm32","",1,[[["t"]],["self"]]],[11,"mul","","",2,[[["t"]],["self"]]],[11,"mul","memory_units::target","",3,[[["t"]],["self"]]],[11,"mul","","",4,[[["t"]],["self"]]],[11,"clone","memory_units","",0,[[["self"]],["bytes"]]],[11,"clone","memory_units::wasm32","",1,[[["self"]],["words"]]],[11,"clone","","",2,[[["self"]],["pages"]]],[11,"clone","memory_units::target","",3,[[["self"]],["words"]]],[11,"clone","","",4,[[["self"]],["pages"]]]],"p":[[3,"Bytes"],[3,"Words"],[3,"Pages"],[3,"Words"],[3,"Pages"],[8,"RoundUpTo"],[8,"ByteSize"]]};
searchIndex["merlin"] = {"doc":"Note that docs will only build on nightly Rust until RFC…","i":[[3,"Transcript","merlin","A transcript of a public-coin argument.",null,null],[3,"TranscriptRng","","An RNG providing synthetic randomness to the prover.",null,null],[3,"TranscriptRngBuilder","","Constructs a [`TranscriptRng`] by rekeying the…",null,null],[11,"new","","Initialize a new transcript with the supplied `label`,…",0,[[],["transcript"]]],[11,"append_message","","Append a prover's `message` to the transcript.",0,[[["self"]]]],[11,"commit_bytes","","Deprecated.  This function was renamed to `append_message`.",0,[[["self"]]]],[11,"append_u64","","Convenience method for appending a `u64` to the transcript.",0,[[["self"],["u64"]]]],[11,"commit_u64","","Deprecated.  This function was renamed to `append_u64`.",0,[[["self"],["u64"]]]],[11,"challenge_bytes","","Fill the supplied buffer with the verifier's challenge…",0,[[["self"]]]],[11,"build_rng","","Fork the current [`Transcript`] to construct an RNG whose…",0,[[["self"]],["transcriptrngbuilder"]]],[11,"rekey_with_witness_bytes","","Rekey the transcript using the provided witness data.",1,[[],["transcriptrngbuilder"]]],[11,"commit_witness_bytes","","Deprecated. This function was renamed to…",1,[[],["transcriptrngbuilder"]]],[11,"finalize","","Use the supplied external `rng` to rekey the transcript,…",1,[[["r"]],["transcriptrng"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"zeroize","","",0,[[["self"]]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["transcript"]]],[11,"zeroize","","",0,[[["self"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,[[["self"]]]],[11,"try_fill_bytes","","",2,[[["self"]],[["error"],["result",["error"]]]]]],"p":[[3,"Transcript"],[3,"TranscriptRngBuilder"],[3,"TranscriptRng"]]};
searchIndex["names"] = {"doc":"A pallet that defines a system to register and update…","i":[[3,"NameData","names","All data stored with a name in the database.",null,null],[12,"value","","The name's associated value.",0,null],[12,"owner","","The name's current owner.",0,null],[12,"expiration","","The block number when the name expires or `None` if it…",0,null],[3,"Operation","","All data necessary to actually perform a name operation.",null,null],[12,"operation","","Type of this operation.",1,null],[12,"name","","The name being operated on.",1,null],[12,"value","","The value that is being associated to the name.",1,null],[3,"Module","","",null,null],[4,"OperationType","","Type of a name operation.",null,null],[13,"Registration","","This operation registers a name that does not exist yet.",2,null],[13,"Update","","This operation updates an existing name.",2,null],[4,"Call","","Dispatchable calls.",null,null],[13,"update","","Tries to update a name with a given value.",3,null],[13,"transfer","","Tries to transfer a name to a given recipient.",3,null],[4,"RawEvent","","Events for this module.",null,null],[13,"NameRegistered","","Event when a name is newly created.",4,null],[13,"NameUpdated","","Event when a name is updated (or created).",4,null],[13,"NameExpired","","Event when a name expires and is removed from the database.",4,null],[6,"Event","","[`RawEvent`] specialized for the configuration [`Trait`]",null,null],[8,"Trait","","The pallet's configuration trait.",null,null],[16,"Name","","Type for names.",5,null],[16,"Value","","Type for values associated to names.",5,null],[16,"Currency","","Type for currency operations (in order to pay for names).",5,null],[16,"Event","","The overarching event type.",5,null],[10,"get_name_fee","","Computes and returns the currency fee the sender has to…",5,[[["operation"]],["option"]]],[10,"get_expiration","","For a given name operation, computes the number of blocks…",5,[[["operation"]],["option"]]],[10,"deposit_fee","","\"Takes ownership\" of the fee paid for a name operation.…",5,[[]]],[11,"lookup","","The main mapping from names to associated data.",6,[[["encodelike"]],[["option",["namedata"]],["namedata"]]]],[11,"update","","Tries to update a name with a given value.",6,[[],["dispatchresult"]]],[11,"transfer","","Tries to transfer a name to a given recipient.",6,[[],["dispatchresult"]]],[11,"check_assuming_signed","","Checks if a name operation is valid, assuming that we…",6,[[["option"],["option"]],[["str"],["operation"],["result",["operation","str"]]]]],[11,"execute","","Executes the state change (and fires events) for a given…",6,[[["operation"]],["dispatchresult"]]],[11,"metadata","","",4,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"blake2_128","","",0,[[["self"]]]],[11,"blake2_256","","",0,[[["self"]]]],[11,"blake2_128_concat","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",0,[[["self"]]]],[11,"twox_256","","",0,[[["self"]]]],[11,"twox_64_concat","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",0,[[],["t"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",1,[[],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",6,[[],["t"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",2,[[],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"blake2_128","","",3,[[["self"]]]],[11,"blake2_256","","",3,[[["self"]]]],[11,"blake2_128_concat","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",3,[[["self"]]]],[11,"twox_256","","",3,[[["self"]]]],[11,"twox_64_concat","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",3,[[],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"decode","","",4,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",4,[[["self"]],["usize"]]],[11,"using_encoded","","",4,[[["self"],["f"]],["r"]]],[11,"encode","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",4,[[["w"],["self"]]]],[11,"blake2_128","","",4,[[["self"]]]],[11,"blake2_256","","",4,[[["self"]]]],[11,"blake2_128_concat","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"twox_128","","",4,[[["self"]]]],[11,"twox_256","","",4,[[["self"]]]],[11,"twox_64_concat","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"to_keyed_vec","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",4,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",4,[[],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"clone","","",0,[[["self"]],["namedata"]]],[11,"clone","","",6,[[["self"]],["module"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","","",4,[[["self"]],["rawevent"]]],[11,"eq","","",0,[[["namedata"],["self"]],["bool"]]],[11,"ne","","",0,[[["namedata"],["self"]],["bool"]]],[11,"eq","","",2,[[["operationtype"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["operation"]],["bool"]]],[11,"ne","","",1,[[["self"],["operation"]],["bool"]]],[11,"eq","","",6,[[["self"],["module"]],["bool"]]],[11,"ne","","",6,[[["self"],["module"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",4,[[["rawevent"],["self"]],["bool"]]],[11,"ne","","",4,[[["rawevent"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"decode","","",0,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",3,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",4,[[["decin"]],[["result",["error"]],["error"]]]],[11,"encode_to","","",0,[[["self"],["encout"]]]],[11,"encode_to","","",3,[[["self"],["encout"]]]],[11,"encode_to","","",4,[[["self"],["encout"]]]],[11,"metadata","","",6,[[]]],[11,"get_dispatch_info","","",3,[[["self"]],["dispatchinfo"]]],[11,"on_initialize","","",6,[[],["weight"]]],[11,"dispatch","","",3,[[],["dispatchresult"]]],[11,"on_initialize","","",6,[[]]]],"p":[[3,"NameData"],[3,"Operation"],[4,"OperationType"],[4,"Call"],[4,"RawEvent"],[8,"Trait"],[3,"Module"]]};
searchIndex["nodrop"] = {"doc":"A wrapper type to inhibit drop (destructor).","i":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,[[["t"]],["nodrop"]]],[11,"into_inner","","Extract the inner value.",0,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"drop","","",0,[[["self"]]]]],"p":[[3,"NoDrop"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[11,"new","","Creates and initializes a BigInt.",1,[[["sign"],["vec",["u32"]],["u32"]],["bigint"]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",1,[[["sign"],["biguint"]],["bigint"]]],[11,"from_slice","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",1,[[["sign"],["self"]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",1,[[["sign"]],["bigint"]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint"]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint"]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",1,[[["u32"]],[["bigint"],["option",["bigint"]]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign"],["u32"]],[["bigint"],["option",["bigint"]]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign"],["u32"]],[["bigint"],["option",["bigint"]]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",1,[[["self"]]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",1,[[["self"]]]],[11,"to_u32_digits","","Returns the sign and the u32 digits representation of the…",1,[[["self"]]]],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the…",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the…",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",1,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",1,[[["u32"],["self"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",1,[[["u32"],["self"]]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",1,[[["self"]],["sign"]]],[11,"bits","","Determines the fewest bits necessary to express the…",1,[[["self"]],["usize"]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not…",1,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_add","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_sub","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_mul","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_div","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",1,[[["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",1,[[["self"]],["self"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",1,[[["u32"],["self"]],["self"]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",["u32"]],["u32"]],["biguint"]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,[[["self"]]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,[[],["biguint"]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[["u32"]],[["option",["biguint"]],["biguint"]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_u32_digits","","Returns the u32 digits representation of the `BigUint` in…",2,[[["self"]],[["vec",["u32"]],["u32"]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",2,[[["u32"],["self"]],["string"]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",2,[[["u32"],["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",2,[[["u32"],["self"]],[["vec",["u8"]],["u8"]]]],[11,"bits","","Determines the fewest bits necessary to express the…",2,[[["self"]],["usize"]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",2,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",2,[[["self"]],["self"]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",2,[[["u32"],["self"]],["self"]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[["self"]],[["option",["biguint"]],["biguint"]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[["self"]],[["bigint"],["option",["bigint"]]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_bigint","","",1,[[["self"]],[["bigint"],["option",["bigint"]]]]],[11,"to_bigint","","",2,[[["self"]],[["bigint"],["option",["bigint"]]]]],[11,"to_biguint","","",1,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"to_biguint","","",2,[[["self"]],[["option",["biguint"]],["biguint"]]]],[11,"from","","",1,[[["i64"]],["self"]]],[11,"from","","",1,[[["i128"]],["self"]]],[11,"from","","",1,[[["i8"]],["self"]]],[11,"from","","",1,[[["i16"]],["self"]]],[11,"from","","",1,[[["i32"]],["self"]]],[11,"from","","",1,[[["isize"]],["self"]]],[11,"from","","",1,[[["u64"]],["self"]]],[11,"from","","",1,[[["u128"]],["self"]]],[11,"from","","",1,[[["u8"]],["self"]]],[11,"from","","",1,[[["u16"]],["self"]]],[11,"from","","",1,[[["u32"]],["self"]]],[11,"from","","",1,[[["usize"]],["self"]]],[11,"from","","",1,[[["biguint"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["u128"]],["self"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"clone","","",0,[[["self"]],["sign"]]],[11,"clone","","",1,[[["self"]],["bigint"]]],[11,"clone","","",2,[[["self"]],["biguint"]]],[11,"clone","","",5,[[["self"]],["parsebiginterror"]]],[11,"default","","",1,[[],["bigint"]]],[11,"default","","",2,[[],["biguint"]]],[11,"cmp","","",0,[[["self"],["sign"]],["ordering"]]],[11,"cmp","","",1,[[["bigint"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["biguint"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["sign"]],["bool"]]],[11,"eq","","",1,[[["bigint"],["self"]],["bool"]]],[11,"eq","","",2,[[["biguint"],["self"]],["bool"]]],[11,"eq","","",5,[[["parsebiginterror"],["self"]],["bool"]]],[11,"ne","","",5,[[["parsebiginterror"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["sign"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",1,[[["bigint"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",2,[[["biguint"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"div","","",1,[[["bigint"]],["bigint"]]],[11,"div","","",1,[[["bigint"]],["bigint"]]],[11,"div","","",1,[[["u8"]],["bigint"]]],[11,"div","","",1,[[["u8"]],["bigint"]]],[11,"div","","",1,[[["u16"]],["bigint"]]],[11,"div","","",1,[[["u16"]],["bigint"]]],[11,"div","","",1,[[["usize"]],["bigint"]]],[11,"div","","",1,[[["usize"]],["bigint"]]],[11,"div","","",1,[[["i8"]],["bigint"]]],[11,"div","","",1,[[["i8"]],["bigint"]]],[11,"div","","",1,[[["i16"]],["bigint"]]],[11,"div","","",1,[[["i16"]],["bigint"]]],[11,"div","","",1,[[["isize"]],["bigint"]]],[11,"div","","",1,[[["isize"]],["bigint"]]],[11,"div","","",1,[[["u32"]],["bigint"]]],[11,"div","","",1,[[["u64"]],["bigint"]]],[11,"div","","",1,[[["u128"]],["bigint"]]],[11,"div","","",1,[[["u32"]],["bigint"]]],[11,"div","","",1,[[["u64"]],["bigint"]]],[11,"div","","",1,[[["u128"]],["bigint"]]],[11,"div","","",1,[[["i32"]],["bigint"]]],[11,"div","","",1,[[["i64"]],["bigint"]]],[11,"div","","",1,[[["i128"]],["bigint"]]],[11,"div","","",1,[[["i32"]],["bigint"]]],[11,"div","","",1,[[["i64"]],["bigint"]]],[11,"div","","",1,[[["i128"]],["bigint"]]],[11,"div","","",2,[[["biguint"]],["biguint"]]],[11,"div","","",2,[[["biguint"]],["biguint"]]],[11,"div","","",2,[[["u8"]],["biguint"]]],[11,"div","","",2,[[["u8"]],["biguint"]]],[11,"div","","",2,[[["u16"]],["biguint"]]],[11,"div","","",2,[[["u16"]],["biguint"]]],[11,"div","","",2,[[["usize"]],["biguint"]]],[11,"div","","",2,[[["usize"]],["biguint"]]],[11,"div","","",2,[[["u32"]],["biguint"]]],[11,"div","","",2,[[["u64"]],["biguint"]]],[11,"div","","",2,[[["u128"]],["biguint"]]],[11,"div","","",2,[[["u32"]],["biguint"]]],[11,"div","","",2,[[["u64"]],["biguint"]]],[11,"div","","",2,[[["u128"]],["biguint"]]],[11,"rem","","",1,[[["bigint"]],["bigint"]]],[11,"rem","","",1,[[["bigint"]],["bigint"]]],[11,"rem","","",1,[[["u8"]],["bigint"]]],[11,"rem","","",1,[[["u8"]],["bigint"]]],[11,"rem","","",1,[[["u16"]],["bigint"]]],[11,"rem","","",1,[[["u16"]],["bigint"]]],[11,"rem","","",1,[[["usize"]],["bigint"]]],[11,"rem","","",1,[[["usize"]],["bigint"]]],[11,"rem","","",1,[[["i8"]],["bigint"]]],[11,"rem","","",1,[[["i8"]],["bigint"]]],[11,"rem","","",1,[[["i16"]],["bigint"]]],[11,"rem","","",1,[[["i16"]],["bigint"]]],[11,"rem","","",1,[[["isize"]],["bigint"]]],[11,"rem","","",1,[[["isize"]],["bigint"]]],[11,"rem","","",1,[[["u32"]],["bigint"]]],[11,"rem","","",1,[[["u64"]],["bigint"]]],[11,"rem","","",1,[[["u128"]],["bigint"]]],[11,"rem","","",1,[[["u32"]],["bigint"]]],[11,"rem","","",1,[[["u64"]],["bigint"]]],[11,"rem","","",1,[[["u128"]],["bigint"]]],[11,"rem","","",1,[[["i32"]],["bigint"]]],[11,"rem","","",1,[[["i64"]],["bigint"]]],[11,"rem","","",1,[[["i128"]],["bigint"]]],[11,"rem","","",1,[[["i32"]],["bigint"]]],[11,"rem","","",1,[[["i64"]],["bigint"]]],[11,"rem","","",1,[[["i128"]],["bigint"]]],[11,"rem","","",2,[[["biguint"]],["biguint"]]],[11,"rem","","",2,[[["biguint"]],["biguint"]]],[11,"rem","","",2,[[["u8"]],["biguint"]]],[11,"rem","","",2,[[["u8"]],["biguint"]]],[11,"rem","","",2,[[["u16"]],["biguint"]]],[11,"rem","","",2,[[["u16"]],["biguint"]]],[11,"rem","","",2,[[["usize"]],["biguint"]]],[11,"rem","","",2,[[["usize"]],["biguint"]]],[11,"rem","","",2,[[["u32"]],["biguint"]]],[11,"rem","","",2,[[["u32"]],["biguint"]]],[11,"rem","","",2,[[["u64"]],["biguint"]]],[11,"rem","","",2,[[["u128"]],["biguint"]]],[11,"rem","","",2,[[["u64"]],["biguint"]]],[11,"rem","","",2,[[["u128"]],["biguint"]]],[11,"sub","","",1,[[["bigint"]],["bigint"]]],[11,"sub","","",1,[[["bigint"]],["bigint"]]],[11,"sub","","",1,[[["u8"]],["bigint"]]],[11,"sub","","",1,[[["u8"]],["bigint"]]],[11,"sub","","",1,[[["u16"]],["bigint"]]],[11,"sub","","",1,[[["u16"]],["bigint"]]],[11,"sub","","",1,[[["usize"]],["bigint"]]],[11,"sub","","",1,[[["usize"]],["bigint"]]],[11,"sub","","",1,[[["i8"]],["bigint"]]],[11,"sub","","",1,[[["i8"]],["bigint"]]],[11,"sub","","",1,[[["i16"]],["bigint"]]],[11,"sub","","",1,[[["i16"]],["bigint"]]],[11,"sub","","",1,[[["isize"]],["bigint"]]],[11,"sub","","",1,[[["isize"]],["bigint"]]],[11,"sub","","",1,[[["u32"]],["bigint"]]],[11,"sub","","",1,[[["u64"]],["bigint"]]],[11,"sub","","",1,[[["u128"]],["bigint"]]],[11,"sub","","",1,[[["u32"]],["bigint"]]],[11,"sub","","",1,[[["u64"]],["bigint"]]],[11,"sub","","",1,[[["u128"]],["bigint"]]],[11,"sub","","",1,[[["i32"]],["bigint"]]],[11,"sub","","",1,[[["i64"]],["bigint"]]],[11,"sub","","",1,[[["i128"]],["bigint"]]],[11,"sub","","",1,[[["i32"]],["bigint"]]],[11,"sub","","",1,[[["i64"]],["bigint"]]],[11,"sub","","",1,[[["i128"]],["bigint"]]],[11,"sub","","",2,[[["biguint"]],["biguint"]]],[11,"sub","","",2,[[["biguint"]],["biguint"]]],[11,"sub","","",2,[[["u8"]],["biguint"]]],[11,"sub","","",2,[[["u8"]],["biguint"]]],[11,"sub","","",2,[[["u16"]],["biguint"]]],[11,"sub","","",2,[[["u16"]],["biguint"]]],[11,"sub","","",2,[[["usize"]],["biguint"]]],[11,"sub","","",2,[[["usize"]],["biguint"]]],[11,"sub","","",2,[[["u32"]],["biguint"]]],[11,"sub","","",2,[[["u64"]],["biguint"]]],[11,"sub","","",2,[[["u128"]],["biguint"]]],[11,"sub","","",2,[[["u32"]],["biguint"]]],[11,"sub","","",2,[[["u64"]],["biguint"]]],[11,"sub","","",2,[[["u128"]],["biguint"]]],[11,"add","","",1,[[["bigint"]],["bigint"]]],[11,"add","","",1,[[["bigint"]],["bigint"]]],[11,"add","","",1,[[["u8"]],["bigint"]]],[11,"add","","",1,[[["u8"]],["bigint"]]],[11,"add","","",1,[[["u16"]],["bigint"]]],[11,"add","","",1,[[["u16"]],["bigint"]]],[11,"add","","",1,[[["usize"]],["bigint"]]],[11,"add","","",1,[[["usize"]],["bigint"]]],[11,"add","","",1,[[["i8"]],["bigint"]]],[11,"add","","",1,[[["i8"]],["bigint"]]],[11,"add","","",1,[[["i16"]],["bigint"]]],[11,"add","","",1,[[["i16"]],["bigint"]]],[11,"add","","",1,[[["isize"]],["bigint"]]],[11,"add","","",1,[[["isize"]],["bigint"]]],[11,"add","","",1,[[["u32"]],["bigint"]]],[11,"add","","",1,[[["u64"]],["bigint"]]],[11,"add","","",1,[[["u128"]],["bigint"]]],[11,"add","","",1,[[["u32"]],["bigint"]]],[11,"add","","",1,[[["u64"]],["bigint"]]],[11,"add","","",1,[[["u128"]],["bigint"]]],[11,"add","","",1,[[["i32"]],["bigint"]]],[11,"add","","",1,[[["i64"]],["bigint"]]],[11,"add","","",1,[[["i128"]],["bigint"]]],[11,"add","","",1,[[["i32"]],["bigint"]]],[11,"add","","",1,[[["i64"]],["bigint"]]],[11,"add","","",1,[[["i128"]],["bigint"]]],[11,"add","","",2,[[["biguint"]],["biguint"]]],[11,"add","","",2,[[["biguint"]],["biguint"]]],[11,"add","","",2,[[["u8"]],["biguint"]]],[11,"add","","",2,[[["u8"]],["biguint"]]],[11,"add","","",2,[[["u16"]],["biguint"]]],[11,"add","","",2,[[["u16"]],["biguint"]]],[11,"add","","",2,[[["usize"]],["biguint"]]],[11,"add","","",2,[[["usize"]],["biguint"]]],[11,"add","","",2,[[["u32"]],["biguint"]]],[11,"add","","",2,[[["u64"]],["biguint"]]],[11,"add","","",2,[[["u128"]],["biguint"]]],[11,"add","","",2,[[["u32"]],["biguint"]]],[11,"add","","",2,[[["u64"]],["biguint"]]],[11,"add","","",2,[[["u128"]],["biguint"]]],[11,"mul","","",0,[[["sign"]],["sign"]]],[11,"mul","","",1,[[["bigint"]],["bigint"]]],[11,"mul","","",1,[[["bigint"]],["bigint"]]],[11,"mul","","",1,[[["u8"]],["bigint"]]],[11,"mul","","",1,[[["u8"]],["bigint"]]],[11,"mul","","",1,[[["u16"]],["bigint"]]],[11,"mul","","",1,[[["u16"]],["bigint"]]],[11,"mul","","",1,[[["usize"]],["bigint"]]],[11,"mul","","",1,[[["usize"]],["bigint"]]],[11,"mul","","",1,[[["i8"]],["bigint"]]],[11,"mul","","",1,[[["i8"]],["bigint"]]],[11,"mul","","",1,[[["i16"]],["bigint"]]],[11,"mul","","",1,[[["i16"]],["bigint"]]],[11,"mul","","",1,[[["isize"]],["bigint"]]],[11,"mul","","",1,[[["isize"]],["bigint"]]],[11,"mul","","",1,[[["u32"]],["bigint"]]],[11,"mul","","",1,[[["u64"]],["bigint"]]],[11,"mul","","",1,[[["u128"]],["bigint"]]],[11,"mul","","",1,[[["u32"]],["bigint"]]],[11,"mul","","",1,[[["u64"]],["bigint"]]],[11,"mul","","",1,[[["u128"]],["bigint"]]],[11,"mul","","",1,[[["i32"]],["bigint"]]],[11,"mul","","",1,[[["i64"]],["bigint"]]],[11,"mul","","",1,[[["i128"]],["bigint"]]],[11,"mul","","",1,[[["i32"]],["bigint"]]],[11,"mul","","",1,[[["i64"]],["bigint"]]],[11,"mul","","",1,[[["i128"]],["bigint"]]],[11,"mul","","",2,[[["biguint"]],["biguint"]]],[11,"mul","","",2,[[["biguint"]],["biguint"]]],[11,"mul","","",2,[[["u8"]],["biguint"]]],[11,"mul","","",2,[[["u8"]],["biguint"]]],[11,"mul","","",2,[[["u16"]],["biguint"]]],[11,"mul","","",2,[[["u16"]],["biguint"]]],[11,"mul","","",2,[[["usize"]],["biguint"]]],[11,"mul","","",2,[[["usize"]],["biguint"]]],[11,"mul","","",2,[[["u32"]],["biguint"]]],[11,"mul","","",2,[[["u64"]],["biguint"]]],[11,"mul","","",2,[[["u128"]],["biguint"]]],[11,"mul","","",2,[[["u32"]],["biguint"]]],[11,"mul","","",2,[[["u64"]],["biguint"]]],[11,"mul","","",2,[[["u128"]],["biguint"]]],[11,"neg","","Negate Sign value.",0,[[],["sign"]]],[11,"neg","","",1,[[],["bigint"]]],[11,"neg","","",2,[[],["biguint"]]],[11,"add_assign","","",1,[[["self"],["bigint"]]]],[11,"add_assign","","",1,[[["self"],["bigint"]]]],[11,"add_assign","","",1,[[["self"],["u8"]]]],[11,"add_assign","","",1,[[["u16"],["self"]]]],[11,"add_assign","","",1,[[["self"],["usize"]]]],[11,"add_assign","","",1,[[["self"],["i8"]]]],[11,"add_assign","","",1,[[["self"],["i16"]]]],[11,"add_assign","","",1,[[["isize"],["self"]]]],[11,"add_assign","","",1,[[["self"],["u32"]]]],[11,"add_assign","","",1,[[["self"],["u64"]]]],[11,"add_assign","","",1,[[["self"],["u128"]]]],[11,"add_assign","","",1,[[["self"],["i32"]]]],[11,"add_assign","","",1,[[["i64"],["self"]]]],[11,"add_assign","","",1,[[["self"],["i128"]]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add_assign","","",2,[[["self"],["biguint"]]]],[11,"add_assign","","",2,[[["self"],["u8"]]]],[11,"add_assign","","",2,[[["u16"],["self"]]]],[11,"add_assign","","",2,[[["self"],["usize"]]]],[11,"add_assign","","",2,[[["self"],["u32"]]]],[11,"add_assign","","",2,[[["self"],["u64"]]]],[11,"add_assign","","",2,[[["self"],["u128"]]]],[11,"sub_assign","","",1,[[["self"],["bigint"]]]],[11,"sub_assign","","",1,[[["self"],["bigint"]]]],[11,"sub_assign","","",1,[[["self"],["u8"]]]],[11,"sub_assign","","",1,[[["u16"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["usize"]]]],[11,"sub_assign","","",1,[[["self"],["i8"]]]],[11,"sub_assign","","",1,[[["self"],["i16"]]]],[11,"sub_assign","","",1,[[["isize"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["u32"]]]],[11,"sub_assign","","",1,[[["self"],["u64"]]]],[11,"sub_assign","","",1,[[["self"],["u128"]]]],[11,"sub_assign","","",1,[[["self"],["i32"]]]],[11,"sub_assign","","",1,[[["i64"],["self"]]]],[11,"sub_assign","","",1,[[["self"],["i128"]]]],[11,"sub_assign","","",2,[[["self"],["biguint"]]]],[11,"sub_assign","","",2,[[["biguint"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["u8"]]]],[11,"sub_assign","","",2,[[["u16"],["self"]]]],[11,"sub_assign","","",2,[[["self"],["usize"]]]],[11,"sub_assign","","",2,[[["self"],["u32"]]]],[11,"sub_assign","","",2,[[["self"],["u64"]]]],[11,"sub_assign","","",2,[[["self"],["u128"]]]],[11,"mul_assign","","",1,[[["self"],["bigint"]]]],[11,"mul_assign","","",1,[[["self"],["bigint"]]]],[11,"mul_assign","","",1,[[["self"],["u8"]]]],[11,"mul_assign","","",1,[[["u16"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["usize"]]]],[11,"mul_assign","","",1,[[["self"],["i8"]]]],[11,"mul_assign","","",1,[[["self"],["i16"]]]],[11,"mul_assign","","",1,[[["isize"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["u32"]]]],[11,"mul_assign","","",1,[[["self"],["u64"]]]],[11,"mul_assign","","",1,[[["self"],["u128"]]]],[11,"mul_assign","","",1,[[["self"],["i32"]]]],[11,"mul_assign","","",1,[[["i64"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["i128"]]]],[11,"mul_assign","","",2,[[["self"],["biguint"]]]],[11,"mul_assign","","",2,[[["biguint"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["u16"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["u128"]]]],[11,"div_assign","","",1,[[["self"],["bigint"]]]],[11,"div_assign","","",1,[[["self"],["bigint"]]]],[11,"div_assign","","",1,[[["self"],["u8"]]]],[11,"div_assign","","",1,[[["u16"],["self"]]]],[11,"div_assign","","",1,[[["self"],["usize"]]]],[11,"div_assign","","",1,[[["self"],["i8"]]]],[11,"div_assign","","",1,[[["self"],["i16"]]]],[11,"div_assign","","",1,[[["isize"],["self"]]]],[11,"div_assign","","",1,[[["self"],["u32"]]]],[11,"div_assign","","",1,[[["self"],["u64"]]]],[11,"div_assign","","",1,[[["self"],["u128"]]]],[11,"div_assign","","",1,[[["self"],["i32"]]]],[11,"div_assign","","",1,[[["i64"],["self"]]]],[11,"div_assign","","",1,[[["self"],["i128"]]]],[11,"div_assign","","",2,[[["self"],["biguint"]]]],[11,"div_assign","","",2,[[["biguint"],["self"]]]],[11,"div_assign","","",2,[[["self"],["u8"]]]],[11,"div_assign","","",2,[[["u16"],["self"]]]],[11,"div_assign","","",2,[[["self"],["usize"]]]],[11,"div_assign","","",2,[[["self"],["u32"]]]],[11,"div_assign","","",2,[[["self"],["u64"]]]],[11,"div_assign","","",2,[[["self"],["u128"]]]],[11,"rem_assign","","",1,[[["self"],["bigint"]]]],[11,"rem_assign","","",1,[[["self"],["bigint"]]]],[11,"rem_assign","","",1,[[["self"],["u8"]]]],[11,"rem_assign","","",1,[[["u16"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["usize"]]]],[11,"rem_assign","","",1,[[["self"],["i8"]]]],[11,"rem_assign","","",1,[[["self"],["i16"]]]],[11,"rem_assign","","",1,[[["isize"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["u32"]]]],[11,"rem_assign","","",1,[[["self"],["u64"]]]],[11,"rem_assign","","",1,[[["self"],["u128"]]]],[11,"rem_assign","","",1,[[["self"],["i32"]]]],[11,"rem_assign","","",1,[[["i64"],["self"]]]],[11,"rem_assign","","",1,[[["self"],["i128"]]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem_assign","","",2,[[["self"],["biguint"]]]],[11,"rem_assign","","",2,[[["self"],["u8"]]]],[11,"rem_assign","","",2,[[["u16"],["self"]]]],[11,"rem_assign","","",2,[[["self"],["usize"]]]],[11,"rem_assign","","",2,[[["self"],["u32"]]]],[11,"rem_assign","","",2,[[["self"],["u64"]]]],[11,"rem_assign","","",2,[[["self"],["u128"]]]],[11,"not","","",1,[[],["bigint"]]],[11,"bitand","","",1,[[["bigint"]],["bigint"]]],[11,"bitand","","",1,[[["bigint"]],["bigint"]]],[11,"bitand","","",2,[[["biguint"]],["biguint"]]],[11,"bitand","","",2,[[["biguint"]],["biguint"]]],[11,"bitor","","",1,[[["bigint"]],["bigint"]]],[11,"bitor","","",1,[[["bigint"]],["bigint"]]],[11,"bitor","","",2,[[["biguint"]],["biguint"]]],[11,"bitor","","",2,[[["biguint"]],["biguint"]]],[11,"bitxor","","",1,[[["bigint"]],["bigint"]]],[11,"bitxor","","",1,[[["bigint"]],["bigint"]]],[11,"bitxor","","",2,[[["biguint"]],["biguint"]]],[11,"bitxor","","",2,[[["biguint"]],["biguint"]]],[11,"shl","","",1,[[["usize"]],["bigint"]]],[11,"shl","","",2,[[["usize"]],["biguint"]]],[11,"shr","","",1,[[["usize"]],["bigint"]]],[11,"shr","","",2,[[["usize"]],["biguint"]]],[11,"bitand_assign","","",1,[[["self"],["bigint"]]]],[11,"bitand_assign","","",1,[[["self"],["bigint"]]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitand_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",1,[[["self"],["bigint"]]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"bitxor_assign","","",2,[[["self"],["biguint"]]]],[11,"shl_assign","","",1,[[["self"],["usize"]]]],[11,"shl_assign","","",2,[[["self"],["usize"]]]],[11,"shr_assign","","",1,[[["self"],["usize"]]]],[11,"shr_assign","","",2,[[["self"],["usize"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"product","","",1,[[["i"]],["self"]]],[11,"product","","",2,[[["i"]],["self"]]],[11,"sum","","",1,[[["i"]],["self"]]],[11,"sum","","",2,[[["i"]],["self"]]],[11,"from_str","","",1,[[["str"]],[["result",["bigint","parsebiginterror"]],["bigint"],["parsebiginterror"]]]],[11,"from_str","","",2,[[["str"]],[["parsebiginterror"],["result",["biguint","parsebiginterror"]],["biguint"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"nth_root","","",1,[[["u32"],["self"]],["self"]]],[11,"sqrt","","",1,[[["self"]],["self"]]],[11,"cbrt","","",1,[[["self"]],["self"]]],[11,"nth_root","","",2,[[["u32"],["self"]],["self"]]],[11,"sqrt","","",2,[[["self"]],["self"]]],[11,"cbrt","","",2,[[["self"]],["self"]]],[11,"div_rem","","",1,[[["bigint"],["self"]]]],[11,"div_floor","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"mod_floor","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"div_mod_floor","","",1,[[["bigint"],["self"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",1,[[["bigint"],["self"]],["bigint"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",1,[[["bigint"],["self"]],["bigint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["bigint"],["self"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["bigint"],["self"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[["self"]],["bool"]]],[11,"div_rem","","",2,[[["biguint"],["self"]]]],[11,"div_floor","","",2,[[["biguint"],["self"]],["biguint"]]],[11,"mod_floor","","",2,[[["biguint"],["self"]],["biguint"]]],[11,"div_mod_floor","","",2,[[["biguint"],["self"]]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",2,[[["self"]],["self"]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",2,[[["biguint"],["self"]],["biguint"]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["biguint"],["self"]],["bool"]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["biguint"],["self"]],["bool"]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[["self"]],["bool"]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[["self"]],["bool"]]],[11,"to_i64","","",1,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","",1,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_u64","","",1,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","",1,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","",1,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",1,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"to_i64","","",2,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","",2,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_u64","","",2,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","",2,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","",2,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",2,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"from_i64","","",1,[[["i64"]],[["bigint"],["option",["bigint"]]]]],[11,"from_i128","","",1,[[["i128"]],[["bigint"],["option",["bigint"]]]]],[11,"from_u64","","",1,[[["u64"]],[["bigint"],["option",["bigint"]]]]],[11,"from_u128","","",1,[[["u128"]],[["bigint"],["option",["bigint"]]]]],[11,"from_f64","","",1,[[["f64"]],[["bigint"],["option",["bigint"]]]]],[11,"from_i64","","",2,[[["i64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_i128","","",2,[[["i128"]],[["option",["biguint"]],["biguint"]]]],[11,"from_u64","","",2,[[["u64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_u128","","",2,[[["u128"]],[["option",["biguint"]],["biguint"]]]],[11,"from_f64","","",2,[[["f64"]],[["option",["biguint"]],["biguint"]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",1,[[["str"],["u32"]],[["result",["bigint","parsebiginterror"]],["bigint"],["parsebiginterror"]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[["str"],["u32"]],[["parsebiginterror"],["result",["biguint","parsebiginterror"]],["biguint"]]]],[11,"zero","","",1,[[],["bigint"]]],[11,"set_zero","","",1,[[["self"]]]],[11,"is_zero","","",1,[[["self"]],["bool"]]],[11,"zero","","",2,[[],["biguint"]]],[11,"set_zero","","",2,[[["self"]]]],[11,"is_zero","","",2,[[["self"]],["bool"]]],[11,"one","","",1,[[],["bigint"]]],[11,"set_one","","",1,[[["self"]]]],[11,"is_one","","",1,[[["self"]],["bool"]]],[11,"one","","",2,[[],["biguint"]]],[11,"set_one","","",2,[[["self"]]]],[11,"is_one","","",2,[[["self"]],["bool"]]],[11,"checked_add","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_add","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_sub","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_sub","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_mul","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_mul","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"checked_div","","",1,[[["bigint"],["self"]],[["bigint"],["option",["bigint"]]]]],[11,"checked_div","","",2,[[["biguint"],["self"]],[["option",["biguint"]],["biguint"]]]],[11,"abs","","",1,[[["self"]],["bigint"]]],[11,"abs_sub","","",1,[[["bigint"],["self"]],["bigint"]]],[11,"signum","","",1,[[["self"]],["bigint"]]],[11,"is_positive","","",1,[[["self"]],["bool"]]],[11,"is_negative","","",1,[[["self"]],["bool"]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"ParseBigIntError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots"]],["roots"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots"],["u32"]],["roots"]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots"]],["roots"]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer"]]]],[5,"div_floor","","Floored integer division",null,[[["integer"]],["integer"]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer"]],["integer"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer"]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer"]],["integer"]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer"]],["integer"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer"]],["integer"]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer"]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer"],["clone"]],[["integer"],["clone"]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer"],["clone"]]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[["u32"],["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[["self"]],["self"]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",2,[[["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",2,[[["self"]],["self"]]],[11,"div_ceil","","Ceiled integer division.",2,[[["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",2,[[["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",2,[[["self"]],["self"]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",2,[[["self"]]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",2,[[["self"]],["extendedgcd"]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",2,[[["self"]]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",2,[[["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",2,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",2,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",2,[[["self"]]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",2,[[["self"]]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[["self"]],["self"]]],[11,"new","","For a given n, iterate over all binomial coefficients…",3,[[["t"]],["iterbinomial"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"],["extendedgcd"]],["bool"]]],[11,"ne","","",0,[[["self"],["extendedgcd"]],["bool"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["extendedgcd"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[["self"]],["self"]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"from_float","","Converts a float into a rational number.",0,[[["floatcore"]],[["bigrational"],["option",["bigrational"]]]]],[11,"approximate_float","","",0,[[["floatcore"],["numcast"]],[["ratio"],["option",["ratio"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,[[],["ratio"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"div","","",0,[[["ratio"]],["ratio"]]],[11,"div","","",0,[[["t"]],["ratio"]]],[11,"div","","",0,[[["ratio"]],["ratio"]]],[11,"div","","",0,[[["t"]],["ratio"]]],[11,"rem","","",0,[[["ratio"]],["ratio"]]],[11,"rem","","",0,[[["t"]],["ratio"]]],[11,"rem","","",0,[[["ratio"]],["ratio"]]],[11,"rem","","",0,[[["t"]],["ratio"]]],[11,"sub","","",0,[[["ratio"]],["ratio"]]],[11,"sub","","",0,[[["t"]],["ratio"]]],[11,"sub","","",0,[[["ratio"]],["ratio"]]],[11,"sub","","",0,[[["t"]],["ratio"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"add","","",0,[[["ratio"]],["ratio"]]],[11,"add","","",0,[[["t"]],["ratio"]]],[11,"add","","",0,[[["ratio"]],["ratio"]]],[11,"add","","",0,[[["t"]],["ratio"]]],[11,"mul","","",0,[[["ratio"]],["ratio"]]],[11,"mul","","",0,[[["t"]],["ratio"]]],[11,"mul","","",0,[[["ratio"]],["ratio"]]],[11,"mul","","",0,[[["t"]],["ratio"]]],[11,"neg","","",0,[[],["ratio"]]],[11,"add_assign","","",0,[[["ratio"],["self"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["ratio"],["self"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["ratio"],["self"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["ratio"],["self"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["ratio"],["self"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],[["ratio"],["result",["ratio","parseratioerror"]],["parseratioerror"]]]],[11,"into","","",0,[[]]],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"checked_add","","",0,[[["self"],["ratio"]],[["ratio"],["option",["ratio"]]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],[["ratio"],["option",["ratio"]]]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],[["ratio"],["option",["ratio"]]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],[["ratio"],["option",["ratio"]]]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],[["ratio"],["result",["ratio","parseratioerror"]],["parseratioerror"]]]],[11,"one","","",0,[[],["ratio"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"set_one","","",0,[[["self"]]]],[11,"pow","","",0,[[["i8"]],["ratio"]]],[11,"pow","","",0,[[["i8"]],["ratio"]]],[11,"pow","","",0,[[["i16"]],["ratio"]]],[11,"pow","","",0,[[["i16"]],["ratio"]]],[11,"pow","","",0,[[["i32"]],["ratio"]]],[11,"pow","","",0,[[["i32"]],["ratio"]]],[11,"pow","","",0,[[["i64"]],["ratio"]]],[11,"pow","","",0,[[["i64"]],["ratio"]]],[11,"pow","","",0,[[["isize"]],["ratio"]]],[11,"pow","","",0,[[["isize"]],["ratio"]]],[11,"pow","","",0,[[["u8"]],["ratio"]]],[11,"pow","","",0,[[["u8"]],["ratio"]]],[11,"pow","","",0,[[["u16"]],["ratio"]]],[11,"pow","","",0,[[["u16"]],["ratio"]]],[11,"pow","","",0,[[["u32"]],["ratio"]]],[11,"pow","","",0,[[["u32"]],["ratio"]]],[11,"pow","","",0,[[["u64"]],["ratio"]]],[11,"pow","","",0,[[["u64"]],["ratio"]]],[11,"pow","","",0,[[["usize"]],["ratio"]]],[11,"pow","","",0,[[["usize"]],["ratio"]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"set_zero","","",0,[[["self"]]]],[11,"inv","","",0,[[],["ratio"]]],[11,"description","","",1,[[["self"]],["str"]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord"]],["partialord"]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord"]],["partialord"]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord"]],["partialord"]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast"]],[["option"],["numcast"]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[["self"]],[["f64"],["option",["f64"]]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[["isize"]],["option"]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[["i8"]],["option"]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[["i16"]],["option"]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[["i32"]],["option"]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[["i64"]],["option"]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[["i128"]],["option"]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[["usize"]],["option"]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[["u8"]],["option"]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[["u16"]],["option"]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[["u32"]],["option"]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[["u64"]],["option"]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[["u128"]],["option"]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[["f32"]],["option"]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[],["t"]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",8,[[],["self"]]],[10,"infinity","","Returns the infinite value.",8,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",8,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[],["self"]]],[10,"trunc","","Return the integer part of a number.",8,[[],["self"]]],[10,"fract","","Returns the fractional part of a number.",8,[[],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[],["self"]]],[10,"powi","","Raise a number to an integer power.",8,[[["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",8,[[],["self"]]],[10,"sqrt","","Take the square root of a number.",8,[[],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[],["self"]]],[10,"exp2","","Returns `2^(self)`.",8,[[],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[],["self"]]],[11,"to_degrees","","Converts radians to degrees.",8,[[],["self"]]],[11,"to_radians","","Converts degrees to radians.",8,[[],["self"]]],[10,"max","","Returns the maximum of the two numbers.",8,[[],["self"]]],[10,"min","","Returns the minimum of the two numbers.",8,[[],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[],["self"]]],[10,"cbrt","","Take the cubic root of a number.",8,[[],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[],["self"]]],[10,"sinh","","Hyperbolic sine function.",8,[[],["self"]]],[10,"cosh","","Hyperbolic cosine function.",8,[[],["self"]]],[10,"tanh","","Hyperbolic tangent function.",8,[[],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",9,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",9,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[],["self"]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero"]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",10,[[],["self"]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",10,[[["self"]]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[],["self"]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[["self"]]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[["self"]],["bool"]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["u32"]],["self"]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",18,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",19,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",20,[[["u32"],["self"]],["option"]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",21,null],[10,"inv","","Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",22,null],[10,"mul_add","","Performs the fused multiply-add operation.",22,[[["a"],["b"]]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[["a"],["self"],["b"]]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",24,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",24,[[],["self"]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",25,[[["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",26,[[["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",27,[[["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",28,[[["u32"],["self"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",29,[[["u32"],["self"]],["self"]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["one"],["mul"],["usize"],["clone"]],[["one"],["mul"],["clone"]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one"],["usize"],["checkedmul"],["clone"]],[["one"],["checkedmul"],["option"],["clone"]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",30,null],[10,"pow","","Returns `self` to the power `rhs`.",30,[[["rhs"]]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",31,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",31,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",31,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",31,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",31,[[],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",31,[[],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",31,[[],["self"]]],[10,"trunc","","Return the integer part of a number.",31,[[],["self"]]],[10,"fract","","Returns the fractional part of a number.",31,[[],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns…",31,[[],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",31,[[],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",31,[[],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",31,[[],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",31,[[],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",31,[[],["self"]]],[10,"powi","","Raise a number to an integer power.",31,[[["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",31,[[],["self"]]],[10,"sqrt","","Take the square root of a number.",31,[[],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",31,[[],["self"]]],[10,"exp2","","Returns `2^(self)`.",31,[[],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",31,[[],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an…",31,[[],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",31,[[],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",31,[[],["self"]]],[10,"to_degrees","","Converts radians to degrees.",31,[[],["self"]]],[10,"to_radians","","Converts degrees to radians.",31,[[],["self"]]],[10,"max","","Returns the maximum of the two numbers.",31,[[],["self"]]],[10,"min","","Returns the minimum of the two numbers.",31,[[],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",31,[[],["self"]]],[10,"cbrt","","Take the cubic root of a number.",31,[[],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",31,[[],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",31,[[],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",31,[[],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",31,[[],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",31,[[],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",31,[[],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",31,[[],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",31,[[],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",31,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",31,[[],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",31,[[],["self"]]],[10,"sinh","","Hyperbolic sine function.",31,[[],["self"]]],[10,"cosh","","Hyperbolic cosine function.",31,[[],["self"]]],[10,"tanh","","Hyperbolic tangent function.",31,[[],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",31,[[],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",31,[[],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",31,[[],["self"]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed"]],["signed"]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed"]],["signed"]]],[5,"signum","","Returns the sign of the number.",null,[[["signed"]],["signed"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",32,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",32,[[["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",32,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",32,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",32,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",33,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",33,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]};
searchIndex["once_cell"] = {"doc":"Overview","i":[[0,"unsync","once_cell","",null,null],[3,"OnceCell","once_cell::unsync","A cell which can be written to only once. Not thread safe.",null,null],[3,"Lazy","","A value which is initialized on the first access.",null,null],[18,"INIT","","An empty cell, for initialization in a `const` context.",0,null],[11,"new","","Creates a new empty cell.",0,[[],["oncecell"]]],[11,"get","","Gets the reference to the underlying value. Returns `None`…",0,[[["self"]],[["option"],["t"]]]],[11,"set","","Sets the contents of this cell to `value`. Returns…",0,[[["self"],["t"]],["result"]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with `f` if…",0,[[["fnonce"],["self"]],["t"]]],[11,"get_or_try_init","","Gets the contents of the cell, initializing it with `f` if…",0,[[["fnonce"],["self"]],[["t"],["result"]]]],[11,"new","","Creates a new lazy value with the given initializing…",1,[[["f"]],["lazy"]]],[11,"force","","Forces the evaluation of this lazy value and returns a…",1,[[["lazy"]],["t"]]],[0,"sync","once_cell","",null,null],[3,"OnceCell","once_cell::sync","A thread-safe cell which can be written to only once.",null,null],[3,"Lazy","","A value which is initialized on the first access.",null,null],[11,"new","","Creates a new lazy value with the given initializing…",2,[[["f"]],["lazy"]]],[11,"force","","Forces the evaluation of this lazy value and returns a…",2,[[["lazy"]],["t"]]],[14,"unsync_lazy","once_cell","Creates a new lazy value initialized by the given closure…",null,null],[14,"sync_lazy","","Creates a new lazy value initialized by the given closure…",null,null],[11,"from","once_cell::sync","",3,[[],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","once_cell::unsync","",0,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","once_cell::sync","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["self"]]],[11,"from","once_cell::unsync","",0,[[["t"]],["self"]]],[11,"clone","","",0,[[["self"]],["oncecell"]]],[11,"default","once_cell::sync","",3,[[],["oncecell"]]],[11,"default","once_cell::unsync","",0,[[],["self"]]],[11,"eq","once_cell::sync","",3,[[["self"],["oncecell"]],["bool"]]],[11,"eq","once_cell::unsync","",0,[[["self"]],["bool"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref","once_cell::sync","",2,[[["self"]],["t"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","once_cell::unsync","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","once_cell::sync","",2,[[["formatter"],["self"]],["result"]]],[18,"INIT","","An empty cell, for initialization in a `const` context.",3,null],[11,"new","","Creates a new empty cell.",3,[[],["oncecell"]]],[11,"get","","Gets the reference to the underlying value. Returns `None`…",3,[[["self"]],[["option"],["t"]]]],[11,"set","","Sets the contents of this cell to `value`. Returns…",3,[[["self"],["t"]],["result"]]],[11,"get_or_init","","Gets the contents of the cell, initializing it with `f` if…",3,[[["fnonce"],["self"]],["t"]]]],"p":[[3,"OnceCell"],[3,"Lazy"],[3,"Lazy"],[3,"OnceCell"]]};
searchIndex["opaque_debug"] = {"doc":"Macro for opaque `Debug` trait implementation.","i":[[14,"impl_opaque_debug","opaque_debug","Macro for defining opaque `Debug` implementation.",null,null]],"p":[]};
searchIndex["parity_scale_codec"] = {"doc":"Parity SCALE Codec","i":[[24,"Encode","parity_scale_codec","Derive `parity_scale_codec::Encode` and…",null,null],[24,"Decode","","Derive `parity_scale_codec::Decode` and for struct and enum.",null,null],[24,"CompactAs","","Derive `parity_scale_codec::Compact` and…",null,null],[3,"Error","","Descriptive error type",null,null],[3,"OptionBool","","Shim type because we can't do a specialised implementation…",null,null],[12,"0","","",0,null],[3,"IoReader","","Wrapper that implements Input for any `Read` and `Seek`…",null,null],[12,"0","","",1,null],[3,"Compact","","Compact-encoded variant of T. This is more space-efficient…",null,null],[12,"0","","",2,null],[3,"Ref","","Reference wrapper that implement encode like any type that…",null,null],[11,"what","","Error description",3,[[["self"]],["str"]]],[8,"Input","","Trait that allows reading of data into a slice.",null,null],[10,"remaining_len","","Should return the remaining length of the input data. If…",4,[[["self"]],[["result",["option","error"]],["option",["usize"]],["error"]]]],[10,"read","","Read the exact number of bytes required to fill the given…",4,[[["self"]],[["result",["error"]],["error"]]]],[11,"read_byte","","Read a single byte from the input.",4,[[["self"]],[["result",["u8","error"]],["error"],["u8"]]]],[8,"Output","","Trait that allows writing of data.",null,null],[10,"write","","Write to the output.",5,[[["self"]]]],[11,"push_byte","","Write a single byte to the output.",5,[[["self"],["u8"]]]],[11,"push","","Write encoding of given value to the output.",5,[[["self"],["v"]]]],[8,"Decode","","Trait that allows zero-copy read of value-references from…",null,null],[10,"decode","","Attempt to deserialise the value from input.",6,[[["i"]],[["result",["error"]],["error"]]]],[8,"Encode","","Trait that allows zero-copy write of value-references to…",null,null],[11,"size_hint","","If possible give a hint of expected size of the encoding.",7,[[["self"]],["usize"]]],[11,"encode_to","","Convert self to a slice and append it to the destination.",7,[[["self"],["t"]]]],[11,"encode","","Convert self to an owned vector.",7,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","Convert self to a slice and then invoke the given closure…",7,[[["fnonce"],["self"]],["r"]]],[8,"Codec","","Trait that allows zero-copy read/write of value-references…",null,null],[8,"EncodeAsRef","","Something that can be encoded as a reference.",null,null],[16,"RefType","","The reference type that is used for encoding.",8,null],[8,"WrapperTypeEncode","","A marker trait for types that wrap other encodable type.",null,null],[8,"WrapperTypeDecode","","A marker trait for types that can be created solely from…",null,null],[16,"Wrapped","","A wrapped type.",9,null],[8,"DecodeLength","","Trait that allows the length of a collection to be read,…",null,null],[10,"len","","Return the number of elements in `self_encoded`.",10,[[],[["error"],["usize"],["result",["usize","error"]]]]],[8,"FullCodec","","Trait that bound `EncodeLike` along with `Codec`. Usefull…",null,null],[8,"FullEncode","","Trait that bound `EncodeLike` along with `Encode`. Usefull…",null,null],[8,"HasCompact","","Trait that tells you if a given type can be…",null,null],[16,"Type","","The compact type; this can be",11,null],[8,"CompactAs","","Allow foreign structs to be wrap in Compact",null,null],[16,"As","","A compact-encodable type that should be used as the…",12,null],[10,"encode_as","","Returns the encodable type.",12,[[["self"]]]],[10,"decode_from","","Create `Self` from the decodable type.",12,[[],["self"]]],[8,"CompactLen","","Something that can return the compact encoded length for a…",null,null],[10,"compact_len","","Returns the compact encoded length for the given value.",13,[[["t"]],["usize"]]],[8,"Joiner","","Trait to allow itself to be serialised into a value which…",null,null],[10,"and","","Append encoding of value to `Self`.",14,[[["v"]],["self"]]],[8,"KeyedVec","","Trait to allow itself to be serialised and prepended by a…",null,null],[10,"to_keyed_vec","","Return an encoding of `Self` prepended by given slice.",15,[[["self"]],[["vec",["u8"]],["u8"]]]],[8,"DecodeAll","","Extension trait to [`Decode`] that ensures that the given…",null,null],[10,"decode_all","","Decode `Self` and consume all of the given input data. If…",16,[[],[["result",["error"]],["error"]]]],[8,"EncodeAppend","","Trait that allows to append items to an encoded…",null,null],[16,"Item","","The item that will be appended.",17,null],[10,"append","","Append all items in `iter` to the given `self_encoded`…",17,[[["vec",["u8"]],["intoiterator"],["u8"]],[["result",["vec","error"]],["vec",["u8"]],["error"]]]],[10,"append_or_new","","Append all items in `iter` to the given `self_encoded`…",17,[[["vec",["u8"]],["i"],["u8"]],[["result",["vec","error"]],["vec",["u8"]],["error"]]]],[8,"EncodeLike","","A marker trait that tells the compiler that a type encode…",null,null],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"remaining_len","","",1,[[["self"]],[["result",["option","error"]],["option",["usize"]],["error"]]]],[11,"read","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["fnonce"],["self"]],["r"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"encode","","",2,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",2,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"compact_len","","",2,[[["u8"]],["usize"]]],[11,"compact_len","","",2,[[["u16"]],["usize"]]],[11,"compact_len","","",2,[[["u32"]],["usize"]]],[11,"compact_len","","",2,[[["u64"]],["usize"]]],[11,"compact_len","","",2,[[["u128"]],["usize"]]],[11,"from","","",3,[[["str"]],["error"]]],[11,"from","","",3,[[["error"]],["self"]]],[11,"from","","",2,[[["t"]],["compact"]]],[11,"from","","",2,[[["t"]],["compact"]]],[11,"from","","",18,[[["t"]],["self"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"clone","","",0,[[["self"]],["optionbool"]]],[11,"clone","","",2,[[["self"]],["compact"]]],[11,"cmp","","",2,[[["compact"],["self"]],["ordering"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"eq","","",0,[[["self"],["optionbool"]],["bool"]]],[11,"ne","","",0,[[["self"],["optionbool"]],["bool"]]],[11,"eq","","",2,[[["compact"],["self"]],["bool"]]],[11,"ne","","",2,[[["compact"],["self"]],["bool"]]],[11,"partial_cmp","","",2,[[["compact"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",2,[[["compact"],["self"]],["bool"]]],[11,"le","","",2,[[["compact"],["self"]],["bool"]]],[11,"gt","","",2,[[["compact"],["self"]],["bool"]]],[11,"ge","","",2,[[["compact"],["self"]],["bool"]]],[11,"deref","","",18,[[["self"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"read_byte","","Read a single byte from the input.",4,[[["self"]],[["result",["u8","error"]],["error"],["u8"]]]],[11,"push_byte","","Write a single byte to the output.",5,[[["self"],["u8"]]]],[11,"push","","Write encoding of given value to the output.",5,[[["self"],["v"]]]],[11,"size_hint","","If possible give a hint of expected size of the encoding.",7,[[["self"]],["usize"]]],[11,"encode_to","","Convert self to a slice and append it to the destination.",7,[[["self"],["t"]]]],[11,"encode","","Convert self to an owned vector.",7,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","Convert self to a slice and then invoke the given closure…",7,[[["fnonce"],["self"]],["r"]]]],"p":[[3,"OptionBool"],[3,"IoReader"],[3,"Compact"],[3,"Error"],[8,"Input"],[8,"Output"],[8,"Decode"],[8,"Encode"],[8,"EncodeAsRef"],[8,"WrapperTypeDecode"],[8,"DecodeLength"],[8,"HasCompact"],[8,"CompactAs"],[8,"CompactLen"],[8,"Joiner"],[8,"KeyedVec"],[8,"DecodeAll"],[8,"EncodeAppend"],[3,"Ref"]]};
searchIndex["parity_scale_codec_derive"] = {"doc":"Derives serialization and deserialization codec for…","i":[[24,"Encode","parity_scale_codec_derive","Derive `parity_scale_codec::Encode` and…",null,null],[24,"Decode","","Derive `parity_scale_codec::Decode` and for struct and enum.",null,null],[24,"CompactAs","","Derive `parity_scale_codec::Compact` and…",null,null]],"p":[]};
searchIndex["parity_util_mem"] = {"doc":"Crate for parity memory management related utilities. It…","i":[[24,"MallocSizeOf","parity_util_mem","",null,null],[3,"MallocSizeOfOps","","Operations used when measuring heap usage of data…",null,null],[0,"allocators","","default allocator management Features are: - windows: - no…",null,null],[5,"new_malloc_size_ops","parity_util_mem::allocators","Get a new instance of a MallocSizeOfOps",null,[[],["mallocsizeofops"]]],[8,"MallocSizeOfExt","","Extension methods for `MallocSizeOf` trait, do not…",null,null],[11,"malloc_size_of","","Method to launch a heapsize measurement with a fresh state.",0,[[["self"]],["usize"]]],[11,"new","parity_util_mem","",1,[[["box",["fnmut"]],["option",["box"]],["option"]],["self"]]],[11,"malloc_size_of","","Call `size_of_op` on `ptr`, first checking that the…",1,[[["self"]],["usize"]]],[11,"has_malloc_enclosing_size_of","","Is an `enclosing_size_of_op` available?",1,[[["self"]],["bool"]]],[11,"malloc_enclosing_size_of","","Call `enclosing_size_of_op`, which must be available, on…",1,[[["self"]],["usize"]]],[11,"have_seen_ptr","","Call `have_seen_ptr_op` on `ptr`.",1,[[["self"]],["bool"]]],[8,"MallocSizeOf","","Trait for measuring the \"deep\" heap usage of a data…",null,null],[10,"size_of","","Measure the heap usage of all descendant heap-allocated…",2,[[["mallocsizeofops"],["self"]],["usize"]]],[14,"malloc_size_of_is_0","","",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]]],"p":[[8,"MallocSizeOfExt"],[3,"MallocSizeOfOps"],[8,"MallocSizeOf"]]};
searchIndex["parity_wasm"] = {"doc":"WebAssembly format library","i":[[5,"peek_size","parity_wasm","Returns size of the module in the provided stream.",null,[[],["usize"]]],[0,"elements","","Elements of the WebAssembly binary format.",null,null],[3,"Module","parity_wasm::elements","WebAssembly module",null,null],[3,"FunctionSection","","Section with function signatures definition.",null,null],[3,"CodeSection","","Section with function bodies of the module.",null,null],[3,"MemorySection","","Section with table definition (currently only one entry is…",null,null],[3,"DataSection","","Data entries definitions.",null,null],[3,"ImportSection","","Section of the imports definition.",null,null],[3,"ExportSection","","List of exports definition.",null,null],[3,"GlobalSection","","Globals definition section.",null,null],[3,"TypeSection","","Section with type declarations.",null,null],[3,"ElementSection","","Element entries section.",null,null],[3,"TableSection","","Section with table definition (currently only one is…",null,null],[3,"CustomSection","","Custom section.",null,null],[3,"ImportEntry","","Import entry.",null,null],[3,"ResizableLimits","","Memory and table limits.",null,null],[3,"MemoryType","","Memory entry.",null,null],[3,"TableType","","Table entry",null,null],[3,"GlobalType","","Global definition struct",null,null],[3,"ExportEntry","","Export entry.",null,null],[3,"GlobalEntry","","Global entry in the module.",null,null],[3,"VarUint32","","Unsigned variable-length integer, limited to 32 bits,…",null,null],[3,"VarUint7","","7-bit unsigned integer, encoded in LEB128 (always 1 byte…",null,null],[3,"Uint8","","8-bit unsigned integer, NOT encoded in LEB128; it's just a…",null,null],[3,"VarUint1","","VarUint1, 1-bit value (0/1).",null,null],[3,"VarInt7","","7-bit signed integer, encoded in LEB128 (always 1 byte…",null,null],[3,"Uint32","","32-bit unsigned integer, encoded in little endian.",null,null],[3,"VarInt32","","32-bit signed integer, encoded in LEB128 (can be 1-5 bytes…",null,null],[3,"VarInt64","","64-bit signed integer, encoded in LEB128 (can be 1-9 bytes…",null,null],[3,"Uint64","","64-bit unsigned integer, encoded in little endian.",null,null],[3,"VarUint64","","Unsigned variable-length integer, limited to 64 bits,…",null,null],[3,"CountedList","","List for reading sequence of elements typed `T`, given…",null,null],[3,"CountedWriter","","Helper struct to write payload which is preceded by it's…",null,null],[3,"CountedListWriter","","Helper struct to write series of `T` preceded by the…",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"FunctionType","","Function signature type.",null,null],[3,"Instructions","","List of instructions (usually inside a block section).",null,null],[3,"InitExpr","","Initialization expression.",null,null],[3,"BrTableData","","",null,null],[12,"table","","",1,null],[12,"default","","",1,null],[3,"Func","","Function signature (type reference)",null,null],[3,"FuncBody","","Function body definition.",null,null],[3,"Local","","Local definition inside the function body.",null,null],[3,"ElementSegment","","Entry in the element section.",null,null],[3,"DataSegment","","Data segment definition.",null,null],[3,"IndexMap","","A map from non-contiguous `u32` keys to values of type…",null,null],[3,"NameSection","","Debug name information.",null,null],[3,"ModuleNameSubsection","","The name of this module.",null,null],[3,"FunctionNameSubsection","","The names of the functions in this module.",null,null],[3,"LocalNameSubsection","","The names of the local variables in this module's functions.",null,null],[3,"RelocSection","","Relocation information.",null,null],[3,"Unparsed","","Unparsed part of the module/section.",null,null],[12,"0","","",2,null],[4,"ImportCountType","","Type of the import entry to count",null,null],[13,"Function","","Count functions",3,null],[13,"Global","","Count globals",3,null],[13,"Table","","Count tables",3,null],[13,"Memory","","Count memories",3,null],[4,"Section","","Section in the WebAssembly module.",null,null],[13,"Unparsed","","Section is unparsed.",4,null],[12,"id","parity_wasm::elements::Section","id of the unparsed section.",4,null],[12,"payload","","raw bytes of the unparsed section.",4,null],[13,"Custom","parity_wasm::elements","Custom section (`id=0`).",4,null],[13,"Type","","Types section.",4,null],[13,"Import","","Import section.",4,null],[13,"Function","","Function signatures section.",4,null],[13,"Table","","Table definition section.",4,null],[13,"Memory","","Memory definition section.",4,null],[13,"Global","","Global entries section.",4,null],[13,"Export","","Export definitions.",4,null],[13,"Start","","Entry reference of the module.",4,null],[13,"Element","","Elements section.",4,null],[13,"DataCount","","Number of passive data entries in the data section",4,null],[13,"Code","","Function bodies section.",4,null],[13,"Data","","Data definition section.",4,null],[13,"Name","","Name section.",4,null],[13,"Reloc","","Relocation section.",4,null],[4,"External","","External to local binding.",null,null],[13,"Function","","Binds to a function whose type is associated with the…",5,null],[13,"Table","","Describes local table definition to be imported as.",5,null],[13,"Memory","","Describes local memory definition to be imported as.",5,null],[13,"Global","","Describes local global entry to be imported as.",5,null],[4,"Internal","","Internal reference of the exported entry.",null,null],[13,"Function","","Function reference.",6,null],[13,"Table","","Table reference.",6,null],[13,"Memory","","Memory reference.",6,null],[13,"Global","","Global reference.",6,null],[4,"Type","","Type definition in types section. Currently can be only of…",null,null],[13,"Function","","Function type.",7,null],[4,"ValueType","","Value type.",null,null],[13,"I32","","32-bit signed integer",8,null],[13,"I64","","64-bit signed integer",8,null],[13,"F32","","32-bit float",8,null],[13,"F64","","64-bit float",8,null],[4,"BlockType","","Block type which is basically `ValueType` + NoResult (to…",null,null],[13,"Value","","Value-type specified block type",9,null],[13,"NoResult","","No specified block type",9,null],[4,"TableElementType","","Table element type.",null,null],[13,"AnyFunc","","A reference to a function with any signature.",10,null],[4,"Instruction","","Instruction.",null,null],[13,"Unreachable","","",11,null],[13,"Nop","","",11,null],[13,"Block","","",11,null],[13,"Loop","","",11,null],[13,"If","","",11,null],[13,"Else","","",11,null],[13,"End","","",11,null],[13,"Br","","",11,null],[13,"BrIf","","",11,null],[13,"BrTable","","",11,null],[13,"Return","","",11,null],[13,"Call","","",11,null],[13,"CallIndirect","","",11,null],[13,"Drop","","",11,null],[13,"Select","","",11,null],[13,"GetLocal","","",11,null],[13,"SetLocal","","",11,null],[13,"TeeLocal","","",11,null],[13,"GetGlobal","","",11,null],[13,"SetGlobal","","",11,null],[13,"I32Load","","",11,null],[13,"I64Load","","",11,null],[13,"F32Load","","",11,null],[13,"F64Load","","",11,null],[13,"I32Load8S","","",11,null],[13,"I32Load8U","","",11,null],[13,"I32Load16S","","",11,null],[13,"I32Load16U","","",11,null],[13,"I64Load8S","","",11,null],[13,"I64Load8U","","",11,null],[13,"I64Load16S","","",11,null],[13,"I64Load16U","","",11,null],[13,"I64Load32S","","",11,null],[13,"I64Load32U","","",11,null],[13,"I32Store","","",11,null],[13,"I64Store","","",11,null],[13,"F32Store","","",11,null],[13,"F64Store","","",11,null],[13,"I32Store8","","",11,null],[13,"I32Store16","","",11,null],[13,"I64Store8","","",11,null],[13,"I64Store16","","",11,null],[13,"I64Store32","","",11,null],[13,"CurrentMemory","","",11,null],[13,"GrowMemory","","",11,null],[13,"I32Const","","",11,null],[13,"I64Const","","",11,null],[13,"F32Const","","",11,null],[13,"F64Const","","",11,null],[13,"I32Eqz","","",11,null],[13,"I32Eq","","",11,null],[13,"I32Ne","","",11,null],[13,"I32LtS","","",11,null],[13,"I32LtU","","",11,null],[13,"I32GtS","","",11,null],[13,"I32GtU","","",11,null],[13,"I32LeS","","",11,null],[13,"I32LeU","","",11,null],[13,"I32GeS","","",11,null],[13,"I32GeU","","",11,null],[13,"I64Eqz","","",11,null],[13,"I64Eq","","",11,null],[13,"I64Ne","","",11,null],[13,"I64LtS","","",11,null],[13,"I64LtU","","",11,null],[13,"I64GtS","","",11,null],[13,"I64GtU","","",11,null],[13,"I64LeS","","",11,null],[13,"I64LeU","","",11,null],[13,"I64GeS","","",11,null],[13,"I64GeU","","",11,null],[13,"F32Eq","","",11,null],[13,"F32Ne","","",11,null],[13,"F32Lt","","",11,null],[13,"F32Gt","","",11,null],[13,"F32Le","","",11,null],[13,"F32Ge","","",11,null],[13,"F64Eq","","",11,null],[13,"F64Ne","","",11,null],[13,"F64Lt","","",11,null],[13,"F64Gt","","",11,null],[13,"F64Le","","",11,null],[13,"F64Ge","","",11,null],[13,"I32Clz","","",11,null],[13,"I32Ctz","","",11,null],[13,"I32Popcnt","","",11,null],[13,"I32Add","","",11,null],[13,"I32Sub","","",11,null],[13,"I32Mul","","",11,null],[13,"I32DivS","","",11,null],[13,"I32DivU","","",11,null],[13,"I32RemS","","",11,null],[13,"I32RemU","","",11,null],[13,"I32And","","",11,null],[13,"I32Or","","",11,null],[13,"I32Xor","","",11,null],[13,"I32Shl","","",11,null],[13,"I32ShrS","","",11,null],[13,"I32ShrU","","",11,null],[13,"I32Rotl","","",11,null],[13,"I32Rotr","","",11,null],[13,"I64Clz","","",11,null],[13,"I64Ctz","","",11,null],[13,"I64Popcnt","","",11,null],[13,"I64Add","","",11,null],[13,"I64Sub","","",11,null],[13,"I64Mul","","",11,null],[13,"I64DivS","","",11,null],[13,"I64DivU","","",11,null],[13,"I64RemS","","",11,null],[13,"I64RemU","","",11,null],[13,"I64And","","",11,null],[13,"I64Or","","",11,null],[13,"I64Xor","","",11,null],[13,"I64Shl","","",11,null],[13,"I64ShrS","","",11,null],[13,"I64ShrU","","",11,null],[13,"I64Rotl","","",11,null],[13,"I64Rotr","","",11,null],[13,"F32Abs","","",11,null],[13,"F32Neg","","",11,null],[13,"F32Ceil","","",11,null],[13,"F32Floor","","",11,null],[13,"F32Trunc","","",11,null],[13,"F32Nearest","","",11,null],[13,"F32Sqrt","","",11,null],[13,"F32Add","","",11,null],[13,"F32Sub","","",11,null],[13,"F32Mul","","",11,null],[13,"F32Div","","",11,null],[13,"F32Min","","",11,null],[13,"F32Max","","",11,null],[13,"F32Copysign","","",11,null],[13,"F64Abs","","",11,null],[13,"F64Neg","","",11,null],[13,"F64Ceil","","",11,null],[13,"F64Floor","","",11,null],[13,"F64Trunc","","",11,null],[13,"F64Nearest","","",11,null],[13,"F64Sqrt","","",11,null],[13,"F64Add","","",11,null],[13,"F64Sub","","",11,null],[13,"F64Mul","","",11,null],[13,"F64Div","","",11,null],[13,"F64Min","","",11,null],[13,"F64Max","","",11,null],[13,"F64Copysign","","",11,null],[13,"I32WrapI64","","",11,null],[13,"I32TruncSF32","","",11,null],[13,"I32TruncUF32","","",11,null],[13,"I32TruncSF64","","",11,null],[13,"I32TruncUF64","","",11,null],[13,"I64ExtendSI32","","",11,null],[13,"I64ExtendUI32","","",11,null],[13,"I64TruncSF32","","",11,null],[13,"I64TruncUF32","","",11,null],[13,"I64TruncSF64","","",11,null],[13,"I64TruncUF64","","",11,null],[13,"F32ConvertSI32","","",11,null],[13,"F32ConvertUI32","","",11,null],[13,"F32ConvertSI64","","",11,null],[13,"F32ConvertUI64","","",11,null],[13,"F32DemoteF64","","",11,null],[13,"F64ConvertSI32","","",11,null],[13,"F64ConvertUI32","","",11,null],[13,"F64ConvertSI64","","",11,null],[13,"F64ConvertUI64","","",11,null],[13,"F64PromoteF32","","",11,null],[13,"I32ReinterpretF32","","",11,null],[13,"I64ReinterpretF64","","",11,null],[13,"F32ReinterpretI32","","",11,null],[13,"F64ReinterpretI64","","",11,null],[4,"RelocationEntry","","Relocation entry.",null,null],[13,"FunctionIndexLeb","","Function index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"TableIndexSleb","parity_wasm::elements","Function table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"TableIndexI32","parity_wasm::elements","Function table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the function symbol in the symbol table.",12,null],[13,"MemoryAddressLeb","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"MemoryAddressSleb","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"MemoryAddressI32","parity_wasm::elements","Linear memory index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the data symbol in the symbol table.",12,null],[12,"addend","","Addend to add to the address.",12,null],[13,"TypeIndexLeb","parity_wasm::elements","Type table index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the type used.",12,null],[13,"GlobalIndexLeb","parity_wasm::elements","Global index.",12,null],[12,"offset","parity_wasm::elements::RelocationEntry","Offset of the value to rewrite.",12,null],[12,"index","","Index of the global symbol in the symbol table.",12,null],[4,"Error","parity_wasm::elements","Deserialization/serialization error",null,null],[13,"UnexpectedEof","","Unexpected end of input.",13,null],[13,"InvalidMagic","","Invalid magic.",13,null],[13,"UnsupportedVersion","","Unsupported version.",13,null],[13,"InconsistentLength","","Inconsistence between declared and actual length.",13,null],[12,"expected","parity_wasm::elements::Error","Expected length of the definition.",13,null],[12,"actual","","Actual length of the definition.",13,null],[13,"Other","parity_wasm::elements","Other static error.",13,null],[13,"HeapOther","","Other allocated error.",13,null],[13,"UnknownValueType","","Invalid/unknown value type declaration.",13,null],[13,"UnknownTableElementType","","Invalid/unknown table element type declaration.",13,null],[13,"NonUtf8String","","Non-utf8 string.",13,null],[13,"UnknownExternalKind","","Unknown external kind code.",13,null],[13,"UnknownInternalKind","","Unknown internal kind code.",13,null],[13,"UnknownOpcode","","Unknown opcode encountered.",13,null],[13,"InvalidVarUint1","","Invalid VarUint1 value.",13,null],[13,"InvalidVarInt32","","Invalid VarInt32 value.",13,null],[13,"InvalidVarInt64","","Invalid VarInt64 value.",13,null],[13,"InvalidVarUint32","","Invalid VarUint32 value.",13,null],[13,"InvalidVarUint64","","Invalid VarUint64 value.",13,null],[13,"InconsistentMetadata","","Inconsistent metadata.",13,null],[13,"InvalidSectionId","","Invalid section id.",13,null],[13,"SectionsOutOfOrder","","Sections are out of order.",13,null],[13,"DuplicatedSections","","Duplicated sections.",13,null],[13,"InvalidMemoryReference","","Invalid memory reference (should be 0).",13,null],[13,"InvalidTableReference","","Invalid table reference (should be 0).",13,null],[13,"InvalidLimitsFlags","","Invalid value used for flags in limits type.",13,null],[13,"UnknownFunctionForm","","Unknown function form (should be 0x60).",13,null],[13,"InvalidVarInt7","","Invalid varint7 (should be in -64..63 range).",13,null],[13,"InconsistentCode","","Number of function body entries and signatures does not…",13,null],[13,"InvalidSegmentFlags","","Only flags 0, 1, and 2 are accepted on segments.",13,null],[13,"TooManyLocals","","Sum of counts of locals is greater than 2^32.",13,null],[13,"DuplicatedNameSubsections","","Duplicated name subsections.",13,null],[13,"UnknownNameSubsectionType","","Unknown name subsection type.",13,null],[5,"peek_size","","Returns size of the module in the provided stream.",null,[[],["usize"]]],[5,"deserialize_buffer","","Deserialize deserializable type from buffer.",null,[[],[["result"],["deserialize"]]]],[5,"serialize","","Create buffer with serialized value.",null,[[["serialize"]],[["vec",["u8"]],["result",["vec"]]]]],[5,"deserialize_file","","Deserialize module from the file.",null,[[["path"],["asref",["path"]]],[["result",["module","error"]],["module"],["error"]]]],[5,"serialize_to_file","","Serialize module to the file",null,[[["path"],["asref",["path"]],["module"]],[["result",["error"]],["error"]]]],[11,"into_inner","","Destroy counted list returing inner vector.",14,[[],["vec"]]],[11,"new","","New counted writer on top of the given serial writer.",15,[[["w"]],["self"]]],[11,"done","","Finish counted writer routing, which writes accumulated…",15,[[],[["error"],["result",["error"]]]]],[11,"new","","New module with sections",16,[[["section"],["vec",["section"]]],["self"]]],[11,"from_bytes","","Construct a module from a slice.",16,[[["asref"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","Serialize a module to a vector.",16,[[],[["vec",["u8"]],["result",["vec","error"]],["error"]]]],[11,"into_sections","","Destructure the module, yielding sections",16,[[],[["section"],["vec",["section"]]]]],[11,"version","","Version of module.",16,[[["self"]],["u32"]]],[11,"sections","","Sections list.",16,[[["self"]]]],[11,"sections_mut","","Sections list (mutable).",16,[[["self"]],["vec"]]],[11,"insert_section","","Insert a section, in the correct section ordering. This…",16,[[["section"],["self"]],[["result",["error"]],["error"]]]],[11,"code_section","","Code section reference, if any.",16,[[["self"]],[["option",["codesection"]],["codesection"]]]],[11,"code_section_mut","","Code section mutable reference, if any.",16,[[["self"]],[["codesection"],["option",["codesection"]]]]],[11,"type_section","","Types section reference, if any.",16,[[["self"]],[["option",["typesection"]],["typesection"]]]],[11,"type_section_mut","","Types section mutable reference, if any.",16,[[["self"]],[["typesection"],["option",["typesection"]]]]],[11,"import_section","","Imports section reference, if any.",16,[[["self"]],[["importsection"],["option",["importsection"]]]]],[11,"import_section_mut","","Imports section mutable reference, if any.",16,[[["self"]],[["importsection"],["option",["importsection"]]]]],[11,"global_section","","Globals section reference, if any.",16,[[["self"]],[["option",["globalsection"]],["globalsection"]]]],[11,"global_section_mut","","Globals section mutable reference, if any.",16,[[["self"]],[["globalsection"],["option",["globalsection"]]]]],[11,"export_section","","Exports section reference, if any.",16,[[["self"]],[["option",["exportsection"]],["exportsection"]]]],[11,"export_section_mut","","Exports section mutable reference, if any.",16,[[["self"]],[["option",["exportsection"]],["exportsection"]]]],[11,"table_section","","Table section reference, if any.",16,[[["self"]],[["tablesection"],["option",["tablesection"]]]]],[11,"table_section_mut","","Table section mutable reference, if any.",16,[[["self"]],[["tablesection"],["option",["tablesection"]]]]],[11,"data_section","","Data section reference, if any.",16,[[["self"]],[["option",["datasection"]],["datasection"]]]],[11,"data_section_mut","","Data section mutable reference, if any.",16,[[["self"]],[["option",["datasection"]],["datasection"]]]],[11,"elements_section","","Element section reference, if any.",16,[[["self"]],[["option",["elementsection"]],["elementsection"]]]],[11,"elements_section_mut","","Element section mutable reference, if any.",16,[[["self"]],[["option",["elementsection"]],["elementsection"]]]],[11,"memory_section","","Memory section reference, if any.",16,[[["self"]],[["option",["memorysection"]],["memorysection"]]]],[11,"memory_section_mut","","Memory section mutable reference, if any.",16,[[["self"]],[["memorysection"],["option",["memorysection"]]]]],[11,"function_section","","Functions signatures section reference, if any.",16,[[["self"]],[["functionsection"],["option",["functionsection"]]]]],[11,"function_section_mut","","Functions signatures section mutable reference, if any.",16,[[["self"]],[["option",["functionsection"]],["functionsection"]]]],[11,"start_section","","Start section, if any.",16,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"set_start_section","","Changes the module's start section.",16,[[["self"],["u32"]]]],[11,"clear_start_section","","Removes the module's start section.",16,[[["self"]]]],[11,"custom_sections","","Returns an iterator over the module's custom sections",16,[[["self"]]]],[11,"set_custom_section","","Sets the payload associated with the given custom section,…",16,[[["vec",["u8"]],["self"],["u8"]]]],[11,"clear_custom_section","","Removes the given custom section, if it exists. Returns…",16,[[["self"]],[["option",["customsection"]],["customsection"]]]],[11,"has_names_section","","True if a name section is present.",16,[[["self"]],["bool"]]],[11,"names_section","","Functions signatures section reference, if any.",16,[[["self"]],[["option",["namesection"]],["namesection"]]]],[11,"names_section_mut","","Functions signatures section mutable reference, if any.",16,[[["self"]],[["option",["namesection"]],["namesection"]]]],[11,"parse_names","","Try to parse name section in place.",16,[[],["result"]]],[11,"parse_reloc","","Try to parse reloc section in place.",16,[[],["result"]]],[11,"import_count","","Count imports by provided type.",16,[[["self"],["importcounttype"]],["usize"]]],[11,"functions_space","","Query functions space.",16,[[["self"]],["usize"]]],[11,"globals_space","","Query globals space.",16,[[["self"]],["usize"]]],[11,"table_space","","Query table space.",16,[[["self"]],["usize"]]],[11,"memory_space","","Query memory space.",16,[[["self"]],["usize"]]],[11,"new","","Creates a new custom section with the given name and…",17,[[["vec",["u8"]],["string"],["u8"]],["customsection"]]],[11,"name","","Name of the custom section.",17,[[["self"]],["str"]]],[11,"payload","","Payload of the custom section.",17,[[["self"]]]],[11,"name_mut","","Name of the custom section (mutable).",17,[[["self"]],["string"]]],[11,"payload_mut","","Payload of the custom section (mutable).",17,[[["self"]],["vec"]]],[11,"with_types","","New type section with provided types.",18,[[["type"],["vec",["type"]]],["self"]]],[11,"types","","List of type declarations.",18,[[["self"]]]],[11,"types_mut","","List of type declarations (mutable).",18,[[["self"]],["vec"]]],[11,"with_entries","","New import section with provided types.",19,[[["importentry"],["vec",["importentry"]]],["self"]]],[11,"entries","","List of import entries.",19,[[["self"]]]],[11,"entries_mut","","List of import entries (mutable).",19,[[["self"]],["vec"]]],[11,"functions","","Returns number of functions.",19,[[["self"]],["usize"]]],[11,"globals","","Returns number of globals",19,[[["self"]],["usize"]]],[11,"with_entries","","New function signatures section with provided entries.",20,[[["vec",["func"]],["func"]],["self"]]],[11,"entries_mut","","List of all functions in the section, mutable.",20,[[["self"]],["vec"]]],[11,"entries","","List of all functions in the section.",20,[[["self"]]]],[11,"entries","","Table entries.",21,[[["self"]]]],[11,"with_entries","","New table section with provided table entries.",21,[[["tabletype"],["vec",["tabletype"]]],["self"]]],[11,"entries_mut","","Mutable table entries.",21,[[["self"]],["vec"]]],[11,"entries","","List of all memory entries in the section",22,[[["self"]]]],[11,"with_entries","","New memory section with memory types.",22,[[["vec",["memorytype"]],["memorytype"]],["self"]]],[11,"entries_mut","","Mutable list of all memory entries in the section.",22,[[["self"]],["vec"]]],[11,"entries","","List of all global entries in the section.",23,[[["self"]]]],[11,"with_entries","","New global section from list of global entries.",23,[[["vec",["globalentry"]],["globalentry"]],["self"]]],[11,"entries_mut","","List of all global entries in the section (mutable).",23,[[["self"]],["vec"]]],[11,"entries","","List of all export entries in the section.",24,[[["self"]]]],[11,"with_entries","","New export section from list of export entries.",24,[[["vec",["exportentry"]],["exportentry"]],["self"]]],[11,"entries_mut","","List of all export entries in the section (mutable).",24,[[["self"]],["vec"]]],[11,"with_bodies","","New code section with specified function bodies.",25,[[["vec",["funcbody"]],["funcbody"]],["self"]]],[11,"bodies","","All function bodies in the section.",25,[[["self"]]]],[11,"bodies_mut","","All function bodies in the section, mutable.",25,[[["self"]],["vec"]]],[11,"with_entries","","New elements section.",26,[[["vec",["elementsegment"]],["elementsegment"]],["self"]]],[11,"entries","","New elements entries in the section.",26,[[["self"]]]],[11,"entries_mut","","List of all data entries in the section (mutable).",26,[[["self"]],["vec"]]],[11,"with_entries","","New data section.",27,[[["vec",["datasegment"]],["datasegment"]],["self"]]],[11,"entries","","List of all data entries in the section.",27,[[["self"]]]],[11,"entries_mut","","List of all data entries in the section (mutable).",27,[[["self"]],["vec"]]],[11,"new","","New function type given the signature in-params(`params`)…",28,[[["option",["valuetype"]],["valuetype"],["vec",["valuetype"]]],["self"]]],[11,"form","","Function form (currently only valid value is `0x60`)",28,[[["self"]],["u8"]]],[11,"params","","Parameters in the function signature.",28,[[["self"]]]],[11,"params_mut","","Mutable parameters in the function signature.",28,[[["self"]],["vec"]]],[11,"return_type","","Return type in the function signature, if any.",28,[[["self"]],[["option",["valuetype"]],["valuetype"]]]],[11,"return_type_mut","","Mutable type in the function signature, if any.",28,[[["self"]],["option"]]],[11,"new","","New global type",29,[[["valuetype"],["bool"]],["self"]]],[11,"content_type","","Type of the global entry",29,[[["self"]],["valuetype"]]],[11,"is_mutable","","Is global entry is declared as mutable",29,[[["self"]],["bool"]]],[11,"new","","New table definition",30,[[["u32"],["option",["u32"]]],["self"]]],[11,"limits","","Table memory specification",30,[[["self"]],["resizablelimits"]]],[11,"elem_type","","Table element type",30,[[["self"]],["tableelementtype"]]],[11,"new","","New memory limits definition.",31,[[["u32"],["option",["u32"]]],["self"]]],[11,"initial","","Initial size.",31,[[["self"]],["u32"]]],[11,"maximum","","Maximum size.",31,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"new","","New memory definition",32,[[["u32"],["option",["u32"]]],["self"]]],[11,"limits","","Limits of the memory entry.",32,[[["self"]],["resizablelimits"]]],[11,"new","","New import entry.",33,[[["string"],["external"]],["self"]]],[11,"module","","Module reference of the import entry.",33,[[["self"]],["str"]]],[11,"module_mut","","Module reference of the import entry (mutable).",33,[[["self"]],["string"]]],[11,"field","","Field reference of the import entry.",33,[[["self"]],["str"]]],[11,"field_mut","","Field reference of the import entry (mutable)",33,[[["self"]],["string"]]],[11,"external","","Local binidng of the import entry.",33,[[["self"]],["external"]]],[11,"external_mut","","Local binidng of the import entry (mutable)",33,[[["self"]],["external"]]],[11,"new","","New export entry.",34,[[["string"],["internal"]],["self"]]],[11,"field","","Public name.",34,[[["self"]],["str"]]],[11,"field_mut","","Public name (mutable).",34,[[["self"]],["string"]]],[11,"internal","","Internal reference of the export entry.",34,[[["self"]],["internal"]]],[11,"internal_mut","","Internal reference of the export entry (mutable).",34,[[["self"]],["internal"]]],[11,"new","","New global entry.",35,[[["globaltype"],["initexpr"]],["self"]]],[11,"global_type","","Global type.",35,[[["self"]],["globaltype"]]],[11,"init_expr","","Initialization expression (instructions) for global.",35,[[["self"]],["initexpr"]]],[11,"global_type_mut","","Global type (mutable).",35,[[["self"]],["globaltype"]]],[11,"init_expr_mut","","Initialization expression (instructions) for global…",35,[[["self"]],["initexpr"]]],[11,"new","","New list of instructions from vector of instructions.",36,[[["instruction"],["vec",["instruction"]]],["self"]]],[11,"empty","","Empty expression with only `Instruction::End` instruction.",36,[[],["self"]]],[11,"elements","","List of individual instructions.",36,[[["self"]]]],[11,"elements_mut","","Individual instructions, mutable.",36,[[["self"]],["vec"]]],[11,"new","","New initialization expression from instruction list.",37,[[["instruction"],["vec",["instruction"]]],["self"]]],[11,"empty","","Empty expression with only `Instruction::End` instruction.",37,[[],["self"]]],[11,"code","","List of instructions used in the expression.",37,[[["self"]]]],[11,"code_mut","","List of instructions used in the expression.",37,[[["self"]],["vec"]]],[11,"is_block","","Is this instruction starts the new block (which should end…",11,[[["self"]],["bool"]]],[11,"is_terminal","","Is this instruction determines the termination of…",11,[[["self"]],["bool"]]],[11,"new","","New function signature",38,[[["u32"]],["self"]]],[11,"type_ref","","Function signature type reference.",38,[[["self"]],["u32"]]],[11,"type_ref_mut","","Function signature type reference (mutable).",38,[[["self"]],["u32"]]],[11,"new","","New local with `count` and `value_type`.",39,[[["u32"],["valuetype"]],["self"]]],[11,"count","","Number of locals with the shared type.",39,[[["self"]],["u32"]]],[11,"value_type","","Type of the locals.",39,[[["self"]],["valuetype"]]],[11,"new","","New function body with given `locals` and `instructions`.",40,[[["vec",["local"]],["local"],["instructions"]],["self"]]],[11,"empty","","List of individual instructions.",40,[[],["self"]]],[11,"locals","","Locals declared in function body.",40,[[["self"]]]],[11,"code","","Instruction list of the function body. Minimal instruction…",40,[[["self"]],["instructions"]]],[11,"locals_mut","","Locals declared in function body (mutable).",40,[[["self"]],["vec"]]],[11,"code_mut","","Instruction list of the function body (mutable).",40,[[["self"]],["instructions"]]],[11,"new","","New element segment.",41,[[["option",["initexpr"]],["u32"],["vec",["u32"]],["initexpr"]],["self"]]],[11,"members","","Sequence of function indices.",41,[[["self"]]]],[11,"members_mut","","Sequence of function indices (mutable)",41,[[["self"]],["vec"]]],[11,"index","","Table index (currently valid only value of `0`)",41,[[["self"]],["u32"]]],[11,"offset","","An i32 initializer expression that computes the offset at…",41,[[["self"]],["option"]]],[11,"offset_mut","","An i32 initializer expression that computes the offset at…",41,[[["self"]],["option"]]],[11,"new","","New data segments.",42,[[["option",["initexpr"]],["u32"],["initexpr"],["vec",["u8"]],["u8"]],["self"]]],[11,"index","","Linear memory index (currently the only valid value is `0`).",42,[[["self"]],["u32"]]],[11,"offset","","An i32 initializer expression that computes the offset at…",42,[[["self"]],["option"]]],[11,"offset_mut","","An i32 initializer expression that computes the offset at…",42,[[["self"]],["option"]]],[11,"value","","Initial value of the data segment.",42,[[["self"]]]],[11,"value_mut","","Initial value of the data segment (mutable).",42,[[["self"]],["vec"]]],[11,"with_capacity","","Create an empty `IndexMap`, preallocating enough space to…",43,[[["usize"]],["indexmap"]]],[11,"clear","","Clear the map.",43,[[["self"]]]],[11,"get","","Return the name for the specified index, if it exists.",43,[[["u32"],["self"]],[["option"],["t"]]]],[11,"contains_key","","Does the map contain an entry for the specified index?",43,[[["u32"],["self"]],["bool"]]],[11,"insert","","Insert a name into our map, returning the existing value…",43,[[["self"],["u32"],["t"]],["option"]]],[11,"remove","","Remove an item if present and return it.",43,[[["self"],["u32"]],["option"]]],[11,"len","","The number of items in this map.",43,[[["self"]],["usize"]]],[11,"is_empty","","Is this map empty?",43,[[["self"]],["bool"]]],[11,"iter","","Create a non-consuming iterator over this `IndexMap`'s…",43,[[["self"]],["iter"]]],[11,"deserialize_with","","Custom deserialization routine.",43,[[["f"],["usize"],["r"]],[["indexmap"],["error"],["result",["indexmap","error"]]]]],[11,"deserialize","","Deserialize a map containing simple values that support…",43,[[["usize"],["r"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a new name section.",44,[[["option",["localnamesubsection"]],["modulenamesubsection"],["option",["functionnamesubsection"]],["localnamesubsection"],["functionnamesubsection"],["option",["modulenamesubsection"]]],["self"]]],[11,"module","","Module name subsection of this section.",44,[[["self"]],[["modulenamesubsection"],["option",["modulenamesubsection"]]]]],[11,"module_mut","","Module name subsection of this section (mutable).",44,[[["self"]],["option"]]],[11,"functions","","Functions name subsection of this section.",44,[[["self"]],[["option",["functionnamesubsection"]],["functionnamesubsection"]]]],[11,"functions_mut","","Functions name subsection of this section (mutable).",44,[[["self"]],["option"]]],[11,"locals","","Local name subsection of this section.",44,[[["self"]],[["localnamesubsection"],["option",["localnamesubsection"]]]]],[11,"locals_mut","","Local name subsection of this section (mutable).",44,[[["self"]],["option"]]],[11,"deserialize","","Deserialize a name section.",44,[[["module"],["r"]],[["result",["error"]],["error"]]]],[11,"new","","Create a new module name section with the specified name.",45,[[["string"],["into",["string"]]],["modulenamesubsection"]]],[11,"name","","The name of this module.",45,[[["self"]],["str"]]],[11,"name_mut","","The name of this module (mutable).",45,[[["self"]],["string"]]],[11,"names","","A map from function indices to names.",46,[[["self"]],["namemap"]]],[11,"names_mut","","A map from function indices to names (mutable).",46,[[["self"]],["namemap"]]],[11,"deserialize","","Deserialize names, making sure that all names correspond…",46,[[["module"],["r"]],[["error"],["functionnamesubsection"],["result",["functionnamesubsection","error"]]]]],[11,"local_names","","A map from function indices to a map from variables…",47,[[["self"]],["indexmap"]]],[11,"local_names_mut","","A map from function indices to a map from variables…",47,[[["self"]],["indexmap"]]],[11,"deserialize","","Deserialize names, making sure that all names correspond…",47,[[["module"],["r"]],[["localnamesubsection"],["error"],["result",["localnamesubsection","error"]]]]],[11,"name","","Name of this section.",48,[[["self"]],["str"]]],[11,"name_mut","","Name of this section (mutable).",48,[[["self"]],["string"]]],[11,"section_id","","ID of the section containing the relocations described in…",48,[[["self"]],["u32"]]],[11,"section_id_mut","","ID of the section containing the relocations described in…",48,[[["self"]],["u32"]]],[11,"relocation_section_name","","Name of the section containing the relocations described…",48,[[["self"]],[["str"],["option",["str"]]]]],[11,"relocation_section_name_mut","","Name of the section containing the relocations described…",48,[[["self"]],["option"]]],[11,"entries","","List of relocation entries.",48,[[["self"]]]],[11,"entries_mut","","List of relocation entries (mutable).",48,[[["self"]],["vec"]]],[11,"deserialize","","Deserialize a reloc section.",48,[[["string"],["r"]],[["result",["error"]],["error"]]]],[0,"opcodes","","",null,null],[17,"UNREACHABLE","parity_wasm::elements::opcodes","",null,null],[17,"NOP","","",null,null],[17,"BLOCK","","",null,null],[17,"LOOP","","",null,null],[17,"IF","","",null,null],[17,"ELSE","","",null,null],[17,"END","","",null,null],[17,"BR","","",null,null],[17,"BRIF","","",null,null],[17,"BRTABLE","","",null,null],[17,"RETURN","","",null,null],[17,"CALL","","",null,null],[17,"CALLINDIRECT","","",null,null],[17,"DROP","","",null,null],[17,"SELECT","","",null,null],[17,"GETLOCAL","","",null,null],[17,"SETLOCAL","","",null,null],[17,"TEELOCAL","","",null,null],[17,"GETGLOBAL","","",null,null],[17,"SETGLOBAL","","",null,null],[17,"I32LOAD","","",null,null],[17,"I64LOAD","","",null,null],[17,"F32LOAD","","",null,null],[17,"F64LOAD","","",null,null],[17,"I32LOAD8S","","",null,null],[17,"I32LOAD8U","","",null,null],[17,"I32LOAD16S","","",null,null],[17,"I32LOAD16U","","",null,null],[17,"I64LOAD8S","","",null,null],[17,"I64LOAD8U","","",null,null],[17,"I64LOAD16S","","",null,null],[17,"I64LOAD16U","","",null,null],[17,"I64LOAD32S","","",null,null],[17,"I64LOAD32U","","",null,null],[17,"I32STORE","","",null,null],[17,"I64STORE","","",null,null],[17,"F32STORE","","",null,null],[17,"F64STORE","","",null,null],[17,"I32STORE8","","",null,null],[17,"I32STORE16","","",null,null],[17,"I64STORE8","","",null,null],[17,"I64STORE16","","",null,null],[17,"I64STORE32","","",null,null],[17,"CURRENTMEMORY","","",null,null],[17,"GROWMEMORY","","",null,null],[17,"I32CONST","","",null,null],[17,"I64CONST","","",null,null],[17,"F32CONST","","",null,null],[17,"F64CONST","","",null,null],[17,"I32EQZ","","",null,null],[17,"I32EQ","","",null,null],[17,"I32NE","","",null,null],[17,"I32LTS","","",null,null],[17,"I32LTU","","",null,null],[17,"I32GTS","","",null,null],[17,"I32GTU","","",null,null],[17,"I32LES","","",null,null],[17,"I32LEU","","",null,null],[17,"I32GES","","",null,null],[17,"I32GEU","","",null,null],[17,"I64EQZ","","",null,null],[17,"I64EQ","","",null,null],[17,"I64NE","","",null,null],[17,"I64LTS","","",null,null],[17,"I64LTU","","",null,null],[17,"I64GTS","","",null,null],[17,"I64GTU","","",null,null],[17,"I64LES","","",null,null],[17,"I64LEU","","",null,null],[17,"I64GES","","",null,null],[17,"I64GEU","","",null,null],[17,"F32EQ","","",null,null],[17,"F32NE","","",null,null],[17,"F32LT","","",null,null],[17,"F32GT","","",null,null],[17,"F32LE","","",null,null],[17,"F32GE","","",null,null],[17,"F64EQ","","",null,null],[17,"F64NE","","",null,null],[17,"F64LT","","",null,null],[17,"F64GT","","",null,null],[17,"F64LE","","",null,null],[17,"F64GE","","",null,null],[17,"I32CLZ","","",null,null],[17,"I32CTZ","","",null,null],[17,"I32POPCNT","","",null,null],[17,"I32ADD","","",null,null],[17,"I32SUB","","",null,null],[17,"I32MUL","","",null,null],[17,"I32DIVS","","",null,null],[17,"I32DIVU","","",null,null],[17,"I32REMS","","",null,null],[17,"I32REMU","","",null,null],[17,"I32AND","","",null,null],[17,"I32OR","","",null,null],[17,"I32XOR","","",null,null],[17,"I32SHL","","",null,null],[17,"I32SHRS","","",null,null],[17,"I32SHRU","","",null,null],[17,"I32ROTL","","",null,null],[17,"I32ROTR","","",null,null],[17,"I64CLZ","","",null,null],[17,"I64CTZ","","",null,null],[17,"I64POPCNT","","",null,null],[17,"I64ADD","","",null,null],[17,"I64SUB","","",null,null],[17,"I64MUL","","",null,null],[17,"I64DIVS","","",null,null],[17,"I64DIVU","","",null,null],[17,"I64REMS","","",null,null],[17,"I64REMU","","",null,null],[17,"I64AND","","",null,null],[17,"I64OR","","",null,null],[17,"I64XOR","","",null,null],[17,"I64SHL","","",null,null],[17,"I64SHRS","","",null,null],[17,"I64SHRU","","",null,null],[17,"I64ROTL","","",null,null],[17,"I64ROTR","","",null,null],[17,"F32ABS","","",null,null],[17,"F32NEG","","",null,null],[17,"F32CEIL","","",null,null],[17,"F32FLOOR","","",null,null],[17,"F32TRUNC","","",null,null],[17,"F32NEAREST","","",null,null],[17,"F32SQRT","","",null,null],[17,"F32ADD","","",null,null],[17,"F32SUB","","",null,null],[17,"F32MUL","","",null,null],[17,"F32DIV","","",null,null],[17,"F32MIN","","",null,null],[17,"F32MAX","","",null,null],[17,"F32COPYSIGN","","",null,null],[17,"F64ABS","","",null,null],[17,"F64NEG","","",null,null],[17,"F64CEIL","","",null,null],[17,"F64FLOOR","","",null,null],[17,"F64TRUNC","","",null,null],[17,"F64NEAREST","","",null,null],[17,"F64SQRT","","",null,null],[17,"F64ADD","","",null,null],[17,"F64SUB","","",null,null],[17,"F64MUL","","",null,null],[17,"F64DIV","","",null,null],[17,"F64MIN","","",null,null],[17,"F64MAX","","",null,null],[17,"F64COPYSIGN","","",null,null],[17,"I32WRAPI64","","",null,null],[17,"I32TRUNCSF32","","",null,null],[17,"I32TRUNCUF32","","",null,null],[17,"I32TRUNCSF64","","",null,null],[17,"I32TRUNCUF64","","",null,null],[17,"I64EXTENDSI32","","",null,null],[17,"I64EXTENDUI32","","",null,null],[17,"I64TRUNCSF32","","",null,null],[17,"I64TRUNCUF32","","",null,null],[17,"I64TRUNCSF64","","",null,null],[17,"I64TRUNCUF64","","",null,null],[17,"F32CONVERTSI32","","",null,null],[17,"F32CONVERTUI32","","",null,null],[17,"F32CONVERTSI64","","",null,null],[17,"F32CONVERTUI64","","",null,null],[17,"F32DEMOTEF64","","",null,null],[17,"F64CONVERTSI32","","",null,null],[17,"F64CONVERTUI32","","",null,null],[17,"F64CONVERTSI64","","",null,null],[17,"F64CONVERTUI64","","",null,null],[17,"F64PROMOTEF32","","",null,null],[17,"I32REINTERPRETF32","","",null,null],[17,"I64REINTERPRETF64","","",null,null],[17,"F32REINTERPRETI32","","",null,null],[17,"F64REINTERPRETI64","","",null,null],[6,"NameMap","parity_wasm::elements","A map from indices to names.",null,null],[8,"Deserialize","","Deserialization from serial i/o.",null,null],[16,"Error","","Serialization error produced by deserialization routine.",49,null],[10,"deserialize","","Deserialize type from serial i/o",49,[[["r"]],["result"]]],[8,"Serialize","","Serialization to serial i/o. Takes self by value to…",null,null],[16,"Error","","Serialization error produced by serialization routine.",50,null],[10,"serialize","","Serialize type to serial i/o",50,[[["w"]],["result"]]],[0,"builder","parity_wasm","Various builders to generate/alter wasm components",null,null],[3,"SignatureBuilder","parity_wasm::builder","Signature builder",null,null],[3,"SignaturesBuilder","","Multiple signatures builder",null,null],[3,"FunctionBuilder","","Function definition builder",null,null],[3,"TypeRefBuilder","","Type (signature) reference builder (for…",null,null],[3,"FuncBodyBuilder","","Function body (code) builder",null,null],[3,"FunctionDefinition","","Function definition (extended structure to specify…",null,null],[12,"is_main","","Is this function is start function",51,null],[12,"signature","","Signature description",51,null],[12,"code","","Body (code) of the function",51,null],[3,"DataSegmentBuilder","","Data segment builder",null,null],[3,"ExportBuilder","","Export entry builder",null,null],[3,"ExportInternalBuilder","","Internal mapping builder for export entry",null,null],[3,"GlobalBuilder","","Global builder",null,null],[3,"ImportBuilder","","Import builder",null,null],[3,"Identity","","Identity chain element",null,null],[3,"MemoryBuilder","","Memory and static regions builder",null,null],[3,"ModuleBuilder","","Module builder",null,null],[3,"TableBuilder","","Table builder",null,null],[3,"TableDefinition","","Table definition",null,null],[12,"min","","Minimum length",52,null],[12,"max","","Maximum length, if any",52,null],[12,"elements","","Element segments, if any",52,null],[3,"TableEntryDefinition","","Table elements entry definition",null,null],[12,"offset","","Offset initialization expression",53,null],[12,"values","","Values of initialization",53,null],[5,"signatures","","New builder of signature list",null,[[],["signaturesbuilder"]]],[5,"signature","","New signature builder",null,[[],["signaturebuilder"]]],[5,"function","","New builder of function (signature & body)",null,[[],["functionbuilder"]]],[5,"export","","New builder for export entry",null,[[],["exportbuilder"]]],[5,"global","","New builder for export entry",null,[[],["globalbuilder"]]],[5,"import","","New builder for import entry",null,[[],["importbuilder"]]],[5,"module","","Start new module builder # Examples",null,[[],["modulebuilder"]]],[5,"from_module","","Start builder to extend existing module",null,[[["module"]],["modulebuilder"]]],[11,"new","","New empty module builder",54,[[],["self"]]],[11,"with_callback","","New module builder with bound callback",54,[[["f"]],["self"]]],[11,"with_module","","Builder from raw module",54,[[["module"]],["self"]]],[11,"with_sections","","Fill module with sections from iterator",54,[[["i"]],["self"]]],[11,"with_section","","Add additional section",54,[[["section"]],["self"]]],[11,"with_signatures","","Binds to the type section, creates additional types when…",54,[[["vec",["signature"]],["signature"]],["self"]]],[11,"push_function","","Push stand-alone function definition, creating sections,…",54,[[["functiondefinition"],["self"]],["codelocation"]]],[11,"push_memory","","Push linear memory region",54,[[["self"],["memorydefinition"]],["u32"]]],[11,"push_table","","Push table",54,[[["self"],["tabledefinition"]],["u32"]]],[11,"push_signature","","Push one function signature, returning it's calling index.…",54,[[["self"],["signature"]],["u32"]]],[11,"push_signatures","","Push signatures in the module, returning corresponding…",54,[[["self"],["vec",["signature"]],["signature"]],[["vec",["u32"]],["u32"]]]],[11,"push_import","","Push import entry to module. Note that this does not…",54,[[["self"],["importentry"]],["u32"]]],[11,"push_export","","Push export entry to module.",54,[[["self"],["exportentry"]],["u32"]]],[11,"function","","Add new function using dedicated builder",54,[[],["functionbuilder"]]],[11,"memory","","Add new linear memory using dedicated builder",54,[[],["memorybuilder"]]],[11,"table","","Add new table using dedicated builder",54,[[],["tablebuilder"]]],[11,"functions","","Define functions section",54,[[],["signaturesbuilder"]]],[11,"with_export","","With inserted export entry",54,[[["exportentry"]],["self"]]],[11,"with_import","","With inserted import entry",54,[[["importentry"]],["self"]]],[11,"import","","Import entry builder # Examples ``` use…",54,[[],["importbuilder"]]],[11,"with_global","","With global variable",54,[[["globalentry"]],["self"]]],[11,"with_table","","With table",54,[[["tabletype"]],["self"]]],[11,"export","","Export entry builder # Examples ``` use…",54,[[],["exportbuilder"]]],[11,"global","","Glboal entry builder # Examples ``` use…",54,[[],["globalbuilder"]]],[11,"with_data_segment","","Add data segment to the builder",54,[[["datasegment"]],["self"]]],[11,"data","","Data entry builder",54,[[],["datasegmentbuilder"]]],[11,"build","","Build module (final step)",54,[[]]],[11,"new","","New signature builder",55,[[],["self"]]],[11,"with_callback","","New builder with callback function specified",55,[[["f"]],["self"]]],[11,"with_param","","Add argument to signature builder",55,[[["valuetype"]],["self"]]],[11,"with_params","","Add multiple arguments to signature builder",55,[[["vec",["valuetype"]],["valuetype"]],["self"]]],[11,"with_return_type","","Override signature return type",55,[[["option",["valuetype"]],["valuetype"]],["self"]]],[11,"param","","Start build new argument",55,[[],["valuetypebuilder"]]],[11,"params","","Start build multiple arguments",55,[[],["valuetypesbuilder"]]],[11,"return_type","","Start building return type",55,[[],["optionalvaluetypebuilder"]]],[11,"build","","Finish current builder",55,[[]]],[11,"build_sig","","Finish current builder returning intermediate `Signature`…",55,[[],["signature"]]],[11,"with_callback","","New builder chained with specified callback",56,[[["f"]],["self"]]],[11,"val","","Set/override of type reference",56,[[["u32"]],["self"]]],[11,"build","","Finish current builder",56,[[]]],[11,"new","","New empty functions section builder",57,[[],["self"]]],[11,"with_callback","","New builder chained with specified callback",57,[[["f"]],["self"]]],[11,"with_signature","","Push new signature into the builder output",57,[[["signature"]],["self"]]],[11,"type_ref","","Start building new signature with `TypeRefBuilder`",57,[[],["typerefbuilder"]]],[11,"signature","","Start building new signature with dedicated builder",57,[[],["signaturebuilder"]]],[11,"build","","Finalize builder spawning element",57,[[]]],[11,"bind","","Bind signature list",57,[[]]],[11,"with_callback","","New body (code) builder given the chain callback",58,[[["f"]],["self"]]],[11,"with_func","","Set/override entirely with FuncBody struct",58,[[["funcbody"]],["self"]]],[11,"with_locals","","Extend function local list with new entries",58,[[["vec",["local"]],["local"]],["self"]]],[11,"with_instructions","","Set code of the function",58,[[["instructions"]],["self"]]],[11,"build","","Finish current builder spawning resulting struct",58,[[]]],[11,"new","","New function builder",59,[[],["self"]]],[11,"with_callback","","New function builder with chained callback",59,[[["f"]],["self"]]],[11,"main","","Set that this function is main entry point",59,[[],["self"]]],[11,"signature","","Start signature builder of the function",59,[[],["signaturebuilder"]]],[11,"with_signature","","Override current signature entirely with new one from…",59,[[["signature"]],["self"]]],[11,"body","","Start code (body) builder",59,[[],["funcbodybuilder"]]],[11,"with_body","","Set body (code) for this function",59,[[["funcbody"]],["self"]]],[11,"build","","Finalize current builder spawning resulting struct in the…",59,[[]]],[11,"new","","New import builder",60,[[],["self"]]],[11,"with_callback","","New import builder with callback (in chained context)",60,[[["f"]],["self"]]],[11,"module","","Set/override module name",60,[[["str"]],["self"]]],[11,"field","","Set/override field name",60,[[["str"]],["self"]]],[11,"path","","Set/override both module name and field name",60,[[["str"]],["self"]]],[11,"with_external","","Set/override external mapping for this import",60,[[["external"]],["self"]]],[11,"external","","Start new external mapping builder",60,[[],["importexternalbuilder"]]],[11,"build","","Finalize current builder spawning the resulting struct",60,[[]]],[11,"new","","New memory builder",61,[[],["self"]]],[11,"with_callback","","New memory builder with callback (in chained context)",61,[[["f"]],["self"]]],[11,"with_min","","Set/override minimum size",61,[[["u32"]],["self"]]],[11,"with_max","","Set/override maximum size",61,[[["option",["u32"]],["u32"]],["self"]]],[11,"with_data","","Push new static region with initialized offset expression…",61,[[["vec",["u8"]],["u32"],["u8"]],["self"]]],[11,"build","","Finalize current builder, spawning resulting struct",61,[[]]],[11,"new","","New table builder",62,[[],["self"]]],[11,"with_callback","","New table builder with callback in chained context",62,[[["f"]],["self"]]],[11,"with_min","","Set/override minimum length",62,[[["u32"]],["self"]]],[11,"with_max","","Set/override maximum length",62,[[["option",["u32"]],["u32"]],["self"]]],[11,"with_element","","Generate initialization expression and element values on…",62,[[["u32"],["vec",["u32"]]],["self"]]],[11,"build","","Finalize current builder spawning resulting struct",62,[[]]],[11,"new","","New export builder",63,[[],["self"]]],[11,"with_callback","","New export entry builder in the specified chained context",63,[[["f"]],["self"]]],[11,"field","","Set the field name of the export entry",63,[[["str"]],["self"]]],[11,"with_internal","","Specify the internal module mapping for this entry",63,[[["internal"]],["self"]]],[11,"internal","","Start the internal builder for this export entry",63,[[],["exportinternalbuilder"]]],[11,"build","","Finalize export entry builder spawning the resulting struct",63,[[]]],[11,"with_callback","","New export entry internal mapping for the chained context",64,[[["f"]],["self"]]],[11,"func","","Map to function by index",64,[[["u32"]]]],[11,"memory","","Map to memory",64,[[["u32"]]]],[11,"table","","Map to table",64,[[["u32"]]]],[11,"global","","Map to global",64,[[["u32"]]]],[11,"new","","New global builder",65,[[],["self"]]],[11,"with_callback","","New global builder with callback (in chained context)",65,[[["f"]],["self"]]],[11,"with_type","","Set/override resulting global type",65,[[["valuetype"]],["self"]]],[11,"mutable","","Set mutabilty to true",65,[[],["self"]]],[11,"init_expr","","Set initialization expression instruction for this global…",65,[[["instruction"]],["self"]]],[11,"value_type","","Start value type builder",65,[[],["valuetypebuilder"]]],[11,"build","","Finalize current builder spawning resulting struct",65,[[]]],[11,"new","","New data segment builder",66,[[],["self"]]],[11,"with_callback","","New data segment builder inside the chain context",66,[[["f"]],["self"]]],[11,"offset","","Set offset initialization instruction. `End` instruction…",66,[[["instruction"]],["self"]]],[11,"value","","Set the bytes value of the segment",66,[[["vec",["u8"]],["u8"]],["self"]]],[11,"build","","Finish current builder, spawning resulting struct",66,[[]]],[11,"from","parity_wasm::elements","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"into_iter","","",43,[[],["i"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","parity_wasm::builder","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"deserialize","parity_wasm::elements","",67,[[["r"]],["result"]]],[11,"deserialize","","",76,[[["r"]],["result"]]],[11,"deserialize","","",68,[[["r"]],["result"]]],[11,"deserialize","","",71,[[["r"]],["result"]]],[11,"deserialize","","",69,[[["r"]],["result"]]],[11,"deserialize","","",73,[[["r"]],["result"]]],[11,"deserialize","","",74,[[["r"]],["result"]]],[11,"deserialize","","",72,[[["r"]],["result"]]],[11,"deserialize","","",75,[[["r"]],["result"]]],[11,"deserialize","","",70,[[["r"]],["result"]]],[11,"deserialize","","",14,[[["r"]],["result"]]],[11,"deserialize","","",16,[[["r"]],["result"]]],[11,"deserialize","","",4,[[["r"]],["result"]]],[11,"deserialize","","",17,[[["r"]],["result"]]],[11,"deserialize","","",18,[[["r"]],["result"]]],[11,"deserialize","","",19,[[["r"]],["result"]]],[11,"deserialize","","",20,[[["r"]],["result"]]],[11,"deserialize","","",21,[[["r"]],["result"]]],[11,"deserialize","","",22,[[["r"]],["result"]]],[11,"deserialize","","",23,[[["r"]],["result"]]],[11,"deserialize","","",24,[[["r"]],["result"]]],[11,"deserialize","","",25,[[["r"]],["result"]]],[11,"deserialize","","",26,[[["r"]],["result"]]],[11,"deserialize","","",27,[[["r"]],["result"]]],[11,"deserialize","","",7,[[["r"]],["result"]]],[11,"deserialize","","",8,[[["r"]],["result"]]],[11,"deserialize","","",9,[[["r"]],["result"]]],[11,"deserialize","","",28,[[["r"]],["result"]]],[11,"deserialize","","",10,[[["r"]],["result"]]],[11,"deserialize","","",29,[[["r"]],["result"]]],[11,"deserialize","","",30,[[["r"]],["result"]]],[11,"deserialize","","",31,[[["r"]],["result"]]],[11,"deserialize","","",32,[[["r"]],["result"]]],[11,"deserialize","","",5,[[["r"]],["result"]]],[11,"deserialize","","",33,[[["r"]],["result"]]],[11,"deserialize","","",6,[[["r"]],["result"]]],[11,"deserialize","","",34,[[["r"]],["result"]]],[11,"deserialize","","",35,[[["r"]],["result"]]],[11,"deserialize","","",36,[[["r"]],["result"]]],[11,"deserialize","","",37,[[["r"]],["result"]]],[11,"deserialize","","",11,[[["r"]],["result"]]],[11,"deserialize","","",38,[[["r"]],["result"]]],[11,"deserialize","","",39,[[["r"]],["result"]]],[11,"deserialize","","",40,[[["r"]],["result"]]],[11,"deserialize","","",41,[[["r"]],["result"]]],[11,"deserialize","","",42,[[["r"]],["result"]]],[11,"deserialize","","",45,[[["r"]],[["modulenamesubsection"],["error"],["result",["modulenamesubsection","error"]]]]],[11,"deserialize","","",12,[[["r"]],["result"]]],[11,"deserialize","","",2,[[["r"]],["result"]]],[11,"serialize","","",67,[[["w"]],["result"]]],[11,"serialize","","",76,[[["w"]],["result"]]],[11,"serialize","","",68,[[["w"]],["result"]]],[11,"serialize","","",71,[[["w"]],["result"]]],[11,"serialize","","",69,[[["w"]],["result"]]],[11,"serialize","","",73,[[["w"]],["result"]]],[11,"serialize","","",74,[[["w"]],["result"]]],[11,"serialize","","",72,[[["w"]],["result"]]],[11,"serialize","","",75,[[["w"]],["result"]]],[11,"serialize","","",70,[[["w"]],["result"]]],[11,"serialize","","",0,[[["w"]],["result"]]],[11,"serialize","","",16,[[["w"]],["result"]]],[11,"serialize","","",4,[[["w"]],["result"]]],[11,"serialize","","",17,[[["w"]],["result"]]],[11,"serialize","","",18,[[["w"]],["result"]]],[11,"serialize","","",19,[[["w"]],["result"]]],[11,"serialize","","",20,[[["w"]],["result"]]],[11,"serialize","","",21,[[["w"]],["result"]]],[11,"serialize","","",22,[[["w"]],["result"]]],[11,"serialize","","",23,[[["w"]],["result"]]],[11,"serialize","","",24,[[["w"]],["result"]]],[11,"serialize","","",25,[[["w"]],["result"]]],[11,"serialize","","",26,[[["w"]],["result"]]],[11,"serialize","","",27,[[["w"]],["result"]]],[11,"serialize","","",7,[[["w"]],["result"]]],[11,"serialize","","",8,[[["w"]],["result"]]],[11,"serialize","","",9,[[["w"]],["result"]]],[11,"serialize","","",28,[[["w"]],["result"]]],[11,"serialize","","",10,[[["w"]],["result"]]],[11,"serialize","","",29,[[["w"]],["result"]]],[11,"serialize","","",30,[[["w"]],["result"]]],[11,"serialize","","",31,[[["w"]],["result"]]],[11,"serialize","","",32,[[["w"]],["result"]]],[11,"serialize","","",5,[[["w"]],["result"]]],[11,"serialize","","",33,[[["w"]],["result"]]],[11,"serialize","","",6,[[["w"]],["result"]]],[11,"serialize","","",34,[[["w"]],["result"]]],[11,"serialize","","",35,[[["w"]],["result"]]],[11,"serialize","","",11,[[["w"]],["result"]]],[11,"serialize","","",36,[[["w"]],["result"]]],[11,"serialize","","",37,[[["w"]],["result"]]],[11,"serialize","","",38,[[["w"]],["result"]]],[11,"serialize","","",39,[[["w"]],["result"]]],[11,"serialize","","",40,[[["w"]],["result"]]],[11,"serialize","","",41,[[["w"]],["result"]]],[11,"serialize","","",42,[[["w"]],["result"]]],[11,"serialize","","",43,[[["w"]],["result"]]],[11,"serialize","","",44,[[["w"]],[["result",["error"]],["error"]]]],[11,"serialize","","",45,[[["w"]],[["result",["error"]],["error"]]]],[11,"serialize","","",46,[[["w"]],[["result",["error"]],["error"]]]],[11,"serialize","","",47,[[["w"]],[["result",["error"]],["error"]]]],[11,"serialize","","",48,[[["w"]],[["result",["error"]],["error"]]]],[11,"serialize","","",12,[[["w"]],[["result",["error"]],["error"]]]],[11,"from","","",67,[[["u32"]],["varuint32"]]],[11,"from","","",67,[[["usize"]],["varuint32"]]],[11,"from","","",76,[[["u64"]],["varuint64"]]],[11,"from","","",68,[[["u8"]],["self"]]],[11,"from","","",71,[[["i8"]],["varint7"]]],[11,"from","","",69,[[["u8"]],["self"]]],[11,"from","","",73,[[["i32"]],["varint32"]]],[11,"from","","",74,[[["i64"]],["varint64"]]],[11,"from","","",72,[[["u32"]],["self"]]],[11,"from","","",75,[[["u64"]],["self"]]],[11,"from","","",70,[[["bool"]],["self"]]],[11,"from","","",13,[[],["self"]]],[11,"into_iter","","",43,[[],["intoiter"]]],[11,"clone","","",67,[[["self"]],["varuint32"]]],[11,"clone","","",76,[[["self"]],["varuint64"]]],[11,"clone","","",68,[[["self"]],["varuint7"]]],[11,"clone","","",71,[[["self"]],["varint7"]]],[11,"clone","","",69,[[["self"]],["uint8"]]],[11,"clone","","",73,[[["self"]],["varint32"]]],[11,"clone","","",74,[[["self"]],["varint64"]]],[11,"clone","","",72,[[["self"]],["uint32"]]],[11,"clone","","",75,[[["self"]],["uint64"]]],[11,"clone","","",70,[[["self"]],["varuint1"]]],[11,"clone","","",14,[[["self"]],["countedlist"]]],[11,"clone","","",0,[[["self"]],["countedlistwriter"]]],[11,"clone","","",16,[[["self"]],["module"]]],[11,"clone","","",3,[[["self"]],["importcounttype"]]],[11,"clone","","",4,[[["self"]],["section"]]],[11,"clone","","",17,[[["self"]],["customsection"]]],[11,"clone","","",18,[[["self"]],["typesection"]]],[11,"clone","","",19,[[["self"]],["importsection"]]],[11,"clone","","",20,[[["self"]],["functionsection"]]],[11,"clone","","",21,[[["self"]],["tablesection"]]],[11,"clone","","",22,[[["self"]],["memorysection"]]],[11,"clone","","",23,[[["self"]],["globalsection"]]],[11,"clone","","",24,[[["self"]],["exportsection"]]],[11,"clone","","",25,[[["self"]],["codesection"]]],[11,"clone","","",26,[[["self"]],["elementsection"]]],[11,"clone","","",27,[[["self"]],["datasection"]]],[11,"clone","","",7,[[["self"]],["type"]]],[11,"clone","","",8,[[["self"]],["valuetype"]]],[11,"clone","","",9,[[["self"]],["blocktype"]]],[11,"clone","","",28,[[["self"]],["functiontype"]]],[11,"clone","","",10,[[["self"]],["tableelementtype"]]],[11,"clone","","",29,[[["self"]],["globaltype"]]],[11,"clone","","",30,[[["self"]],["tabletype"]]],[11,"clone","","",31,[[["self"]],["resizablelimits"]]],[11,"clone","","",32,[[["self"]],["memorytype"]]],[11,"clone","","",5,[[["self"]],["external"]]],[11,"clone","","",33,[[["self"]],["importentry"]]],[11,"clone","","",6,[[["self"]],["internal"]]],[11,"clone","","",34,[[["self"]],["exportentry"]]],[11,"clone","","",35,[[["self"]],["globalentry"]]],[11,"clone","","",36,[[["self"]],["instructions"]]],[11,"clone","","",37,[[["self"]],["initexpr"]]],[11,"clone","","",11,[[["self"]],["instruction"]]],[11,"clone","","",1,[[["self"]],["brtabledata"]]],[11,"clone","","",38,[[["self"]],["func"]]],[11,"clone","","",39,[[["self"]],["local"]]],[11,"clone","","",40,[[["self"]],["funcbody"]]],[11,"clone","","",41,[[["self"]],["elementsegment"]]],[11,"clone","","",42,[[["self"]],["datasegment"]]],[11,"clone","","",43,[[["self"]],["indexmap"]]],[11,"clone","","",44,[[["self"]],["namesection"]]],[11,"clone","","",45,[[["self"]],["modulenamesubsection"]]],[11,"clone","","",46,[[["self"]],["functionnamesubsection"]]],[11,"clone","","",47,[[["self"]],["localnamesubsection"]]],[11,"clone","","",48,[[["self"]],["relocsection"]]],[11,"clone","","",12,[[["self"]],["relocationentry"]]],[11,"clone","","",13,[[["self"]],["error"]]],[11,"default","","",16,[[],["self"]]],[11,"default","","",17,[[],["customsection"]]],[11,"default","","",18,[[],["typesection"]]],[11,"default","","",19,[[],["importsection"]]],[11,"default","","",20,[[],["functionsection"]]],[11,"default","","",21,[[],["tablesection"]]],[11,"default","","",22,[[],["memorysection"]]],[11,"default","","",23,[[],["globalsection"]]],[11,"default","","",24,[[],["exportsection"]]],[11,"default","","",25,[[],["codesection"]]],[11,"default","","",26,[[],["elementsection"]]],[11,"default","","",27,[[],["datasection"]]],[11,"default","","",28,[[],["self"]]],[11,"default","","",43,[[],["indexmap"]]],[11,"default","","",46,[[],["functionnamesubsection"]]],[11,"default","","",47,[[],["localnamesubsection"]]],[11,"default","parity_wasm::builder","",51,[[],["self"]]],[11,"default","","",52,[[],["self"]]],[11,"eq","parity_wasm::elements","",67,[[["varuint32"],["self"]],["bool"]]],[11,"ne","","",67,[[["varuint32"],["self"]],["bool"]]],[11,"eq","","",76,[[["self"],["varuint64"]],["bool"]]],[11,"ne","","",76,[[["self"],["varuint64"]],["bool"]]],[11,"eq","","",68,[[["self"],["varuint7"]],["bool"]]],[11,"ne","","",68,[[["self"],["varuint7"]],["bool"]]],[11,"eq","","",71,[[["varint7"],["self"]],["bool"]]],[11,"ne","","",71,[[["varint7"],["self"]],["bool"]]],[11,"eq","","",69,[[["self"],["uint8"]],["bool"]]],[11,"ne","","",69,[[["self"],["uint8"]],["bool"]]],[11,"eq","","",73,[[["self"],["varint32"]],["bool"]]],[11,"ne","","",73,[[["self"],["varint32"]],["bool"]]],[11,"eq","","",74,[[["varint64"],["self"]],["bool"]]],[11,"ne","","",74,[[["varint64"],["self"]],["bool"]]],[11,"eq","","",72,[[["self"],["uint32"]],["bool"]]],[11,"ne","","",72,[[["self"],["uint32"]],["bool"]]],[11,"eq","","",75,[[["self"],["uint64"]],["bool"]]],[11,"ne","","",75,[[["self"],["uint64"]],["bool"]]],[11,"eq","","",70,[[["varuint1"],["self"]],["bool"]]],[11,"ne","","",70,[[["varuint1"],["self"]],["bool"]]],[11,"eq","","",16,[[["module"],["self"]],["bool"]]],[11,"ne","","",16,[[["module"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["importcounttype"]],["bool"]]],[11,"eq","","",4,[[["section"],["self"]],["bool"]]],[11,"ne","","",4,[[["section"],["self"]],["bool"]]],[11,"eq","","",17,[[["customsection"],["self"]],["bool"]]],[11,"ne","","",17,[[["customsection"],["self"]],["bool"]]],[11,"eq","","",18,[[["typesection"],["self"]],["bool"]]],[11,"ne","","",18,[[["typesection"],["self"]],["bool"]]],[11,"eq","","",19,[[["importsection"],["self"]],["bool"]]],[11,"ne","","",19,[[["importsection"],["self"]],["bool"]]],[11,"eq","","",20,[[["functionsection"],["self"]],["bool"]]],[11,"ne","","",20,[[["functionsection"],["self"]],["bool"]]],[11,"eq","","",21,[[["tablesection"],["self"]],["bool"]]],[11,"ne","","",21,[[["tablesection"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["memorysection"]],["bool"]]],[11,"ne","","",22,[[["self"],["memorysection"]],["bool"]]],[11,"eq","","",23,[[["self"],["globalsection"]],["bool"]]],[11,"ne","","",23,[[["self"],["globalsection"]],["bool"]]],[11,"eq","","",24,[[["self"],["exportsection"]],["bool"]]],[11,"ne","","",24,[[["self"],["exportsection"]],["bool"]]],[11,"eq","","",25,[[["self"],["codesection"]],["bool"]]],[11,"ne","","",25,[[["self"],["codesection"]],["bool"]]],[11,"eq","","",26,[[["self"],["elementsection"]],["bool"]]],[11,"ne","","",26,[[["self"],["elementsection"]],["bool"]]],[11,"eq","","",27,[[["self"],["datasection"]],["bool"]]],[11,"ne","","",27,[[["self"],["datasection"]],["bool"]]],[11,"eq","","",7,[[["type"],["self"]],["bool"]]],[11,"ne","","",7,[[["type"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["valuetype"]],["bool"]]],[11,"eq","","",9,[[["blocktype"],["self"]],["bool"]]],[11,"ne","","",9,[[["blocktype"],["self"]],["bool"]]],[11,"eq","","",28,[[["functiontype"],["self"]],["bool"]]],[11,"ne","","",28,[[["functiontype"],["self"]],["bool"]]],[11,"eq","","",10,[[["tableelementtype"],["self"]],["bool"]]],[11,"eq","","",29,[[["self"],["globaltype"]],["bool"]]],[11,"ne","","",29,[[["self"],["globaltype"]],["bool"]]],[11,"eq","","",30,[[["self"],["tabletype"]],["bool"]]],[11,"ne","","",30,[[["self"],["tabletype"]],["bool"]]],[11,"eq","","",31,[[["self"],["resizablelimits"]],["bool"]]],[11,"ne","","",31,[[["self"],["resizablelimits"]],["bool"]]],[11,"eq","","",32,[[["self"],["memorytype"]],["bool"]]],[11,"ne","","",32,[[["self"],["memorytype"]],["bool"]]],[11,"eq","","",5,[[["external"],["self"]],["bool"]]],[11,"ne","","",5,[[["external"],["self"]],["bool"]]],[11,"eq","","",33,[[["importentry"],["self"]],["bool"]]],[11,"ne","","",33,[[["importentry"],["self"]],["bool"]]],[11,"eq","","",6,[[["internal"],["self"]],["bool"]]],[11,"ne","","",6,[[["internal"],["self"]],["bool"]]],[11,"eq","","",34,[[["exportentry"],["self"]],["bool"]]],[11,"ne","","",34,[[["exportentry"],["self"]],["bool"]]],[11,"eq","","",35,[[["globalentry"],["self"]],["bool"]]],[11,"ne","","",35,[[["globalentry"],["self"]],["bool"]]],[11,"eq","","",36,[[["instructions"],["self"]],["bool"]]],[11,"ne","","",36,[[["instructions"],["self"]],["bool"]]],[11,"eq","","",37,[[["initexpr"],["self"]],["bool"]]],[11,"ne","","",37,[[["initexpr"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["instruction"]],["bool"]]],[11,"ne","","",11,[[["self"],["instruction"]],["bool"]]],[11,"eq","","",1,[[["brtabledata"],["self"]],["bool"]]],[11,"ne","","",1,[[["brtabledata"],["self"]],["bool"]]],[11,"eq","","",38,[[["self"],["func"]],["bool"]]],[11,"ne","","",38,[[["self"],["func"]],["bool"]]],[11,"eq","","",39,[[["self"],["local"]],["bool"]]],[11,"ne","","",39,[[["self"],["local"]],["bool"]]],[11,"eq","","",40,[[["self"],["funcbody"]],["bool"]]],[11,"ne","","",40,[[["self"],["funcbody"]],["bool"]]],[11,"eq","","",41,[[["elementsegment"],["self"]],["bool"]]],[11,"ne","","",41,[[["elementsegment"],["self"]],["bool"]]],[11,"eq","","",42,[[["datasegment"],["self"]],["bool"]]],[11,"ne","","",42,[[["datasegment"],["self"]],["bool"]]],[11,"eq","","",43,[[["self"],["indexmap"]],["bool"]]],[11,"eq","","",44,[[["self"],["namesection"]],["bool"]]],[11,"ne","","",44,[[["self"],["namesection"]],["bool"]]],[11,"eq","","",45,[[["self"],["modulenamesubsection"]],["bool"]]],[11,"ne","","",45,[[["self"],["modulenamesubsection"]],["bool"]]],[11,"eq","","",46,[[["self"],["functionnamesubsection"]],["bool"]]],[11,"ne","","",46,[[["self"],["functionnamesubsection"]],["bool"]]],[11,"eq","","",47,[[["self"],["localnamesubsection"]],["bool"]]],[11,"ne","","",47,[[["self"],["localnamesubsection"]],["bool"]]],[11,"eq","","",48,[[["relocsection"],["self"]],["bool"]]],[11,"ne","","",48,[[["relocsection"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["relocationentry"]],["bool"]]],[11,"ne","","",12,[[["self"],["relocationentry"]],["bool"]]],[11,"eq","parity_wasm::builder","",52,[[["self"],["tabledefinition"]],["bool"]]],[11,"ne","","",52,[[["self"],["tabledefinition"]],["bool"]]],[11,"eq","","",53,[[["tableentrydefinition"],["self"]],["bool"]]],[11,"ne","","",53,[[["tableentrydefinition"],["self"]],["bool"]]],[11,"fmt","parity_wasm::elements","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","parity_wasm::builder","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","parity_wasm::elements","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"from_iter","","Create an `IndexMap` from an iterator.",43,[[["i"]],["self"]]],[11,"description","","",13,[[["self"]],["str"]]]],"p":[[3,"CountedListWriter"],[3,"BrTableData"],[3,"Unparsed"],[4,"ImportCountType"],[4,"Section"],[4,"External"],[4,"Internal"],[4,"Type"],[4,"ValueType"],[4,"BlockType"],[4,"TableElementType"],[4,"Instruction"],[4,"RelocationEntry"],[4,"Error"],[3,"CountedList"],[3,"CountedWriter"],[3,"Module"],[3,"CustomSection"],[3,"TypeSection"],[3,"ImportSection"],[3,"FunctionSection"],[3,"TableSection"],[3,"MemorySection"],[3,"GlobalSection"],[3,"ExportSection"],[3,"CodeSection"],[3,"ElementSection"],[3,"DataSection"],[3,"FunctionType"],[3,"GlobalType"],[3,"TableType"],[3,"ResizableLimits"],[3,"MemoryType"],[3,"ImportEntry"],[3,"ExportEntry"],[3,"GlobalEntry"],[3,"Instructions"],[3,"InitExpr"],[3,"Func"],[3,"Local"],[3,"FuncBody"],[3,"ElementSegment"],[3,"DataSegment"],[3,"IndexMap"],[3,"NameSection"],[3,"ModuleNameSubsection"],[3,"FunctionNameSubsection"],[3,"LocalNameSubsection"],[3,"RelocSection"],[8,"Deserialize"],[8,"Serialize"],[3,"FunctionDefinition"],[3,"TableDefinition"],[3,"TableEntryDefinition"],[3,"ModuleBuilder"],[3,"SignatureBuilder"],[3,"TypeRefBuilder"],[3,"SignaturesBuilder"],[3,"FuncBodyBuilder"],[3,"FunctionBuilder"],[3,"ImportBuilder"],[3,"MemoryBuilder"],[3,"TableBuilder"],[3,"ExportBuilder"],[3,"ExportInternalBuilder"],[3,"GlobalBuilder"],[3,"DataSegmentBuilder"],[3,"VarUint32"],[3,"VarUint7"],[3,"Uint8"],[3,"VarUint1"],[3,"VarInt7"],[3,"Uint32"],[3,"VarInt32"],[3,"VarInt64"],[3,"Uint64"],[3,"VarUint64"],[3,"Identity"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`,…","i":[[3,"Condvar","parking_lot","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition…",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[3,"RawMutex","","Raw mutex type backed by the parking lot.",null,null],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",null,null],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for…",null,null],[4,"OnceState","","Current state of a `Once`.",null,null],[13,"New","","A closure has not been executed yet",0,null],[13,"Poisoned","","A closure was executed but panicked.",0,null],[13,"InProgress","","A thread is currently executing a closure.",0,null],[13,"Done","","A closure has completed successfully.",0,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be…",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]],["bool"]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]],["usize"]]],[11,"wait","","Blocks the current thread until this condition variable…",2,[[["mutexguard"],["self"]]]],[11,"wait_until","","Waits on this condition variable for a notification,…",2,[[["mutexguard"],["self"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification,…",2,[[["mutexguard"],["duration"],["self"]],["waittimeoutresult"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfully…",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores…",3,[[["self"],["f"]]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which…",null,null],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared…",null,null],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When…",null,null],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by…",null,null],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",null,null],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant…",null,null],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by…",null,null],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by…",null,null],[6,"RwLock","","A reader-writer lock",null,null],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a…",null,null],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access…",null,null],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access…",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"default","","",2,[[],["condvar"]]],[11,"default","","",3,[[],["once"]]],[11,"eq","","",1,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"ne","","",1,[[["waittimeoutresult"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["duration"],["self"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_until","","",5,[[["self"]],["bool"]]],[11,"try_lock_exclusive_for","","",5,[[["duration"],["self"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_until","","",5,[[["self"]],["bool"]]],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["duration"],["self"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["duration"],["self"]],["bool"]]]],"p":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own…","i":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used…",null,null],[12,"0","","",0,null],[3,"UnparkResult","","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",1,null],[12,"requeued_threads","","The number of threads that were requeued.",1,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This…",1,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any…",1,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each…",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked…",3,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of…",3,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of…",3,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",4,null],[13,"Invalid","","The validation callback returned false.",4,null],[13,"TimedOut","","The timeout expired.",4,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",5,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target…",5,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,null],[13,"UnparkOne","","Unpark one thread and leave the rest parked. No requeuing…",5,null],[13,"RequeueOne","","Requeue one thread and leave the rest parked on the…",5,null],[5,"park","","Parks the current thread in the queue associated with the…",null,[[["t"],["usize"],["parktoken"],["instant"],["option",["instant"]],["b"],["v"]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given…",null,[[["unparktoken"],["usize"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue…",null,[[["c"],["usize"],["f"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the…",null,[[["c"],["usize"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with…",null,[[["c"],["usize"],["v"]],["unparkresult"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[],["bool"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[0,"deadlock","","[Experimental] Deadlock detection",null,null],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock…",null,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock…",null,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",null,null],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"default","","",1,[[],["unparkresult"]]],[11,"default","","",6,[[],["spinwait"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"eq","","",1,[[["unparkresult"],["self"]],["bool"]]],[11,"ne","","",1,[[["unparkresult"],["self"]],["bool"]]],[11,"eq","","",5,[[["requeueop"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"eq","","",2,[[["unparktoken"],["self"]],["bool"]]],[11,"ne","","",2,[[["unparktoken"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["paste"] = {"doc":"The nightly-only [`concat_idents!`] macro in the Rust…","i":[[14,"item","paste","Paste identifiers within a macro invocation that expands…",null,null],[14,"item_with_macros","","Paste identifiers within a macro invocation that expands…",null,null],[14,"expr","","Paste identifiers within a macro invocation that expands…",null,null]],"p":[]};
searchIndex["paste_impl"] = {"doc":"","i":[[14,"item","paste_impl","",null,null],[14,"item_with_macros","","",null,null],[24,"proc_macro_hack_expr","","",null,null]],"p":[]};
searchIndex["pbkdf2"] = {"doc":"This crate implements the PBKDF2 key derivation function…","i":[[5,"pbkdf2","pbkdf2","Generic implementation of PBKDF2 algorithm.",null,[[["usize"]]]]],"p":[]};
searchIndex["ppv_lite86"] = {"doc":"","i":[[0,"x86_64","ppv_lite86","",null,null],[3,"YesS3","ppv_lite86::x86_64","",null,null],[3,"NoS3","","",null,null],[3,"YesS4","","",null,null],[3,"NoS4","","",null,null],[3,"YesA1","","",null,null],[3,"NoA1","","",null,null],[3,"YesA2","","",null,null],[3,"NoA2","","",null,null],[3,"YesNI","","",null,null],[3,"NoNI","","",null,null],[3,"SseMachine","","",null,null],[3,"Avx2Machine","","",null,null],[19,"vec128_storage","","Generic wrapper for unparameterized storage of any of the…",null,null],[19,"vec256_storage","","",null,null],[19,"vec512_storage","","",null,null],[6,"SSE2","","",null,null],[6,"SSSE3","","",null,null],[6,"SSE41","","",null,null],[6,"AVX","","AVX but not AVX2: only 128-bit integer operations, but use…",null,null],[6,"AVX2","","",null,null],[11,"new128","","",0,[[],["self"]]],[11,"split128","","",0,[[]]],[11,"new128","","",1,[[],["self"]]],[11,"split128","","",1,[[]]],[8,"AndNot","ppv_lite86","",null,null],[16,"Output","","",2,null],[10,"andnot","","",2,[[]]],[8,"BSwap","","",null,null],[10,"bswap","","",3,[[],["self"]]],[8,"ArithOps","","Ops that depend on word size",null,null],[8,"BitOps0","","Ops that are independent of word size and endian",null,null],[8,"BitOps32","","",null,null],[8,"BitOps64","","",null,null],[8,"BitOps128","","",null,null],[8,"RotateEachWord32","","",null,null],[10,"rotate_each_word_right7","","",4,[[],["self"]]],[10,"rotate_each_word_right8","","",4,[[],["self"]]],[10,"rotate_each_word_right11","","",4,[[],["self"]]],[10,"rotate_each_word_right12","","",4,[[],["self"]]],[10,"rotate_each_word_right16","","",4,[[],["self"]]],[10,"rotate_each_word_right20","","",4,[[],["self"]]],[10,"rotate_each_word_right24","","",4,[[],["self"]]],[10,"rotate_each_word_right25","","",4,[[],["self"]]],[8,"RotateEachWord64","","",null,null],[10,"rotate_each_word_right32","","",5,[[],["self"]]],[8,"RotateEachWord128","","",null,null],[8,"UnsafeFrom","","",null,null],[10,"unsafe_from","","",6,[[["t"]],["self"]]],[8,"Vec2","","A vector composed of two elements, which may be words or…",null,null],[10,"extract","","",7,[[["u32"]],["w"]]],[10,"insert","","",7,[[["w"],["u32"]],["self"]]],[8,"Vec4","","A vector composed of four elements, which may be words or…",null,null],[10,"extract","","",8,[[["u32"]],["w"]]],[10,"insert","","",8,[[["w"],["u32"]],["self"]]],[8,"Words4","","A vector composed of four words; depending on their size,…",null,null],[10,"shuffle1230","","",9,[[],["self"]]],[10,"shuffle2301","","",9,[[],["self"]]],[10,"shuffle3012","","",9,[[],["self"]]],[8,"LaneWords4","","A vector composed one or more lanes each composed of four…",null,null],[10,"shuffle_lane_words1230","","",10,[[],["self"]]],[10,"shuffle_lane_words2301","","",10,[[],["self"]]],[10,"shuffle_lane_words3012","","",10,[[],["self"]]],[8,"Swap64","","Exchange neigboring ranges of bits of the specified size",null,null],[10,"swap1","","",11,[[],["self"]]],[10,"swap2","","",11,[[],["self"]]],[10,"swap4","","",11,[[],["self"]]],[10,"swap8","","",11,[[],["self"]]],[10,"swap16","","",11,[[],["self"]]],[10,"swap32","","",11,[[],["self"]]],[10,"swap64","","",11,[[],["self"]]],[8,"u32x4","","",null,null],[8,"u64x2","","",null,null],[8,"u128x1","","",null,null],[8,"u32x4x2","","",null,null],[8,"u64x2x2","","",null,null],[8,"u64x4","","",null,null],[8,"u128x2","","",null,null],[8,"u32x4x4","","",null,null],[8,"u64x2x4","","",null,null],[8,"u128x4","","",null,null],[8,"MultiLane","","A vector composed of multiple 128-bit lanes.",null,null],[10,"to_lanes","","Split a multi-lane vector into single-lane vectors.",12,[[],["lanes"]]],[10,"from_lanes","","Build a multi-lane vector from individual lanes.",12,[[["lanes"]],["self"]]],[8,"VZip","","Combine single vectors into a multi-lane vector.",null,null],[10,"vzip","","",13,[[],["v"]]],[8,"Machine","","",null,null],[16,"u32x4","","",14,null],[16,"u64x2","","",14,null],[16,"u128x1","","",14,null],[16,"u32x4x2","","",14,null],[16,"u64x2x2","","",14,null],[16,"u64x4","","",14,null],[16,"u128x2","","",14,null],[16,"u32x4x4","","",14,null],[16,"u64x2x4","","",14,null],[16,"u128x4","","",14,null],[11,"unpack","","",14,[[["s"]],["store"]]],[11,"vec","","",14,[[["a"]],["v"]]],[11,"read_le","","",14,[[],["v"]]],[11,"read_be","","",14,[[],["v"]]],[10,"instance","","",14,[[],["self"]]],[8,"Store","","",null,null],[10,"unpack","","",15,[[["s"]],["self"]]],[8,"StoreBytes","","",null,null],[10,"unsafe_read_le","","",16,[[],["self"]]],[10,"unsafe_read_be","","",16,[[],["self"]]],[10,"write_le","","",16,[[]]],[10,"write_be","","",16,[[]]],[14,"dispatch","","Generate the full set of optimized implementations to take…",null,null],[14,"dispatch_light128","","Generate only the basic implementations necessary to be…",null,null],[14,"dispatch_light256","","Generate only the basic implementations necessary to be…",null,null],[11,"from","ppv_lite86::x86_64","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"instance","","",27,[[],["self"]]],[11,"instance","","",28,[[],["self"]]],[11,"unpack","","",29,[[["vec128_storage"]],["self"]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"clone","","",17,[[["self"]],["yess3"]]],[11,"clone","","",18,[[["self"]],["nos3"]]],[11,"clone","","",19,[[["self"]],["yess4"]]],[11,"clone","","",20,[[["self"]],["nos4"]]],[11,"clone","","",21,[[["self"]],["yesa1"]]],[11,"clone","","",22,[[["self"]],["noa1"]]],[11,"clone","","",23,[[["self"]],["yesa2"]]],[11,"clone","","",24,[[["self"]],["noa2"]]],[11,"clone","","",25,[[["self"]],["yesni"]]],[11,"clone","","",26,[[["self"]],["noni"]]],[11,"clone","","",27,[[["self"]],["ssemachine"]]],[11,"clone","","",28,[[["self"]],["avx2machine"]]],[11,"clone","","",29,[[["self"]],["vec128_storage"]]],[11,"clone","","",0,[[["self"]],["vec256_storage"]]],[11,"clone","","",1,[[["self"]],["vec512_storage"]]],[11,"default","","",29,[[],["self"]]],[11,"default","","",0,[[],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"unpack","ppv_lite86","",14,[[["s"]],["store"]]],[11,"vec","","",14,[[["a"]],["v"]]],[11,"read_le","","",14,[[],["v"]]],[11,"read_be","","",14,[[],["v"]]]],"p":[[19,"vec256_storage"],[19,"vec512_storage"],[8,"AndNot"],[8,"BSwap"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"UnsafeFrom"],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"MultiLane"],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,"StoreBytes"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"]]};
searchIndex["primitive_types"] = {"doc":"Primitive types shared by Substrate and Parity Ethereum.","i":[[3,"U128","primitive_types","Little-endian large integer type",null,null],[12,"0","","",0,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",1,null],[3,"U512","","Little-endian large integer type",null,null],[12,"0","","",2,null],[3,"H160","","Fixed-size uninterpreted hash type with 20 bytes (160…",null,null],[12,"0","","",3,null],[3,"H256","","Fixed-size uninterpreted hash type with 32 bytes (256…",null,null],[12,"0","","",4,null],[3,"H512","","Fixed-size uninterpreted hash type with 64 bytes (512…",null,null],[12,"0","","",5,null],[4,"Error","","Error type for conversion.",null,null],[13,"Overflow","","Overflow encountered.",6,null],[18,"MAX","","Maximum value.",0,null],[11,"from_dec_str","","Convert from a decimal string.",0,[[["str"]],[["result",["fromdecstrerr"]],["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",0,[[["self"]],["u32"]]],[11,"low_u64","","Low word (u64)",0,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",0,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",0,[[["self"]],["u64"]]],[11,"as_usize","","Conversion to usize with overflow checking",0,[[["self"]],["usize"]]],[11,"is_zero","","Whether this is zero.",0,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the…",0,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",0,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",0,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary…",0,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",0,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",0,[[["self"]]]],[11,"to_little_endian","","Write to the slice in little-endian format.",0,[[["self"]]]],[11,"exp10","","Create `10**n` as this type.",0,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",0,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",0,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",0,[[],["self"]]],[11,"div_mod","","Returns a pair `(self / other, self % other)`.",0,[[]]],[11,"pow","","Fast exponentiation by squaring…",0,[[],["self"]]],[11,"overflowing_pow","","Fast exponentiation by squaring. Returns result and…",0,[[]]],[11,"overflowing_add","","Add with overflow.",0,[[["u128"]]]],[11,"saturating_add","","Addition which saturates at the maximum value…",0,[[["u128"]],["u128"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",0,[[["u128"]],[["option",["u128"]],["u128"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",0,[[["u128"]]]],[11,"saturating_sub","","Subtraction which saturates at zero.",0,[[["u128"]],["u128"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",0,[[["u128"]],[["option",["u128"]],["u128"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",0,[[["u128"]]]],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",0,[[["u128"]],["u128"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",0,[[["u128"]],[["option",["u128"]],["u128"]]]],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",0,[[["u128"]],[["option",["u128"]],["u128"]]]],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",0,[[["u128"]],[["option",["u128"]],["u128"]]]],[11,"overflowing_neg","","Negation with overflow.",0,[[]]],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",0,[[],[["option",["u128"]],["u128"]]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory.",0,[[],["self"]]],[11,"from_little_endian","","Converts from little endian representation bytes in memory.",0,[[],["self"]]],[11,"low_u128","","Low 2 words (u128)",0,[[["self"]],["u128"]]],[11,"as_u128","","Conversion to u128 with overflow checking",0,[[["self"]],["u128"]]],[18,"MAX","","Maximum value.",1,null],[11,"from_dec_str","","Convert from a decimal string.",1,[[["str"]],[["result",["fromdecstrerr"]],["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",1,[[["self"]],["u32"]]],[11,"low_u64","","Low word (u64)",1,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",1,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",1,[[["self"]],["u64"]]],[11,"as_usize","","Conversion to usize with overflow checking",1,[[["self"]],["usize"]]],[11,"is_zero","","Whether this is zero.",1,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the…",1,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",1,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",1,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary…",1,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",1,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",1,[[["self"]]]],[11,"to_little_endian","","Write to the slice in little-endian format.",1,[[["self"]]]],[11,"exp10","","Create `10**n` as this type.",1,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",1,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",1,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",1,[[],["self"]]],[11,"div_mod","","Returns a pair `(self / other, self % other)`.",1,[[]]],[11,"pow","","Fast exponentiation by squaring…",1,[[],["self"]]],[11,"overflowing_pow","","Fast exponentiation by squaring. Returns result and…",1,[[]]],[11,"overflowing_add","","Add with overflow.",1,[[["u256"]]]],[11,"saturating_add","","Addition which saturates at the maximum value…",1,[[["u256"]],["u256"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",1,[[["u256"]],[["u256"],["option",["u256"]]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",1,[[["u256"]]]],[11,"saturating_sub","","Subtraction which saturates at zero.",1,[[["u256"]],["u256"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",1,[[["u256"]],[["u256"],["option",["u256"]]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",1,[[["u256"]]]],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",1,[[["u256"]],["u256"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",1,[[["u256"]],[["u256"],["option",["u256"]]]]],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",1,[[["u256"]],[["u256"],["option",["u256"]]]]],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",1,[[["u256"]],[["u256"],["option",["u256"]]]]],[11,"overflowing_neg","","Negation with overflow.",1,[[]]],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",1,[[],[["u256"],["option",["u256"]]]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory.",1,[[],["self"]]],[11,"from_little_endian","","Converts from little endian representation bytes in memory.",1,[[],["self"]]],[11,"low_u128","","Low 2 words (u128)",1,[[["self"]],["u128"]]],[11,"as_u128","","Conversion to u128 with overflow checking",1,[[["self"]],["u128"]]],[18,"MAX","","Maximum value.",2,null],[11,"from_dec_str","","Convert from a decimal string.",2,[[["str"]],[["result",["fromdecstrerr"]],["fromdecstrerr"]]]],[11,"low_u32","","Conversion to u32",2,[[["self"]],["u32"]]],[11,"low_u64","","Low word (u64)",2,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",2,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",2,[[["self"]],["u64"]]],[11,"as_usize","","Conversion to usize with overflow checking",2,[[["self"]],["usize"]]],[11,"is_zero","","Whether this is zero.",2,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the…",2,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",2,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",2,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary…",2,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",2,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",2,[[["self"]]]],[11,"to_little_endian","","Write to the slice in little-endian format.",2,[[["self"]]]],[11,"exp10","","Create `10**n` as this type.",2,[[["usize"]],["self"]]],[11,"zero","","Zero (additive identity) of this type.",2,[[],["self"]]],[11,"one","","One (multiplicative identity) of this type.",2,[[],["self"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",2,[[],["self"]]],[11,"div_mod","","Returns a pair `(self / other, self % other)`.",2,[[]]],[11,"pow","","Fast exponentiation by squaring…",2,[[],["self"]]],[11,"overflowing_pow","","Fast exponentiation by squaring. Returns result and…",2,[[]]],[11,"overflowing_add","","Add with overflow.",2,[[["u512"]]]],[11,"saturating_add","","Addition which saturates at the maximum value…",2,[[["u512"]],["u512"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",2,[[["u512"]],[["u512"],["option",["u512"]]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",2,[[["u512"]]]],[11,"saturating_sub","","Subtraction which saturates at zero.",2,[[["u512"]],["u512"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",2,[[["u512"]],[["u512"],["option",["u512"]]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",2,[[["u512"]]]],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",2,[[["u512"]],["u512"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",2,[[["u512"]],[["u512"],["option",["u512"]]]]],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",2,[[["u512"]],[["u512"],["option",["u512"]]]]],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",2,[[["u512"]],[["u512"],["option",["u512"]]]]],[11,"overflowing_neg","","Negation with overflow.",2,[[]]],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",2,[[],[["u512"],["option",["u512"]]]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory.",2,[[],["self"]]],[11,"from_little_endian","","Converts from little endian representation bytes in memory.",2,[[],["self"]]],[11,"low_u128","","Low 2 words (u128)",2,[[["self"]],["u128"]]],[11,"as_u128","","Conversion to u128 with overflow checking",2,[[["self"]],["u128"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",3,[[["u8"]],["h160"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",3,[[],["h160"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",3,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",3,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",3,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",3,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",3,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",3,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",3,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",3,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",3,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",3,[[],["self"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",3,[[["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",3,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",3,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",3,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",3,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",3,[[["u64"]],["self"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",3,[[["u64"]],["self"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",3,[[["u64"]],["self"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",3,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",3,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",3,[[["r"]],["self"]]],[11,"random","","Create a new hash with cryptographically random content.",3,[[],["self"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",4,[[["u8"]],["h256"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",4,[[],["h256"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",4,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",4,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",4,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",4,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",4,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",4,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",4,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",4,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",4,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",4,[[],["self"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",4,[[["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",4,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",4,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",4,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",4,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",4,[[["u64"]],["self"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",4,[[["u64"]],["self"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",4,[[["u64"]],["self"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",4,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",4,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",4,[[["r"]],["self"]]],[11,"random","","Create a new hash with cryptographically random content.",4,[[],["self"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",5,[[["u8"]],["h512"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",5,[[],["h512"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",5,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",5,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",5,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",5,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",5,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",5,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",5,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",5,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",5,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",5,[[],["self"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",5,[[["self"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",5,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",5,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",5,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",5,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",5,[[["u64"]],["self"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",5,[[["u64"]],["self"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",5,[[["u64"]],["self"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",5,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",5,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",5,[[["r"]],["self"]]],[11,"random","","Create a new hash with cryptographically random content.",5,[[],["self"]]],[11,"full_mul","","Multiplies two 256-bit integers to produce full 512-bit…",1,[[["u256"]],["u512"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"size_hint","","",1,[[["self"]],["usize"]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"encode","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",1,[[["w"],["self"]]]],[11,"decode","","",1,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",1,[[],[["result",["error"]],["error"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"decode","","",2,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",2,[[],[["result",["error"]],["error"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["result",["error"]],["error"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"size_hint","","",4,[[["self"]],["usize"]]],[11,"using_encoded","","",4,[[["self"],["f"]],["r"]]],[11,"encode","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",4,[[["w"],["self"]]]],[11,"decode","","",4,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",4,[[],[["result",["error"]],["error"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"size_hint","","",5,[[["self"]],["usize"]]],[11,"using_encoded","","",5,[[["self"],["f"]],["r"]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",5,[[["w"],["self"]]]],[11,"decode","","",5,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",5,[[],[["result",["error"]],["error"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"as_mut","","",3,[[["self"]]]],[11,"as_mut","","",4,[[["self"]]]],[11,"as_mut","","",5,[[["self"]]]],[11,"as_ref","","",0,[[["self"]]]],[11,"as_ref","","",1,[[["self"]]]],[11,"as_ref","","",2,[[["self"]]]],[11,"as_ref","","",3,[[["self"]]]],[11,"as_ref","","",4,[[["self"]]]],[11,"as_ref","","",5,[[["self"]]]],[11,"from","","",0,[[["u128"]],["u128"]]],[11,"from","","",0,[[],["self"]]],[11,"from","","",0,[[],["self"]]],[11,"from","","",0,[[["u64"]],["u128"]]],[11,"from","","",0,[[["u8"]],["u128"]]],[11,"from","","",0,[[["u16"]],["u128"]]],[11,"from","","",0,[[["u32"]],["u128"]]],[11,"from","","",0,[[["usize"]],["u128"]]],[11,"from","","",0,[[["i64"]],["u128"]]],[11,"from","","",0,[[["i8"]],["u128"]]],[11,"from","","",0,[[["i16"]],["u128"]]],[11,"from","","",0,[[["i32"]],["u128"]]],[11,"from","","",0,[[["isize"]],["u128"]]],[11,"from","","",0,[[],["u128"]]],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["u128"]],["u128"]]],[11,"from","","",0,[[["i128"]],["u128"]]],[11,"from","","",1,[[["u256"]],["u256"]]],[11,"from","","",1,[[],["self"]]],[11,"from","","",1,[[],["self"]]],[11,"from","","",1,[[["u64"]],["u256"]]],[11,"from","","",1,[[["u8"]],["u256"]]],[11,"from","","",1,[[["u16"]],["u256"]]],[11,"from","","",1,[[["u32"]],["u256"]]],[11,"from","","",1,[[["usize"]],["u256"]]],[11,"from","","",1,[[["i64"]],["u256"]]],[11,"from","","",1,[[["i8"]],["u256"]]],[11,"from","","",1,[[["i16"]],["u256"]]],[11,"from","","",1,[[["i32"]],["u256"]]],[11,"from","","",1,[[["isize"]],["u256"]]],[11,"from","","",1,[[],["u256"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["u128"]],["u256"]]],[11,"from","","",1,[[["i128"]],["u256"]]],[11,"from","","",2,[[["u512"]],["u512"]]],[11,"from","","",2,[[],["self"]]],[11,"from","","",2,[[],["self"]]],[11,"from","","",2,[[["u64"]],["u512"]]],[11,"from","","",2,[[["u8"]],["u512"]]],[11,"from","","",2,[[["u16"]],["u512"]]],[11,"from","","",2,[[["u32"]],["u512"]]],[11,"from","","",2,[[["usize"]],["u512"]]],[11,"from","","",2,[[["i64"]],["u512"]]],[11,"from","","",2,[[["i8"]],["u512"]]],[11,"from","","",2,[[["i16"]],["u512"]]],[11,"from","","",2,[[["i32"]],["u512"]]],[11,"from","","",2,[[["isize"]],["u512"]]],[11,"from","","",2,[[],["u512"]]],[11,"from","","",2,[[["str"]],["self"]]],[11,"from","","",2,[[["u128"]],["u512"]]],[11,"from","","",2,[[["i128"]],["u512"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",3,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",3,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",3,[[],["self"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",4,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",4,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",4,[[],["self"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",5,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",5,[[],["self"]]],[11,"from","","Constructs a hash type from the given reference to the…",5,[[],["self"]]],[11,"from","","",4,[[["h160"]],["h256"]]],[11,"from","","",3,[[["h256"]],["h160"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"from","","",2,[[["u128"]],["u512"]]],[11,"from","","",1,[[["u128"]],["u256"]]],[11,"from","","",2,[[["u256"]],["u512"]]],[11,"clone","","",0,[[["self"]],["u128"]]],[11,"clone","","",1,[[["self"]],["u256"]]],[11,"clone","","",2,[[["self"]],["u512"]]],[11,"clone","","",3,[[["self"]],["h160"]]],[11,"clone","","",4,[[["self"]],["h256"]]],[11,"clone","","",5,[[["self"]],["h512"]]],[11,"default","","",0,[[],["self"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"cmp","","",0,[[["u128"],["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["u256"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["u512"]],["ordering"]]],[11,"cmp","","",3,[[["self"]],["ordering"]]],[11,"cmp","","",4,[[["self"]],["ordering"]]],[11,"cmp","","",5,[[["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["error"]],["bool"]]],[11,"eq","","",0,[[["u128"],["self"]],["bool"]]],[11,"ne","","",0,[[["u128"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["u256"]],["bool"]]],[11,"ne","","",1,[[["self"],["u256"]],["bool"]]],[11,"eq","","",2,[[["self"],["u512"]],["bool"]]],[11,"ne","","",2,[[["self"],["u512"]],["bool"]]],[11,"eq","","",3,[[["self"]],["bool"]]],[11,"eq","","",4,[[["self"]],["bool"]]],[11,"eq","","",5,[[["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["u128"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",1,[[["self"],["u256"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["u512"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",3,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",4,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",5,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"div","","",0,[[["t"]],["u128"]]],[11,"div","","",1,[[["t"]],["u256"]]],[11,"div","","",2,[[["t"]],["u512"]]],[11,"rem","","",0,[[["t"]],["u128"]]],[11,"rem","","",1,[[["t"]],["u256"]]],[11,"rem","","",2,[[["t"]],["u512"]]],[11,"sub","","",0,[[["t"]],["u128"]]],[11,"sub","","",1,[[["t"]],["u256"]]],[11,"sub","","",2,[[["t"]],["u512"]]],[11,"add","","",0,[[["t"]],["u128"]]],[11,"add","","",1,[[["t"]],["u256"]]],[11,"add","","",2,[[["t"]],["u512"]]],[11,"mul","","",0,[[["u128"]],["u128"]]],[11,"mul","","",0,[[["u128"]],["u128"]]],[11,"mul","","",0,[[["u8"]],["u128"]]],[11,"mul","","",0,[[["u8"]],["u128"]]],[11,"mul","","",0,[[["u16"]],["u128"]]],[11,"mul","","",0,[[["u16"]],["u128"]]],[11,"mul","","",0,[[["u32"]],["u128"]]],[11,"mul","","",0,[[["u32"]],["u128"]]],[11,"mul","","",0,[[["u64"]],["u128"]]],[11,"mul","","",0,[[["u64"]],["u128"]]],[11,"mul","","",0,[[["usize"]],["u128"]]],[11,"mul","","",0,[[["usize"]],["u128"]]],[11,"mul","","",0,[[["i8"]],["u128"]]],[11,"mul","","",0,[[["i8"]],["u128"]]],[11,"mul","","",0,[[["i16"]],["u128"]]],[11,"mul","","",0,[[["i16"]],["u128"]]],[11,"mul","","",0,[[["i32"]],["u128"]]],[11,"mul","","",0,[[["i32"]],["u128"]]],[11,"mul","","",0,[[["i64"]],["u128"]]],[11,"mul","","",0,[[["i64"]],["u128"]]],[11,"mul","","",0,[[["isize"]],["u128"]]],[11,"mul","","",0,[[["isize"]],["u128"]]],[11,"mul","","",1,[[["u256"]],["u256"]]],[11,"mul","","",1,[[["u256"]],["u256"]]],[11,"mul","","",1,[[["u8"]],["u256"]]],[11,"mul","","",1,[[["u8"]],["u256"]]],[11,"mul","","",1,[[["u16"]],["u256"]]],[11,"mul","","",1,[[["u16"]],["u256"]]],[11,"mul","","",1,[[["u32"]],["u256"]]],[11,"mul","","",1,[[["u32"]],["u256"]]],[11,"mul","","",1,[[["u64"]],["u256"]]],[11,"mul","","",1,[[["u64"]],["u256"]]],[11,"mul","","",1,[[["usize"]],["u256"]]],[11,"mul","","",1,[[["usize"]],["u256"]]],[11,"mul","","",1,[[["i8"]],["u256"]]],[11,"mul","","",1,[[["i8"]],["u256"]]],[11,"mul","","",1,[[["i16"]],["u256"]]],[11,"mul","","",1,[[["i16"]],["u256"]]],[11,"mul","","",1,[[["i32"]],["u256"]]],[11,"mul","","",1,[[["i32"]],["u256"]]],[11,"mul","","",1,[[["i64"]],["u256"]]],[11,"mul","","",1,[[["i64"]],["u256"]]],[11,"mul","","",1,[[["isize"]],["u256"]]],[11,"mul","","",1,[[["isize"]],["u256"]]],[11,"mul","","",2,[[["u512"]],["u512"]]],[11,"mul","","",2,[[["u512"]],["u512"]]],[11,"mul","","",2,[[["u8"]],["u512"]]],[11,"mul","","",2,[[["u8"]],["u512"]]],[11,"mul","","",2,[[["u16"]],["u512"]]],[11,"mul","","",2,[[["u16"]],["u512"]]],[11,"mul","","",2,[[["u32"]],["u512"]]],[11,"mul","","",2,[[["u32"]],["u512"]]],[11,"mul","","",2,[[["u64"]],["u512"]]],[11,"mul","","",2,[[["u64"]],["u512"]]],[11,"mul","","",2,[[["usize"]],["u512"]]],[11,"mul","","",2,[[["usize"]],["u512"]]],[11,"mul","","",2,[[["i8"]],["u512"]]],[11,"mul","","",2,[[["i8"]],["u512"]]],[11,"mul","","",2,[[["i16"]],["u512"]]],[11,"mul","","",2,[[["i16"]],["u512"]]],[11,"mul","","",2,[[["i32"]],["u512"]]],[11,"mul","","",2,[[["i32"]],["u512"]]],[11,"mul","","",2,[[["i64"]],["u512"]]],[11,"mul","","",2,[[["i64"]],["u512"]]],[11,"mul","","",2,[[["isize"]],["u512"]]],[11,"mul","","",2,[[["isize"]],["u512"]]],[11,"add_assign","","",0,[[["self"],["u128"]]]],[11,"add_assign","","",1,[[["self"],["u256"]]]],[11,"add_assign","","",2,[[["self"],["u512"]]]],[11,"sub_assign","","",0,[[["self"],["u128"]]]],[11,"sub_assign","","",1,[[["self"],["u256"]]]],[11,"sub_assign","","",2,[[["self"],["u512"]]]],[11,"mul_assign","","",0,[[["self"],["u128"]]]],[11,"mul_assign","","",0,[[["self"],["u8"]]]],[11,"mul_assign","","",0,[[["u16"],["self"]]]],[11,"mul_assign","","",0,[[["self"],["u32"]]]],[11,"mul_assign","","",0,[[["self"],["u64"]]]],[11,"mul_assign","","",0,[[["self"],["usize"]]]],[11,"mul_assign","","",0,[[["self"],["i8"]]]],[11,"mul_assign","","",0,[[["self"],["i16"]]]],[11,"mul_assign","","",0,[[["self"],["i32"]]]],[11,"mul_assign","","",0,[[["i64"],["self"]]]],[11,"mul_assign","","",0,[[["isize"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["u256"]]]],[11,"mul_assign","","",1,[[["self"],["u8"]]]],[11,"mul_assign","","",1,[[["u16"],["self"]]]],[11,"mul_assign","","",1,[[["self"],["u32"]]]],[11,"mul_assign","","",1,[[["self"],["u64"]]]],[11,"mul_assign","","",1,[[["self"],["usize"]]]],[11,"mul_assign","","",1,[[["self"],["i8"]]]],[11,"mul_assign","","",1,[[["self"],["i16"]]]],[11,"mul_assign","","",1,[[["self"],["i32"]]]],[11,"mul_assign","","",1,[[["i64"],["self"]]]],[11,"mul_assign","","",1,[[["isize"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["u512"]]]],[11,"mul_assign","","",2,[[["self"],["u8"]]]],[11,"mul_assign","","",2,[[["u16"],["self"]]]],[11,"mul_assign","","",2,[[["self"],["u32"]]]],[11,"mul_assign","","",2,[[["self"],["u64"]]]],[11,"mul_assign","","",2,[[["self"],["usize"]]]],[11,"mul_assign","","",2,[[["self"],["i8"]]]],[11,"mul_assign","","",2,[[["self"],["i16"]]]],[11,"mul_assign","","",2,[[["self"],["i32"]]]],[11,"mul_assign","","",2,[[["i64"],["self"]]]],[11,"mul_assign","","",2,[[["isize"],["self"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",1,[[["self"],["t"]]]],[11,"div_assign","","",2,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",1,[[["self"],["t"]]]],[11,"rem_assign","","",2,[[["self"],["t"]]]],[11,"not","","",0,[[],["u128"]]],[11,"not","","",1,[[],["u256"]]],[11,"not","","",2,[[],["u512"]]],[11,"bitand","","",0,[[["u128"]],["u128"]]],[11,"bitand","","",1,[[["u256"]],["u256"]]],[11,"bitand","","",2,[[["u512"]],["u512"]]],[11,"bitand","","",3,[[]]],[11,"bitand","","",4,[[]]],[11,"bitand","","",5,[[]]],[11,"bitor","","",0,[[["u128"]],["u128"]]],[11,"bitor","","",1,[[["u256"]],["u256"]]],[11,"bitor","","",2,[[["u512"]],["u512"]]],[11,"bitor","","",3,[[]]],[11,"bitor","","",4,[[]]],[11,"bitor","","",5,[[]]],[11,"bitxor","","",0,[[["u128"]],["u128"]]],[11,"bitxor","","",1,[[["u256"]],["u256"]]],[11,"bitxor","","",2,[[["u512"]],["u512"]]],[11,"bitxor","","",3,[[]]],[11,"bitxor","","",4,[[]]],[11,"bitxor","","",5,[[]]],[11,"shl","","",0,[[["t"]],["u128"]]],[11,"shl","","",1,[[["t"]],["u256"]]],[11,"shl","","",2,[[["t"]],["u512"]]],[11,"shr","","",0,[[["t"]],["u128"]]],[11,"shr","","",1,[[["t"]],["u256"]]],[11,"shr","","",2,[[["t"]],["u512"]]],[11,"bitand_assign","","",3,[[["self"],["h160"]]]],[11,"bitand_assign","","",3,[[["self"],["h160"]]]],[11,"bitand_assign","","",4,[[["self"],["h256"]]]],[11,"bitand_assign","","",4,[[["self"],["h256"]]]],[11,"bitand_assign","","",5,[[["self"],["h512"]]]],[11,"bitand_assign","","",5,[[["self"],["h512"]]]],[11,"bitor_assign","","",3,[[["self"],["h160"]]]],[11,"bitor_assign","","",3,[[["self"],["h160"]]]],[11,"bitor_assign","","",4,[[["self"],["h256"]]]],[11,"bitor_assign","","",4,[[["self"],["h256"]]]],[11,"bitor_assign","","",5,[[["self"],["h512"]]]],[11,"bitor_assign","","",5,[[["self"],["h512"]]]],[11,"bitxor_assign","","",3,[[["self"],["h160"]]]],[11,"bitxor_assign","","",3,[[["self"],["h160"]]]],[11,"bitxor_assign","","",4,[[["self"],["h256"]]]],[11,"bitxor_assign","","",4,[[["self"],["h256"]]]],[11,"bitxor_assign","","",5,[[["self"],["h512"]]]],[11,"bitxor_assign","","",5,[[["self"],["h512"]]]],[11,"shl_assign","","",0,[[["self"],["t"]]]],[11,"shl_assign","","",1,[[["self"],["t"]]]],[11,"shl_assign","","",2,[[["self"],["t"]]]],[11,"shr_assign","","",0,[[["self"],["t"]]]],[11,"shr_assign","","",1,[[["self"],["t"]]]],[11,"shr_assign","","",2,[[["self"],["t"]]]],[11,"index","","",3,[[["i"],["self"]]]],[11,"index","","",4,[[["i"],["self"]]]],[11,"index","","",5,[[["i"],["self"]]]],[11,"index_mut","","",3,[[["self"],["i"]]]],[11,"index_mut","","",4,[[["self"],["i"]]]],[11,"index_mut","","",5,[[["self"],["i"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"try_from","","",0,[[["u256"]],[["error"],["result",["u128","error"]],["u128"]]]],[11,"try_from","","",1,[[["u512"]],[["error"],["result",["u256","error"]],["u256"]]]],[11,"try_from","","",0,[[["u512"]],[["error"],["result",["u128","error"]],["u128"]]]],[11,"try_from","","",1,[[["u512"]],[["error"],["result",["u256","error"]],["u256"]]]],[11,"from_str","","",0,[[["str"]],[["result",["u128"]],["u128"]]]],[11,"from_str","","",1,[[["str"]],[["u256"],["result",["u256"]]]]],[11,"from_str","","",2,[[["str"]],[["result",["u512"]],["u512"]]]],[11,"from_str","","Creates a hash type instance from the given string.",3,[[["str"]],[["h160"],["fromhexerror"],["result",["h160","fromhexerror"]]]]],[11,"from_str","","Creates a hash type instance from the given string.",4,[[["str"]],[["fromhexerror"],["result",["h256","fromhexerror"]],["h256"]]]],[11,"from_str","","Creates a hash type instance from the given string.",5,[[["str"]],[["h512"],["fromhexerror"],["result",["h512","fromhexerror"]]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",0,[[["s"],["self"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"serialize","","",4,[[["s"],["self"]],["result"]]],[11,"serialize","","",5,[[["s"],["self"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]],[11,"deserialize","","",4,[[["d"]],["result"]]],[11,"deserialize","","",5,[[["d"]],["result"]]],[11,"using_encoded","","",0,[[["fnonce"],["self"]],["r"]]],[11,"using_encoded","","",1,[[["fnonce"],["self"]],["r"]]],[11,"using_encoded","","",2,[[["fnonce"],["self"]],["r"]]],[11,"using_encoded","","",3,[[["fnonce"],["self"]],["r"]]],[11,"using_encoded","","",4,[[["fnonce"],["self"]],["r"]]],[11,"using_encoded","","",5,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",0,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",1,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",2,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",3,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",4,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",5,[[["i"]],[["error"],["result",["error"]]]]]],"p":[[3,"U128"],[3,"U256"],[3,"U512"],[3,"H160"],[3,"H256"],[3,"H512"],[4,"Error"]]};
searchIndex["proc_macro2"] = {"doc":"A wrapper around the procedural macro API of the…","i":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a…",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion…",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`,…",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Literal","","A literal string (`\"hello\"`), byte string (`b\"hello\"`),…",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees…",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`'a'`), string (`\"hello\"`), number…",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another…",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `'` is `Joint` in `'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type,…",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`'s `TokenTree`s.",null,null],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream"]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[["self"]],["bool"]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span"]]],[11,"unwrap","","Convert `proc_macro2::Span` to `proc_macro::Span`.",4,[[],["span"]]],[11,"join","","Create a new span encompassing `self` and `other`.",4,[[["self"],["span"]],[["option",["span"]],["span"]]]],[11,"span","","Returns the span of this tree, delegating to the `span`…",0,[[["self"]],["span"]]],[11,"set_span","","Configures the span for only this token.",0,[[["self"],["span"]]]],[11,"new","","Creates a new `Group` with the given delimiter and token…",5,[[["tokenstream"],["delimiter"]],["group"]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[["self"]],["delimiter"]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in…",5,[[["self"]],["tokenstream"]]],[11,"span","","Returns the span for the delimiters of this token stream,…",5,[[["self"]],["span"]]],[11,"span_open","","Returns the span pointing to the opening delimiter of this…",5,[[["self"]],["span"]]],[11,"span_close","","Returns the span pointing to the closing delimiter of this…",5,[[["self"]],["span"]]],[11,"set_span","","Configures the span for this `Group`'s delimiters, but not…",5,[[["self"],["span"]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["char"],["spacing"]],["punct"]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[["self"]],["char"]]],[11,"spacing","","Returns the spacing of this punctuation character,…",6,[[["self"]],["spacing"]]],[11,"span","","Returns the span for this punctuation character.",6,[[["self"]],["span"]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["self"],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",7,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",7,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",7,[[["self"],["span"]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u8"]],["literal"]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u16"]],["literal"]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u32"]],["literal"]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u64"]],["literal"]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["u128"]],["literal"]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["usize"]],["literal"]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i8"]],["literal"]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i16"]],["literal"]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i32"]],["literal"]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i64"]],["literal"]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["i128"]],["literal"]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[["isize"]],["literal"]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u8"]],["literal"]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u16"]],["literal"]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u32"]],["literal"]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u64"]],["literal"]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["u128"]],["literal"]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["usize"]],["literal"]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i8"]],["literal"]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i16"]],["literal"]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i32"]],["literal"]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i64"]],["literal"]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["i128"]],["literal"]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[["isize"]],["literal"]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f64"]],["literal"]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",8,[[["f32"]],["literal"]]],[11,"string","","String literal.",8,[[["str"]],["literal"]]],[11,"character","","Character literal.",8,[[["char"]],["literal"]]],[11,"byte_string","","Byte string literal.",8,[[],["literal"]]],[11,"span","","Returns the span encompassing this literal.",8,[[["self"]],["span"]]],[11,"set_span","","Configures the span associated for this literal.",8,[[["self"],["span"]]]],[11,"subspan","","Returns a `Span` that is a subset of `self.span()`…",8,[[["rangebounds",["usize"]],["self"],["usize"]],[["option",["span"]],["span"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","proc_macro2::token_stream","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","proc_macro2","",4,[[["span"]],["span"]]],[11,"from","","",3,[[["tokenstream"]],["tokenstream"]]],[11,"from","","",3,[[["tokentree"]],["self"]]],[11,"from","","",0,[[["group"]],["tokentree"]]],[11,"from","","",0,[[["ident"]],["tokentree"]]],[11,"from","","",0,[[["punct"]],["tokentree"]]],[11,"from","","",0,[[["literal"]],["tokentree"]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"extend","","",3,[[["self"],["intoiterator"]]]],[11,"into_iter","","",3,[[],["intoiter"]]],[11,"next","proc_macro2::token_stream","",10,[[["self"]],[["option",["tokentree"]],["tokentree"]]]],[11,"clone","proc_macro2","",3,[[["self"]],["tokenstream"]]],[11,"clone","","",4,[[["self"]],["span"]]],[11,"clone","","",0,[[["self"]],["tokentree"]]],[11,"clone","","",5,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["delimiter"]]],[11,"clone","","",6,[[["self"]],["punct"]]],[11,"clone","","",2,[[["self"]],["spacing"]]],[11,"clone","","",7,[[["self"]],["ident"]]],[11,"clone","","",8,[[["self"]],["literal"]]],[11,"clone","proc_macro2::token_stream","",10,[[["self"]],["intoiter"]]],[11,"default","proc_macro2","",3,[[],["self"]]],[11,"cmp","","",7,[[["ident"],["self"]],["ordering"]]],[11,"eq","","",1,[[["self"],["delimiter"]],["bool"]]],[11,"eq","","",2,[[["self"],["spacing"]],["bool"]]],[11,"eq","","",7,[[["ident"],["self"]],["bool"]]],[11,"eq","","",7,[[["t"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["ident"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","proc_macro2::token_stream","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","proc_macro2","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_iter","","",3,[[["intoiterator"]],["self"]]],[11,"from_str","","",3,[[["str"]],[["tokenstream"],["lexerror"],["result",["tokenstream","lexerror"]]]]]],"p":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]};
searchIndex["proc_macro_crate"] = {"doc":"   Build Status","i":[[5,"crate_name","proc_macro_crate","Find the crate name for the given `orig_name` in the…",null,[[["str"]],[["string"],["result",["string","string"]]]]]],"p":[]};
searchIndex["proc_macro_hack"] = {"doc":"As of Rust 1.30, the language supports user-defined…","i":[[23,"proc_macro_hack","proc_macro_hack","",null,null]],"p":[]};
searchIndex["quote"] = {"doc":"This crate provides the [`quote!`] macro for turning Rust…","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending…",null,null],[10,"append","","For use by `ToTokens` implementations.",0,[[["u"],["self"]]]],[10,"append_all","","For use by `ToTokens` implementations.",0,[[["self"],["i"]]]],[10,"append_separated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[10,"append_terminated","","For use by `ToTokens` implementations.",0,[[["u"],["self"],["i"]]]],[8,"IdentFragment","","Specialized formatting trait used by `format_ident!`.",null,null],[10,"fmt","","Format this value as an identifier fragment.",1,[[["self"],["formatter"]],["result"]]],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[8,"ToTokens","","Types that can be interpolated inside a `quote!` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",2,[[["self"],["tokenstream"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]],[14,"format_ident","","Formatting macro for constructing `Ident`s.",null,null],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens…",null,null],[11,"span","","Span associated with this `IdentFragment`.",1,[[["self"]],[["option",["span"]],["span"]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[["self"]],["tokenstream"]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream"]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","i":[[8,"RngCore","rand","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,[[["self"]]]],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,[[["self"]],[["error"],["result",["error"]]]]],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or…",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types…",1,null],[10,"from_seed","","Create a new PRNG using the given seed.",1,[[],["self"]]],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],[["result",["error"]],["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",2,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,null],[13,"Transient","","A transient failure which likely can be resolved or worked…",2,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,null],[3,"Error","","Error type of random number generators",null,null],[12,"kind","","The error kind",3,null],[12,"msg","","The error message",3,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number…",null,[[],["threadrng"]]],[5,"random","","Generates a random value using the thread-local random…",null,[[],["t"]]],[0,"distributions","","Generating random samples from probability distributions.",null,null],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters…",null,null],[3,"Uniform","","Sample values uniformly between two bounds.",null,null],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly…",null,null],[3,"Open01","","A distribution to sample floating point numbers uniformly…",null,null],[3,"Bernoulli","","The Bernoulli distribution.",null,null],[3,"WeightedIndex","","A distribution using weighted sampling to pick a…",null,null],[3,"UnitSphereSurface","","Samples uniformly from the surface of the unit sphere in…",null,null],[3,"UnitCircle","","Samples uniformly from the edge of the unit circle in two…",null,null],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the…",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the…",null,null],[3,"Beta","","The Beta distribution with shape parameters `alpha` and…",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[3,"StandardNormal","","Samples floating-point numbers according to the normal…",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[3,"Exp1","","Samples floating-point numbers according to the…",null,null],[3,"Pareto","","Samples floating-point numbers according to the Pareto…",null,null],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",null,null],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",null,null],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",null,null],[3,"Dirichlet","","The dirichelet distribution `Dirichlet(alpha)`.",null,null],[3,"Triangular","","The triangular distribution.",null,null],[3,"Weibull","","Samples floating-point numbers according to the Weibull…",null,null],[3,"DistIter","","An iterator that generates random values of `T` with…",null,null],[3,"Standard","","A generic random value distribution, implemented for many…",null,null],[3,"Weighted","","A value with a particular weight for use with…",null,null],[12,"weight","","The numerical weight of this item",4,null],[12,"item","","The actual item which is being weighted",4,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of…",null,null],[4,"WeightedError","","Error type returned from `WeightedIndex::new`.",null,null],[13,"NoItem","","The provided iterator contained no items.",5,null],[13,"NegativeWeight","","A weight lower than zero was used.",5,null],[13,"AllWeightsZero","","All items in the provided iterator had a weight of zero.",5,null],[0,"uniform","","A distribution uniformly sampling numbers within a given…",null,null],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",null,null],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer…",null,null],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for…",null,null],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",null,null],[8,"SampleUniform","","Helper trait for creating objects using the correct…",null,null],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",6,null],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",null,null],[16,"X","","The type sampled by this implementation.",7,null],[10,"new","","Construct self, with inclusive lower bound and exclusive…",7,[[["b2"],["b1"]],["self"]]],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",7,[[["b2"],["b1"]],["self"]]],[10,"sample","","Sample a value.",7,[[["self"],["r"]]]],[11,"sample_single","","Sample a single value uniformly from a range with…",7,[[["b2"],["b1"],["r"]]]],[8,"SampleBorrow","","Helper trait similar to [`Borrow`] but implemented only…",null,null],[10,"borrow","","Immutably borrows from an owned value. See…",8,[[["self"]],["borrowed"]]],[11,"new","","Create a new `Uniform` instance which samples uniformly…",9,[[["b2"],["b1"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly…",9,[[["b2"],["b1"]],["uniform"]]],[11,"new","rand::distributions","Construct a new `Bernoulli` with the given probability of…",10,[[["f64"]],["bernoulli"]]],[11,"from_ratio","","Construct a new `Bernoulli` with the probability of…",10,[[["u32"]],["bernoulli"]]],[11,"new","","Creates a new a `WeightedIndex` [`Distribution`] using the…",11,[[["i"]],[["weightedindex"],["weightederror"],["result",["weightedindex","weightederror"]]]]],[11,"new","","Construct a new `UnitSphereSurface` distribution.",12,[[],["unitspheresurface"]]],[11,"new","","Construct a new `UnitCircle` distribution.",13,[[],["unitcircle"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)`…",14,[[["f64"]],["gamma"]]],[11,"new","","Create a new chi-squared distribution with…",15,[[["f64"]],["chisquared"]]],[11,"new","","Create a new `FisherF` distribution, with the given…",16,[[["f64"]],["fisherf"]]],[11,"new","","Create a new Student t distribution with `n` degrees of…",17,[[["f64"]],["studentt"]]],[11,"new","","Construct an object representing the `Beta(alpha, beta)`…",18,[[["f64"]],["beta"]]],[11,"new","","Construct a new `Normal` distribution with the given mean…",19,[[["f64"]],["normal"]]],[11,"new","","Construct a new `LogNormal` distribution with the given…",20,[[["f64"]],["lognormal"]]],[11,"new","","Construct a new `Exp` with the given shape parameter…",21,[[["f64"]],["exp"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and…",22,[[["f64"]],["pareto"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter…",23,[[["f64"]],["poisson"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters…",24,[[["f64"],["u64"]],["binomial"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters…",25,[[["f64"]],["cauchy"]]],[11,"new","","Construct a new `Dirichlet` with the given alpha parameter…",26,[[["vec",["f64"]],["into",["vec"]]],["dirichlet"]]],[11,"new_with_param","","Construct a new `Dirichlet` with the given shape parameter…",26,[[["f64"],["usize"]],["dirichlet"]]],[11,"new","","Construct a new `Triangular` with minimum `min`, maximum…",27,[[["f64"]],["triangular"]]],[11,"new","","Construct a new `Weibull` distribution with given `scale`…",28,[[["f64"]],["weibull"]]],[8,"Distribution","","Types (distributions) that can be used to create a random…",null,null],[10,"sample","","Generate a random value of `T`, using `rng` as the source…",29,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`,…",29,[[["self"],["r"]],["distiter"]]],[11,"new","","Create a new `WeightedChoice`.",30,[[],["weightedchoice"]]],[0,"prelude","rand","Convenience re-export of common members",null,null],[0,"prng","","Pseudo-random number generators.",null,null],[0,"rngs","","Random number generators and adapters for common usage:",null,null],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU…",null,null],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`]…",null,null],[13,"NoTimer","","No timer available.",31,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",31,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",31,null],[13,"TinyVariantions","","Variations of deltas of time too small.",31,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",31,null],[3,"OsRng","","A random number generator that retrieves randomness…",null,null],[3,"EntropyRng","","An interface returning random data from external…",null,null],[3,"SmallRng","","An RNG recommended when small state, cheap initialization…",null,null],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen…",null,null],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a…",null,null],[0,"adapter","","Wrappers / adapters forming RNGs",null,null],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type…",null,null],[3,"ReseedingRng","","A wrapper around any PRNG that implements…",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",32,[[["r"]],["readrng"]]],[11,"new","","Create a new `ReseedingRng` from an existing PRNG,…",33,[[["rsdr"],["u64"],["r"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",33,[[["self"]],[["result",["error"]],["error"]]]],[11,"new","rand::rngs","Create a new `EntropyRng`.",34,[[],["self"]]],[0,"mock","","Mock random number generator",null,null],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",null,null],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence…",35,[[["u64"]],["self"]]],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[3,"SliceChooseIter","rand::seq","Iterator over multiple choices, as returned by…",null,null],[5,"sample_iter","","Randomly sample `amount` elements from a finite iterator.",null,[[["i"],["usize"],["r"]],[["result",["vec","vec"]],["vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,[[["usize"],["r"]],["vec"]]],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,[[["usize"],["r"]],[["vec"],["t"]]]],[0,"index","","Index sampling",null,null],[4,"IndexVec","rand::seq::index","A vector of indices.",null,null],[4,"IndexVecIter","","Return type of `IndexVec::iter`.",null,null],[4,"IndexVecIntoIter","","Return type of `IndexVec::into_iter`.",null,null],[5,"sample","","Randomly sample exactly `amount` distinct indices from…",null,[[["usize"],["r"]],["indexvec"]]],[11,"len","","Returns the number of indices",36,[[["self"]],["usize"]]],[11,"index","","Return the value at the given `index`.",36,[[["self"],["usize"]],["usize"]]],[11,"into_vec","","Return result as a `Vec<usize>`. Conversion may or may not…",36,[[],[["vec",["usize"]],["usize"]]]],[11,"iter","","Iterate over the indices as a sequence of `usize` values",36,[[["self"]],["indexveciter"]]],[11,"into_iter","","Convert into an iterator over the indices as a sequence of…",36,[[],["indexvecintoiter"]]],[8,"SliceRandom","rand::seq","Extension trait on slices, providing random mutation and…",null,null],[16,"Item","","The element type.",37,null],[10,"choose","","Returns a reference to one random element of the slice, or…",37,[[["self"],["r"]],["option"]]],[10,"choose_mut","","Returns a mutable reference to one random element of the…",37,[[["self"],["r"]],["option"]]],[10,"choose_multiple","","Produces an iterator that chooses `amount` elements from…",37,[[["usize"],["self"],["r"]],["slicechooseiter"]]],[10,"choose_weighted","","Similar to [`choose`], where the likelihood of each…",37,[[["f"],["self"],["r"]],[["weightederror"],["result",["weightederror"]]]]],[10,"choose_weighted_mut","","Similar to [`choose_mut`], where the likelihood of each…",37,[[["self"],["f"],["r"]],[["weightederror"],["result",["weightederror"]]]]],[10,"shuffle","","Shuffle a mutable slice in place.",37,[[["self"],["r"]]]],[10,"partial_shuffle","","Shuffle a slice in place, but exit early.",37,[[["self"],["usize"],["r"]]]],[8,"IteratorRandom","","Extension trait on iterators, providing random sampling…",null,null],[11,"choose","","Choose one element at random from the iterator. If you…",38,[[["r"]],["option"]]],[11,"choose_multiple_fill","","Collects `amount` values at random from the iterator into…",38,[[["r"]],["usize"]]],[11,"choose_multiple","","Collects `amount` values at random from the iterator into…",38,[[["usize"],["r"]],["vec"]]],[8,"Rng","rand","An automatically-implemented extension trait on…",null,null],[11,"gen","","Return a random value supporting the [`Standard`]…",39,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e.…",39,[[["b2"],["self"],["b1"]],["sampleuniform"]]],[11,"sample","","Sample a new value, using the given distribution.",39,[[["distribution"],["self"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given…",39,[[["d"],["self"]],[["distiter"],["distribution"]]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value…",39,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value…",39,[[["self"],["t"]],[["result",["error"]],["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",39,[[["self"],["f64"]],["bool"]]],[11,"gen_ratio","","Return a bool with a probability of…",39,[[["self"],["u32"]],["bool"]]],[11,"choose","","Return a random element from `values`.",39,[[["self"]],[["option"],["t"]]]],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",39,[[["self"]],[["option"],["t"]]]],[11,"shuffle","","Shuffle a mutable slice in place.",39,[[["self"]]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",null,null],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",40,[[["self"]]]],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian…",40,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing…",null,null],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh…",41,[[],["self"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","rand::distributions","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","rand::distributions::uniform","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","rand::distributions","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"into_iter","","",47,[[],["i"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","rand::distributions::uniform","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","rand::rngs","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"to_string","","",31,[[["self"]],["string"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from_entropy","","",54,[[],["r"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from_entropy","","",55,[[],["r"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","rand::rngs::adapter","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","rand::rngs::mock","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","rand::seq","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"into_iter","","",57,[[],["i"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","rand::seq::index","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"into_iter","","",58,[[],["i"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"into_iter","","",59,[[],["i"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"fmt","rand::rngs","",31,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",52,[[["self"]],["u32"]]],[11,"next_u64","","",52,[[["self"]],["u64"]]],[11,"fill_bytes","","",52,[[["self"]]]],[11,"try_fill_bytes","","",52,[[["self"]],[["error"],["result",["error"]]]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"fmt","rand::rngs","",52,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",31,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"eq","","",31,[[["self"],["timererror"]],["bool"]]],[11,"clone","","",31,[[["self"]],["timererror"]]],[11,"clone","","",52,[[["self"]],["jitterrng"]]],[11,"description","","",31,[[["self"]],["str"]]],[11,"clone","rand","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"read","","",0,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],[["error"],["option",["error"]]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"clone","rand::rngs","",53,[[["self"]],["osrng"]]],[11,"fmt","","",53,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",53,[[["self"]],["u32"]]],[11,"next_u64","","",53,[[["self"]],["u64"]]],[11,"fill_bytes","","",53,[[["self"]]]],[11,"try_fill_bytes","","",53,[[["self"]],[["error"],["result",["error"]]]]],[11,"new","rand::distributions::uniform","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",49,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",49,[[["b2"],["b1"]],["self"]]],[11,"sample","","",49,[[["self"],["r"]]]],[11,"sample_single","","",49,[[["b2"],["b1"],["r"]]]],[11,"new","","",50,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",50,[[["b2"],["b1"]],["self"]]],[11,"sample","","",50,[[["self"],["r"]]]],[11,"sample_single","","",50,[[["b2"],["b1"],["r"]]]],[11,"new","","",50,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",50,[[["b2"],["b1"]],["self"]]],[11,"sample","","",50,[[["self"],["r"]]]],[11,"sample_single","","",50,[[["b2"],["b1"],["r"]]]],[11,"new","","",51,[[["b2"],["b1"]],["self"]]],[11,"new_inclusive","","",51,[[["b2"],["b1"]],["self"]]],[11,"sample","","",51,[[["self"],["r"]],["duration"]]],[11,"sample","","",9,[[["self"],["r"]],["x"]]],[11,"sample","rand::distributions","",10,[[["self"],["r"]],["bool"]]],[11,"sample","","",11,[[["self"],["r"]],["usize"]]],[11,"sample","","",12,[[["self"],["r"]]]],[11,"sample","","",13,[[["self"],["r"]]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"sample","","",18,[[["self"],["r"]],["f64"]]],[11,"sample","","",45,[[["self"],["r"]],["f64"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",20,[[["self"],["r"]],["f64"]]],[11,"sample","","",46,[[["self"],["r"]],["f64"]]],[11,"sample","","",21,[[["self"],["r"]],["f64"]]],[11,"sample","","",22,[[["self"],["r"]],["f64"]]],[11,"sample","","",23,[[["self"],["r"]],["u64"]]],[11,"sample","","",24,[[["self"],["r"]],["u64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",26,[[["self"],["r"]],[["f64"],["vec",["f64"]]]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",28,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["f32"]]],[11,"sample","","",43,[[["self"],["r"]],["f32"]]],[11,"sample","","",44,[[["self"],["r"]],["f32"]]],[11,"sample","","",48,[[["self"],["r"]],["f64"]]],[11,"sample","","",43,[[["self"],["r"]],["f64"]]],[11,"sample","","",44,[[["self"],["r"]],["f64"]]],[11,"sample","","",48,[[["self"],["r"]],["u8"]]],[11,"sample","","",48,[[["self"],["r"]],["u16"]]],[11,"sample","","",48,[[["self"],["r"]],["u32"]]],[11,"sample","","",48,[[["self"],["r"]],["u64"]]],[11,"sample","","",48,[[["self"],["r"]],["u128"]]],[11,"sample","","",48,[[["self"],["r"]],["usize"]]],[11,"sample","","",48,[[["self"],["r"]],["i8"]]],[11,"sample","","",48,[[["self"],["r"]],["i16"]]],[11,"sample","","",48,[[["self"],["r"]],["i32"]]],[11,"sample","","",48,[[["self"],["r"]],["i64"]]],[11,"sample","","",48,[[["self"],["r"]],["i128"]]],[11,"sample","","",48,[[["self"],["r"]],["isize"]]],[11,"sample","","",48,[[["self"],["r"]],["char"]]],[11,"sample","","",42,[[["self"],["r"]],["char"]]],[11,"sample","","",48,[[["self"],["r"]],["bool"]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]]]],[11,"sample","","",48,[[["self"],["r"]],["option"]]],[11,"sample","","",48,[[["self"],["r"]],["wrapping"]]],[11,"sample","","",30,[[["self"],["r"]],["t"]]],[11,"from","rand::distributions::uniform","",9,[[["range"]],["uniform"]]],[11,"from","","",9,[[["rangeinclusive"]],["uniform"]]],[11,"from","rand::seq::index","",36,[[["vec",["u32"]],["u32"]],["self"]]],[11,"from","","",36,[[["vec",["usize"]],["usize"]],["self"]]],[11,"len","rand::seq","",57,[[["self"]],["usize"]]],[11,"next","rand::distributions","",47,[[["self"]],["option"]]],[11,"size_hint","","",47,[[["self"]]]],[11,"next","rand::seq::index","",58,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",58,[[["self"]]]],[11,"next","","",59,[[["self"]],["option"]]],[11,"size_hint","","",59,[[["self"]]]],[11,"next","rand::seq","",57,[[["self"]],["option"]]],[11,"size_hint","","",57,[[["self"]]]],[11,"clone","rand::distributions::uniform","",9,[[["self"]],["uniform"]]],[11,"clone","","",49,[[["self"]],["uniformint"]]],[11,"clone","","",50,[[["self"]],["uniformfloat"]]],[11,"clone","","",51,[[["self"]],["uniformduration"]]],[11,"clone","rand::distributions","",10,[[["self"]],["bernoulli"]]],[11,"clone","","",11,[[["self"]],["weightedindex"]]],[11,"clone","","",5,[[["self"]],["weightederror"]]],[11,"clone","","",12,[[["self"]],["unitspheresurface"]]],[11,"clone","","",13,[[["self"]],["unitcircle"]]],[11,"clone","","",14,[[["self"]],["gamma"]]],[11,"clone","","",15,[[["self"]],["chisquared"]]],[11,"clone","","",16,[[["self"]],["fisherf"]]],[11,"clone","","",17,[[["self"]],["studentt"]]],[11,"clone","","",18,[[["self"]],["beta"]]],[11,"clone","","",45,[[["self"]],["standardnormal"]]],[11,"clone","","",19,[[["self"]],["normal"]]],[11,"clone","","",20,[[["self"]],["lognormal"]]],[11,"clone","","",46,[[["self"]],["exp1"]]],[11,"clone","","",21,[[["self"]],["exp"]]],[11,"clone","","",22,[[["self"]],["pareto"]]],[11,"clone","","",23,[[["self"]],["poisson"]]],[11,"clone","","",24,[[["self"]],["binomial"]]],[11,"clone","","",25,[[["self"]],["cauchy"]]],[11,"clone","","",26,[[["self"]],["dirichlet"]]],[11,"clone","","",27,[[["self"]],["triangular"]]],[11,"clone","","",28,[[["self"]],["weibull"]]],[11,"clone","","",43,[[["self"]],["openclosed01"]]],[11,"clone","","",44,[[["self"]],["open01"]]],[11,"clone","","",48,[[["self"]],["standard"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"clone","rand::rngs::adapter","",33,[[["self"]],["reseedingrng"]]],[11,"clone","rand::rngs::mock","",35,[[["self"]],["steprng"]]],[11,"clone","rand::rngs","",54,[[["self"]],["smallrng"]]],[11,"clone","","",55,[[["self"]],["stdrng"]]],[11,"clone","","",56,[[["self"]],["threadrng"]]],[11,"clone","rand::seq::index","",36,[[["self"]],["indexvec"]]],[11,"clone","","",59,[[["self"]],["indexvecintoiter"]]],[11,"default","rand::rngs","",34,[[],["self"]]],[11,"default","","",56,[[],["threadrng"]]],[11,"eq","rand::distributions","",5,[[["self"],["weightederror"]],["bool"]]],[11,"eq","rand::seq::index","",36,[[["indexvec"],["self"]],["bool"]]],[11,"fmt","rand::distributions::uniform","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::distributions","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::rngs::adapter","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::rngs","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::rngs::mock","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::rngs","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::seq::index","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::seq","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand::distributions","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],[["error"],["option",["error"]]]]],[11,"next_u32","rand::rngs::adapter","",32,[[["self"]],["u32"]]],[11,"next_u64","","",32,[[["self"]],["u64"]]],[11,"fill_bytes","","",32,[[["self"]]]],[11,"try_fill_bytes","","",32,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",33,[[["self"]],["u32"]]],[11,"next_u64","","",33,[[["self"]],["u64"]]],[11,"fill_bytes","","",33,[[["self"]]]],[11,"try_fill_bytes","","",33,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","rand::rngs","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,[[["self"]]]],[11,"try_fill_bytes","","",34,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","rand::rngs::mock","",35,[[["self"]],["u32"]]],[11,"next_u64","","",35,[[["self"]],["u64"]]],[11,"fill_bytes","","",35,[[["self"]]]],[11,"try_fill_bytes","","",35,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","rand::rngs","",54,[[["self"]],["u32"]]],[11,"next_u64","","",54,[[["self"]],["u64"]]],[11,"fill_bytes","","",54,[[["self"]]]],[11,"try_fill_bytes","","",54,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",55,[[["self"]],["u32"]]],[11,"next_u64","","",55,[[["self"]],["u64"]]],[11,"fill_bytes","","",55,[[["self"]]]],[11,"try_fill_bytes","","",55,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",56,[[["self"]],["u32"]]],[11,"next_u64","","",56,[[["self"]],["u64"]]],[11,"fill_bytes","","",56,[[["self"]]]],[11,"try_fill_bytes","","",56,[[["self"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",54,[[],["self"]]],[11,"from_rng","","",54,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",55,[[],["self"]]],[11,"from_rng","","",55,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"should_retry","rand","True if this kind of error may resolve itself on retry.",2,[[],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[],["bool"]]],[11,"description","","A description of this error kind",2,[[],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a…",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to…",3,[[["self"]],[["option",["box"]],["box",["error"]]]]],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a…",52,[[],[["jitterrng"],["result",["jitterrng","timererror"]],["timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied,…",52,[[],["jitterrng"]]],[11,"set_rounds","","Configures how many rounds are used to generate each…",52,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing…",52,[[["self"]],[["result",["u8","timererror"]],["timererror"],["u8"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run…",52,[[["self"],["bool"]],["i64"]]],[11,"new","","Create a new `OsRng`.",53,[[],[["result",["osrng","error"]],["osrng"],["error"]]]]],"p":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[4,"WeightedError"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"Uniform"],[3,"Bernoulli"],[3,"WeightedIndex"],[3,"UnitSphereSurface"],[3,"UnitCircle"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"Normal"],[3,"LogNormal"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Cauchy"],[3,"Dirichlet"],[3,"Triangular"],[3,"Weibull"],[8,"Distribution"],[3,"WeightedChoice"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"StepRng"],[4,"IndexVec"],[8,"SliceRandom"],[8,"IteratorRandom"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Alphanumeric"],[3,"OpenClosed01"],[3,"Open01"],[3,"StandardNormal"],[3,"Exp1"],[3,"DistIter"],[3,"Standard"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"JitterRng"],[3,"OsRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"SliceChooseIter"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"]]};
searchIndex["rand_chacha"] = {"doc":"The ChaCha random number generator.","i":[[3,"ChaCha12Core","rand_chacha","ChaCha with 12 rounds",null,null],[3,"ChaCha12Rng","","A cryptographically secure random number generator that…",null,null],[3,"ChaCha20Core","","ChaCha with 20 rounds",null,null],[3,"ChaCha20Rng","","A cryptographically secure random number generator that…",null,null],[3,"ChaCha8Core","","ChaCha with 8 rounds",null,null],[3,"ChaCha8Rng","","A cryptographically secure random number generator that…",null,null],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit…",0,[[["self"]],["u128"]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit…",0,[[["self"],["u128"]]]],[11,"set_stream","","Set the stream number.",0,[[["self"],["u64"]]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit…",1,[[["self"]],["u128"]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit…",1,[[["self"],["u128"]]]],[11,"set_stream","","Set the stream number.",1,[[["self"],["u64"]]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit…",2,[[["self"]],["u128"]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit…",2,[[["self"],["u128"]]]],[11,"set_stream","","Set the stream number.",2,[[["self"],["u64"]]]],[6,"ChaChaRng","","ChaCha with 20 rounds",null,null],[6,"ChaChaCore","","ChaCha with 20 rounds, low-level interface",null,null],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",0,[[["chacha20core"]],["self"]]],[11,"from","","",1,[[["chacha12core"]],["self"]]],[11,"from","","",2,[[["chacha8core"]],["self"]]],[11,"clone","","",4,[[["self"]],["chacha20core"]]],[11,"clone","","",0,[[["self"]],["chacha20rng"]]],[11,"clone","","",3,[[["self"]],["chacha12core"]]],[11,"clone","","",1,[[["self"]],["chacha12rng"]]],[11,"clone","","",5,[[["self"]],["chacha8core"]]],[11,"clone","","",2,[[["self"]],["chacha8rng"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"generate","","",4,[[["self"]]]],[11,"generate","","",3,[[["self"]]]],[11,"generate","","",5,[[["self"]]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,[[["self"]]]],[11,"try_fill_bytes","","",2,[[["self"]],[["error"],["result",["error"]]]]],[11,"from_seed","","",4,[[],["self"]]],[11,"from_seed","","",0,[[],["self"]]],[11,"from_seed","","",3,[[],["self"]]],[11,"from_seed","","",1,[[],["self"]]],[11,"from_seed","","",5,[[],["self"]]],[11,"from_seed","","",2,[[],["self"]]]],"p":[[3,"ChaCha20Rng"],[3,"ChaCha12Rng"],[3,"ChaCha8Rng"],[3,"ChaCha12Core"],[3,"ChaCha20Core"],[3,"ChaCha8Core"]]};
searchIndex["rand_core"] = {"doc":"Random number generation traits","i":[[3,"Error","rand_core","Error type of random number generators",null,null],[3,"OsRng","","A random number generator that retrieves randomness from…",null,null],[11,"new","","Construct from any type supporting `std::error::Error`",0,[[["e"]],["self"]]],[11,"inner","","Reference the inner error (`std` only)",0,[[["self"]],["error"]]],[11,"take_inner","","Unwrap the inner error (`std` only)",0,[[],[["error"],["box",["error"]]]]],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive…",0,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to…",0,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from the…",0,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"code","","Retrieve the error code, if any.",0,[[["self"]],[["nonzerou32"],["option",["nonzerou32"]]]]],[0,"block","","The `BlockRngCore` trait and implementation helpers",null,null],[3,"BlockRng","rand_core::block","A wrapper type implementing [`RngCore`] for some type…",null,null],[12,"core","","The core part of the RNG, implementing the `generate`…",1,null],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type…",null,null],[12,"core","","The core part of the RNG, implementing the `generate`…",2,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers…",null,null],[16,"Item","","Results element type, e.g. `u32`.",3,null],[16,"Results","","Results type. This is the 'block' an RNG implementing…",3,null],[10,"generate","","Generate a new block of results.",3,[[["self"]]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing…",1,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",1,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a…",1,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the…",1,[[["self"],["usize"]]]],[11,"new","","Create a new `BlockRng` from an existing RNG implementing…",2,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",2,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a…",2,[[["self"]]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the…",2,[[["self"],["usize"]]]],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",null,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`,…",null,[[["r"]]]],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output…",null,[[]]],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output…",null,[[]]],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",null,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",null,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`.…",null,[[]]],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.…",null,[[]]],[8,"RngCore","rand_core","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",4,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",4,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",4,[[["self"]]]],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",4,[[["self"]],[["result",["error"]],["error"]]]],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or…",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types…",5,null],[10,"from_seed","","Create a new PRNG using the given seed.",5,[[],["self"]]],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",5,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",5,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via [`getrandom`].",5,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","rand_core::block","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","","",2,[[["self"]],["u32"]]],[11,"next_u64","","",2,[[["self"]],["u64"]]],[11,"fill_bytes","","",2,[[["self"]]]],[11,"try_fill_bytes","","",2,[[["self"]],[["result",["error"]],["error"]]]],[11,"next_u32","rand_core","",6,[[["self"]],["u32"]]],[11,"next_u64","","",6,[[["self"]],["u64"]]],[11,"fill_bytes","","",6,[[["self"]]]],[11,"try_fill_bytes","","",6,[[["self"]],[["result",["error"]],["error"]]]],[11,"from_seed","rand_core::block","",1,[[],["self"]]],[11,"seed_from_u64","","",1,[[["u64"]],["self"]]],[11,"from_rng","","",1,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",2,[[],["self"]]],[11,"seed_from_u64","","",2,[[["u64"]],["self"]]],[11,"from_rng","","",2,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from","rand_core","",0,[[["nonzerou32"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"clone","rand_core::block","",1,[[["self"]],["blockrng"]]],[11,"clone","","",2,[[["self"]],["blockrng64"]]],[11,"clone","rand_core","",6,[[["self"]],["osrng"]]],[11,"default","","",6,[[],["osrng"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand_core::block","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","rand_core","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"source","","",0,[[["self"]],[["option",["error"]],["error"]]]],[11,"read","","",4,[[["self"]],[["result",["usize","error"]],["usize"],["error"]]]]],"p":[[3,"Error"],[3,"BlockRng"],[3,"BlockRng64"],[8,"BlockRngCore"],[8,"RngCore"],[8,"SeedableRng"],[3,"OsRng"]]};
searchIndex["rand_hc"] = {"doc":"The HC128 random number generator.","i":[[3,"Hc128Rng","rand_hc","A cryptographically secure random number generator that…",null,null],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["hc128rng"]]],[11,"clone","","",1,[[["self"]],["hc128core"]]],[11,"generate","","",1,[[["self"]]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"from_seed","","",0,[[],["self"]]],[11,"from_rng","","",0,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","Create an HC-128 random number generator with a seed. The…",1,[[],["self"]]]],"p":[[3,"Hc128Rng"],[3,"Hc128Core"]]};
searchIndex["rand_isaac"] = {"doc":"The ISAAC and ISAAC-64 random number generators.","i":[[0,"isaac","rand_isaac","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand_isaac::isaac","A random number generator that uses the ISAAC algorithm.",null,null],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",null,null],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as…",0,[[["u64"]],["self"]]],[0,"isaac64","rand_isaac","The ISAAC-64 random number generator.",null,null],[3,"Isaac64Rng","rand_isaac::isaac64","A random number generator that uses ISAAC-64, the 64-bit…",null,null],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",null,null],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64`…",1,[[["u64"]],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64`…",2,[[["u64"]],["self"]]],[11,"from","rand_isaac::isaac","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","rand_isaac::isaac64","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"fmt","rand_isaac::isaac","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","rand_isaac::isaac64","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"clone","rand_isaac::isaac","",0,[[["self"]],["isaacrng"]]],[11,"clone","","",3,[[["self"]],["isaaccore"]]],[11,"clone","rand_isaac::isaac64","",1,[[["self"]],["isaac64rng"]]],[11,"clone","","",2,[[["self"]],["isaac64core"]]],[11,"generate","rand_isaac::isaac","Refills the output buffer, `results`. See also the…",3,[[["self"],["isaacarray"]]]],[11,"generate","rand_isaac::isaac64","Refills the output buffer, `results`. See also the…",2,[[["self"],["isaacarray"]]]],[11,"next_u32","rand_isaac::isaac","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"next_u32","rand_isaac::isaac64","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"from_seed","rand_isaac::isaac","",0,[[],["self"]]],[11,"seed_from_u64","","Create an ISAAC random number generator using an `u64` as…",0,[[["u64"]],["self"]]],[11,"from_rng","","",0,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",3,[[],["self"]]],[11,"seed_from_u64","","Create an ISAAC random number generator using an `u64` as…",3,[[["u64"]],["self"]]],[11,"from_rng","","",3,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","rand_isaac::isaac64","",1,[[],["self"]]],[11,"seed_from_u64","","Create an ISAAC random number generator using an `u64` as…",1,[[["u64"]],["self"]]],[11,"from_rng","","",1,[[["rngcore"]],[["result",["error"]],["error"]]]],[11,"from_seed","","",2,[[],["self"]]],[11,"seed_from_u64","","",2,[[["u64"]],["self"]]],[11,"from_rng","","",2,[[["rngcore"]],[["result",["error"]],["error"]]]]],"p":[[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"IsaacCore"]]};
searchIndex["rand_jitter"] = {"doc":"Non-physical true random number generator based on timing…","i":[[3,"JitterRng","rand_jitter","A true random number generator based on jitter in the CPU…",null,null],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`]…",null,null],[13,"NoTimer","","No timer available.",0,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",0,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",0,null],[13,"TinyVariantions","","Variations of deltas of time too small.",0,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",0,null],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a…",1,[[],[["result",["jitterrng","timererror"]],["timererror"],["jitterrng"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied,…",1,[[],["jitterrng"]]],[11,"set_rounds","","Configures how many rounds are used to generate each…",1,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing…",1,[[["self"]],[["result",["u8","timererror"]],["timererror"],["u8"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run…",1,[[["self"],["bool"]],["i64"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"],["timererror"]],["bool"]]],[11,"clone","","",0,[[["self"]],["timererror"]]],[11,"clone","","",1,[[["self"]],["jitterrng"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["error"],["result",["error"]]]]]],"p":[[4,"TimerError"],[3,"JitterRng"]]};
searchIndex["rand_os"] = {"doc":"Interface to the random number generator of the operating…","i":[[3,"OsRng","rand_os","A random number generator that retrieves randomness…",null,null],[11,"new","","Create a new `OsRng`.",0,[[],[["error"],["result",["osrng","error"]],["osrng"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["osrng"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]]],"p":[[3,"OsRng"]]};
searchIndex["rand_pcg"] = {"doc":"The PCG random number generators.","i":[[3,"Lcg64Xsh32","rand_pcg","A PCG random number generator (XSH RR 64/32 (LCG) variant).",null,null],[3,"Mcg128Xsl64","","A PCG random number generator (XSL 128/64 (MCG) variant).",null,null],[11,"new","","Construct an instance compatible with PCG seed and stream.",0,[[["u64"]],["self"]]],[11,"new","","Construct an instance compatible with PCG seed.",1,[[["u128"]],["self"]]],[6,"Pcg32","","`Lcg64Xsh32` is also officially known as `pcg32`.",null,null],[6,"Pcg64Mcg","","A friendly name for `Mcg128Xsl64`.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["lcg64xsh32"]]],[11,"clone","","",1,[[["self"]],["mcg128xsl64"]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"next_u32","","",1,[[["self"]],["u32"]]],[11,"next_u64","","",1,[[["self"]],["u64"]]],[11,"fill_bytes","","",1,[[["self"]]]],[11,"try_fill_bytes","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"from_seed","","",0,[[],["self"]]],[11,"from_seed","","",1,[[],["self"]]]],"p":[[3,"Lcg64Xsh32"],[3,"Mcg128Xsl64"]]};
searchIndex["rand_xorshift"] = {"doc":"The xorshift random number generator.","i":[[3,"XorShiftRng","rand_xorshift","An Xorshift random number generator.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["xorshiftrng"]]],[11,"next_u32","","",0,[[["self"]],["u32"]]],[11,"next_u64","","",0,[[["self"]],["u64"]]],[11,"fill_bytes","","",0,[[["self"]]]],[11,"try_fill_bytes","","",0,[[["self"]],[["error"],["result",["error"]]]]],[11,"from_seed","","",0,[[],["self"]]],[11,"from_rng","","",0,[[["rngcore"]],[["result",["error"]],["error"]]]]],"p":[[3,"XorShiftRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and…","i":[[3,"RegexSetBuilder","regex","A configurable builder for a set of regular expressions.",null,null],[3,"RegexBuilder","","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions…",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex…",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw…",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups…",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured strings for a…",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a…",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"Split","","Yields all substrings delimited by a regular expression…",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular…",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order…",null,null],[4,"Error","","An error that occurred during parsing or compiling a…",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The…",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,[[["str"]],["string"]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a…",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups…",null,null],[3,"Split","","Yields all substrings delimited by a regular expression…",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular…",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"CaptureLocations","","CaptureLocations is a low level representation of the raw…",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a…",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order…",null,null],[3,"ReplacerRef","","By-reference adaptor for a `Replacer`",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions…",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex…",null,null],[8,"Replacer","","Replacer describes types that can be used to replace…",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],[["cow"],["option",["cow"]]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"new","","Create a new regular expression builder with the given…",4,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",4,[[["self"]],[["result",["regex","error"]],["regex"],["error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in…",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular…",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",4,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given…",5,[[["str"]],["regexbuilder"]]],[11,"build","","Consume the builder and compile the regular expression.",5,[[["self"]],[["regex"],["error"],["result",["regex","error"]]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in…",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular…",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",5,[[["self"],["u32"]],["regexbuilder"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given…",6,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions…",6,[[["self"]],[["result",["regexset","error"]],["regexset"],["error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in…",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",6,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular…",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",6,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given…",7,[[["i"]],["regexsetbuilder"]]],[11,"build","","Consume the builder and compile the regular expressions…",7,[[["self"]],[["regexset"],["error"],["result",["regexset","error"]]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in…",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",7,[[["self"],["bool"]],["regexsetbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular…",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,[[["self"],["usize"]],["regexsetbuilder"]]],[11,"nest_limit","","Set the nesting limit for this parser.",7,[[["self"],["u32"]],["regexsetbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],[["cow"],["option",["cow"]]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",3,[[["self"]],["replacerref"]]],[11,"start","","Returns the starting byte offset of the match in the…",8,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,[[["self"]],["usize"]]],[11,"as_bytes","","Returns the matched text.",8,[[["self"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be…",9,[[["str"]],[["result",["regex","error"]],["regex"],["error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string…",9,[[["self"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first…",9,[[["self"]],[["match"],["option",["match"]]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping…",9,[[["self"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the…",9,[[["self"]],[["option",["captures"]],["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture…",9,[[["self"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a…",9,[[["self"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of…",9,[[["self"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement…",9,[[["self"],["replacer"]],["cow"]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the…",9,[[["self"],["replacer"]],["cow"]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text`…",9,[[["usize"],["replacer"],["self"]],["cow"]]],[11,"shortest_match","","Returns the end location of a match in the text given.",9,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search…",9,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the…",9,[[["self"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the…",9,[[["self"],["usize"]],[["match"],["option",["match"]]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations`…",9,[[["self"],["capturelocations"]],[["match"],["option",["match"]]]]],[11,"captures_read_at","","Returns the same as `captures_read`, but starts the search…",9,[[["usize"],["self"],["capturelocations"]],[["match"],["option",["match"]]]]],[11,"as_str","","Returns the original string of this regex.",9,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",9,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",9,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be…",9,[[["self"]],["capturelocations"]]],[11,"get","","Returns the start and end positions of the Nth capture…",10,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",10,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at…",11,[[["self"],["usize"]],[["match"],["option",["match"]]]]],[11,"name","","Returns the match for the capture group named `name`. If…",11,[[["str"],["self"]],[["match"],["option",["match"]]]]],[11,"iter","","An iterator that yields all capturing matches in the order…",11,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the…",11,[[["self"],["vec"]]]],[11,"len","","Returns the number of captured groups.",11,[[["self"]],["usize"]]],[11,"new","regex","Create a new regex set with the given regular expressions.",12,[[["i"]],[["regexset"],["error"],["result",["regexset","error"]]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set…",12,[[["str"],["self"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the…",12,[[["str"],["self"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",12,[[["self"]],["usize"]]],[11,"patterns","","Returns the patterns that this set will match on.",12,[[["self"]]]],[11,"matched_any","","Whether this set contains any matches.",13,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",13,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these…",13,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",13,[[["self"]],["setmatchesiter"]]],[11,"new","regex::bytes","Create a new regex set with the given regular expressions.",14,[[["i"]],[["result",["regexset","error"]],["regexset"],["error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set…",14,[[["self"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the…",14,[[["self"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",14,[[["self"]],["usize"]]],[11,"patterns","","Returns the patterns that this set will match on.",14,[[["self"]]]],[11,"matched_any","","Whether this set contains any matches.",15,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",15,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these…",15,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",15,[[["self"]],["setmatchesiter"]]],[11,"start","regex","Returns the starting byte offset of the match in the…",16,[[["self"]],["usize"]]],[11,"end","","Returns the ending byte offset of the match in the haystack.",16,[[["self"]],["usize"]]],[11,"as_str","","Returns the matched text.",16,[[["self"]],["str"]]],[11,"new","","Compiles a regular expression. Once compiled, it can be…",17,[[["str"]],[["regex"],["error"],["result",["regex","error"]]]]],[11,"is_match","","Returns true if and only if the regex matches the string…",17,[[["str"],["self"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first…",17,[[["str"],["self"]],[["option",["match"]],["match"]]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping…",17,[[["str"],["self"]],["matches"]]],[11,"captures","","Returns the capture groups corresponding to the…",17,[[["str"],["self"]],[["captures"],["option",["captures"]]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture…",17,[[["str"],["self"]],["capturematches"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a…",17,[[["str"],["self"]],["split"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of…",17,[[["str"],["self"],["usize"]],["splitn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement…",17,[[["str"],["self"],["replacer"]],[["str"],["cow",["str"]]]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the…",17,[[["str"],["self"],["replacer"]],[["str"],["cow",["str"]]]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text`…",17,[[["usize"],["replacer"],["str"],["self"]],[["str"],["cow",["str"]]]]],[11,"shortest_match","","Returns the end location of a match in the text given.",17,[[["str"],["self"]],[["option",["usize"]],["usize"]]]],[11,"shortest_match_at","","Returns the same as shortest_match, but starts the search…",17,[[["str"],["self"],["usize"]],[["option",["usize"]],["usize"]]]],[11,"is_match_at","","Returns the same as is_match, but starts the search at the…",17,[[["str"],["self"],["usize"]],["bool"]]],[11,"find_at","","Returns the same as find, but starts the search at the…",17,[[["str"],["self"],["usize"]],[["option",["match"]],["match"]]]],[11,"captures_read","","This is like `captures`, but uses `CaptureLocations`…",17,[[["capturelocations"],["self"],["str"]],[["option",["match"]],["match"]]]],[11,"captures_read_at","","Returns the same as captures, but starts the search at the…",17,[[["capturelocations"],["usize"],["str"],["self"]],[["option",["match"]],["match"]]]],[11,"as_str","","Returns the original string of this regex.",17,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",17,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",17,[[["self"]],["usize"]]],[11,"capture_locations","","Returns an empty set of capture locations that can be…",17,[[["self"]],["capturelocations"]]],[11,"get","","Returns the start and end positions of the Nth capture…",18,[[["self"],["usize"]],["option"]]],[11,"len","","Returns the total number of capturing groups.",18,[[["self"]],["usize"]]],[11,"get","","Returns the match associated with the capture group at…",19,[[["self"],["usize"]],[["option",["match"]],["match"]]]],[11,"name","","Returns the match for the capture group named `name`. If…",19,[[["str"],["self"]],[["option",["match"]],["match"]]]],[11,"iter","","An iterator that yields all capturing matches in the order…",19,[[["self"]],["subcapturematches"]]],[11,"expand","","Expands all instances of `$name` in `replacement` to the…",19,[[["str"],["self"],["string"]]]],[11,"len","","Returns the number of captured groups.",19,[[["self"]],["usize"]]],[8,"Replacer","","Replacer describes types that can be used to replace…",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",20,[[["captures"],["self"],["string"]]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",20,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",20,[[["self"]],["replacerref"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"into_iter","","",21,[[],["i"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"into_iter","","",22,[[],["i"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"into_iter","","",23,[[],["i"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"into_iter","","",25,[[],["i"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"into_iter","","",27,[[],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"into_iter","","",29,[[],["i"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","regex::bytes","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"into_iter","","",30,[[],["i"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"into_iter","","",31,[[],["i"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"into_iter","","",32,[[],["i"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"into_iter","","",33,[[],["i"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"into_iter","","",34,[[],["i"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"into_iter","","",35,[[],["i"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"into_iter","","",15,[[],["i"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"into_iter","","",37,[[],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"into_iter","","",38,[[],["i"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"replace_append","","",36,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",36,[[["self"]],[["cow"],["option",["cow"]]]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],[["option",["cow"]],["cow"]]]],[11,"replace_append","regex","",26,[[["captures"],["self"],["string"]]]],[11,"no_expansion","","",26,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"replace_append","","",0,[[["captures"],["self"],["string"]]]],[11,"no_expansion","","",0,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"next_back","","",21,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_back","","",22,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_back","regex::bytes","",37,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_back","","",38,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"into_iter","regex","",13,[[]]],[11,"into_iter","regex::bytes","",15,[[]]],[11,"next","","",30,[[["self"]],[["match"],["option",["match"]]]]],[11,"next","","",31,[[["self"]],[["option",["captures"]],["captures"]]]],[11,"next","","",32,[[["self"]],["option"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"next","","",34,[[["self"]],[["option",["str"]],["option",["option"]]]]],[11,"size_hint","","",34,[[["self"]]]],[11,"next","","",35,[[["self"]],[["option",["option"]],["option",["match"]]]]],[11,"next","regex","",21,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",21,[[["self"]]]],[11,"next","","",22,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",22,[[["self"]]]],[11,"next","regex::bytes","",37,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",37,[[["self"]]]],[11,"next","","",38,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"size_hint","","",38,[[["self"]]]],[11,"next","regex","",24,[[["self"]],[["option",["str"]],["option",["option"]]]]],[11,"size_hint","","",24,[[["self"]]]],[11,"next","","",27,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","","",28,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","","",29,[[["self"]],[["option",["option"]],["option",["match"]]]]],[11,"next","","",23,[[["self"]],[["captures"],["option",["captures"]]]]],[11,"next","","",25,[[["self"]],[["option",["match"]],["match"]]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"clone","regex::bytes","",8,[[["self"]],["match"]]],[11,"clone","","",9,[[["self"]],["regex"]]],[11,"clone","","",10,[[["self"]],["capturelocations"]]],[11,"clone","regex","",12,[[["self"]],["regexset"]]],[11,"clone","","",13,[[["self"]],["setmatches"]]],[11,"clone","","",22,[[["self"]],["setmatchesiter"]]],[11,"clone","regex::bytes","",14,[[["self"]],["regexset"]]],[11,"clone","","",15,[[["self"]],["setmatches"]]],[11,"clone","","",38,[[["self"]],["setmatchesiter"]]],[11,"clone","regex","",16,[[["self"]],["match"]]],[11,"clone","","",17,[[["self"]],["regex"]]],[11,"clone","","",18,[[["self"]],["capturelocations"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"eq","regex::bytes","",8,[[["match"],["self"]],["bool"]]],[11,"ne","","",8,[[["match"],["self"]],["bool"]]],[11,"eq","regex","",16,[[["self"],["match"]],["bool"]]],[11,"ne","","",16,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Shows the original regular expression.",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex::bytes","Shows the original regular expression.",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex","Shows the original regular expression.",17,[[["self"],["formatter"]],["result"]]],[11,"index","regex::bytes","",11,[[["self"],["usize"]]]],[11,"index","","",11,[[["str"],["self"]]]],[11,"index","regex","",19,[[["self"],["usize"]],["str"]]],[11,"index","","",19,[[["str"],["self"]],["str"]]],[11,"from_str","regex::bytes","Attempts to parse a string into a regular expression",9,[[["str"]],[["result",["regex","error"]],["regex"],["error"]]]],[11,"from_str","regex","Attempts to parse a string into a regular expression",17,[[["str"]],[["regex"],["error"],["result",["regex","error"]]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"no_expansion","","Return a fixed unchanging replacement string.",20,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"by_ref","","Return a `Replacer` that borrows and wraps this `Replacer`.",20,[[["self"]],["replacerref"]]]],"p":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[8,"Replacer"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureMatches"],[3,"CaptureNames"],[3,"Matches"],[3,"ReplacerRef"],[3,"Split"],[3,"SplitN"],[3,"SubCaptureMatches"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a robust regular expression parser.","i":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",null,null],[3,"ParserBuilder","","A builder for a regular expression parser.",null,null],[3,"UnicodeWordError","","An error that occurs when the Unicode-aware `\\w` class is…",null,null],[4,"Error","","This error type encompasses any error that can be returned…",null,null],[13,"Parse","","An error that occurred while translating concrete syntax…",0,null],[13,"Translate","","An error that occurred while translating abstract syntax…",0,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the…",null,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a…",null,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a…",null,[[["char"]],["bool"]]],[5,"try_is_word_character","","Returns true if and only if the given character is a…",null,[[["char"]],[["unicodeworderror"],["result",["bool","unicodeworderror"]],["bool"]]]],[5,"is_word_byte","","Returns true if and only if the given character is an…",null,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",null,null],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression…",null,null],[3,"Span","","Span represents the position information of a single AST…",null,null],[12,"start","","The start byte offset.",1,null],[12,"end","","The end byte offset.",1,null],[3,"Position","","A single position in a regular expression.",null,null],[12,"offset","","The absolute offset of this position, starting at `0` from…",2,null],[12,"line","","The line number, starting at `1`.",2,null],[12,"column","","The approximate column number, starting at `1`.",2,null],[3,"WithComments","","An abstract syntax tree for a singular expression along…",null,null],[12,"ast","","The actual ast.",3,null],[12,"comments","","All comments found in the original regular expression.",3,null],[3,"Comment","","A comment from a regular expression with an associated span.",null,null],[12,"span","","The span of this comment, including the beginning `#` and…",4,null],[12,"comment","","The comment text, starting with the first character…",4,null],[3,"Alternation","","An alternation of regular expressions.",null,null],[12,"span","","The span of this alternation.",5,null],[12,"asts","","The alternate regular expressions.",5,null],[3,"Concat","","A concatenation of regular expressions.",null,null],[12,"span","","The span of this concatenation.",6,null],[12,"asts","","The concatenation regular expressions.",6,null],[3,"Literal","","A single literal expression.",null,null],[12,"span","","The span of this literal.",7,null],[12,"kind","","The kind of this literal.",7,null],[12,"c","","The Unicode scalar value corresponding to this literal.",7,null],[3,"ClassPerl","","A Perl character class.",null,null],[12,"span","","The span of this class.",8,null],[12,"kind","","The kind of Perl class.",8,null],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not…",8,null],[3,"ClassAscii","","An ASCII character class.",null,null],[12,"span","","The span of this class.",9,null],[12,"kind","","The kind of ASCII class.",9,null],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]`…",9,null],[3,"ClassUnicode","","A Unicode character class.",null,null],[12,"span","","The span of this class.",10,null],[12,"negated","","Whether this class is negated or not.",10,null],[12,"kind","","The kind of Unicode class.",10,null],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",null,null],[12,"span","","The span of this class.",11,null],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not…",11,null],[12,"kind","","The type of this set. A set is either a normal union of…",11,null],[3,"ClassSetRange","","A single character class range in a set.",null,null],[12,"span","","The span of this range.",12,null],[12,"start","","The start of this range.",12,null],[12,"end","","The end of this range.",12,null],[3,"ClassSetUnion","","A union of items inside a character class set.",null,null],[12,"span","","The span of the items in this operation. e.g., the…",13,null],[12,"items","","The sequence of items that make up this union.",13,null],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",null,null],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in…",14,null],[12,"kind","","The type of this set operation.",14,null],[12,"lhs","","The left hand side of the operation.",14,null],[12,"rhs","","The right hand side of the operation.",14,null],[3,"Assertion","","A single zero-width assertion.",null,null],[12,"span","","The span of this assertion.",15,null],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,null],[3,"Repetition","","A repetition operation applied to a regular expression.",null,null],[12,"span","","The span of this operation.",16,null],[12,"op","","The actual operation.",16,null],[12,"greedy","","Whether this operation was applied greedily or not.",16,null],[12,"ast","","The regular expression under repetition.",16,null],[3,"RepetitionOp","","The repetition operator itself.",null,null],[12,"span","","The span of this operator. This includes things like `+`,…",17,null],[12,"kind","","The type of operation.",17,null],[3,"Group","","A grouped regular expression.",null,null],[12,"span","","The span of this group.",18,null],[12,"kind","","The kind of this group.",18,null],[12,"ast","","The regular expression in this group.",18,null],[3,"CaptureName","","A capture name.",null,null],[12,"span","","The span of this capture name.",19,null],[12,"name","","The capture name.",19,null],[12,"index","","The capture index.",19,null],[3,"SetFlags","","A group of flags that is not applied to a particular…",null,null],[12,"span","","The span of these flags, including the grouping parentheses.",20,null],[12,"flags","","The actual sequence of flags.",20,null],[3,"Flags","","A group of flags.",null,null],[12,"span","","The span of this group of flags.",21,null],[12,"items","","A sequence of flag items. Each item is either a flag or a…",21,null],[3,"FlagsItem","","A single item in a group of flags.",null,null],[12,"span","","The span of this item.",22,null],[12,"kind","","The kind of this item.",22,null],[4,"ErrorKind","","The type of an error that occurred while building an AST.",null,null],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,null],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class…",23,null],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid…",23,null],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class.…",23,null],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,null],[13,"DecimalEmpty","","Note that this error variant is no longer used. Namely, a…",23,null],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,null],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,null],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode…",23,null],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,null],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,null],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,null],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,null],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position…",23,null],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error…",23,null],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,null],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,null],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,null],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture…",23,null],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,null],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name.…",23,null],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,null],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,null],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,null],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the…",23,null],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is…",23,null],[13,"RepetitionCountDecimalEmpty","","An opening `{` was not followed by a valid decimal value.…",23,null],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,null],[13,"RepetitionMissing","","A repetition operator was applied to a missing…",23,null],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced…",23,null],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this…",23,null],[4,"Ast","","An abstract syntax tree for a single regular expression.",null,null],[13,"Empty","","An empty regex that matches everything.",24,null],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,null],[13,"Literal","","A single character literal, which includes escape sequences.",24,null],[13,"Dot","","The \"any character\" class.",24,null],[13,"Assertion","","A single zero-width assertion.",24,null],[13,"Class","","A single character class. This includes all forms of…",24,null],[13,"Repetition","","A repetition operator applied to an arbitrary regular…",24,null],[13,"Group","","A grouped regular expression.",24,null],[13,"Alternation","","An alternation of regular expressions.",24,null],[13,"Concat","","A concatenation of regular expressions.",24,null],[4,"LiteralKind","","The kind of a single literal expression.",null,null],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,null],[13,"Punctuation","","The literal is written as an escape because it is…",25,null],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,null],[13,"HexFixed","","The literal is written as a hex code with a fixed number…",25,null],[13,"HexBrace","","The literal is written as a hex code with a bracketed…",25,null],[13,"Special","","The literal is written as a specially recognized escape,…",25,null],[4,"SpecialLiteralKind","","The type of a special literal.",null,null],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,null],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,null],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,null],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,null],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,null],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,null],[13,"Space","","Space, spelled `\\ ` (`\\x20`). Note that this can only…",26,null],[4,"HexLiteralKind","","The type of a Unicode hex literal.",null,null],[13,"X","","A `\\x` prefix. When used without brackets, this form is…",27,null],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is…",27,null],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is…",27,null],[4,"Class","","A single character class expression.",null,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or…",28,null],[4,"ClassPerlKind","","The available Perl character classes.",null,null],[13,"Digit","","Decimal numbers.",29,null],[13,"Space","","Whitespace.",29,null],[13,"Word","","Word characters.",29,null],[4,"ClassAsciiKind","","The available ASCII character classes.",null,null],[13,"Alnum","","`[0-9A-Za-z]`",30,null],[13,"Alpha","","`[A-Za-z]`",30,null],[13,"Ascii","","`[\\x00-\\x7F]`",30,null],[13,"Blank","","`[ \\t]`",30,null],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,null],[13,"Digit","","`[0-9]`",30,null],[13,"Graph","","`[!-~]`",30,null],[13,"Lower","","`[a-z]`",30,null],[13,"Print","","`[ -~]`",30,null],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,null],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,null],[13,"Upper","","`[A-Z]`",30,null],[13,"Word","","`[0-9A-Za-z_]`",30,null],[13,"Xdigit","","`[0-9A-Fa-f]`",30,null],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",null,null],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,null],[13,"Named","","A binary property, general category or script. The string…",31,null],[13,"NamedValue","","A property name and an associated value.",31,null],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with…",31,null],[12,"name","","The property name (which may be empty).",31,null],[12,"value","","The property value (which may be empty).",31,null],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",null,null],[13,"Equal","","A property set to a specific value, e.g.,…",32,null],[13,"Colon","","A property set to a specific value using a colon, e.g.,…",32,null],[13,"NotEqual","","A property that isn't a particular value, e.g.,…",32,null],[4,"ClassSet","","A character class set.",null,null],[13,"Item","","An item, which can be a single literal, range, nested…",33,null],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,null],[4,"ClassSetItem","","A single component of a character class set.",null,null],[13,"Empty","","An empty item.",34,null],[13,"Literal","","A single literal.",34,null],[13,"Range","","A range between two literals.",34,null],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,null],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,null],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,null],[13,"Bracketed","","A bracketed character class set, which may contain zero or…",34,null],[13,"Union","","A union of items.",34,null],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",null,null],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,null],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,null],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric…",35,null],[4,"AssertionKind","","An assertion kind.",null,null],[13,"StartLine","","`^`",36,null],[13,"EndLine","","`$`",36,null],[13,"StartText","","`\\A`",36,null],[13,"EndText","","`\\z`",36,null],[13,"WordBoundary","","`\\b`",36,null],[13,"NotWordBoundary","","`\\B`",36,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","`?`",37,null],[13,"ZeroOrMore","","`*`",37,null],[13,"OneOrMore","","`+`",37,null],[13,"Range","","`{m,n}`",37,null],[4,"RepetitionRange","","A range repetition operator.",null,null],[13,"Exactly","","`{m}`",38,null],[13,"AtLeast","","`{m,}`",38,null],[13,"Bounded","","`{m,n}`",38,null],[4,"GroupKind","","The kind of a group.",null,null],[13,"CaptureIndex","","`(a)`",39,null],[13,"CaptureName","","`(?P<name>a)`",39,null],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,null],[4,"FlagsItemKind","","The kind of an item in a group of flags.",null,null],[13,"Negation","","A negation operator applied to all subsequent flags in the…",40,null],[13,"Flag","","A single flag in a group.",40,null],[4,"Flag","","A single flag.",null,null],[13,"CaseInsensitive","","`i`",41,null],[13,"MultiLine","","`m`",41,null],[13,"DotMatchesNewLine","","`s`",41,null],[13,"SwapGreed","","`U`",41,null],[13,"Unicode","","`u`",41,null],[13,"IgnoreWhitespace","","`x`",41,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack…",null,[[["ast"],["visitor"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",null,null],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",null,null],[3,"Parser","","A regular expression parser.",null,null],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given…",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["str"],["self"]],[["ast"],["error"],["result",["ast","error"]]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax…",43,[[["str"],["self"]],[["error"],["result",["withcomments","error"]],["withcomments"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",null,null],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",null,null],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must…",44,[[["ast"],["self"],["write"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in…",null,null],[16,"Output","","The result of visiting an AST.",45,null],[16,"Err","","An error that visiting an AST might return.",45,null],[10,"finish","","All implementors of `Visitor` must provide a `finish`…",45,[[],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into…",45,[[["ast"],["self"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of…",45,[[["ast"],["self"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an…",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before…",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after…",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some…",46,[[["self"]],[["span"],["option",["span"]]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start…",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position…",1,[[["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position…",1,[[["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single…",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is,…",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"]],["position"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[],["ast"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[],["ast"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then…",7,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"digits","","The number of digits that must be used with this literal…",27,[[["self"]],["u32"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the…",30,[[["str"]],[["option",["classasciikind"]],["classasciikind"]]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"is_valid","","Returns true if and only if this character class range is…",12,[[["self"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[],["classsetitem"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the…",18,[[["self"]],[["flags"],["option",["flags"]]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a…",18,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["flagsitem"],["self"]],[["option",["usize"]],["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],[["option",["bool"]],["bool"]]]],[11,"is_negation","","Returns true if and only if this item is a negation…",40,[[["self"]],["bool"]]],[0,"hir","regex_syntax","Defines a high-level intermediate representation for…",null,null],[3,"CaseFoldError","regex_syntax::hir","An error that occurs when Unicode-aware simple case…",null,null],[3,"Error","","An error that can occur while translating an `Ast` to a…",null,null],[3,"Hir","","A high-level intermediate representation (HIR) for a…",null,null],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",null,null],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",null,null],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar…",null,null],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where…",null,null],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",null,null],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",null,null],[3,"Group","","The high-level intermediate representation for a group.",null,null],[12,"kind","","The kind of this group. If it is a capturing group, then…",47,null],[12,"hir","","The expression inside the capturing group, which may be…",47,null],[3,"Repetition","","The high-level intermediate representation of a repetition…",null,null],[12,"kind","","The kind of this repetition operator.",48,null],[12,"greedy","","Whether this repetition operator is greedy or not. A…",48,null],[12,"hir","","The expression being repeated.",48,null],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",null,null],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when…",49,null],[13,"InvalidUtf8","","This error occurs when translating a pattern that could…",49,null],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name…",49,null],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value…",49,null],[13,"UnicodePerlClassNotFound","","This occurs when a Unicode-aware Perl character class…",49,null],[13,"UnicodeCaseUnavailable","","This occurs when the Unicode simple case mapping tables…",49,null],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a…",49,null],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",null,null],[13,"Empty","","The empty regular expression, which matches everything,…",50,null],[13,"Literal","","A single literal character that matches exactly this…",50,null],[13,"Class","","A single character class that matches any of the…",50,null],[13,"Anchor","","An anchor assertion. An anchor assertion match always has…",50,null],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode…",50,null],[13,"Repetition","","A repetition operation applied to a child expression.",50,null],[13,"Group","","A possibly capturing group, which contains a child…",50,null],[13,"Concat","","A concatenation of expressions. A concatenation always has…",50,null],[13,"Alternation","","An alternation of expressions. An alternation always has…",50,null],[4,"Literal","","The high-level intermediate representation of a literal.",null,null],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,null],[13,"Byte","","A single character represented by an arbitrary byte.",51,null],[4,"Class","","The high-level intermediate representation of a character…",null,null],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,null],[13,"Bytes","","A set of characters represented by arbitrary bytes (one…",52,null],[4,"Anchor","","The high-level intermediate representation for an anchor…",null,null],[13,"StartLine","","Match the beginning of a line or the beginning of text.…",53,null],[13,"EndLine","","Match the end of a line or the end of text. Specifically,…",53,null],[13,"StartText","","Match the beginning of text. Specifically, this matches at…",53,null],[13,"EndText","","Match the end of text. Specifically, this matches at the…",53,null],[4,"WordBoundary","","The high-level intermediate representation for a…",null,null],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches…",54,null],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,null],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a…",54,null],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,null],[4,"GroupKind","","The kind of group.",null,null],[13,"CaptureIndex","","A normal unnamed capturing group.",55,null],[13,"CaptureName","","A named capturing group.",55,null],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,null],[12,"index","","The capture index of the group.",55,null],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,null],[4,"RepetitionKind","","The kind of a repetition operator.",null,null],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,null],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,null],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,null],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,null],[4,"RepetitionRange","","The kind of a counted repetition operator.",null,null],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,null],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,null],[13,"Bounded","","Matches a sub-expression at least `m` times and at most…",57,null],[5,"visit","","Executes an implementation of `Visitor` in constant stack…",null,[[["visitor"],["hir"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and…",null,null],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular…",null,null],[3,"Literal","","A single member of a set of literals extracted from a…",null,null],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given…",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given…",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is…",58,[[["self"]]]],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members…",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this…",58,[[["self"]]]],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this…",58,[[["self"]]]],[11,"trim_suffix","","Returns a new set of literals with the given number of…",58,[[["self"],["usize"]],[["option",["literals"]],["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that…",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that…",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["literals"],["self"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,[[["self"]],["bool"]]],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class…",58,[[["classunicode"],["self"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it…",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]],["u8"]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",null,null],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level…",null,null],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must…",60,[[["write"],["self"],["hir"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",null,null],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",null,null],[3,"Translator","","A translator maps abstract syntax to a high level…",null,null],[11,"new","","Create a new translator builder with a default c…",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of…",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by…",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by…",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag…",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high…",62,[[["str"],["self"],["ast"]],[["hir"],["error"],["result",["hir","error"]]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth…",null,null],[16,"Output","","The result of visiting an HIR.",63,null],[16,"Err","","An error that visiting an HIR might return.",63,null],[10,"finish","","All implementors of `Visitor` must provide a `finish`…",63,[[],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into…",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of…",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its…",65,[[],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match…",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is…",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match…",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match…",65,[[["self"]],["bool"]]],[11,"is_line_anchored_start","","Return true if and only if this HIR is required to match…",65,[[["self"]],["bool"]]],[11,"is_line_anchored_end","","Return true if and only if this HIR is required to match…",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any…",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any…",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the…",65,[[["self"]],["bool"]]],[11,"is_literal","","Return true if and only if this HIR is a simple literal.…",65,[[["self"]],["bool"]]],[11,"is_alternation_literal","","Return true if and only if this HIR is either a simple…",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular…",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including…",50,[[["self"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a…",51,[[["self"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class,…",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only…",52,[[["self"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["classunicoderange"],["self"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,[[["self"]]]],[11,"case_fold_simple","","Expand this character class such that it contains all case…",66,[[["self"]]]],[11,"try_case_fold_simple","","Expand this character class such that it contains all case…",66,[[["self"]],[["casefolderror"],["result",["casefolderror"]]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class,…",66,[[["classunicode"],["self"]]]],[11,"intersect","","Intersect this character class with the given character…",66,[[["classunicode"],["self"]]]],[11,"difference","","Subtract the given character class from this character…",66,[[["classunicode"],["self"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character…",66,[[["classunicode"],["self"]]]],[11,"new","","Create a new Unicode scalar value range for a character…",67,[[["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",67,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",67,[[["self"]],["char"]]],[11,"new","","Create a new class from a sequence of ranges.",68,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",68,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",68,[[["classbytesrange"],["self"]]]],[11,"iter","","Return an iterator over all ranges in this class.",68,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",68,[[["self"]]]],[11,"case_fold_simple","","Expand this character class such that it contains all case…",68,[[["self"]]]],[11,"negate","","Negate this byte class.",68,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",68,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in…",68,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in…",68,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte…",68,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will…",68,[[["self"]],["bool"]]],[11,"new","","Create a new byte range for a character class.",69,[[["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",69,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",69,[[["self"]],["u8"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion…",54,[[["self"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes…",48,[[["self"]],["bool"]]],[11,"new","regex_syntax","Create a new parser builder with a default configuration.",70,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given…",70,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",70,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a…",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by…",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",70,[[["self"],["bool"]],["parserbuilder"]]],[11,"new","","Create a new parser with a default configuration.",71,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level…",71,[[["str"],["self"]],[["hir"],["result",["hir"]]]]],[0,"utf8","","Converts ranges of Unicode scalar values to equivalent…",null,null],[3,"Utf8Range","regex_syntax::utf8","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",72,null],[12,"end","","End of byte range (inclusive).",72,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",73,null],[13,"Two","","Two successive byte ranges.",73,null],[13,"Three","","Three successive byte ranges.",73,null],[13,"Four","","Four successive byte ranges.",73,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",73,[[["self"]]]],[11,"len","","Returns the number of byte ranges in this sequence.",73,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches…",73,[[["self"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",72,[[["self"],["u8"]],["bool"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the…",74,[[["char"]],["self"]]],[6,"Result","regex_syntax","A type alias for dealing with errors returned by this crate.",null,null],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_string","","",75,[[["self"]],["string"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","regex_syntax::ast","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"to_string","","",46,[[["self"]],["string"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","regex_syntax::ast::parse","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","regex_syntax::ast::print","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","regex_syntax::hir","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_string","","",76,[[["self"]],["string"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"into_iter","","",77,[[],["i"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"into_iter","","",78,[[],["i"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"to_string","","",49,[[["self"]],["string"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","regex_syntax::hir::literal","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","regex_syntax::hir::print","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","regex_syntax::hir::translate","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","regex_syntax::utf8","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"into_iter","","",74,[[],["i"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"drop","regex_syntax::ast","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"drop","regex_syntax::hir","",65,[[["self"]]]],[11,"as_ref","regex_syntax::hir::literal","",59,[[["self"]]]],[11,"from","regex_syntax","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"next","regex_syntax::hir","",77,[[["self"]],[["option",["classunicoderange"]],["classunicoderange"]]]],[11,"next","","",78,[[["self"]],[["classbytesrange"],["option",["classbytesrange"]]]]],[11,"next","regex_syntax::utf8","",74,[[["self"]],["option"]]],[11,"clone","regex_syntax::ast::parse","",42,[[["self"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"clone","regex_syntax::ast","",46,[[["self"]],["error"]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"clone","regex_syntax::hir::literal","",58,[[["self"]],["literals"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"clone","regex_syntax::hir::translate","",61,[[["self"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"clone","regex_syntax::hir","",64,[[["self"]],["error"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"clone","","",67,[[["self"]],["classunicoderange"]]],[11,"clone","","",68,[[["self"]],["classbytes"]]],[11,"clone","","",69,[[["self"]],["classbytesrange"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"clone","regex_syntax","",70,[[["self"]],["parserbuilder"]]],[11,"clone","","",71,[[["self"]],["parser"]]],[11,"clone","regex_syntax::utf8","",73,[[["self"]],["utf8sequence"]]],[11,"clone","","",72,[[["self"]],["utf8range"]]],[11,"default","regex_syntax::ast::parse","",42,[[],["parserbuilder"]]],[11,"default","regex_syntax::hir::translate","",61,[[],["translatorbuilder"]]],[11,"default","regex_syntax::hir","",67,[[],["classunicoderange"]]],[11,"default","","",69,[[],["classbytesrange"]]],[11,"default","regex_syntax","",70,[[],["parserbuilder"]]],[11,"cmp","regex_syntax::ast","",1,[[["span"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"cmp","regex_syntax::hir::literal","",59,[[["literal"],["self"]],["ordering"]]],[11,"cmp","regex_syntax::hir","",67,[[["classunicoderange"],["self"]],["ordering"]]],[11,"cmp","","",69,[[["self"],["classbytesrange"]],["ordering"]]],[11,"cmp","regex_syntax::utf8","",73,[[["utf8sequence"],["self"]],["ordering"]]],[11,"cmp","","",72,[[["self"],["utf8range"]],["ordering"]]],[11,"eq","regex_syntax::ast","",46,[[["error"],["self"]],["bool"]]],[11,"ne","","",46,[[["error"],["self"]],["bool"]]],[11,"eq","","",23,[[["errorkind"],["self"]],["bool"]]],[11,"ne","","",23,[[["errorkind"],["self"]],["bool"]]],[11,"eq","","",1,[[["span"],["self"]],["bool"]]],[11,"ne","","",1,[[["span"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"eq","","",3,[[["withcomments"],["self"]],["bool"]]],[11,"ne","","",3,[[["withcomments"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"eq","","",24,[[["ast"],["self"]],["bool"]]],[11,"ne","","",24,[[["ast"],["self"]],["bool"]]],[11,"eq","","",5,[[["alternation"],["self"]],["bool"]]],[11,"ne","","",5,[[["alternation"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"eq","","",7,[[["literal"],["self"]],["bool"]]],[11,"ne","","",7,[[["literal"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"eq","","",27,[[["hexliteralkind"],["self"]],["bool"]]],[11,"eq","","",28,[[["class"],["self"]],["bool"]]],[11,"ne","","",28,[[["class"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"eq","","",31,[[["classunicodekind"],["self"]],["bool"]]],[11,"ne","","",31,[[["classunicodekind"],["self"]],["bool"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"eq","","",11,[[["classbracketed"],["self"]],["bool"]]],[11,"ne","","",11,[[["classbracketed"],["self"]],["bool"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"eq","","",12,[[["classsetrange"],["self"]],["bool"]]],[11,"ne","","",12,[[["classsetrange"],["self"]],["bool"]]],[11,"eq","","",13,[[["classsetunion"],["self"]],["bool"]]],[11,"ne","","",13,[[["classsetunion"],["self"]],["bool"]]],[11,"eq","","",14,[[["classsetbinaryop"],["self"]],["bool"]]],[11,"ne","","",14,[[["classsetbinaryop"],["self"]],["bool"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"eq","","",15,[[["assertion"],["self"]],["bool"]]],[11,"ne","","",15,[[["assertion"],["self"]],["bool"]]],[11,"eq","","",36,[[["assertionkind"],["self"]],["bool"]]],[11,"eq","","",16,[[["repetition"],["self"]],["bool"]]],[11,"ne","","",16,[[["repetition"],["self"]],["bool"]]],[11,"eq","","",17,[[["repetitionop"],["self"]],["bool"]]],[11,"ne","","",17,[[["repetitionop"],["self"]],["bool"]]],[11,"eq","","",37,[[["repetitionkind"],["self"]],["bool"]]],[11,"ne","","",37,[[["repetitionkind"],["self"]],["bool"]]],[11,"eq","","",38,[[["repetitionrange"],["self"]],["bool"]]],[11,"ne","","",38,[[["repetitionrange"],["self"]],["bool"]]],[11,"eq","","",18,[[["group"],["self"]],["bool"]]],[11,"ne","","",18,[[["group"],["self"]],["bool"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"eq","","",21,[[["flags"],["self"]],["bool"]]],[11,"ne","","",21,[[["flags"],["self"]],["bool"]]],[11,"eq","","",22,[[["flagsitem"],["self"]],["bool"]]],[11,"ne","","",22,[[["flagsitem"],["self"]],["bool"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"eq","regex_syntax","",0,[[["error"],["self"]],["bool"]]],[11,"ne","","",0,[[["error"],["self"]],["bool"]]],[11,"eq","regex_syntax::hir::literal","",58,[[["literals"],["self"]],["bool"]]],[11,"ne","","",58,[[["literals"],["self"]],["bool"]]],[11,"eq","","",59,[[["literal"],["self"]],["bool"]]],[11,"eq","regex_syntax::hir","",64,[[["error"],["self"]],["bool"]]],[11,"ne","","",64,[[["error"],["self"]],["bool"]]],[11,"eq","","",49,[[["errorkind"],["self"]],["bool"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"eq","","",50,[[["hirkind"],["self"]],["bool"]]],[11,"ne","","",50,[[["hirkind"],["self"]],["bool"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"eq","","",52,[[["class"],["self"]],["bool"]]],[11,"ne","","",52,[[["class"],["self"]],["bool"]]],[11,"eq","","",66,[[["classunicode"],["self"]],["bool"]]],[11,"ne","","",66,[[["classunicode"],["self"]],["bool"]]],[11,"eq","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"ne","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"eq","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",68,[[["self"],["classbytes"]],["bool"]]],[11,"eq","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"eq","","",53,[[["anchor"],["self"]],["bool"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"eq","","",47,[[["group"],["self"]],["bool"]]],[11,"ne","","",47,[[["group"],["self"]],["bool"]]],[11,"eq","","",55,[[["groupkind"],["self"]],["bool"]]],[11,"ne","","",55,[[["groupkind"],["self"]],["bool"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"eq","","",56,[[["repetitionkind"],["self"]],["bool"]]],[11,"ne","","",56,[[["repetitionkind"],["self"]],["bool"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"eq","regex_syntax::utf8","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"ne","","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"eq","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"partial_cmp","regex_syntax::ast","",1,[[["span"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",2,[[["self"],["position"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","regex_syntax::hir::literal","",59,[[["literal"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","regex_syntax::hir","",67,[[["classunicoderange"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"le","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"gt","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"ge","","",67,[[["classunicoderange"],["self"]],["bool"]]],[11,"partial_cmp","","",69,[[["self"],["classbytesrange"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",69,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","regex_syntax::utf8","",73,[[["utf8sequence"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"le","","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"gt","","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"ge","","",73,[[["utf8sequence"],["self"]],["bool"]]],[11,"partial_cmp","","",72,[[["self"],["utf8range"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"le","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"gt","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"ge","","",72,[[["self"],["utf8range"]],["bool"]]],[11,"deref","regex_syntax::hir::literal","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[11,"fmt","regex_syntax::ast::parse","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::ast::print","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::ast","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::hir::literal","",58,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir::print","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::hir::translate","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::hir","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","regex_syntax::utf8","",73,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::ast","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax::hir","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"fmt","regex_syntax","",75,[[["self"],["formatter"]],["result"]]],[11,"description","regex_syntax::ast","",46,[[["self"]],["str"]]],[11,"description","regex_syntax","",0,[[["self"]],["str"]]],[11,"description","regex_syntax::hir","",64,[[["self"]],["str"]]],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into…",45,[[["ast"],["self"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of…",45,[[["ast"],["self"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an…",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before…",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after…",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand…",45,[[["classsetbinaryop"],["self"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into…",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of…",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"p":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"],[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"],[3,"UnicodeWordError"],[3,"CaseFoldError"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","i":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[3,"TryDemangleError","","Error returned from the `try_demangle` function below when…",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,[[["str"]],["demangle"]]],[5,"try_demangle","","The same as `demangle`, except return an `Err` if the…",null,[[["str"]],[["trydemangleerror"],["result",["demangle","trydemangleerror"]],["demangle"]]]],[11,"as_str","","Returns the underlying string that's being demangled.",0,[[["self"]],["str"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"clone","","",1,[[["self"]],["trydemangleerror"]]]],"p":[[3,"Demangle"],[3,"TryDemangleError"]]};
searchIndex["rustc_hex"] = {"doc":"Hex binary-to-text encoding","i":[[4,"FromHexError","rustc_hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",0,null],[13,"InvalidHexLength","","The input had an invalid length",0,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, constructed…",1,[[["self"]],[["fromiterator",["char"]],["char"]]]],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal…",2,[[["self"]],[["fromiterator",["u8"]],["result",["fromhexerror"]],["fromhexerror"],["u8"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["fromhexerror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]]],"p":[[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"]]};
searchIndex["safe_mix"] = {"doc":"Means of mixing a series of hashes to create a single…","i":[[5,"triplet_mix","safe_mix","Mix a slice.",null,[[],["result"]]],[17,"MAX_DEPTH","","",null,null],[8,"TripletMix","","The mixed trait for mixing a sequence.",null,null],[16,"Item","","The items in the sequence and simultaneously the return of…",0,null],[10,"triplet_mix","","The output of the mixing algorithm on the sequence. Items…",0,[[]]]],"p":[[8,"TripletMix"]]};
searchIndex["schnorrkel"] = {"doc":"Schnorr signature variants using Ristretto point…","i":[[0,"points","schnorrkel","Ristretto point tooling",null,null],[3,"RistrettoBoth","schnorrkel::points","A `RistrettoBoth` contains both an uncompressed…",null,null],[17,"RISTRETTO_POINT_LENGTH","","Compressed Ristretto point length",null,null],[11,"as_compressed","","Access the compressed Ristretto form",0,[[["self"]],["compressedristretto"]]],[11,"into_compressed","","Extract the compressed Ristretto form",0,[[],["compressedristretto"]]],[11,"as_point","","Access the point form",0,[[["self"]],["ristrettopoint"]]],[11,"into_point","","Extract the point form",0,[[],["ristrettopoint"]]],[11,"from_compressed","","Decompress into the `RistrettoBoth` format that also…",0,[[["compressedristretto"]],[["signatureresult",["ristrettoboth"]],["ristrettoboth"]]]],[11,"from_point","","Compress into the `RistrettoBoth` format that also retains…",0,[[["ristrettopoint"]],["ristrettoboth"]]],[11,"to_bytes","","Convert this public key to a byte array.",0,[[["self"]]]],[11,"from_bytes","","Construct a `RistrettoBoth` from a slice of bytes.",0,[[],[["signatureresult",["ristrettoboth"]],["ristrettoboth"]]]],[11,"from_bytes_ser","","Variant of `RistrettoBoth::from_bytes` that propogates…",0,[[["str"]],[["signatureresult",["ristrettoboth"]],["ristrettoboth"]]]],[0,"keys","schnorrkel","Schnorr signatures on the 2-torsion free subgroup of…",null,null],[3,"MiniSecretKey","schnorrkel::keys","An EdDSA-like \"secret\" key seed.",null,null],[3,"SecretKey","","A seceret key for use with Ristretto Schnorr signatures.",null,null],[3,"PublicKey","","A Ristretto Schnorr public key.",null,null],[3,"Keypair","","A Ristretto Schnorr keypair.",null,null],[12,"secret","","The secret half of this keypair.",1,null],[12,"public","","The public half of this keypair.",1,null],[4,"ExpansionMode","","Methods for expanding a `MiniSecretKey` into a `SecretKey`.",null,null],[13,"Uniform","","Expand the `MiniSecretKey` into a uniformly distributed…",2,null],[13,"Ed25519","","Expand this `MiniSecretKey` into a `SecretKey` using…",2,null],[17,"MINI_SECRET_KEY_LENGTH","","The length of a Ristretto Schnorr `MiniSecretKey`, in bytes.",null,null],[17,"PUBLIC_KEY_LENGTH","","The length of a Ristretto Schnorr `PublicKey`, in bytes.",null,null],[17,"SECRET_KEY_LENGTH","","The length of a Ristretto Schnorr key, `SecretKey`, in…",null,null],[17,"KEYPAIR_LENGTH","","The length of an Ristretto Schnorr `Keypair`, in bytes.",null,null],[18,"UNIFORM_MODE","","Avoids importing `ExpansionMode`",3,null],[18,"ED25519_MODE","","Avoids importing `ExpansionMode`",3,null],[11,"expand","","Derive the `SecretKey` corresponding to this…",3,[[["self"],["expansionmode"]],["secretkey"]]],[11,"expand_to_keypair","","Derive the `Keypair` corresponding to this `MiniSecretKey`.",3,[[["self"],["expansionmode"]],["keypair"]]],[11,"expand_to_public","","Derive the `PublicKey` corresponding to this…",3,[[["self"],["expansionmode"]],["publickey"]]],[11,"to_bytes","","Convert this secret key to a byte array.",3,[[["self"]]]],[11,"as_bytes","","View this secret key as a byte array.",3,[[["self"]]]],[11,"from_bytes","","Construct a `MiniSecretKey` from a slice of bytes.",3,[[],[["minisecretkey"],["signatureresult",["minisecretkey"]]]]],[11,"generate_with","","Generate a `MiniSecretKey` from a `csprng`.",3,[[["r"]],["minisecretkey"]]],[11,"generate","","Generate a `MiniSecretKey` from rand's `thread_rng`.",3,[[],["minisecretkey"]]],[11,"to_bytes","","Convert this `SecretKey` into an array of 64 bytes with.",4,[[["self"]]]],[11,"from_bytes","","Construct an `SecretKey` from a slice of bytes.",4,[[],[["secretkey"],["signatureresult",["secretkey"]]]]],[11,"to_ed25519_bytes","","Convert this `SecretKey` into an array of 64 bytes,…",4,[[["self"]]]],[11,"from_ed25519_bytes","","Construct an `SecretKey` from a slice of bytes,…",4,[[],[["secretkey"],["signatureresult",["secretkey"]]]]],[11,"generate_with","","Generate an \"unbiased\" `SecretKey` directly from a user…",4,[[["r"]],["secretkey"]]],[11,"generate","","Generate an \"unbiased\" `SecretKey` directly, bypassing the…",4,[[],["secretkey"]]],[11,"to_public","","Derive the `PublicKey` corresponding to this `SecretKey`.",4,[[["self"]],["publickey"]]],[11,"to_keypair","","Derive the `PublicKey` corresponding to this `SecretKey`.",4,[[],["keypair"]]],[11,"as_compressed","","Access the compressed Ristretto form",5,[[["self"]],["compressedristretto"]]],[11,"into_compressed","","Extract the compressed Ristretto form",5,[[],["compressedristretto"]]],[11,"as_point","","Access the point form",5,[[["self"]],["ristrettopoint"]]],[11,"into_point","","Extract the point form",5,[[],["ristrettopoint"]]],[11,"from_compressed","","Decompress into the `PublicKey` format that also retains…",5,[[["compressedristretto"]],[["signatureresult",["publickey"]],["publickey"]]]],[11,"from_point","","Compress into the `PublicKey` format that also retains the…",5,[[["ristrettopoint"]],["publickey"]]],[11,"to_bytes","","Convert this public key to a byte array. # Example",5,[[["self"]]]],[11,"from_bytes","","Construct a `PublicKey` from a slice of bytes.",5,[[],[["signatureresult",["publickey"]],["publickey"]]]],[11,"to_bytes","","Serialize `Keypair` to bytes.",1,[[["self"]]]],[11,"from_bytes","","Deserialize a `Keypair` from bytes.",1,[[],[["signatureresult",["keypair"]],["keypair"]]]],[11,"to_half_ed25519_bytes","","Serialize `Keypair` to bytes with Ed25519 secret key format.",1,[[["self"]]]],[11,"from_half_ed25519_bytes","","Deserialize a `Keypair` from bytes with Ed25519 style…",1,[[],[["signatureresult",["keypair"]],["keypair"]]]],[11,"generate_with","","Generate a Ristretto Schnorr `Keypair` directly, bypassing…",1,[[["r"]],["keypair"]]],[11,"generate","","Generate a Ristretto Schnorr `Keypair` directly, from a…",1,[[],["keypair"]]],[0,"context","schnorrkel","Schnorr signature contexts and configuration, adaptable to…",null,null],[3,"SigningContext","schnorrkel::context","Schnorr signing context",null,null],[3,"XoFTranscript","","Very simple transcript construction from a modern hash…",null,null],[3,"SigningTranscriptWithRng","","Schnorr signing transcript with the default `ThreadRng`…",null,null],[5,"signing_context","","Initialize a signing context from a static byte string…",null,[[],["signingcontext"]]],[5,"attach_rng","","Attach a `CryptoRng` to a `SigningTranscript` to repalce…",null,[[["t"],["r"]],["signingtranscriptwithrng"]]],[8,"SigningTranscript","","Schnorr signing transcript",null,null],[10,"commit_bytes","","Extend transcript with some bytes, shadowed by…",6,[[["self"]]]],[11,"proto_name","","Extend transcript with a protocol name",6,[[["self"]]]],[11,"commit_point","","Extend the transcript with a compressed Ristretto point",6,[[["self"],["compressedristretto"]]]],[10,"challenge_bytes","","Produce some challenge bytes, shadowed by…",6,[[["self"]]]],[11,"challenge_scalar","","Produce the public challenge scalar `e`.",6,[[["self"]],["scalar"]]],[11,"witness_scalar","","Produce a secret witness scalar `k`, aka nonce, from the…",6,[[["self"]],["scalar"]]],[11,"witness_bytes","","Produce secret witness bytes from the protocol transcript…",6,[[["self"]]]],[10,"witness_bytes_rng","","Produce secret witness bytes from the protocol transcript…",6,[[["self"],["r"]]]],[11,"new","","Initialize a signing context from a static byte string…",7,[[],["signingcontext"]]],[11,"bytes","","Initalize an owned signing transcript on a message…",7,[[["self"]],["transcript"]]],[11,"xof","","Initalize an owned signing transcript on a message…",7,[[["extendableoutput"],["self"]],["transcript"]]],[11,"hash256","","Initalize an owned signing transcript on a message…",7,[[["self"],["fixedoutput"]],["transcript"]]],[11,"hash512","","Initalize an owned signing transcript on a message…",7,[[["self"],["fixedoutput"]],["transcript"]]],[11,"new","","Create a `XoFTranscript` from a conventional hash…",8,[[["h"]],["xoftranscript"]]],[0,"sign","schnorrkel","Schnorr signature creation and verification, including…",null,null],[3,"Signature","schnorrkel::sign","A Ristretto Schnorr signature \"detached\" from the signed…",null,null],[5,"verify_batch","","Verify a batch of `signatures` on `messages` with their…",null,[[["i"]],["signatureresult"]]],[17,"SIGNATURE_LENGTH","","The length of a curve25519 EdDSA `Signature`, in bytes.",null,null],[11,"to_bytes","","Convert this `Signature` to a byte array.",9,[[["self"]]]],[11,"from_bytes","","Construct a `Signature` from a slice of bytes.",9,[[],[["signatureresult",["signature"]],["signature"]]]],[11,"from_bytes_not_distinguished_from_ed25519","","Depricated construction of a `Signature` from a slice of…",9,[[],[["signatureresult",["signature"]],["signature"]]]],[11,"sign","schnorrkel::keys","Sign a transcript with this `SecretKey`.",4,[[["signingtranscript"],["self"],["publickey"]],["signature"]]],[11,"sign_simple","","Sign a message with this `SecretKey`.",4,[[["self"],["publickey"]],["signature"]]],[11,"verify","","Verify a signature by this public key on a transcript.",5,[[["signingtranscript"],["self"],["signature"]],["signatureresult"]]],[11,"verify_simple","","Verify a signature by this public key on a message.",5,[[["self"],["signature"]],["signatureresult"]]],[11,"verify_simple_preaudit_deprecated","","A temporary verification routine for use in transitioning…",5,[[["self"]],["signatureresult"]]],[11,"sign","","Sign a transcript with this keypair's secret key.",1,[[["signingtranscript"],["self"]],["signature"]]],[11,"sign_simple","","Sign a message with this keypair's secret key.",1,[[["self"]],["signature"]]],[11,"verify","","Verify a signature by keypair's public key on a transcript.",1,[[["signingtranscript"],["self"],["signature"]],["signatureresult"]]],[11,"verify_simple","","Verify a signature by keypair's public key on a message.",1,[[["self"],["signature"]],["signatureresult"]]],[0,"vrf","schnorrkel","Implementation of a Verifiable Random Function (VRF) using…",null,null],[3,"Malleable","schnorrkel::vrf","VRF SigningTranscript for malleable VRF ouputs.",null,null],[12,"0","","",10,null],[3,"VRFOutput","","VRF output, possibly unverified.",null,null],[12,"0","","",11,null],[3,"VRFInOut","","VRF input and output paired together, possibly unverified.",null,null],[12,"input","","VRF input point",12,null],[12,"output","","VRF output point",12,null],[3,"VRFProof","","Short proof of correctness for associated VRF output, for…",null,null],[3,"VRFProofBatchable","","Longer proof of correctness for associated VRF output,…",null,null],[5,"vrf_malleable_hash","","Create a malleable VRF input point by hashing a transcript…",null,[[["signingtranscript"]],["ristrettoboth"]]],[5,"dleq_verify_batch","","Batch verify DLEQ proofs where the public keys were held…",null,[[],["signatureresult"]]],[5,"vrf_verify_batch","","Batch verify VRFs by different signers",null,[[["i"]],[["box"],["signatureresult",["box"]]]]],[17,"VRF_OUTPUT_LENGTH","","Length of VRF output.",null,null],[17,"VRF_PROOF_LENGTH","","Length of the short VRF proof which lacks support for…",null,null],[17,"VRF_PROOF_BATCHABLE_LENGTH","","Length of the longer VRF proof which supports batch…",null,null],[8,"VRFSigningTranscript","","`SigningTranscript` helper trait that manages VRF output…",null,null],[16,"T","","Real underlying `SigningTranscript`",13,null],[10,"transcript_with_malleability_addressed","","Return the underlying `SigningTranscript` after addressing…",13,[[["publickey"]]]],[11,"vrf_hash","schnorrkel::keys","Create a non-malleable VRF input point by hashing a…",5,[[["self"],["t"]],["ristrettoboth"]]],[11,"vrf_attach_hash","","Pair a non-malleable VRF output with the hash of the given…",5,[[["vrfoutput"],["self"],["t"]],[["signatureresult",["vrfinout"]],["vrfinout"]]]],[11,"to_bytes","schnorrkel::vrf","Convert this VRF output to a byte array.",11,[[["self"]]]],[11,"as_bytes","","View this secret key as a byte array.",11,[[["self"]]]],[11,"from_bytes","","Construct a `VRFOutput` from a slice of bytes.",11,[[],[["signatureresult",["vrfoutput"]],["vrfoutput"]]]],[11,"attach_input_hash","","Pair a non-malleable VRF output with the hash of the given…",11,[[["t"],["self"],["publickey"]],[["signatureresult",["vrfinout"]],["vrfinout"]]]],[11,"vrf_create_from_point","schnorrkel::keys","Evaluate the VRF-like multiplication on an uncompressed…",4,[[["ristrettoboth"],["self"]],["vrfinout"]]],[11,"vrf_create_from_compressed_point","","Evaluate the VRF-like multiplication on a compressed…",4,[[["self"],["vrfoutput"]],[["signatureresult",["vrfinout"]],["vrfinout"]]]],[11,"vrf_create_hash","","Evaluate the VRF on the given transcript.",1,[[["vrfsigningtranscript"],["self"]],["vrfinout"]]],[11,"as_output_bytes","schnorrkel::vrf","VRF output point bytes for serialization.",12,[[["self"]]]],[11,"to_output","","VRF output point bytes for serialization.",12,[[["self"]],["vrfoutput"]]],[11,"commit","","Commit VRF input and output to a transcript.",12,[[["self"],["t"]]]],[11,"make_bytes","","Raw bytes output from the VRF.",12,[[["self"]],[["default"],["asmut"]]]],[11,"make_rng","","VRF output converted into any `SeedableRng`.",12,[[["self"]],["seedablerng"]]],[11,"make_merlin_rng","","VRF output converted into Merlin's Keccek based `Rng`.",12,[[["self"]],["transcriptrng"]]],[11,"vrfs_merge","schnorrkel::keys","Merge VRF input and output pairs from the same signer,…",5,[[["self"]],["vrfinout"]]],[11,"vrfs_merge_vartime","","Merge VRF input and output pairs from the same signer,…",5,[[["self"]],["vrfinout"]]],[11,"to_bytes","schnorrkel::vrf","Convert this `VRFProof` to a byte array.",14,[[["self"]]]],[11,"from_bytes","","Construct a `VRFProof` from a slice of bytes.",14,[[],[["signatureresult",["vrfproof"]],["vrfproof"]]]],[11,"to_bytes","","Convert this `VRFProofBatchable` to a byte array.",15,[[["self"]]]],[11,"from_bytes","","Construct a `VRFProofBatchable` from a slice of bytes.",15,[[],[["vrfproofbatchable"],["signatureresult",["vrfproofbatchable"]]]]],[11,"shorten_dleq","","Return the shortened `VRFProof` for retransmitting in not…",15,[[["t"],["vrfinout"],["self"],["publickey"]],["vrfproof"]]],[11,"shorten_vrf","","Return the shortened `VRFProof` for retransmitting in…",15,[[["publickey"],["vrfoutput"],["t"],["self"]],[["signatureresult",["vrfproof"]],["vrfproof"]]]],[11,"dleq_proove","schnorrkel::keys","Produce DLEQ proof.",1,[[["vrfinout"],["self"],["t"]]]],[11,"vrf_sign","","Run VRF on one single input transcript, producing the…",1,[[["self"],["t"]]]],[11,"vrf_sign_after_check","","Run VRF on one single input transcript, producing the…",1,[[["f"],["self"],["t"]],["option"]]],[11,"vrfs_sign","","Run VRF on several input transcripts, producing their…",1,[[["i"],["self"]]]],[11,"dleq_verify","","Verify DLEQ proof that `p.output = s * p.input` where…",5,[[["t"],["vrfproof"],["self"],["vrfinout"]],[["vrfproofbatchable"],["signatureresult",["vrfproofbatchable"]]]]],[11,"vrf_verify","","Verify VRF proof for one single input transcript and…",5,[[["vrfproof"],["vrfsigningtranscript"],["self"],["vrfoutput"]],["signatureresult"]]],[11,"vrfs_verify","","Verify a common VRF short proof for several input…",5,[[["vrfproof"],["i"],["self"]],["signatureresult"]]],[0,"derive","schnorrkel","Implementation of \"hierarchical deterministic key…",null,null],[3,"ChainCode","schnorrkel::derive","We cannot assume the original public key is secret and…",null,null],[12,"0","","",16,null],[3,"ExtendedKey","","A convenience wraper that combines derivable key and a…",null,null],[12,"key","","Appropriate key type",17,null],[12,"chaincode","","We cannot assume the original public key is secret and…",17,null],[17,"CHAIN_CODE_LENGTH","","Length in bytes of our chain codes.",null,null],[8,"Derivation","","Key types that support \"hierarchical deterministic\" key…",null,null],[10,"derived_key","","Derive key with subkey identified by a byte array…",18,[[["chaincode"],["self"],["t"]]]],[11,"derived_key_simple","","Derive key with subkey identified by a byte array and a…",18,[[["asref"],["chaincode"],["self"]]]],[11,"hard_derive_mini_secret_key","schnorrkel::keys","Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey`…",4,[[["asref"],["chaincode"],["option",["chaincode"]],["self"]]]],[11,"hard_derive_mini_secret_key","","Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey`…",3,[[["asref"],["chaincode"],["expansionmode"],["option",["chaincode"]],["self"]]]],[11,"hard_derive_mini_secret_key","","Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey`…",1,[[["asref"],["chaincode"],["option",["chaincode"]],["self"]]]],[11,"derive_secret_key","","Derive a secret key and new chain code from a key pair and…",1,[[["chaincode"],["self"],["t"]]]],[11,"derived_key","schnorrkel::derive","Derive key with subkey identified by a byte array…",17,[[["self"],["t"]],["extendedkey"]]],[11,"derived_key_simple","","Derive key with subkey identified by a byte array and a…",17,[[["asref"],["self"]],["extendedkey"]]],[11,"hard_derive_mini_secret_key","","Vaguely BIP32-like \"hard\" derivation of a `MiniSecretKey`…",17,[[["asref"],["expansionmode"],["self"]],[["extendedkey",["secretkey"]],["secretkey"]]]],[0,"cert","schnorrkel","Elliptic curve Qu-Vanstone implicit certificate scheme…",null,null],[3,"ECQVCertSecret","schnorrkel::cert","ECQV Implicit Certificate Secret",null,null],[12,"0","","",19,null],[3,"ECQVCertPublic","","ECQV Implicit Certificate Public Key Reconstruction Data",null,null],[12,"0","","",20,null],[11,"issue_ecqv_cert","schnorrkel::keys","Issue an ECQV implicit certificate",1,[[["publickey"],["self"],["t"]],["ecqvcertsecret"]]],[11,"accept_ecqv_cert","","Accept an ECQV implicit certificate",5,[[["ecqvcertsecret"],["secretkey"],["self"],["t"]],["signatureresult"]]],[11,"issue_self_ecqv_cert","","Issue an ECQV Implicit Certificate for yourself",1,[[["self"],["t"]]]],[11,"open_ecqv_cert","","",5,[[["ecqvcertpublic"],["self"],["t"]],[["signatureresult",["publickey"]],["publickey"]]]],[0,"errors","schnorrkel","Errors which may occur when parsing keys and/or signatures…",null,null],[4,"MultiSignatureStage","schnorrkel::errors","Three-round trip multi-signature stage identifies used in…",null,null],[13,"Commitment","","Initial commitment phase of a multi-signature",21,null],[13,"Reveal","","Reveal phase of a multi-signature",21,null],[13,"Cosignature","","Actual cosigning phase of a multi-signature",21,null],[4,"SignatureError","","Errors which may occur while processing signatures and…",null,null],[13,"EquationFalse","","A signature verification equation failed.",22,null],[13,"PointDecompressionError","","Invalid point provided, usually to `verify` methods.",22,null],[13,"ScalarFormatError","","Invalid scalar provided, usually to `Signature::from_bytes`.",22,null],[13,"BytesLengthError","","An error in the length of bytes handed to a constructor.",22,null],[12,"name","schnorrkel::errors::SignatureError","Identifies the type returning the error",22,null],[12,"description","","Describes the type returning the error",22,null],[12,"length","","Length expected by the constructor in bytes",22,null],[13,"NotMarkedSchnorrkel","schnorrkel::errors","Signature not marked as schnorrkel, maybe try ed25519…",22,null],[13,"MuSigAbsent","","There is no record of the preceeding multi-signautre…",22,null],[12,"musig_stage","schnorrkel::errors::SignatureError","Identifies the multi-signature protocol stage during which…",22,null],[13,"MuSigInconsistent","schnorrkel::errors","For this public key, there are either conflicting records…",22,null],[12,"musig_stage","schnorrkel::errors::SignatureError","Identifies the multi-signature protocol stage during which…",22,null],[12,"duplicate","","Set true if the stage was reached correctly once but this…",22,null],[6,"SignatureResult","schnorrkel::errors","`Result` specilized to this crate for convenience.",null,null],[0,"musig","schnorrkel","Implementation for Ristretto Schnorr signatures of \"Simple…",null,null],[3,"AggregatePublicKeySlice","schnorrkel::musig","Aggregation helper for public keys kept in slices",null,null],[3,"Commitment","","Commitments to `R_i` values shared between cosigners…",null,null],[12,"0","","",23,null],[3,"MuSig","","Schnorr multi-signature (MuSig) container generic over its…",null,null],[3,"CommitStage","","Commitment stage for cosigner's `R` values",null,null],[3,"RevealStage","","Reveal stage for cosigner's `R` values",null,null],[3,"Reveal","","Revealed `R_i` values shared between cosigners during…",null,null],[12,"0","","",24,null],[3,"CosignStage","","Final cosigning stage  colelction",null,null],[3,"Cosignature","","Cosignatures shared between cosigners during signing",null,null],[12,"0","","",25,null],[3,"CollectStage","","Initial stage for cosignature collectors who do not…",null,null],[5,"aggregate_public_key_from_slice","","Aggregate public keys stored in a mutable slice",null,[[],[["option",["aggregatepublickeyslice"]],["aggregatepublickeyslice",["publickey"]]]]],[5,"aggregate_public_key_from_refs_slice","","Aggregate public keys stored in a mutable slice",null,[[],[["option",["aggregatepublickeyslice"]],["aggregatepublickeyslice",["publickey"]]]]],[5,"aggregate_public_key_from_sorted_slice","","Aggregate public keys stored in a sorted slice",null,[[],[["option",["aggregatepublickeyslice"]],["aggregatepublickeyslice"]]]],[5,"collect_cosignatures","","Initialize a collector of cosignatures who does not…",null,[[["signingtranscript"]],[["signingtranscript"],["musig",["collectstage"]],["collectstage"]]]],[8,"AggregatePublicKey","","Any data structure used for aggregating public keys.",null,null],[10,"weighting","","Return delinearization weighting for one of many public…",26,[[["self"],["publickey"]],[["scalar"],["option",["scalar"]]]]],[10,"public_key","","Returns aggregated public key.",26,[[["self"]],["publickey"]]],[8,"TranscriptStages","","Initial cosigning stages during which transcript…",null,null],[11,"public_keys","","Iterates over public keys.",27,[[["self"],["bool"]]]],[11,"public_key","","Aggregate public key given currently revealed `R` values",27,[[["self"]],["publickey"]]],[11,"expected_public_key","","Aggregate public key expected if all currently committed…",27,[[["self"]],["publickey"]]],[11,"transcript","","We permit extending the transcript whenever you like, so…",27,[[["self"]],["t"]]],[11,"musig","schnorrkel::keys","Initialize a multi-signature aka cosignature protocol run.",1,[[["t"],["self"]],[["commitstage",["keypair"]],["musig",["commitstage"]]]]],[11,"new","schnorrkel::musig","Initialize a multi-signature aka cosignature protocol run.",27,[[["k"],["t"]],[["musig",["commitstage"]],["commitstage"]]]],[11,"our_commitment","","Our commitment to our `R` to send to all other cosigners",27,[[["self"]],["commitment"]]],[11,"add_their_commitment","","Add a new cosigner's public key and associated `R`…",27,[[["self"],["publickey"],["commitment"]],["signatureresult"]]],[11,"reveal_stage","","Commit to reveal phase transition.",27,[[],[["musig",["revealstage"]],["revealstage"]]]],[11,"our_reveal","","Reveal our `R` contribution to send to all other cosigners",27,[[["self"]],["reveal"]]],[11,"add_their_reveal","","Include a revealed `R` value from a previously committed…",27,[[["self"],["publickey"],["reveal"]],["signatureresult"]]],[11,"add_trusted","","Add a new cosigner's public key and associated `R`…",27,[[["self"],["publickey"],["reveal"]],["signatureresult"]]],[11,"cosign_stage","","Reveal to cosign phase transition.",27,[[],[["cosignstage"],["musig",["cosignstage"]]]]],[11,"our_cosignature","","Reveals our signature contribution",27,[[["self"]],["cosignature"]]],[11,"add_their_cosignature","","Include a cosignature from another cosigner",27,[[["self"],["publickey"],["cosignature"]],["signatureresult"]]],[11,"cosigned","","Interate over the cosigners who successfully revaled and…",27,[[["self"]]]],[11,"uncosigned","","Interate over the possible cosigners who successfully…",27,[[["self"]]]],[11,"sign","","Actually computes the cosignature",27,[[["self"]],[["option",["signature"]],["signature"]]]],[11,"add","","Adds revealed `R` and cosignature into a cosignature…",27,[[["cosignature"],["reveal"],["self"],["publickey"]],["signatureresult"]]],[11,"signature","","Actually computes the collected cosignature.",27,[[["self"]],["signature"]]],[11,"from","schnorrkel::points","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"zeroize","","",0,[[["self"]]]],[11,"from","schnorrkel::keys","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"clear","","",3,[[["self"]]]],[11,"initialize","","",3,[[]]],[11,"zeroize","","",3,[[["self"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"clear","","",4,[[["self"]]]],[11,"initialize","","",4,[[]]],[11,"zeroize","","",4,[[["self"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"clear","","",5,[[["self"]]]],[11,"initialize","","",5,[[]]],[11,"zeroize","","",5,[[["self"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"zeroize","","",1,[[["self"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","schnorrkel::context","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"transcript_with_malleability_addressed","","",8,[[["publickey"]],["t"]]],[11,"from","","",8,[[],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"transcript_with_malleability_addressed","","",28,[[["publickey"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","schnorrkel::sign","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"transcript_with_malleability_addressed","schnorrkel::vrf","",10,[[["publickey"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"clear","","",11,[[["self"]]]],[11,"initialize","","",11,[[]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"from","schnorrkel::derive","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"from","schnorrkel::cert","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"from","schnorrkel::errors","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"as_fail","","",22,[[["self"]],["fail"]]],[11,"from","schnorrkel::musig","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"commit_bytes","schnorrkel::context","",8,[[["self"]]]],[11,"challenge_bytes","","",8,[[["self"]]]],[11,"witness_bytes_rng","","",8,[[["self"],["r"]]]],[11,"commit_bytes","","",28,[[["self"]]]],[11,"challenge_bytes","","",28,[[["self"]]]],[11,"witness_bytes","","",28,[[["self"]]]],[11,"witness_bytes_rng","","",28,[[["rr"],["self"]]]],[11,"transcript_with_malleability_addressed","schnorrkel::vrf","",10,[[["publickey"]],["t"]]],[11,"derived_key","schnorrkel::keys","",1,[[["chaincode"],["self"],["t"]]]],[11,"derived_key","","",4,[[["chaincode"],["self"],["t"]]]],[11,"derived_key","","",5,[[["chaincode"],["self"],["t"]]]],[11,"weighting","schnorrkel::musig","",29,[[["self"],["publickey"]],[["scalar"],["option",["scalar"]]]]],[11,"public_key","","",29,[[["self"]],["publickey"]]],[11,"from","schnorrkel::keys","",5,[[["secretkey"]],["publickey"]]],[11,"from","","",1,[[["secretkey"]],["keypair"]]],[11,"from","schnorrkel::context","",8,[[["h"]],["xoftranscript"]]],[11,"from","schnorrkel::cert","",20,[[["ecqvcertsecret"]],["ecqvcertpublic"]]],[11,"fmt","schnorrkel::points","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::keys","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::sign","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::vrf","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::derive","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::cert","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::errors","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::musig","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","schnorrkel::errors","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"eq","schnorrkel::points","",0,[[["self"]],["bool"]]],[11,"eq","schnorrkel::keys","",3,[[["self"]],["bool"]]],[11,"eq","","",4,[[["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["publickey"]],["bool"]]],[11,"ne","","",5,[[["self"],["publickey"]],["bool"]]],[11,"eq","schnorrkel::sign","",9,[[["self"],["signature"]],["bool"]]],[11,"ne","","",9,[[["self"],["signature"]],["bool"]]],[11,"eq","schnorrkel::vrf","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"ne","","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"eq","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"ne","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"eq","","",14,[[["vrfproof"],["self"]],["bool"]]],[11,"ne","","",14,[[["vrfproof"],["self"]],["bool"]]],[11,"eq","","",15,[[["vrfproofbatchable"],["self"]],["bool"]]],[11,"ne","","",15,[[["vrfproofbatchable"],["self"]],["bool"]]],[11,"eq","schnorrkel::derive","",16,[[["self"],["chaincode"]],["bool"]]],[11,"ne","","",16,[[["self"],["chaincode"]],["bool"]]],[11,"eq","","",17,[[["self"],["extendedkey"]],["bool"]]],[11,"ne","","",17,[[["self"],["extendedkey"]],["bool"]]],[11,"eq","schnorrkel::cert","",20,[[["ecqvcertpublic"],["self"]],["bool"]]],[11,"ne","","",20,[[["ecqvcertpublic"],["self"]],["bool"]]],[11,"eq","schnorrkel::errors","",21,[[["self"],["multisignaturestage"]],["bool"]]],[11,"eq","","",22,[[["self"],["signatureerror"]],["bool"]]],[11,"ne","","",22,[[["self"],["signatureerror"]],["bool"]]],[11,"eq","schnorrkel::musig","",23,[[["commitment"],["self"]],["bool"]]],[11,"ne","","",23,[[["commitment"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["reveal"]],["bool"]]],[11,"ne","","",24,[[["self"],["reveal"]],["bool"]]],[11,"eq","","",25,[[["self"],["cosignature"]],["bool"]]],[11,"ne","","",25,[[["self"],["cosignature"]],["bool"]]],[11,"cmp","schnorrkel::points","",0,[[["self"]],["ordering"]]],[11,"cmp","schnorrkel::keys","",5,[[["self"],["publickey"]],["ordering"]]],[11,"cmp","schnorrkel::vrf","",11,[[["self"],["vrfoutput"]],["ordering"]]],[11,"cmp","","",12,[[["self"],["vrfinout"]],["ordering"]]],[11,"partial_cmp","schnorrkel::points","",0,[[["self"],["ristrettoboth"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","schnorrkel::keys","",5,[[["self"],["publickey"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["self"],["publickey"]],["bool"]]],[11,"le","","",5,[[["self"],["publickey"]],["bool"]]],[11,"gt","","",5,[[["self"],["publickey"]],["bool"]]],[11,"ge","","",5,[[["self"],["publickey"]],["bool"]]],[11,"partial_cmp","schnorrkel::vrf","",11,[[["self"],["vrfoutput"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"le","","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"gt","","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"ge","","",11,[[["self"],["vrfoutput"]],["bool"]]],[11,"partial_cmp","","",12,[[["self"],["vrfinout"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"le","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"gt","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"ge","","",12,[[["self"],["vrfinout"]],["bool"]]],[11,"drop","schnorrkel::keys","",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"hash","schnorrkel::points","",0,[[["self"],["h"]]]],[11,"hash","schnorrkel::keys","",5,[[["self"],["__h"]]]],[11,"hash","schnorrkel::vrf","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","schnorrkel::derive","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","schnorrkel::cert","",20,[[["self"],["__h"]]]],[11,"hash","schnorrkel::errors","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"as_ref","schnorrkel::keys","",5,[[["self"]]]],[11,"clone","schnorrkel::points","",0,[[["self"]],["ristrettoboth"]]],[11,"clone","schnorrkel::keys","",3,[[["self"]],["minisecretkey"]]],[11,"clone","","",4,[[["self"]],["secretkey"]]],[11,"clone","","",5,[[["self"]],["publickey"]]],[11,"clone","schnorrkel::context","",7,[[["self"]],["signingcontext"]]],[11,"clone","schnorrkel::sign","",9,[[["self"]],["signature"]]],[11,"clone","schnorrkel::vrf","",10,[[["self"]],["malleable"]]],[11,"clone","","",11,[[["self"]],["vrfoutput"]]],[11,"clone","","",12,[[["self"]],["vrfinout"]]],[11,"clone","","",14,[[["self"]],["vrfproof"]]],[11,"clone","","",15,[[["self"]],["vrfproofbatchable"]]],[11,"clone","schnorrkel::derive","",16,[[["self"]],["chaincode"]]],[11,"clone","","",17,[[["self"]],["extendedkey"]]],[11,"clone","schnorrkel::cert","",19,[[["self"]],["ecqvcertsecret"]]],[11,"clone","","",20,[[["self"]],["ecqvcertpublic"]]],[11,"clone","schnorrkel::errors","",21,[[["self"]],["multisignaturestage"]]],[11,"clone","","",22,[[["self"]],["signatureerror"]]],[11,"clone","schnorrkel::musig","",23,[[["self"]],["commitment"]]],[11,"clone","","",24,[[["self"]],["reveal"]]],[11,"clone","","",25,[[["self"]],["cosignature"]]],[11,"default","schnorrkel::points","",0,[[],["ristrettoboth"]]],[11,"default","schnorrkel::keys","",3,[[],["minisecretkey"]]],[11,"default","","",4,[[],["secretkey"]]],[11,"default","","",5,[[],["publickey"]]],[11,"default","","",1,[[],["keypair"]]],[11,"default","schnorrkel::vrf","",11,[[],["vrfoutput"]]],[11,"ct_eq","schnorrkel::keys","",3,[[["self"]],["choice"]]],[11,"ct_eq","","",4,[[["self"]],["choice"]]],[11,"zeroize","schnorrkel::points","",0,[[["self"]]]],[11,"zeroize","schnorrkel::keys","",3,[[["self"]]]],[11,"zeroize","","",4,[[["self"]]]],[11,"zeroize","","",5,[[["self"]]]],[11,"zeroize","","",1,[[["self"]]]]],"p":[[3,"RistrettoBoth"],[3,"Keypair"],[4,"ExpansionMode"],[3,"MiniSecretKey"],[3,"SecretKey"],[3,"PublicKey"],[8,"SigningTranscript"],[3,"SigningContext"],[3,"XoFTranscript"],[3,"Signature"],[3,"Malleable"],[3,"VRFOutput"],[3,"VRFInOut"],[8,"VRFSigningTranscript"],[3,"VRFProof"],[3,"VRFProofBatchable"],[3,"ChainCode"],[3,"ExtendedKey"],[8,"Derivation"],[3,"ECQVCertSecret"],[3,"ECQVCertPublic"],[4,"MultiSignatureStage"],[4,"SignatureError"],[3,"Commitment"],[3,"Reveal"],[3,"Cosignature"],[8,"AggregatePublicKey"],[3,"MuSig"],[3,"SigningTranscriptWithRng"],[3,"AggregatePublicKeySlice"],[3,"CommitStage"],[3,"RevealStage"],[3,"CosignStage"],[3,"CollectStage"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of…","i":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected…",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred…",null,[[["t"],["f"]],[["always"],["scopeguard",["always"]]]]],[8,"Strategy","","Controls in which cases the associated code should be run",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run…",0,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through…",1,[[["t"],["f"]],["scopeguard"]]],[11,"into_inner","","“Defuse” the guard and extract the value without calling…",1,[[],["t"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"should_run","","",2,[[],["bool"]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"drop","","",1,[[["self"]]]]],"p":[[8,"Strategy"],[3,"ScopeGuard"],[4,"Always"]]};
searchIndex["secp256k1"] = {"doc":"Pure Rust implementation of the secp256k1 curve and fast…","i":[[3,"PublicKey","secp256k1","Public key on a secp256k1 curve.",null,null],[3,"SecretKey","","Secret key (256-bit) on a secp256k1 curve.",null,null],[3,"Signature","","An ECDSA signature.",null,null],[12,"r","","",0,null],[12,"s","","",0,null],[3,"RecoveryId","","Tag used for public key recovery from signatures.",null,null],[3,"Message","","Hashed message input to an ECDSA signature.",null,null],[12,"0","","",1,null],[3,"SharedSecret","","Shared secret using ECDH.",null,null],[4,"Error","","",null,null],[13,"InvalidSignature","","",2,null],[13,"InvalidPublicKey","","",2,null],[13,"InvalidSecretKey","","",2,null],[13,"InvalidRecoveryId","","",2,null],[13,"InvalidMessage","","",2,null],[13,"InvalidInputLength","","",2,null],[13,"TweakOutOfRange","","",2,null],[4,"PublicKeyFormat","","Format for public key parsing.",null,null],[13,"Compressed","","Compressed public key, 33 bytes.",3,null],[13,"Full","","Full length public key, 65 bytes.",3,null],[13,"Raw","","Raw public key, 64 bytes.",3,null],[5,"verify","","Check signature is a valid message signed by public key.",null,[[["message"],["signature"],["publickey"]],["bool"]]],[5,"recover","","Recover public key from a signed message.",null,[[["message"],["recoveryid"],["signature"]],[["result",["publickey","error"]],["publickey"],["error"]]]],[5,"sign","","Sign a message using the secret key.",null,[[["message"],["secretkey"]]]],[0,"curve","","Curve related structs.",null,null],[3,"Field","secp256k1::curve","Field element for secp256k1.",null,null],[3,"Affine","","A group element of the secp256k1 curve, in affine…",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"infinity","","",4,null],[3,"Jacobian","","A group element of the secp256k1 curve, in jacobian…",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"z","","",5,null],[12,"infinity","","",5,null],[3,"AffineStorage","","Affine coordinate group element compact storage.",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"Scalar","","A 256-bit scalar value.",null,null],[12,"0","","",7,null],[3,"ECMultContext","","Context for accelerating the computation of aP + bG.",null,null],[3,"ECMultGenContext","","Context for accelerating the computation of a*G.",null,null],[7,"AFFINE_G","","",null,null],[7,"ECMULT_CONTEXT","","A static ECMult context.",null,null],[7,"ECMULT_GEN_CONTEXT","","A static ECMultGen context.",null,null],[17,"CURVE_B","","",null,null],[0,"util","secp256k1","Utilities to manipulate the secp256k1 curve parameters.",null,null],[3,"SignatureArray","secp256k1::util","",null,null],[5,"set_table_gej_var","","",null,[[]]],[5,"globalz_set_table_gej","","",null,[[["field"]]]],[5,"odd_multiples_table","","",null,[[["jacobian"]]]],[7,"AFFINE_INFINITY","","",null,null],[7,"JACOBIAN_INFINITY","","",null,null],[17,"TAG_PUBKEY_EVEN","","",null,null],[17,"TAG_PUBKEY_ODD","","",null,null],[17,"TAG_PUBKEY_FULL","","",null,null],[17,"TAG_PUBKEY_HYBRID_EVEN","","",null,null],[17,"TAG_PUBKEY_HYBRID_ODD","","",null,null],[17,"MESSAGE_SIZE","","",null,null],[17,"SECRET_KEY_SIZE","","",null,null],[17,"RAW_PUBLIC_KEY_SIZE","","",null,null],[17,"FULL_PUBLIC_KEY_SIZE","","",null,null],[17,"COMPRESSED_PUBLIC_KEY_SIZE","","",null,null],[17,"SIGNATURE_SIZE","","",null,null],[17,"DER_MAX_SIGNATURE_SIZE","","",null,null],[17,"WINDOW_A","","",null,null],[17,"WINDOW_G","","",null,null],[17,"ECMULT_TABLE_SIZE_A","","",null,null],[17,"ECMULT_TABLE_SIZE_G","","",null,null],[11,"from_secret_key","secp256k1","",8,[[["secretkey"]],["publickey"]]],[11,"parse_slice","","",8,[[["publickeyformat"],["option",["publickeyformat"]]],[["result",["publickey","error"]],["publickey"],["error"]]]],[11,"parse","","",8,[[],[["result",["publickey","error"]],["publickey"],["error"]]]],[11,"parse_compressed","","",8,[[],[["result",["publickey","error"]],["publickey"],["error"]]]],[11,"serialize","","",8,[[["self"]]]],[11,"serialize_compressed","","",8,[[["self"]]]],[11,"tweak_add_assign","","",8,[[["secretkey"],["self"]],[["result",["error"]],["error"]]]],[11,"tweak_mul_assign","","",8,[[["secretkey"],["self"]],[["result",["error"]],["error"]]]],[11,"combine","","",8,[[],[["result",["error"]],["error"]]]],[11,"parse","","",9,[[],[["result",["secretkey","error"]],["secretkey"],["error"]]]],[11,"parse_slice","","",9,[[],[["result",["secretkey","error"]],["secretkey"],["error"]]]],[11,"random","","",9,[[["r"]],["secretkey"]]],[11,"serialize","","",9,[[["self"]]]],[11,"tweak_add_assign","","",9,[[["secretkey"],["self"]],[["result",["error"]],["error"]]]],[11,"tweak_mul_assign","","",9,[[["secretkey"],["self"]],[["result",["error"]],["error"]]]],[11,"inv","","",9,[[["self"]],["self"]]],[11,"parse","","",0,[[],["signature"]]],[11,"parse_slice","","",0,[[],[["signature"],["result",["signature","error"]],["error"]]]],[11,"parse_der","","",0,[[],[["signature"],["result",["signature","error"]],["error"]]]],[11,"parse_der_lax","","Converts a \"lax DER\"-encoded byte slice to a signature.…",0,[[],[["signature"],["result",["signature","error"]],["error"]]]],[11,"normalize_s","","Normalizes a signature to a \"low S\" form. In ECDSA,…",0,[[["self"]]]],[11,"serialize","","",0,[[["self"]]]],[11,"serialize_der","","",0,[[["self"]],["signaturearray"]]],[11,"parse","","",1,[[],["message"]]],[11,"parse_slice","","",1,[[],[["result",["message","error"]],["message"],["error"]]]],[11,"serialize","","",1,[[["self"]]]],[11,"parse","","Parse recovery ID starting with 0.",10,[[["u8"]],[["recoveryid"],["error"],["result",["recoveryid","error"]]]]],[11,"parse_rpc","","Parse recovery ID as Ethereum RPC format, starting with 27.",10,[[["u8"]],[["recoveryid"],["error"],["result",["recoveryid","error"]]]]],[11,"serialize","","",10,[[["self"]],["u8"]]],[11,"new","","",11,[[["secretkey"],["publickey"]],[["result",["sharedsecret","error"]],["sharedsecret"],["error"]]]],[14,"affine_const","","Define an affine group element constant.",null,null],[14,"jacobian_const","","Define a jacobian group element constant.",null,null],[14,"affine_storage_const","","Define an affine group storage constant.",null,null],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","secp256k1::curve","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","secp256k1::util","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"drop","secp256k1::curve","",7,[[["self"]]]],[11,"drop","secp256k1","",9,[[["self"]]]],[11,"drop","","",11,[[["self"]]]],[11,"as_mut","secp256k1::util","",15,[[["self"]]]],[11,"as_ref","","",15,[[["self"]]]],[11,"as_ref","secp256k1","",11,[[["self"]]]],[11,"from","secp256k1::curve","",4,[[["affinestorage"]],["affine"]]],[11,"into","","",4,[[],["affinestorage"]]],[11,"into","secp256k1","",8,[[],["affine"]]],[11,"into","","",9,[[],["scalar"]]],[11,"into","","",10,[[],["u8"]]],[11,"into","","",10,[[],["i32"]]],[11,"clone","secp256k1::curve","",12,[[["self"]],["field"]]],[11,"clone","","",4,[[["self"]],["affine"]]],[11,"clone","","",5,[[["self"]],["jacobian"]]],[11,"clone","","",6,[[["self"]],["affinestorage"]]],[11,"clone","","",7,[[["self"]],["scalar"]]],[11,"clone","secp256k1","",2,[[["self"]],["error"]]],[11,"clone","","",8,[[["self"]],["publickey"]]],[11,"clone","","",9,[[["self"]],["secretkey"]]],[11,"clone","","",0,[[["self"]],["signature"]]],[11,"clone","","",10,[[["self"]],["recoveryid"]]],[11,"clone","","",1,[[["self"]],["message"]]],[11,"clone","","",11,[[["self"]],["sharedsecret"]]],[11,"default","secp256k1::curve","",12,[[],["field"]]],[11,"default","","",4,[[],["affine"]]],[11,"default","","",5,[[],["jacobian"]]],[11,"default","","",6,[[],["affinestorage"]]],[11,"default","","",7,[[],["scalar"]]],[11,"default","secp256k1","",9,[[],["secretkey"]]],[11,"cmp","secp256k1::curve","",12,[[["self"],["field"]],["ordering"]]],[11,"eq","","",12,[[["self"],["field"]],["bool"]]],[11,"eq","","",4,[[["affine"],["self"]],["bool"]]],[11,"ne","","",4,[[["affine"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["jacobian"]],["bool"]]],[11,"ne","","",5,[[["self"],["jacobian"]],["bool"]]],[11,"eq","","",6,[[["affinestorage"],["self"]],["bool"]]],[11,"ne","","",6,[[["affinestorage"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["scalar"]],["bool"]]],[11,"ne","","",7,[[["self"],["scalar"]],["bool"]]],[11,"eq","secp256k1","",2,[[["self"],["error"]],["bool"]]],[11,"eq","","",8,[[["self"],["publickey"]],["bool"]]],[11,"ne","","",8,[[["self"],["publickey"]],["bool"]]],[11,"eq","","",9,[[["secretkey"],["self"]],["bool"]]],[11,"ne","","",9,[[["secretkey"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["signature"]],["bool"]]],[11,"ne","","",0,[[["self"],["signature"]],["bool"]]],[11,"eq","","",10,[[["recoveryid"],["self"]],["bool"]]],[11,"ne","","",10,[[["recoveryid"],["self"]],["bool"]]],[11,"eq","","",1,[[["message"],["self"]],["bool"]]],[11,"ne","","",1,[[["message"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["sharedsecret"]],["bool"]]],[11,"ne","","",11,[[["self"],["sharedsecret"]],["bool"]]],[11,"partial_cmp","secp256k1::curve","",12,[[["self"],["field"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","secp256k1","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"add","secp256k1::curve","",12,[[["field"]],["field"]]],[11,"add","","",7,[[["scalar"]],["scalar"]]],[11,"mul","","",12,[[["field"]],["field"]]],[11,"mul","","",7,[[["scalar"]],["scalar"]]],[11,"neg","","",7,[[],["scalar"]]],[11,"add_assign","","",12,[[["self"],["field"]]]],[11,"add_assign","","",12,[[["self"],["field"]]]],[11,"add_assign","","",7,[[["self"],["scalar"]]]],[11,"add_assign","","",7,[[["self"],["scalar"]]]],[11,"mul_assign","","",12,[[["self"],["field"]]]],[11,"mul_assign","","",12,[[["self"],["field"]]]],[11,"mul_assign","","",7,[[["self"],["scalar"]]]],[11,"mul_assign","","",7,[[["self"],["scalar"]]]],[11,"new","","",12,[[["u32"]],["self"]]],[11,"from_int","","",12,[[["u32"]],["field"]]],[11,"normalize","","Normalize a field element.",12,[[["self"]]]],[11,"normalize_weak","","Weakly normalize a field element: reduce it magnitude to…",12,[[["self"]]]],[11,"normalize_var","","Normalize a field element, without constant-time guarantee.",12,[[["self"]]]],[11,"normalizes_to_zero","","Verify whether a field element represents zero i.e. would…",12,[[["self"]],["bool"]]],[11,"normalizes_to_zero_var","","Verify whether a field element represents zero i.e. would…",12,[[["self"]],["bool"]]],[11,"set_int","","Set a field element equal to a small integer. Resulting…",12,[[["self"],["u32"]]]],[11,"is_zero","","Verify whether a field element is zero. Requires the input…",12,[[["self"]],["bool"]]],[11,"is_odd","","Check the \"oddness\" of a field element. Requires the input…",12,[[["self"]],["bool"]]],[11,"clear","","Sets a field element equal to zero, initializing all fields.",12,[[["self"]]]],[11,"set_b32","","Set a field element equal to 32-byte big endian value. If…",12,[[["self"]],["bool"]]],[11,"fill_b32","","",12,[[["self"]]]],[11,"b32","","Convert a field element to a 32-byte big endian value.…",12,[[["self"]]]],[11,"neg_in_place","","Set a field element equal to the additive inverse of…",12,[[["self"],["u32"],["field"]]]],[11,"neg","","",12,[[["u32"],["self"]],["field"]]],[11,"mul_int","","Multiplies the passed field element with a small integer…",12,[[["self"],["u32"]]]],[11,"cmp_var","","Compare two field elements. Requires both inputs to be…",12,[[["self"],["field"]],["ordering"]]],[11,"eq_var","","",12,[[["self"],["field"]],["bool"]]],[11,"mul_in_place","","Sets a field element to be the product of two others.…",12,[[["self"],["field"]]]],[11,"sqr_in_place","","Sets a field element to be the square of another. Requires…",12,[[["self"],["field"]]]],[11,"sqr","","",12,[[["self"]],["field"]]],[11,"sqrt","","If a has a square root, it is computed in r and 1 is…",12,[[["self"]]]],[11,"inv","","Sets a field element to be the (modular) inverse of…",12,[[["self"]],["field"]]],[11,"inv_var","","Potentially faster version of secp256k1_fe_inv, without…",12,[[["self"]],["field"]]],[11,"is_quad_var","","Checks whether a field element is a quadratic residue.",12,[[["self"]],["bool"]]],[11,"cmov","","If flag is true, set *r equal to *a; otherwise leave it.…",12,[[["bool"],["self"],["field"]]]],[11,"set_xy","","Set a group element equal to the point with given X and Y…",4,[[["self"],["field"]]]],[11,"set_xquad","","Set a group element (affine) equal to the point with the…",4,[[["self"],["field"]],["bool"]]],[11,"set_xo_var","","Set a group element (affine) equal to the point with the…",4,[[["bool"],["self"],["field"]],["bool"]]],[11,"is_infinity","","Check whether a group element is the point at infinity.",4,[[["self"]],["bool"]]],[11,"is_valid_var","","Check whether a group element is valid (i.e., on the curve).",4,[[["self"]],["bool"]]],[11,"neg_in_place","","",4,[[["self"],["affine"]]]],[11,"neg","","",4,[[["self"]],["affine"]]],[11,"set_gej","","Set a group element equal to another which is given in…",4,[[["self"],["jacobian"]]]],[11,"from_gej","","",4,[[["jacobian"]],["self"]]],[11,"set_gej_var","","",4,[[["self"],["jacobian"]]]],[11,"set_gej_zinv","","",4,[[["self"],["jacobian"],["field"]]]],[11,"clear","","Clear a secp256k1_ge to prevent leaking sensitive…",4,[[["self"]]]],[11,"set_infinity","","Set a group element (jacobian) equal to the point at…",5,[[["self"]]]],[11,"set_ge","","Set a group element (jacobian) equal to another which is…",5,[[["self"],["affine"]]]],[11,"from_ge","","",5,[[["affine"]],["self"]]],[11,"eq_x_var","","Compare the X coordinate of a group element (jacobian).",5,[[["self"],["field"]],["bool"]]],[11,"neg_in_place","","Set r equal to the inverse of a (i.e., mirrored around the…",5,[[["self"],["jacobian"]]]],[11,"neg","","",5,[[["self"]],["jacobian"]]],[11,"is_infinity","","Check whether a group element is the point at infinity.",5,[[["self"]],["bool"]]],[11,"has_quad_y_var","","Check whether a group element's y coordinate is a…",5,[[["self"]],["bool"]]],[11,"double_nonzero_in_place","","Set r equal to the double of a. If rzr is not-NULL, r->z =…",5,[[["field"],["jacobian"],["self"],["option",["field"]]]]],[11,"double_var_in_place","","Set r equal to the double of a. If rzr is not-NULL, r->z =…",5,[[["field"],["jacobian"],["self"],["option",["field"]]]]],[11,"double_var","","",5,[[["field"],["option",["field"]],["self"]],["jacobian"]]],[11,"add_var_in_place","","Set r equal to the sum of a and b. If rzr is non-NULL,…",5,[[["field"],["jacobian"],["self"],["option",["field"]]]]],[11,"add_var","","",5,[[["field"],["jacobian"],["option",["field"]],["self"]],["jacobian"]]],[11,"add_ge_in_place","","Set r equal to the sum of a and b (with b given in affine…",5,[[["self"],["jacobian"],["affine"]]]],[11,"add_ge","","",5,[[["affine"],["self"]],["jacobian"]]],[11,"add_ge_var_in_place","","Set r equal to the sum of a and b (with b given in affine…",5,[[["field"],["affine"],["jacobian"],["self"],["option",["field"]]]]],[11,"add_ge_var","","",5,[[["field"],["affine"],["option",["field"]],["self"]],["jacobian"]]],[11,"add_zinv_var_in_place","","Set r equal to the sum of a and b (with the inverse of b's…",5,[[["affine"],["jacobian"],["self"],["field"]]]],[11,"add_zinv_var","","",5,[[["self"],["affine"],["field"]],["jacobian"]]],[11,"clear","","Clear a secp256k1_gej to prevent leaking sensitive…",5,[[["self"]]]],[11,"rescale","","Rescale a jacobian point by b which must be non-zero.…",5,[[["self"],["field"]]]],[11,"cmov","","If flag is true, set *r equal to *a; otherwise leave it.…",6,[[["affinestorage"],["self"],["bool"]]]],[11,"clear","","Clear a scalar to prevent the leak of sensitive data.",7,[[["self"]]]],[11,"set_int","","Set a scalar to an unsigned integer.",7,[[["self"],["u32"]]]],[11,"from_int","","Create a scalar from an unsigned integer.",7,[[["u32"]],["self"]]],[11,"bits","","Access bits from a scalar. All requested bits must belong…",7,[[["self"],["usize"]],["u32"]]],[11,"bits_var","","Access bits from a scalar. Not constant time.",7,[[["self"],["usize"]],["u32"]]],[11,"cadd_bit","","Conditionally add a power of two to a scalar. The result…",7,[[["self"],["usize"],["bool"]]]],[11,"set_b32","","Set a scalar from a big endian byte array, return whether…",7,[[["self"]],["choice"]]],[11,"b32","","Convert a scalar to a byte array.",7,[[["self"]]]],[11,"fill_b32","","Convert a scalar to a byte array.",7,[[["self"]]]],[11,"is_zero","","Check whether a scalar equals zero.",7,[[["self"]],["bool"]]],[11,"is_one","","Check whether a scalar equals one.",7,[[["self"]],["bool"]]],[11,"is_high","","Check whether a scalar is higher than the group order…",7,[[["self"]],["bool"]]],[11,"cond_neg_assign","","Conditionally negate a number, in constant time.",7,[[["self"],["choice"]]]],[11,"mul_in_place","","",7,[[["self"],["scalar"]]]],[11,"shr_int","","Shift a scalar right by some amount strictly between 0 and…",7,[[["self"],["usize"]],["u32"]]],[11,"sqr_in_place","","",7,[[["self"],["scalar"]]]],[11,"sqr","","",7,[[["self"]],["scalar"]]],[11,"inv_in_place","","",7,[[["self"],["scalar"]]]],[11,"inv","","",7,[[["self"]],["scalar"]]],[11,"inv_var","","",7,[[["self"]],["scalar"]]],[11,"is_even","","",7,[[["self"]],["bool"]]],[11,"ecmult","","",13,[[["jacobian"],["scalar"],["jacobian"],["self"]]]],[11,"ecmult_const","","",13,[[["affine"],["scalar"],["jacobian"],["self"]]]],[11,"ecmult_gen","","",14,[[["jacobian"],["self"],["scalar"]]]],[11,"verify_raw","","",13,[[["affine"],["scalar"],["self"]],["bool"]]],[11,"recover_raw","","",13,[[["scalar"],["self"],["u8"]],[["error"],["result",["affine","error"]],["affine"]]]],[11,"sign_raw","","",14,[[["self"],["scalar"]],[["error"],["result",["error"]]]]],[11,"ecdh_raw","","",13,[[["affine"],["self"],["scalar"]],[["genericarray",["u8"]],["option",["genericarray"]]]]],[11,"new","secp256k1::util","",15,[[["usize"]],["self"]]],[11,"len","","",15,[[["self"]],["usize"]]]],"p":[[3,"Signature"],[3,"Message"],[4,"Error"],[4,"PublicKeyFormat"],[3,"Affine"],[3,"Jacobian"],[3,"AffineStorage"],[3,"Scalar"],[3,"PublicKey"],[3,"SecretKey"],[3,"RecoveryId"],[3,"SharedSecret"],[3,"Field"],[3,"ECMultContext"],[3,"ECMultGenContext"],[3,"SignatureArray"]]};
searchIndex["serde"] = {"doc":"Serde","i":[[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",0,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",0,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",0,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",0,null],[13,"Char","","The input contained a `char` that was not expected.",0,null],[13,"Str","","The input contained a `&str` or `String` that was not…",0,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",0,null],[13,"Unit","","The input contained a unit `()` that was not expected.",0,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,null],[13,"Seq","","The input contained a sequence that was not expected.",0,null],[13,"Map","","The input contained a map that was not expected.",0,null],[13,"Enum","","The input contained an enum that was not expected.",0,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,null],[13,"Other","","A message stating what uncategorized thing the input…",0,null],[0,"value","","Building blocks for deserializing basic values using the…",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"new","","Create a new borrowed deserializer from the given string.",1,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",2,[[],["borrowedbytesdeserializer"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",3,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",3,[[],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",4,[[["a"]],["self"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",5,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a…",5,[[],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",6,[[["a"]],["self"]]],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",7,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",7,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",7,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",7,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",7,[[["str"]],["self"]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",7,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",7,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",8,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",10,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",10,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",12,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",12,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",12,[[["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",12,[[["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",12,[[["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",12,[[["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",12,[[["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",12,[[["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",12,[[["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",12,[[["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",12,[[["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",12,[[["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",12,[[["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",12,[[["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",12,[[["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",12,[[["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",12,[[["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",12,[[["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",12,[[["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",12,[[],["result"]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",12,[[],["result"]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",12,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",12,[[],["result"]]],[11,"visit_some","","The input contains an optional that is present.",12,[[["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",12,[[],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",12,[[["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",12,[[["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",12,[[["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",12,[[["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",13,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",13,[[["self"]],[["option"],["result",["option"]]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",13,[[["self"]],[["option",["usize"]],["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",14,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"],["k"]],[["result",["option"]],["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"],["k"],["v"]],[["result",["option"]],["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",14,[[["self"]],[["option"],["result",["option"]]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",14,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",14,[[["self"]],[["option"],["result",["option"]]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",14,[[["self"]],[["option",["usize"]],["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",15,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",15,null],[10,"variant_seed","","`variant` is called to identify which variant to…",15,[[["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",15,[[],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",16,null],[10,"unit_variant","","Called when deserializing a variant with no values.",16,[[],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",16,[[["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",16,[[],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",16,[[["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",16,[[["v"]],["result"]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",17,null],[10,"into_deserializer","","Convert this value into a deserializer.",17,[[]]],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not…",null,null],[8,"Error","","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",18,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_element","","Serialize a sequence element.",21,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",21,[[],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_element","","Serialize a tuple element.",22,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",22,[[],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",23,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",23,null],[10,"serialize_field","","Serialize a tuple struct field.",23,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",23,[[],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",24,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",24,null],[10,"serialize_field","","Serialize a tuple variant field.",24,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",24,[[],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",25,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",25,null],[10,"serialize_key","","Serialize a map key.",25,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",25,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",25,[[["k"],["self"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",25,[[],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",26,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",26,null],[10,"serialize_field","","Serialize a struct field.",26,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",26,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",26,[[],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",27,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",27,null],[10,"serialize_field","","Serialize a struct variant field.",27,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",27,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",27,[[],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",9,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",11,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",11,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",11,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",11,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",11,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",11,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",11,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",11,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",11,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",11,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",11,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",11,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",11,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",11,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",11,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",11,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",11,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",11,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",11,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",11,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",11,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",11,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",11,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",11,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",11,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",11,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",11,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",19,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",20,null],[16,"Error","","The error type when some error occurs during serialization.",20,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",20,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",20,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",20,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",20,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",20,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",20,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",20,null],[10,"serialize_bool","","Serialize a `bool` value.",20,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",20,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",20,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",20,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",20,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",20,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",20,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",20,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",20,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",20,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",20,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",20,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",20,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",20,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",20,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",20,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",20,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",20,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",20,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",20,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",20,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",20,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",20,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",20,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",20,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",20,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",20,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",20,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",20,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",20,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",20,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",20,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of…",null,null],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is…",null,null],[11,"fmt","serde::de","",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","serde::de::value","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"to_string","","",29,[[["self"]],["string"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","serde::ser","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"deserialize","serde::de","",28,[[["d"]],[["result",["ignoredany"]],["ignoredany"]]]],[11,"deserialize_bool","serde::de::value","",30,[[["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["v"]],["result"]]],[11,"deserialize_char","","",30,[[["v"]],["result"]]],[11,"deserialize_str","","",30,[[["v"]],["result"]]],[11,"deserialize_string","","",30,[[["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["v"]],["result"]]],[11,"deserialize_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",30,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["v"]],["result"]]],[11,"deserialize_any","","",30,[[["v"]],["result"]]],[11,"deserialize_option","","",30,[[["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["v"]],["result"]]],[11,"deserialize_char","","",31,[[["v"]],["result"]]],[11,"deserialize_str","","",31,[[["v"]],["result"]]],[11,"deserialize_string","","",31,[[["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["v"]],["result"]]],[11,"deserialize_option","","",31,[[["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["v"]],["result"]]],[11,"deserialize_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",31,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["v"]],["result"]]],[11,"deserialize_any","","",31,[[["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["v"]],["result"]]],[11,"deserialize_char","","",32,[[["v"]],["result"]]],[11,"deserialize_str","","",32,[[["v"]],["result"]]],[11,"deserialize_string","","",32,[[["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["v"]],["result"]]],[11,"deserialize_option","","",32,[[["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["v"]],["result"]]],[11,"deserialize_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",32,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",32,[[["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["v"]],["result"]]],[11,"deserialize_char","","",33,[[["v"]],["result"]]],[11,"deserialize_str","","",33,[[["v"]],["result"]]],[11,"deserialize_string","","",33,[[["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["v"]],["result"]]],[11,"deserialize_option","","",33,[[["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["v"]],["result"]]],[11,"deserialize_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",33,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",33,[[["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["v"]],["result"]]],[11,"deserialize_char","","",34,[[["v"]],["result"]]],[11,"deserialize_str","","",34,[[["v"]],["result"]]],[11,"deserialize_string","","",34,[[["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["v"]],["result"]]],[11,"deserialize_option","","",34,[[["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["v"]],["result"]]],[11,"deserialize_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",34,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["v"]],["result"]]],[11,"deserialize_any","","",34,[[["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["v"]],["result"]]],[11,"deserialize_char","","",35,[[["v"]],["result"]]],[11,"deserialize_str","","",35,[[["v"]],["result"]]],[11,"deserialize_string","","",35,[[["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["v"]],["result"]]],[11,"deserialize_option","","",35,[[["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["v"]],["result"]]],[11,"deserialize_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",35,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",35,[[["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["v"]],["result"]]],[11,"deserialize_char","","",36,[[["v"]],["result"]]],[11,"deserialize_str","","",36,[[["v"]],["result"]]],[11,"deserialize_string","","",36,[[["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["v"]],["result"]]],[11,"deserialize_option","","",36,[[["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["v"]],["result"]]],[11,"deserialize_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",36,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",36,[[["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["v"]],["result"]]],[11,"deserialize_char","","",37,[[["v"]],["result"]]],[11,"deserialize_str","","",37,[[["v"]],["result"]]],[11,"deserialize_string","","",37,[[["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["v"]],["result"]]],[11,"deserialize_option","","",37,[[["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["v"]],["result"]]],[11,"deserialize_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",37,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["v"]],["result"]]],[11,"deserialize_any","","",37,[[["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["v"]],["result"]]],[11,"deserialize_char","","",38,[[["v"]],["result"]]],[11,"deserialize_str","","",38,[[["v"]],["result"]]],[11,"deserialize_string","","",38,[[["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["v"]],["result"]]],[11,"deserialize_option","","",38,[[["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["v"]],["result"]]],[11,"deserialize_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",38,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["v"]],["result"]]],[11,"deserialize_any","","",38,[[["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["v"]],["result"]]],[11,"deserialize_char","","",39,[[["v"]],["result"]]],[11,"deserialize_str","","",39,[[["v"]],["result"]]],[11,"deserialize_string","","",39,[[["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["v"]],["result"]]],[11,"deserialize_option","","",39,[[["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["v"]],["result"]]],[11,"deserialize_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",39,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",39,[[["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["v"]],["result"]]],[11,"deserialize_char","","",40,[[["v"]],["result"]]],[11,"deserialize_str","","",40,[[["v"]],["result"]]],[11,"deserialize_string","","",40,[[["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["v"]],["result"]]],[11,"deserialize_option","","",40,[[["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["v"]],["result"]]],[11,"deserialize_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",40,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["v"]],["result"]]],[11,"deserialize_any","","",40,[[["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["v"]],["result"]]],[11,"deserialize_char","","",41,[[["v"]],["result"]]],[11,"deserialize_str","","",41,[[["v"]],["result"]]],[11,"deserialize_string","","",41,[[["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["v"]],["result"]]],[11,"deserialize_option","","",41,[[["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["v"]],["result"]]],[11,"deserialize_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",41,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",41,[[["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["v"]],["result"]]],[11,"deserialize_char","","",42,[[["v"]],["result"]]],[11,"deserialize_str","","",42,[[["v"]],["result"]]],[11,"deserialize_string","","",42,[[["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["v"]],["result"]]],[11,"deserialize_option","","",42,[[["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["v"]],["result"]]],[11,"deserialize_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["v"]],["result"]]],[11,"deserialize_any","","",42,[[["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["v"]],["result"]]],[11,"deserialize_char","","",43,[[["v"]],["result"]]],[11,"deserialize_str","","",43,[[["v"]],["result"]]],[11,"deserialize_string","","",43,[[["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["v"]],["result"]]],[11,"deserialize_option","","",43,[[["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["v"]],["result"]]],[11,"deserialize_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",43,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",43,[[["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["v"]],["result"]]],[11,"deserialize_char","","",44,[[["v"]],["result"]]],[11,"deserialize_str","","",44,[[["v"]],["result"]]],[11,"deserialize_string","","",44,[[["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["v"]],["result"]]],[11,"deserialize_option","","",44,[[["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["v"]],["result"]]],[11,"deserialize_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",44,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",44,[[["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["v"]],["result"]]],[11,"deserialize_char","","",45,[[["v"]],["result"]]],[11,"deserialize_str","","",45,[[["v"]],["result"]]],[11,"deserialize_string","","",45,[[["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["v"]],["result"]]],[11,"deserialize_option","","",45,[[["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["v"]],["result"]]],[11,"deserialize_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",45,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["v"]],["result"]]],[11,"deserialize_any","","",45,[[["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["v"]],["result"]]],[11,"deserialize_char","","",46,[[["v"]],["result"]]],[11,"deserialize_str","","",46,[[["v"]],["result"]]],[11,"deserialize_string","","",46,[[["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["v"]],["result"]]],[11,"deserialize_option","","",46,[[["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["v"]],["result"]]],[11,"deserialize_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",46,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["v"]],["result"]]],[11,"deserialize_any","","",46,[[["v"]],["result"]]],[11,"deserialize_enum","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",47,[[["v"]],["result"]]],[11,"deserialize_enum","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",47,[[["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["v"]],["result"]]],[11,"deserialize_char","","",47,[[["v"]],["result"]]],[11,"deserialize_str","","",47,[[["v"]],["result"]]],[11,"deserialize_string","","",47,[[["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["v"]],["result"]]],[11,"deserialize_option","","",47,[[["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["v"]],["result"]]],[11,"deserialize_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",47,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["v"]],["result"]]],[11,"deserialize_any","","",1,[[["v"]],["result"]]],[11,"deserialize_enum","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",1,[[["v"]],["result"]]],[11,"deserialize_i8","","",1,[[["v"]],["result"]]],[11,"deserialize_i16","","",1,[[["v"]],["result"]]],[11,"deserialize_i32","","",1,[[["v"]],["result"]]],[11,"deserialize_i64","","",1,[[["v"]],["result"]]],[11,"deserialize_i128","","",1,[[["v"]],["result"]]],[11,"deserialize_u8","","",1,[[["v"]],["result"]]],[11,"deserialize_u16","","",1,[[["v"]],["result"]]],[11,"deserialize_u32","","",1,[[["v"]],["result"]]],[11,"deserialize_u64","","",1,[[["v"]],["result"]]],[11,"deserialize_u128","","",1,[[["v"]],["result"]]],[11,"deserialize_f32","","",1,[[["v"]],["result"]]],[11,"deserialize_f64","","",1,[[["v"]],["result"]]],[11,"deserialize_char","","",1,[[["v"]],["result"]]],[11,"deserialize_str","","",1,[[["v"]],["result"]]],[11,"deserialize_string","","",1,[[["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["v"]],["result"]]],[11,"deserialize_option","","",1,[[["v"]],["result"]]],[11,"deserialize_unit","","",1,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["v"]],["result"]]],[11,"deserialize_struct","","",1,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",1,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["v"]],["result"]]],[11,"deserialize_any","","",48,[[["v"]],["result"]]],[11,"deserialize_enum","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",48,[[["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["v"]],["result"]]],[11,"deserialize_char","","",48,[[["v"]],["result"]]],[11,"deserialize_str","","",48,[[["v"]],["result"]]],[11,"deserialize_string","","",48,[[["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["v"]],["result"]]],[11,"deserialize_option","","",48,[[["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["v"]],["result"]]],[11,"deserialize_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",48,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["v"]],["result"]]],[11,"deserialize_any","","",49,[[["v"]],["result"]]],[11,"deserialize_enum","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",49,[[["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["v"]],["result"]]],[11,"deserialize_char","","",49,[[["v"]],["result"]]],[11,"deserialize_str","","",49,[[["v"]],["result"]]],[11,"deserialize_string","","",49,[[["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["v"]],["result"]]],[11,"deserialize_option","","",49,[[["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["v"]],["result"]]],[11,"deserialize_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",49,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["v"]],["result"]]],[11,"deserialize_any","","",2,[[["v"]],["result"]]],[11,"deserialize_bool","","",2,[[["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["v"]],["result"]]],[11,"deserialize_char","","",2,[[["v"]],["result"]]],[11,"deserialize_str","","",2,[[["v"]],["result"]]],[11,"deserialize_string","","",2,[[["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["v"]],["result"]]],[11,"deserialize_option","","",2,[[["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["v"]],["result"]]],[11,"deserialize_struct","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",2,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["v"]],["result"]]],[11,"deserialize_enum","","",2,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["v"]],["result"]]],[11,"deserialize_bool","","",3,[[["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["v"]],["result"]]],[11,"deserialize_char","","",3,[[["v"]],["result"]]],[11,"deserialize_str","","",3,[[["v"]],["result"]]],[11,"deserialize_string","","",3,[[["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["v"]],["result"]]],[11,"deserialize_option","","",3,[[["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["v"]],["result"]]],[11,"deserialize_struct","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",3,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",3,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["v"]],["result"]]],[11,"deserialize_any","","",4,[[["v"]],["result"]]],[11,"deserialize_bool","","",4,[[["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["v"]],["result"]]],[11,"deserialize_char","","",4,[[["v"]],["result"]]],[11,"deserialize_str","","",4,[[["v"]],["result"]]],[11,"deserialize_string","","",4,[[["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["v"]],["result"]]],[11,"deserialize_option","","",4,[[["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["v"]],["result"]]],[11,"deserialize_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",4,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["v"]],["result"]]],[11,"deserialize_any","","",5,[[["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",5,[[["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["v"]],["result"]]],[11,"deserialize_char","","",5,[[["v"]],["result"]]],[11,"deserialize_str","","",5,[[["v"]],["result"]]],[11,"deserialize_string","","",5,[[["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["v"]],["result"]]],[11,"deserialize_option","","",5,[[["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["v"]],["result"]]],[11,"deserialize_struct","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",5,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",5,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["v"]],["result"]]],[11,"deserialize_any","","",6,[[["v"]],["result"]]],[11,"deserialize_enum","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",6,[[["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["v"]],["result"]]],[11,"deserialize_char","","",6,[[["v"]],["result"]]],[11,"deserialize_str","","",6,[[["v"]],["result"]]],[11,"deserialize_string","","",6,[[["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["v"]],["result"]]],[11,"deserialize_option","","",6,[[["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["v"]],["result"]]],[11,"deserialize_struct","","",6,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",6,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["v"]],["result"]]],[11,"expecting","serde::de","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["bool"]],["result"]]],[11,"visit_i64","","",28,[[["i64"]],["result"]]],[11,"visit_u64","","",28,[[["u64"]],["result"]]],[11,"visit_f64","","",28,[[["f64"]],["result"]]],[11,"visit_str","","",28,[[["str"]],["result"]]],[11,"visit_none","","",28,[[],["result"]]],[11,"visit_some","","",28,[[["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["d"]],["result"]]],[11,"visit_unit","","",28,[[],["result"]]],[11,"visit_seq","","",28,[[["a"]],["result"]]],[11,"visit_map","","",28,[[["a"]],["result"]]],[11,"visit_bytes","","",28,[[],["result"]]],[11,"visit_enum","","",28,[[["a"]],["result"]]],[11,"next_element_seed","serde::de::value","",3,[[["self"],["v"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",3,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_element_seed","","",5,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",5,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_key_seed","","",5,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_value_seed","","",5,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",5,[[["tv"],["self"],["tk"]],[["option"],["result",["option"]]]]],[11,"size_hint","","",5,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"variant_seed","","",46,[[["t"]],["result"]]],[11,"variant_seed","","",47,[[["t"]],["result"]]],[11,"variant_seed","","",1,[[["t"]],["result"]]],[11,"variant_seed","","",48,[[["t"]],["result"]]],[11,"variant_seed","","",49,[[["t"]],["result"]]],[11,"variant_seed","","",6,[[["t"]],["result"]]],[11,"serialize_element","serde::ser","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_element","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_key","","",50,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",50,[[["self"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"serialize_field","","",50,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",50,[[],["result"]]],[11,"custom","serde::de::value","",29,[[["t"]],["self"]]],[11,"custom","","",29,[[["t"]],["self"]]],[11,"clone","","",29,[[["self"]],["error"]]],[11,"clone","","",30,[[["self"]],["self"]]],[11,"clone","","",31,[[["self"]],["self"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["self"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",38,[[["self"]],["self"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","","",42,[[["self"]],["self"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",45,[[["self"]],["self"]]],[11,"clone","","",46,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","","",48,[[["self"]],["self"]]],[11,"clone","","",49,[[["self"]],["self"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["seqdeserializer"]]],[11,"clone","","",4,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"eq","serde::de::value","",29,[[["error"],["self"]],["bool"]]],[11,"ne","","",29,[[["error"],["self"]],["bool"]]],[11,"eq","serde::de","",0,[[["unexpected"],["self"]],["bool"]]],[11,"ne","","",0,[[["unexpected"],["self"]],["bool"]]],[11,"fmt","serde::de::value","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","serde::de::value","",29,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","serde::de","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"description","serde::de::value","",29,[[["self"]],["str"]]]],"p":[[4,"Unexpected"],[3,"BorrowedStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"IgnoredAny"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"Impossible"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","i":[[24,"Serialize","serde_derive","",null,null],[24,"Deserialize","","",null,null]],"p":[]};
searchIndex["sha2"] = {"doc":"An implementation of the [SHA-2][1] cryptographic hash…","i":[[8,"Digest","sha2","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","",0,null],[10,"new","","Create new hasher instance",0,[[],["self"]]],[10,"input","","Digest input data.",0,[[["self"],["b"]]]],[10,"chain","","Digest input data in a chained manner.",0,[[["b"]],["self"]]],[10,"result","","Retrieve result and consume hasher instance.",0,[[],[["u8"],["genericarray",["u8"]]]]],[10,"result_reset","","Retrieve result and reset hasher instance.",0,[[["self"]],[["u8"],["genericarray",["u8"]]]]],[10,"reset","","Reset hasher instance to its initial state.",0,[[["self"]]]],[10,"output_size","","Get output size of the hasher",0,[[],["usize"]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",0,[[],[["u8"],["genericarray",["u8"]]]]],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash…",null,null],[3,"Sha224","","The SHA-256 hash algorithm with the SHA-224 initial hash…",null,null],[3,"Sha512","","The SHA-512 hash algorithm with the SHA-512 initial hash…",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash…",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial…",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial…",null,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"new","","",1,[[],["d"]]],[11,"input","","",1,[[["self"],["b"]]]],[11,"chain","","",1,[[["b"]],["d"]]],[11,"result","","",1,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",1,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",1,[[["self"]]]],[11,"output_size","","",1,[[],["usize"]]],[11,"digest","","",1,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",1,[[["self"]]]],[11,"result_reset","","",1,[[["self"]],["box"]]],[11,"result","","",1,[[["box"]],["box"]]],[11,"reset","","",1,[[["self"]]]],[11,"output_size","","",1,[[["self"]],["usize"]]],[11,"box_clone","","",1,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"new","","",2,[[],["d"]]],[11,"input","","",2,[[["self"],["b"]]]],[11,"chain","","",2,[[["b"]],["d"]]],[11,"result","","",2,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",2,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",2,[[["self"]]]],[11,"output_size","","",2,[[],["usize"]]],[11,"digest","","",2,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",2,[[["self"]]]],[11,"result_reset","","",2,[[["self"]],["box"]]],[11,"result","","",2,[[["box"]],["box"]]],[11,"reset","","",2,[[["self"]]]],[11,"output_size","","",2,[[["self"]],["usize"]]],[11,"box_clone","","",2,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"new","","",3,[[],["d"]]],[11,"input","","",3,[[["self"],["b"]]]],[11,"chain","","",3,[[["b"]],["d"]]],[11,"result","","",3,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",3,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",3,[[["self"]]]],[11,"output_size","","",3,[[],["usize"]]],[11,"digest","","",3,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",3,[[["self"]]]],[11,"result_reset","","",3,[[["self"]],["box"]]],[11,"result","","",3,[[["box"]],["box"]]],[11,"reset","","",3,[[["self"]]]],[11,"output_size","","",3,[[["self"]],["usize"]]],[11,"box_clone","","",3,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"new","","",4,[[],["d"]]],[11,"input","","",4,[[["self"],["b"]]]],[11,"chain","","",4,[[["b"]],["d"]]],[11,"result","","",4,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",4,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",4,[[["self"]]]],[11,"output_size","","",4,[[],["usize"]]],[11,"digest","","",4,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",4,[[["self"]]]],[11,"result_reset","","",4,[[["self"]],["box"]]],[11,"result","","",4,[[["box"]],["box"]]],[11,"reset","","",4,[[["self"]]]],[11,"output_size","","",4,[[["self"]],["usize"]]],[11,"box_clone","","",4,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"new","","",5,[[],["d"]]],[11,"input","","",5,[[["self"],["b"]]]],[11,"chain","","",5,[[["b"]],["d"]]],[11,"result","","",5,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",5,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",5,[[["self"]]]],[11,"output_size","","",5,[[],["usize"]]],[11,"digest","","",5,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",5,[[["self"]]]],[11,"result_reset","","",5,[[["self"]],["box"]]],[11,"result","","",5,[[["box"]],["box"]]],[11,"reset","","",5,[[["self"]]]],[11,"output_size","","",5,[[["self"]],["usize"]]],[11,"box_clone","","",5,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"new","","",6,[[],["d"]]],[11,"input","","",6,[[["self"],["b"]]]],[11,"chain","","",6,[[["b"]],["d"]]],[11,"result","","",6,[[],[["genericarray",["u8"]],["u8"]]]],[11,"result_reset","","",6,[[["self"]],[["genericarray",["u8"]],["u8"]]]],[11,"reset","","",6,[[["self"]]]],[11,"output_size","","",6,[[],["usize"]]],[11,"digest","","",6,[[],[["genericarray",["u8"]],["u8"]]]],[11,"input","","",6,[[["self"]]]],[11,"result_reset","","",6,[[["self"]],["box"]]],[11,"result","","",6,[[["box"]],["box"]]],[11,"reset","","",6,[[["self"]]]],[11,"output_size","","",6,[[["self"]],["usize"]]],[11,"box_clone","","",6,[[["self"]],[["box",["dyndigest"]],["dyndigest"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",4,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",3,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",5,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",6,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",1,[[["self"]],["sha256"]]],[11,"clone","","",2,[[["self"]],["sha224"]]],[11,"clone","","",3,[[["self"]],["sha512"]]],[11,"clone","","",4,[[["self"]],["sha384"]]],[11,"clone","","",6,[[["self"]],["sha512trunc256"]]],[11,"clone","","",5,[[["self"]],["sha512trunc224"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["self"]]],[11,"default","","",4,[[],["self"]]],[11,"default","","",6,[[],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"write","","",2,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",2,[[["self"]],["result"]]],[11,"write","","",1,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",1,[[["self"]],["result"]]],[11,"write","","",4,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",4,[[["self"]],["result"]]],[11,"write","","",3,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",3,[[["self"]],["result"]]],[11,"write","","",5,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",5,[[["self"]],["result"]]],[11,"write","","",6,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"flush","","",6,[[["self"]],["result"]]],[11,"input","","",1,[[["self"],["asref"]]]],[11,"input","","",2,[[["self"],["asref"]]]],[11,"input","","",3,[[["self"],["asref"]]]],[11,"input","","",4,[[["self"],["asref"]]]],[11,"input","","",6,[[["self"],["asref"]]]],[11,"input","","",5,[[["self"],["asref"]]]],[11,"fixed_result","","",1,[[],[["u8"],["genericarray",["u8"]]]]],[11,"fixed_result","","",2,[[],[["u8"],["genericarray",["u8"]]]]],[11,"fixed_result","","",3,[[],[["u8"],["genericarray",["u8"]]]]],[11,"fixed_result","","",4,[[],[["u8"],["genericarray",["u8"]]]]],[11,"fixed_result","","",6,[[],[["u8"],["genericarray",["u8"]]]]],[11,"fixed_result","","",5,[[],[["u8"],["genericarray",["u8"]]]]],[11,"reset","","",1,[[["self"]]]],[11,"reset","","",2,[[["self"]]]],[11,"reset","","",3,[[["self"]]]],[11,"reset","","",4,[[["self"]]]],[11,"reset","","",6,[[["self"]]]],[11,"reset","","",5,[[["self"]]]]],"p":[[8,"Digest"],[3,"Sha256"],[3,"Sha224"],[3,"Sha512"],[3,"Sha384"],[3,"Sha512Trunc224"],[3,"Sha512Trunc256"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain…","i":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and…",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of…",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its…",null,null],[5,"unreachable","","Hint to the optimizer that any code path which calls this…",null,[[]]],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be…",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,[[["self"]]]],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,[[["self"]]]],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,[[["self"]]]],[11,"new","","Construct an empty vector",3,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity…",3,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",3,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A`…",3,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A`…",3,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A`…",3,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",3,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",3,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",3,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",3,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate…",3,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former…",3,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",3,[[["self"]]]],[11,"pop","","Remove an item from the end of the vector and return it,…",3,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap,…",3,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be…",3,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity for `additional` more…",3,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",3,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and…",3,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",3,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",3,[[["self"]]]],[11,"swap_remove","","Remove the element at position `index`, replacing it with…",3,[[["self"],["usize"]]]],[11,"clear","","Remove all elements from the vector.",3,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`,…",3,[[["self"],["usize"]]]],[11,"insert","","Insert an element at position `index`, shifting all…",3,[[["self"],["usize"]]]],[11,"insert_many","","Insert multiple elements at position `index`, shifting all…",3,[[["intoiterator"],["self"],["usize"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the…",3,[[],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise…",3,[[],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",3,[[["self"],["fnmut"]]]],[11,"dedup","","Removes consecutive duplicate elements.",3,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given…",3,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",3,[[["self"],["f"]]]],[11,"from_raw_parts","","Creates a `SmallVec` directly from the raw components of…",3,[[["usize"]],["smallvec"]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",3,[[],["self"]]],[11,"insert_from_slice","","Copy elements from a slice into the vector at position…",3,[[["self"],["usize"]]]],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",3,[[["self"]]]],[11,"resize","","Resizes the vector so that its length is equal to `len`.",3,[[["self"],["usize"]]]],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use…",3,[[["usize"]],["self"]]],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"into_iter","","",4,[[],["i"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"into_iter","","",5,[[],["i"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"push","","",3,[[["self"]]]],[11,"extend_from_slice","","",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",3,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"as_mut","","",3,[[["self"]]]],[11,"as_ref","","",3,[[["self"]]]],[11,"from","","",3,[[],["smallvec"]]],[11,"from","","",3,[[["vec"]],["smallvec"]]],[11,"from","","",3,[[["a"]],["smallvec"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"extend","","",3,[[["intoiterator"],["self"]]]],[11,"into_iter","","",3,[[]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,[[["self"]]]],[11,"clone","","",3,[[["self"]],["smallvec"]]],[11,"default","","",3,[[],["smallvec"]]],[11,"cmp","","",3,[[["self"],["smallvec"]],["ordering"]]],[11,"eq","","",3,[[["smallvec"],["self"]],["bool"]]],[11,"ne","","",3,[[["smallvec"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["smallvec"]],[["option",["ordering"]],["ordering"]]]],[11,"deref","","",3,[[["self"]]]],[11,"deref_mut","","",3,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"index","","",3,[[["self"],["usize"]]]],[11,"index","","",3,[[["range",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["rangefrom",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index","","",3,[[["self"],["rangefull"]]]],[11,"index_mut","","",3,[[["self"],["usize"]]]],[11,"index_mut","","",3,[[["self"],["usize"],["range",["usize"]]]]],[11,"index_mut","","",3,[[["self"],["rangefrom",["usize"]],["usize"]]]],[11,"index_mut","","",3,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index_mut","","",3,[[["self"],["rangefull"]]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"from_iter","","",3,[[["intoiterator"]],["smallvec"]]],[11,"borrow","","",3,[[["self"]]]],[11,"borrow_mut","","",3,[[["self"]]]],[11,"write","","",3,[[["self"]],[["result",["usize"]],["usize"]]]],[11,"write_all","","",3,[[["self"]],["result"]]],[11,"flush","","",3,[[["self"]],["result"]]]],"p":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"SmallVec"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["sp_application_crypto"] = {"doc":"Traits and macros for constructing application specific…","i":[[3,"KeyTypeId","sp_application_crypto","An identifier for a type of cryptographic key.",null,null],[12,"0","","",0,null],[0,"key_types","","Known key types; this also functions as a global registry…",null,null],[17,"BABE","sp_application_crypto::key_types","Key type for Babe module, build-in.",null,null],[17,"GRANDPA","","Key type for Grandpa module, build-in.",null,null],[17,"ACCOUNT","","Key type for controlling an account in a Substrate…",null,null],[17,"AURA","","Key type for Aura module, built-in.",null,null],[17,"IM_ONLINE","","Key type for ImOnline module, built-in.",null,null],[17,"AUTHORITY_DISCOVERY","","Key type for AuthorityDiscovery module, built-in.",null,null],[17,"DUMMY","","A key type ID useful for tests.",null,null],[0,"ed25519","sp_application_crypto","Ed25519 crypto types.",null,null],[3,"Public","sp_application_crypto::ed25519","A public key.",null,null],[12,"0","","",1,null],[3,"Pair","","A key pair.",null,null],[3,"Signature","","A signature (a 512-bit value).",null,null],[12,"0","","",2,null],[3,"LocalizedSignature","","A localized signature also contains sender information.",null,null],[12,"signer","","The signer of the signature.",3,null],[12,"signature","","The signature itself.",3,null],[4,"PublicError","","An error type for SS58 decoding.",null,null],[13,"BadBase58","","Bad alphabet.",4,null],[13,"BadLength","","Bad length.",4,null],[13,"UnknownVersion","","Unknown version.",4,null],[13,"InvalidChecksum","","Invalid checksum.",4,null],[4,"DeriveError","","An error when deriving a key.",null,null],[13,"SoftKeyInPath","","A soft key was found in the path (and is unsupported).",5,null],[3,"AppPublic","","A generic `AppPublic` wrapper type over $public crypto;…",null,null],[3,"AppSignature","","A generic `AppPublic` wrapper type over $public crypto;…",null,null],[3,"AppPair","","A generic `AppPublic` wrapper type over $pair crypto; this…",null,null],[0,"sr25519","sp_application_crypto","Sr25519 crypto types.",null,null],[3,"Public","sp_application_crypto::sr25519","An Schnorrkel/Ristretto x25519 (\"sr25519\") public key.",null,null],[12,"0","","",6,null],[3,"Pair","","An Schnorrkel/Ristretto x25519 (\"sr25519\") key pair.",null,null],[3,"Signature","","An Schnorrkel/Ristretto x25519 (\"sr25519\") signature.",null,null],[12,"0","","",7,null],[3,"LocalizedSignature","","A localized signature also contains sender information.…",null,null],[12,"signer","","The signer of the signature.",8,null],[12,"signature","","The signature itself.",8,null],[3,"AppPublic","","A generic `AppPublic` wrapper type over $public crypto;…",null,null],[3,"AppSignature","","A generic `AppPublic` wrapper type over $public crypto;…",null,null],[3,"AppPair","","A generic `AppPublic` wrapper type over $pair crypto; this…",null,null],[8,"AppKey","sp_application_crypto","An application-specific key.",null,null],[16,"UntypedGeneric","","The corresponding type as a generic crypto type.",9,null],[16,"Public","","The corresponding public key type in this application…",9,null],[16,"Pair","","The corresponding key pair type in this application scheme.",9,null],[16,"Signature","","The corresponding signature type in this application scheme.",9,null],[18,"ID","","An identifier for this application-specific key type.",9,null],[8,"MaybeHash","","Type which implements Hash in std, not when no-std (std…",null,null],[8,"AppPublic","","A application's public key.",null,null],[16,"Generic","","The wrapped type which is just a plain instance of `Public`.",10,null],[8,"AppPair","","A application's key pair.",null,null],[16,"Generic","","The wrapped type which is just a plain instance of `Pair`.",11,null],[8,"AppSignature","","A application's signature.",null,null],[16,"Generic","","The wrapped type which is just a plain instance of…",12,null],[8,"RuntimePublic","","A runtime interface for a public key.",null,null],[16,"Signature","","The signature that will be generated when signing with the…",13,null],[10,"all","","Returns all public keys for the given key type in the…",13,[[["keytypeid"]],["vec"]]],[10,"generate_pair","","Generate a public/private pair for the given key type with…",13,[[["option",["vec"]],["vec",["u8"]],["keytypeid"]],["self"]]],[10,"sign","","Sign the given message with the corresponding private key…",13,[[["m"],["self"],["keytypeid"]],["option"]]],[10,"verify","","Verify that the given signature matches the given message…",13,[[["self"],["m"]],["bool"]]],[8,"RuntimeAppPublic","","A runtime interface for an application's public key.",null,null],[18,"ID","","An identifier for this application-specific key type.",14,null],[16,"Signature","","The signature that will be generated when signing with the…",14,null],[10,"all","","Returns all public keys for this application in the…",14,[[],["vec"]]],[10,"generate_pair","","Generate a public/private pair with an optional `seed` and…",14,[[["option",["vec"]],["vec",["u8"]]],["self"]]],[10,"sign","","Sign the given message with the corresponding private key…",14,[[["self"],["m"]],["option"]]],[10,"verify","","Verify that the given signature matches the given message…",14,[[["self"],["m"]],["bool"]]],[8,"BoundToRuntimeAppPublic","","Something that bound to a fixed `RuntimeAppPublic`.",null,null],[16,"Public","","The `RuntimeAppPublic` this type is bound to.",15,null],[14,"app_crypto","","Declares Public, Pair, Signature types which are…",null,null],[14,"app_crypto_pair","","Declares Pair type which is functionally equivalent to…",null,null],[14,"app_crypto_public_full_crypto","","Declares Public type which is functionally equivalent to…",null,null],[14,"app_crypto_public_not_full_crypto","","Declares Public type which is functionally equivalent to…",null,null],[14,"app_crypto_public_common","","Declares Public type which is functionally equivalent to…",null,null],[14,"app_crypto_signature_full_crypto","","Declares Signature type which is functionally equivalent…",null,null],[14,"app_crypto_signature_not_full_crypto","","Declares Signature type which is functionally equivalent…",null,null],[14,"app_crypto_signature_common","","Declares Signature type which is functionally equivalent…",null,null],[14,"wrap","","Implement bidirectional `From` and on-way `AsRef`/`AsMut`…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",0,[[],["v"]]],[11,"into_ffi_value","","",0,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",0,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"from","sp_application_crypto::ed25519","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_from","","",1,[[["t"]],["outer"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_string","","",1,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",1,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"size_hint","","",1,[[["self"]],["usize"]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"encode","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",1,[[["w"],["self"]]]],[11,"decode","","",1,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",1,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",1,[[],["v"]]],[11,"into_ffi_value","","",1,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",1,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"encode_hex","","",1,[[["self"]],["u"]]],[11,"encode_hex_upper","","",1,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",2,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",2,[[],["v"]]],[11,"into_ffi_value","","",2,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",2,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",2,[[["self"]]]],[11,"initialize","","",2,[[]]],[11,"encode_hex","","",2,[[["self"]],["u"]]],[11,"encode_hex_upper","","",2,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"unchecked_from","","",17,[[["t"]],["outer"]]],[11,"unchecked_into","","",17,[[],["t"]]],[11,"from_string","","",17,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",17,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",17,[[],["v"]]],[11,"clear","","",17,[[["self"]]]],[11,"initialize","","",17,[[]]],[11,"encode_hex","","",17,[[["self"]],["u"]]],[11,"encode_hex_upper","","",17,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"unchecked_into","","",18,[[],["t"]]],[11,"size_hint","","",18,[[["self"]],["usize"]]],[11,"using_encoded","","",18,[[["self"],["f"]],["r"]]],[11,"encode","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",18,[[["w"],["self"]]]],[11,"decode","","",18,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",18,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",18,[[],["v"]]],[11,"clear","","",18,[[["self"]]]],[11,"initialize","","",18,[[]]],[11,"encode_hex","","",18,[[["self"]],["u"]]],[11,"encode_hex_upper","","",18,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"unchecked_into","","",19,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","sp_application_crypto::sr25519","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unchecked_from","","",6,[[["t"]],["outer"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_string","","",6,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",6,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"size_hint","","",6,[[["self"]],["usize"]]],[11,"using_encoded","","",6,[[["self"],["f"]],["r"]]],[11,"encode","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",6,[[["w"],["self"]]]],[11,"decode","","",6,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",6,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",6,[[],["v"]]],[11,"into_ffi_value","","",6,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",6,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",6,[[["self"]]]],[11,"initialize","","",6,[[]]],[11,"encode_hex","","",6,[[["self"]],["u"]]],[11,"encode_hex_upper","","",6,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"unchecked_into","","",20,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"size_hint","","",7,[[["self"]],["usize"]]],[11,"using_encoded","","",7,[[["self"],["f"]],["r"]]],[11,"encode","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",7,[[["w"],["self"]]]],[11,"decode","","",7,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",7,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",7,[[],["v"]]],[11,"into_ffi_value","","",7,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",7,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",7,[[["self"]]]],[11,"initialize","","",7,[[]]],[11,"encode_hex","","",7,[[["self"]],["u"]]],[11,"encode_hex_upper","","",7,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"unchecked_from","","",21,[[["t"]],["outer"]]],[11,"unchecked_into","","",21,[[],["t"]]],[11,"from_string","","",21,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",21,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"size_hint","","",21,[[["self"]],["usize"]]],[11,"using_encoded","","",21,[[["self"],["f"]],["r"]]],[11,"encode","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",21,[[["w"],["self"]]]],[11,"decode","","",21,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",21,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",21,[[],["v"]]],[11,"clear","","",21,[[["self"]]]],[11,"initialize","","",21,[[]]],[11,"encode_hex","","",21,[[["self"]],["u"]]],[11,"encode_hex_upper","","",21,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"unchecked_into","","",22,[[],["t"]]],[11,"size_hint","","",22,[[["self"]],["usize"]]],[11,"using_encoded","","",22,[[["self"],["f"]],["r"]]],[11,"encode","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",22,[[["w"],["self"]]]],[11,"decode","","",22,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",22,[[],[["result",["error"]],["error"]]]],[11,"vzip","","",22,[[],["v"]]],[11,"clear","","",22,[[["self"]]]],[11,"initialize","","",22,[[]]],[11,"encode_hex","","",22,[[["self"]],["u"]]],[11,"encode_hex_upper","","",22,[[["self"]],["u"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"unchecked_into","","",23,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"vzip","","",23,[[],["v"]]],[11,"as_ref","sp_application_crypto::ed25519","",1,[[["self"]]]],[11,"as_ref","sp_application_crypto::sr25519","",6,[[["self"]]]],[11,"as_ref","","",7,[[["self"]]]],[11,"as_ref","","",6,[[["self"]]]],[11,"as_ref","","",7,[[["self"]]]],[11,"as_ref","sp_application_crypto::ed25519","",2,[[["self"]]]],[11,"as_ref","","",1,[[["self"]]]],[11,"as_ref","sp_application_crypto::sr25519","",20,[[["self"]],["keypair"]]],[11,"as_ref","sp_application_crypto::ed25519","",2,[[["self"]]]],[11,"deref","sp_application_crypto::sr25519","",6,[[["self"]]]],[11,"deref","sp_application_crypto::ed25519","",1,[[["self"]]]],[11,"into_inner","sp_application_crypto","",0,[[]]],[11,"inner","","",0,[[["self"]]]],[11,"from_inner","","",0,[[],["keytypeid"]]],[11,"into_inner","sp_application_crypto::ed25519","",1,[[]]],[11,"inner","","",1,[[["self"]]]],[11,"from_inner","","",1,[[],["public"]]],[11,"into_inner","sp_application_crypto::sr25519","",6,[[]]],[11,"inner","","",6,[[["self"]]]],[11,"from_inner","","",6,[[],["public"]]],[11,"into_inner","","",7,[[]]],[11,"inner","","",7,[[["self"]]]],[11,"from_inner","","",7,[[],["signature"]]],[11,"into_inner","sp_application_crypto::ed25519","",2,[[]]],[11,"inner","","",2,[[["self"]]]],[11,"from_inner","","",2,[[],["signature"]]],[11,"fmt","","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::sr25519","",8,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::ed25519","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::sr25519","",7,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::ed25519","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::sr25519","",6,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::ed25519","",4,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"deserialize","sp_application_crypto::sr25519","",7,[[["d"]],[["signature"],["result",["signature"]]]]],[11,"deserialize","sp_application_crypto::ed25519","",1,[[["d"]],[["public"],["result",["public"]]]]],[11,"deserialize","sp_application_crypto::sr25519","",6,[[["d"]],[["result",["public"]],["public"]]]],[11,"deserialize","sp_application_crypto::ed25519","",2,[[["d"]],[["result",["signature"]],["signature"]]]],[11,"eq","","",3,[[["localizedsignature"],["self"]],["bool"]]],[11,"ne","","",3,[[["localizedsignature"],["self"]],["bool"]]],[11,"eq","sp_application_crypto::sr25519","",6,[[["self"],["public"]],["bool"]]],[11,"ne","","",6,[[["self"],["public"]],["bool"]]],[11,"eq","sp_application_crypto::ed25519","",1,[[["public"],["self"]],["bool"]]],[11,"ne","","",1,[[["public"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["signature"]],["bool"]]],[11,"eq","sp_application_crypto::sr25519","",7,[[["signature"],["self"]],["bool"]]],[11,"eq","sp_application_crypto::ed25519","",4,[[["publicerror"],["self"]],["bool"]]],[11,"eq","sp_application_crypto::sr25519","",8,[[["localizedsignature"],["self"]],["bool"]]],[11,"ne","","",8,[[["localizedsignature"],["self"]],["bool"]]],[11,"eq","sp_application_crypto","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"ne","","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"serialize","sp_application_crypto::ed25519","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","sp_application_crypto::sr25519","",7,[[["s"],["self"]],["result"]]],[11,"serialize","","",6,[[["s"],["self"]],["result"]]],[11,"decode","","",6,[[["decin"]],[["error"],["result",["public","error"]],["public"]]]],[11,"decode","sp_application_crypto","",0,[[["decin"]],[["keytypeid"],["result",["keytypeid","error"]],["error"]]]],[11,"decode","sp_application_crypto::ed25519","",1,[[["decin"]],[["public"],["result",["public","error"]],["error"]]]],[11,"decode","","",3,[[["decin"]],[["result",["localizedsignature","error"]],["localizedsignature"],["error"]]]],[11,"decode","","",2,[[["decin"]],[["result",["signature","error"]],["signature"],["error"]]]],[11,"decode","sp_application_crypto::sr25519","",7,[[["decin"]],[["error"],["signature"],["result",["signature","error"]]]]],[11,"cmp","sp_application_crypto::ed25519","",1,[[["public"],["self"]],["ordering"]]],[11,"cmp","sp_application_crypto::sr25519","",6,[[["self"],["public"]],["ordering"]]],[11,"cmp","sp_application_crypto","",0,[[["self"],["keytypeid"]],["ordering"]]],[11,"generate_with_phrase","sp_application_crypto::ed25519","Generate new secure (random) key pair and provide the…",16,[[["str"],["option",["str"]]]]],[11,"from_phrase","","Generate key pair from given recovery phrase and password.",16,[[["str"],["option",["str"]]],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"from_seed","","Make a new key pair from secret seed material.",16,[[],["pair"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",16,[[],[["result",["pair","secretstringerror"]],["pair"],["secretstringerror"]]]],[11,"derive","","Derive a child key from a series of given junctions.",16,[[["option"],["iter"],["self"]],[["result",["deriveerror"]],["deriveerror"]]]],[11,"public","","Get the public key.",16,[[["self"]],["public"]]],[11,"sign","","Sign a message.",16,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",16,[[["m"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",16,[[["m"],["p"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"from_seed","sp_application_crypto::sr25519","Make a new key pair from raw secret seed material.",20,[[],["pair"]]],[11,"public","","Get the public key.",20,[[["self"]],["public"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",20,[[],[["secretstringerror"],["pair"],["result",["pair","secretstringerror"]]]]],[11,"generate_with_phrase","","",20,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",20,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"derive","","",20,[[["option"],["iter"],["self"]],["result"]]],[11,"sign","","",20,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",20,[[["m"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",20,[[["m"],["p"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"fmt","sp_application_crypto::ed25519","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_application_crypto::sr25519","",6,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_mut","","",7,[[["self"]]]],[11,"as_mut","sp_application_crypto::ed25519","",1,[[["self"]]]],[11,"as_mut","","",2,[[["self"]]]],[11,"as_mut","sp_application_crypto::sr25519","",6,[[["self"]]]],[11,"from_slice","","A new instance from the given slice that should be 32…",6,[[],["public"]]],[11,"from_slice","sp_application_crypto::ed25519","A new instance from the given slice that should be 32…",1,[[],["public"]]],[11,"from","sp_application_crypto::sr25519","",20,[[["minisecretkey"]],["pair"]]],[11,"from","","",20,[[["secretkey"]],["pair"]]],[11,"from","sp_application_crypto","",0,[[["u32"]],["keytypeid"]]],[11,"from","sp_application_crypto::ed25519","",1,[[["pair"]],["public"]]],[11,"from","sp_application_crypto::sr25519","",7,[[["signature"]],["signature"]]],[11,"from","","",20,[[["keypair"]],["pair"]]],[11,"clone","sp_application_crypto","",0,[[["self"]],["keytypeid"]]],[11,"clone","sp_application_crypto::ed25519","",2,[[["self"]],["signature"]]],[11,"clone","sp_application_crypto::sr25519","",6,[[["self"]],["public"]]],[11,"clone","","",8,[[["self"]],["localizedsignature"]]],[11,"clone","sp_application_crypto::ed25519","",1,[[["self"]],["public"]]],[11,"clone","sp_application_crypto::sr25519","",20,[[["self"]],["pair"]]],[11,"clone","sp_application_crypto::ed25519","",16,[[["self"]],["pair"]]],[11,"clone","","",4,[[["self"]],["publicerror"]]],[11,"clone","sp_application_crypto::sr25519","",7,[[["self"]],["signature"]]],[11,"clone","sp_application_crypto::ed25519","",3,[[["self"]],["localizedsignature"]]],[11,"from_str","","",1,[[["str"]],[["result",["public"]],["public"]]]],[11,"from_str","sp_application_crypto::sr25519","",6,[[["str"]],[["result",["public"]],["public"]]]],[11,"unchecked_from","","",6,[[],["public"]]],[11,"unchecked_from","sp_application_crypto::ed25519","",1,[[],["public"]]],[11,"unchecked_from","sp_application_crypto::sr25519","",6,[[["h256"]],["public"]]],[11,"unchecked_from","sp_application_crypto::ed25519","",1,[[["h256"]],["public"]]],[11,"derive","sp_application_crypto::sr25519","Derive a child key from a series of given junctions.",6,[[["self"],["iter"]],[["option",["public"]],["public"]]]],[11,"encode_to","sp_application_crypto::ed25519","",3,[[["self"],["encout"]]]],[11,"encode_to","","",1,[[["self"],["encout"]]]],[11,"encode","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_application_crypto::sr25519","",7,[[["self"],["encout"]]]],[11,"encode","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",7,[[["self"],["f"]],["r"]]],[11,"encode_to","","",6,[[["self"],["encout"]]]],[11,"encode","","",6,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",6,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_application_crypto::ed25519","",2,[[["self"],["encout"]]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_application_crypto","",0,[[["self"],["encout"]]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","sp_application_crypto::ed25519","",2,[[["self"],["h"]]]],[11,"hash","sp_application_crypto::sr25519","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["h"]]]],[11,"hash","sp_application_crypto::ed25519","",1,[[["self"],["__h"]]]],[11,"try_from","","",1,[[],[["result",["public"]],["public"]]]],[11,"try_from","sp_application_crypto::sr25519","",6,[[],[["result",["public"]],["public"]]]],[11,"try_from","sp_application_crypto::ed25519","",2,[[],[["result",["signature"]],["signature"]]]],[11,"try_from","sp_application_crypto::sr25519","",7,[[],[["result",["signature"]],["signature"]]]],[11,"try_from","sp_application_crypto","",0,[[["str"]],[["result",["keytypeid"]],["keytypeid"]]]],[11,"default","sp_application_crypto::ed25519","",2,[[],["signature"]]],[11,"default","sp_application_crypto::sr25519","",6,[[],["public"]]],[11,"default","sp_application_crypto","",0,[[],["keytypeid"]]],[11,"default","sp_application_crypto::ed25519","",1,[[],["public"]]],[11,"default","sp_application_crypto::sr25519","",7,[[],["signature"]]],[11,"partial_cmp","","",6,[[["self"],["public"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["public"]],["bool"]]],[11,"le","","",6,[[["self"],["public"]],["bool"]]],[11,"gt","","",6,[[["self"],["public"]],["bool"]]],[11,"ge","","",6,[[["self"],["public"]],["bool"]]],[11,"partial_cmp","sp_application_crypto::ed25519","",1,[[["public"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["public"],["self"]],["bool"]]],[11,"le","","",1,[[["public"],["self"]],["bool"]]],[11,"gt","","",1,[[["public"],["self"]],["bool"]]],[11,"ge","","",1,[[["public"],["self"]],["bool"]]],[11,"partial_cmp","sp_application_crypto","",0,[[["self"],["keytypeid"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"le","","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"gt","","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"ge","","",0,[[["self"],["keytypeid"]],["bool"]]],[11,"all","sp_application_crypto::ed25519","",1,[[["keytypeid"]],["vec"]]],[11,"generate_pair","","",1,[[["option",["vec"]],["vec",["u8"]],["keytypeid"]],["self"]]],[11,"sign","","",1,[[["m"],["self"],["keytypeid"]],["option"]]],[11,"verify","","",1,[[["self"],["m"]],["bool"]]],[11,"all","sp_application_crypto::sr25519","",6,[[["keytypeid"]],["vec"]]],[11,"generate_pair","","",6,[[["option",["vec"]],["vec",["u8"]],["keytypeid"]],["self"]]],[11,"sign","","",6,[[["m"],["self"],["keytypeid"]],["option"]]],[11,"verify","","",6,[[["self"],["m"]],["bool"]]],[11,"all","sp_application_crypto::ed25519","",17,[[],["vec"]]],[11,"generate_pair","","",17,[[["option",["vec"]],["vec",["u8"]]],["self"]]],[11,"sign","","",17,[[["self"],["m"]],["option"]]],[11,"verify","","",17,[[["self"],["m"]],["bool"]]],[11,"all","sp_application_crypto::sr25519","",21,[[],["vec"]]],[11,"generate_pair","","",21,[[["option",["vec"]],["vec",["u8"]]],["self"]]],[11,"sign","","",21,[[["self"],["m"]],["option"]]],[11,"verify","","",21,[[["self"],["m"]],["bool"]]],[11,"as_mut","sp_application_crypto::ed25519","",17,[[["self"]],["public"]]],[11,"as_mut","","",17,[[["self"]]]],[11,"as_mut","","",18,[[["self"]],["signature"]]],[11,"as_mut","","",19,[[["self"]],["pair"]]],[11,"as_mut","sp_application_crypto::sr25519","",21,[[["self"]],["public"]]],[11,"as_mut","","",21,[[["self"]]]],[11,"as_mut","","",22,[[["self"]],["signature"]]],[11,"as_mut","","",23,[[["self"]],["pair"]]],[11,"as_ref","sp_application_crypto::ed25519","",17,[[["self"]],["public"]]],[11,"as_ref","","",17,[[["self"]]]],[11,"as_ref","","",18,[[["self"]],["signature"]]],[11,"as_ref","","",18,[[["self"]]]],[11,"as_ref","","",19,[[["self"]],["pair"]]],[11,"as_ref","sp_application_crypto::sr25519","",21,[[["self"]],["public"]]],[11,"as_ref","","",21,[[["self"]]]],[11,"as_ref","","",22,[[["self"]],["signature"]]],[11,"as_ref","","",22,[[["self"]]]],[11,"as_ref","","",23,[[["self"]],["pair"]]],[11,"from","sp_application_crypto::ed25519","",17,[[["public"]],["self"]]],[11,"from","","",1,[[["public"]],["self"]]],[11,"from","","",18,[[["signature"]],["self"]]],[11,"from","","",2,[[["signature"]],["self"]]],[11,"from","","",19,[[["pair"]],["self"]]],[11,"from","","",16,[[["pair"]],["self"]]],[11,"from","sp_application_crypto::sr25519","",21,[[["public"]],["self"]]],[11,"from","","",6,[[["public"]],["self"]]],[11,"from","","",22,[[["signature"]],["self"]]],[11,"from","","",7,[[["signature"]],["self"]]],[11,"from","","",23,[[["pair"]],["self"]]],[11,"from","","",20,[[["pair"]],["self"]]],[11,"clone","sp_application_crypto::ed25519","",17,[[["self"]],["public"]]],[11,"clone","","",18,[[["self"]],["signature"]]],[11,"clone","","",19,[[["self"]],["pair"]]],[11,"clone","sp_application_crypto::sr25519","",21,[[["self"]],["public"]]],[11,"clone","","",22,[[["self"]],["signature"]]],[11,"clone","","",23,[[["self"]],["pair"]]],[11,"default","sp_application_crypto::ed25519","",17,[[],["public"]]],[11,"default","","",18,[[],["signature"]]],[11,"default","sp_application_crypto::sr25519","",21,[[],["public"]]],[11,"default","","",22,[[],["signature"]]],[11,"cmp","sp_application_crypto::ed25519","",17,[[["self"],["public"]],["ordering"]]],[11,"cmp","sp_application_crypto::sr25519","",21,[[["public"],["self"]],["ordering"]]],[11,"eq","sp_application_crypto::ed25519","",17,[[["self"],["public"]],["bool"]]],[11,"ne","","",17,[[["self"],["public"]],["bool"]]],[11,"eq","","",18,[[["self"],["signature"]],["bool"]]],[11,"ne","","",18,[[["self"],["signature"]],["bool"]]],[11,"eq","sp_application_crypto::sr25519","",21,[[["public"],["self"]],["bool"]]],[11,"ne","","",21,[[["public"],["self"]],["bool"]]],[11,"eq","","",22,[[["signature"],["self"]],["bool"]]],[11,"ne","","",22,[[["signature"],["self"]],["bool"]]],[11,"partial_cmp","sp_application_crypto::ed25519","",17,[[["self"],["public"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",17,[[["self"],["public"]],["bool"]]],[11,"le","","",17,[[["self"],["public"]],["bool"]]],[11,"gt","","",17,[[["self"],["public"]],["bool"]]],[11,"ge","","",17,[[["self"],["public"]],["bool"]]],[11,"partial_cmp","sp_application_crypto::sr25519","",21,[[["public"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",21,[[["public"],["self"]],["bool"]]],[11,"le","","",21,[[["public"],["self"]],["bool"]]],[11,"gt","","",21,[[["public"],["self"]],["bool"]]],[11,"ge","","",21,[[["public"],["self"]],["bool"]]],[11,"deref","sp_application_crypto::ed25519","",18,[[["self"]]]],[11,"deref","sp_application_crypto::sr25519","",22,[[["self"]]]],[11,"fmt","sp_application_crypto::ed25519","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_application_crypto::sr25519","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_application_crypto::ed25519","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_application_crypto::sr25519","",21,[[["formatter"],["self"]],["result"]]],[11,"hash","sp_application_crypto::ed25519","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","sp_application_crypto::sr25519","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"derive","sp_application_crypto::ed25519","",17,[[["self"],["iterator"]],["option"]]],[11,"derive","sp_application_crypto::sr25519","",21,[[["self"],["iterator"]],["option"]]],[11,"from_slice","sp_application_crypto::ed25519","",17,[[],["self"]]],[11,"from_slice","sp_application_crypto::sr25519","",21,[[],["self"]]],[11,"encode_to","sp_application_crypto::ed25519","",17,[[["self"],["encout"]]]],[11,"encode","","",17,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",17,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",18,[[["self"],["encout"]]]],[11,"encode","","",18,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",18,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_application_crypto::sr25519","",21,[[["self"],["encout"]]]],[11,"encode","","",21,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",21,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",22,[[["self"],["encout"]]]],[11,"encode","","",22,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",22,[[["fnonce"],["self"]],["r"]]],[11,"decode","sp_application_crypto::ed25519","",17,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","","",18,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","sp_application_crypto::sr25519","",21,[[["decin"]],[["error"],["result",["error"]]]]],[11,"decode","","",22,[[["decin"]],[["error"],["result",["error"]]]]],[11,"generate_with_phrase","sp_application_crypto::ed25519","",19,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",19,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"derive","","",19,[[["option"],["iterator"],["self"]],["result"]]],[11,"from_seed","","",19,[[],["self"]]],[11,"from_seed_slice","","",19,[[],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"sign","","",19,[[["self"]]]],[11,"verify","","",19,[[["asref"]],["bool"]]],[11,"verify_weak","","",19,[[["asref"]],["bool"]]],[11,"public","","",19,[[["self"]]]],[11,"to_raw_vec","","",19,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"generate_with_phrase","sp_application_crypto::sr25519","",23,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",23,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"derive","","",23,[[["option"],["iterator"],["self"]],["result"]]],[11,"from_seed","","",23,[[],["self"]]],[11,"from_seed_slice","","",23,[[],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"sign","","",23,[[["self"]]]],[11,"verify","","",23,[[["asref"]],["bool"]]],[11,"verify_weak","","",23,[[["asref"]],["bool"]]],[11,"public","","",23,[[["self"]]]],[11,"to_raw_vec","","",23,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"serialize","sp_application_crypto::ed25519","",17,[[["s"],["self"]],["result"]]],[11,"serialize","sp_application_crypto::sr25519","",21,[[["s"],["self"]],["result"]]],[11,"deserialize","sp_application_crypto::ed25519","",17,[[["d"]],["result"]]],[11,"deserialize","sp_application_crypto::sr25519","",21,[[["d"]],["result"]]],[11,"from_raw","sp_application_crypto::ed25519","A new instance from the given 32-byte `data`.",1,[[],["public"]]],[11,"from_h256","","A new instance from an H256.",1,[[["h256"]],["public"]]],[11,"as_array_ref","","Return a slice filled with raw data.",1,[[["self"]]]],[11,"seed","","Get the seed for this key.",16,[[["self"]]]],[11,"from_legacy_string","","Exactly as `from_string` except that if no matches are…",16,[[["str"],["option",["str"]]],["pair"]]],[11,"from_raw","","A new instance from the given 64-byte `data`.",2,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 64…",2,[[],["signature"]]],[11,"from_h512","","A new instance from an H512.",2,[[["h512"]],["signature"]]],[11,"from_raw","sp_application_crypto::sr25519","A new instance from the given 32-byte `data`.",6,[[],["public"]]],[11,"from_h256","","A new instance from an H256.",6,[[["h256"]],["public"]]],[11,"as_array_ref","","Return a slice filled with raw data.",6,[[["self"]]]],[11,"from_entropy","","Make a new key pair from binary data derived from a valid…",20,[[["str"],["option",["str"]]]]],[11,"from_raw","","A new instance from the given 64-byte `data`.",7,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 64…",7,[[],["signature"]]],[11,"from_h512","","A new instance from an H512.",7,[[["h512"]],["signature"]]],[18,"ID","sp_application_crypto","An identifier for this application-specific key type.",9,null],[18,"ID","","An identifier for this application-specific key type.",14,null]],"p":[[3,"KeyTypeId"],[3,"Public"],[3,"Signature"],[3,"LocalizedSignature"],[4,"PublicError"],[4,"DeriveError"],[3,"Public"],[3,"Signature"],[3,"LocalizedSignature"],[8,"AppKey"],[8,"AppPublic"],[8,"AppPair"],[8,"AppSignature"],[8,"RuntimePublic"],[8,"RuntimeAppPublic"],[8,"BoundToRuntimeAppPublic"],[3,"Pair"],[3,"AppPublic"],[3,"AppSignature"],[3,"AppPair"],[3,"Pair"],[3,"AppPublic"],[3,"AppSignature"],[3,"AppPair"]]};
searchIndex["sp_arithmetic"] = {"doc":"Minimal fixed point arithmetic primitives and types for…","i":[[3,"Fixed64","sp_arithmetic","An unsigned fixed point number. Can hold any value in the…",null,null],[3,"Percent","","A fixed point representation of a number between in the…",null,null],[3,"Permill","","A fixed point representation of a number between in the…",null,null],[3,"Perbill","","A fixed point representation of a number between in the…",null,null],[3,"Perquintill","","A fixed point representation of a number between in the…",null,null],[3,"Rational128","","A wrapper for any rational number with a 128 bit numerator…",null,null],[0,"biguint","","Infinite precision unsigned integer for substrate runtime.",null,null],[3,"BigUint","sp_arithmetic::biguint","Simple wrapper around an infinitely large integer,…",null,null],[5,"split","","Splits a [`Double`] limb number into a tuple of two…",null,[[["double"]]]],[5,"mul_single","","Assumed as a given primitive.",null,[[["single"]],["double"]]],[5,"add_single","","Assumed as a given primitive.",null,[[["single"]]]],[6,"Single","","Representation of a single limb.",null,null],[6,"Double","","Representation of two limbs.",null,null],[11,"with_capacity","","Create a new instance with `size` limbs. This prevents any…",0,[[["usize"]],["self"]]],[11,"from_limbs","","Raw constructor from custom limbs. If `limbs` is empty,…",0,[[],["self"]]],[11,"len","","Number of limbs.",0,[[["self"]],["usize"]]],[11,"get","","A naive getter for limb at `index`. Note that the order is…",0,[[["self"],["usize"]],["single"]]],[11,"checked_get","","A naive getter for limb at `index`. Note that the order is…",0,[[["self"],["usize"]],[["option",["single"]],["single"]]]],[11,"set","","A naive setter for limb at `index`. Note that the order is…",0,[[["self"],["usize"],["single"]]]],[11,"lsb","","returns the least significant limb of the number.",0,[[["self"]],["single"]]],[11,"msb","","returns the most significant limb of the number.",0,[[["self"]],["single"]]],[11,"lstrip","","Strips zeros from the left side (the most significant…",0,[[["self"]]]],[11,"lpad","","Zero-pad `self` from left to reach `size` limbs. Will not…",0,[[["self"],["usize"]]]],[11,"add","","Adds `self` with `other`. self and other do not have to…",0,[[["self"]],["self"]]],[11,"sub","","Subtracts `other` from `self`. self and other do not have…",0,[[["self"]],["result"]]],[11,"mul","","Multiplies n-limb number `self` with m-limb number `other`.",0,[[["self"]],["self"]]],[11,"div_unit","","Divides `self` by a single limb `other`. This can be used…",0,[[["single"]],["self"]]],[11,"div","","Divides an `n + m` limb self by a `n` limb `other`. The…",0,[[["self"],["bool"]],["option"]]],[0,"helpers_128bit","sp_arithmetic","Some helper functions to work with 128bit numbers. Note…",null,null],[5,"gcd","sp_arithmetic::helpers_128bit","Helper gcd function used in Rational128 implementation.",null,[[["u128"]],["u128"]]],[5,"split","","split a u128 into two u64 limbs",null,[[["u128"]]]],[5,"to_big_uint","","Convert a u128 to a u32 based biguint.",null,[[["u128"]],["biguint"]]],[5,"multiply_by_rational","","Safely and accurately compute `a * b / c`. The approach…",null,[[["u128"]],[["str"],["result",["u128","str"]],["u128"]]]],[0,"traits","sp_arithmetic","Primitives for the runtime modules.",null,null],[8,"IntegerSquareRoot","sp_arithmetic::traits","A trait implementing integer square root.",null,null],[11,"integer_sqrt","","Find the integer square root.",1,[[["self"]],["self"]]],[10,"integer_sqrt_checked","","Find the integer square root, returning `None` if the…",1,[[["self"]],["option"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",2,[[],["self"]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",2,[[["self"]]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,[[],["self"]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",3,[[["self"]]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",3,[[["self"]],["bool"]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",4,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",4,[[],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",5,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",6,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",7,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",8,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",9,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",10,[[["u32"],["self"]],["option"]]],[8,"SimpleArithmetic","","A meta trait for arithmetic.",null,null],[8,"UniqueSaturatedFrom","","Just like `From` except that if the source value is too…",null,null],[10,"unique_saturated_from","","Convert from a value of `T` into an equivalent instance of…",11,[[["t"]],["self"]]],[8,"UniqueSaturatedInto","","Just like `Into` except that if the source value is too…",null,null],[10,"unique_saturated_into","","Consume self to return an equivalent value of `T`.",12,[[],["t"]]],[8,"Saturating","","Simple trait to use checked mul and max value to give a…",null,null],[10,"saturating_add","","Saturated addition - if the product can't fit in the type…",13,[[],["self"]]],[10,"saturating_sub","","Saturated subtraction - if the product can't fit in the…",13,[[],["self"]]],[10,"saturating_mul","","Saturated multiply - if the product can't fit in the type…",13,[[],["self"]]],[8,"SaturatedConversion","","Convenience type to work around the highly unergonomic…",null,null],[11,"saturated_from","","Convert from a value of `T` into an equivalent instance of…",14,[[["t"]],["self"]]],[11,"saturated_into","","Consume self to return an equivalent value of `T`.",14,[[],["t"]]],[11,"zero","sp_arithmetic","Nothing.",15,[[],["self"]]],[11,"is_zero","","`true` if this is nothing.",15,[[["self"]],["bool"]]],[11,"one","","Everything.",15,[[],["self"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",15,[[],["u8"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",15,[[],["u8"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",15,[[["u8"]],["self"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",15,[[["u8"]],["self"]]],[11,"square","","Return the product of multiplication of this value by…",15,[[],["self"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",15,[[["f64"]],["self"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",15,[[["n"]],["self"]]],[11,"zero","","Nothing.",16,[[],["self"]]],[11,"is_zero","","`true` if this is nothing.",16,[[["self"]],["bool"]]],[11,"one","","Everything.",16,[[],["self"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",16,[[],["u32"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",16,[[],["u32"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",16,[[["u32"]],["self"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",16,[[["u32"]],["self"]]],[11,"square","","Return the product of multiplication of this value by…",16,[[],["self"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",16,[[["f64"]],["self"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",16,[[["n"]],["self"]]],[11,"zero","","Nothing.",17,[[],["self"]]],[11,"is_zero","","`true` if this is nothing.",17,[[["self"]],["bool"]]],[11,"one","","Everything.",17,[[],["self"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",17,[[],["u32"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",17,[[],["u32"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",17,[[["u32"]],["self"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",17,[[["u32"]],["self"]]],[11,"square","","Return the product of multiplication of this value by…",17,[[],["self"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",17,[[["f64"]],["self"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",17,[[["n"]],["self"]]],[11,"zero","","Nothing.",18,[[],["self"]]],[11,"is_zero","","`true` if this is nothing.",18,[[["self"]],["bool"]]],[11,"one","","Everything.",18,[[],["self"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",18,[[],["u64"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",18,[[],["u64"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",18,[[["u64"]],["self"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",18,[[["u64"]],["self"]]],[11,"square","","Return the product of multiplication of this value by…",18,[[],["self"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",18,[[["f64"]],["self"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",18,[[["n"]],["self"]]],[11,"from_natural","","creates self from a natural number.",19,[[["i64"]],["self"]]],[11,"accuracy","","Return the accuracy of the type. Given that this function…",19,[[],["i64"]]],[11,"into_inner","","Consume self and return the inner value.",19,[[],["i64"]]],[11,"from_parts","","Raw constructor. Equal to `parts / 1_000_000_000`.",19,[[["i64"]],["self"]]],[11,"from_rational","","creates self from a rational number. Equal to `n/d`.",19,[[["i64"],["u64"]],["self"]]],[11,"saturated_multiply_accumulate","","Performs a saturated multiply and accumulate by unsigned…",19,[[["n"]],["n"]]],[11,"zero","","Nothing.",20,[[],["self"]]],[11,"is_zero","","If it is zero or not",20,[[["self"]],["bool"]]],[11,"from","","Build from a raw `n/d`.",20,[[["u128"]],["self"]]],[11,"from_unchecked","","Build from a raw `n/d`. This could lead to / 0 if not…",20,[[["u128"]],["self"]]],[11,"n","","Return the numerator.",20,[[["self"]],["u128"]]],[11,"d","","Return the denominator.",20,[[["self"]],["u128"]]],[11,"to_den","","Convert `self` to a similar rational number where…",20,[[["u128"]],[["result",["str"]],["str"]]]],[11,"lcm","","Get the least common divisor of `self` and `other`.",20,[[["self"]],[["str"],["result",["u128","str"]],["u128"]]]],[11,"lazy_saturating_add","","A saturating add that assumes `self` and `other` have the…",20,[[],["self"]]],[11,"lazy_saturating_sub","","A saturating subtraction that assumes `self` and `other`…",20,[[],["self"]]],[11,"checked_add","","Addition. Simply tries to unify the denominators and add…",20,[[],[["result",["str"]],["str"]]]],[11,"checked_sub","","Subtraction. Simply tries to unify the denominators and…",20,[[],[["result",["str"]],["str"]]]],[11,"unique_saturated_into","","",19,[[],["t"]]],[11,"saturating_add","","",19,[[["t"]],["t"]]],[11,"saturating_sub","","",19,[[["t"]],["t"]]],[11,"saturating_mul","","",19,[[["t"]],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"size_hint","","",19,[[["self"]],["usize"]]],[11,"using_encoded","","",19,[[["self"],["f"]],["r"]]],[11,"encode","","",19,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",19,[[["w"],["self"]]]],[11,"decode","","",19,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",19,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",19,[[],[["error"],["result",["error"]]]]],[11,"unique_saturated_into","","",15,[[],["t"]]],[11,"saturating_add","","",15,[[["t"]],["t"]]],[11,"saturating_sub","","",15,[[["t"]],["t"]]],[11,"saturating_mul","","",15,[[["t"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"size_hint","","",15,[[["self"]],["usize"]]],[11,"using_encoded","","",15,[[["self"],["f"]],["r"]]],[11,"encode","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",15,[[["w"],["self"]]]],[11,"decode","","",15,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",15,[[],[["error"],["result",["error"]]]]],[11,"unique_saturated_into","","",16,[[],["t"]]],[11,"saturating_add","","",16,[[["t"]],["t"]]],[11,"saturating_sub","","",16,[[["t"]],["t"]]],[11,"saturating_mul","","",16,[[["t"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"size_hint","","",16,[[["self"]],["usize"]]],[11,"using_encoded","","",16,[[["self"],["f"]],["r"]]],[11,"encode","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",16,[[["w"],["self"]]]],[11,"decode","","",16,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",16,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",16,[[],[["error"],["result",["error"]]]]],[11,"unique_saturated_into","","",17,[[],["t"]]],[11,"saturating_add","","",17,[[["t"]],["t"]]],[11,"saturating_sub","","",17,[[["t"]],["t"]]],[11,"saturating_mul","","",17,[[["t"]],["t"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["error"],["result",["error"]]]]],[11,"unique_saturated_into","","",18,[[],["t"]]],[11,"saturating_add","","",18,[[["t"]],["t"]]],[11,"saturating_sub","","",18,[[["t"]],["t"]]],[11,"saturating_mul","","",18,[[["t"]],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"size_hint","","",18,[[["self"]],["usize"]]],[11,"using_encoded","","",18,[[["self"],["f"]],["r"]]],[11,"encode","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",18,[[["w"],["self"]]]],[11,"decode","","",18,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",18,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",18,[[],[["error"],["result",["error"]]]]],[11,"unique_saturated_into","","",20,[[],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"unique_saturated_into","sp_arithmetic::biguint","",0,[[],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"saturating_add","sp_arithmetic","",15,[[],["self"]]],[11,"saturating_sub","","",15,[[],["self"]]],[11,"saturating_mul","","",15,[[],["self"]]],[11,"saturating_add","","",16,[[],["self"]]],[11,"saturating_sub","","",16,[[],["self"]]],[11,"saturating_mul","","",16,[[],["self"]]],[11,"saturating_add","","",17,[[],["self"]]],[11,"saturating_sub","","",17,[[],["self"]]],[11,"saturating_mul","","",17,[[],["self"]]],[11,"saturating_add","","",18,[[],["self"]]],[11,"saturating_sub","","",18,[[],["self"]]],[11,"saturating_mul","","",18,[[],["self"]]],[11,"saturating_add","","",19,[[],["self"]]],[11,"saturating_mul","","",19,[[],["self"]]],[11,"saturating_sub","","",19,[[],["self"]]],[11,"from","sp_arithmetic::biguint","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["single"]],["self"]]],[11,"from","","",0,[[["double"]],["self"]]],[11,"from","sp_arithmetic","",15,[[["compact",["percent"]],["percent"]],["percent"]]],[11,"from","","",16,[[["permill"],["compact",["permill"]]],["permill"]]],[11,"from","","",17,[[["compact",["perbill"]],["perbill"]],["perbill"]]],[11,"from","","",18,[[["compact",["perquintill"]],["perquintill"]],["perquintill"]]],[11,"clone","sp_arithmetic::biguint","",0,[[["self"]],["biguint"]]],[11,"clone","sp_arithmetic","",15,[[["self"]],["percent"]]],[11,"clone","","",16,[[["self"]],["permill"]]],[11,"clone","","",17,[[["self"]],["perbill"]]],[11,"clone","","",18,[[["self"]],["perquintill"]]],[11,"clone","","",19,[[["self"]],["fixed64"]]],[11,"clone","","",20,[[["self"]],["rational128"]]],[11,"default","sp_arithmetic::biguint","",0,[[],["biguint"]]],[11,"default","sp_arithmetic","",15,[[],["percent"]]],[11,"default","","",16,[[],["permill"]]],[11,"default","","",17,[[],["perbill"]]],[11,"default","","",18,[[],["perquintill"]]],[11,"default","","",19,[[],["fixed64"]]],[11,"default","","",20,[[],["rational128"]]],[11,"cmp","sp_arithmetic::biguint","",0,[[["self"]],["ordering"]]],[11,"cmp","sp_arithmetic","",15,[[["percent"],["self"]],["ordering"]]],[11,"cmp","","",16,[[["self"],["permill"]],["ordering"]]],[11,"cmp","","",17,[[["perbill"],["self"]],["ordering"]]],[11,"cmp","","",18,[[["perquintill"],["self"]],["ordering"]]],[11,"cmp","","",19,[[["fixed64"],["self"]],["ordering"]]],[11,"cmp","","",20,[[["self"]],["ordering"]]],[11,"eq","sp_arithmetic::biguint","",0,[[["self"]],["bool"]]],[11,"eq","sp_arithmetic","",15,[[["percent"],["self"]],["bool"]]],[11,"ne","","",15,[[["percent"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["permill"]],["bool"]]],[11,"ne","","",16,[[["self"],["permill"]],["bool"]]],[11,"eq","","",17,[[["perbill"],["self"]],["bool"]]],[11,"ne","","",17,[[["perbill"],["self"]],["bool"]]],[11,"eq","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"ne","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"eq","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"ne","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"]],["bool"]]],[11,"partial_cmp","sp_arithmetic::biguint","",0,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","sp_arithmetic","",15,[[["percent"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",15,[[["percent"],["self"]],["bool"]]],[11,"le","","",15,[[["percent"],["self"]],["bool"]]],[11,"gt","","",15,[[["percent"],["self"]],["bool"]]],[11,"ge","","",15,[[["percent"],["self"]],["bool"]]],[11,"partial_cmp","","",16,[[["self"],["permill"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",16,[[["self"],["permill"]],["bool"]]],[11,"le","","",16,[[["self"],["permill"]],["bool"]]],[11,"gt","","",16,[[["self"],["permill"]],["bool"]]],[11,"ge","","",16,[[["self"],["permill"]],["bool"]]],[11,"partial_cmp","","",17,[[["perbill"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",17,[[["perbill"],["self"]],["bool"]]],[11,"le","","",17,[[["perbill"],["self"]],["bool"]]],[11,"gt","","",17,[[["perbill"],["self"]],["bool"]]],[11,"ge","","",17,[[["perbill"],["self"]],["bool"]]],[11,"partial_cmp","","",18,[[["perquintill"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"le","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"gt","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"ge","","",18,[[["perquintill"],["self"]],["bool"]]],[11,"partial_cmp","","",19,[[["fixed64"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"le","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"gt","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"ge","","",19,[[["fixed64"],["self"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","sp_arithmetic::biguint","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_arithmetic","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"div","","",15,[[]]],[11,"div","","",16,[[]]],[11,"div","","",17,[[]]],[11,"div","","",18,[[]]],[11,"div","","",19,[[]]],[11,"sub","sp_arithmetic::biguint","",0,[[]]],[11,"sub","sp_arithmetic","",19,[[]]],[11,"add","sp_arithmetic::biguint","",0,[[]]],[11,"add","sp_arithmetic","",19,[[]]],[11,"mul","sp_arithmetic::biguint","",0,[[]]],[11,"mul","sp_arithmetic","",15,[[["n"]]]],[11,"mul","","",16,[[["n"]]]],[11,"mul","","",17,[[["n"]]]],[11,"mul","","",18,[[["n"]]]],[11,"zero","sp_arithmetic::biguint","",0,[[],["self"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"checked_add","sp_arithmetic","",19,[[["self"]],["option"]]],[11,"checked_sub","","",19,[[["self"]],["option"]]],[11,"checked_div","","",19,[[["self"]],["option"]]],[11,"encode_to","","",15,[[["self"],["encout"]]]],[11,"encode","","",15,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",15,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",16,[[["self"],["encout"]]]],[11,"encode","","",16,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",16,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",17,[[["self"],["encout"]]]],[11,"encode","","",17,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",17,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",18,[[["self"],["encout"]]]],[11,"encode","","",18,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",18,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",19,[[["self"],["encout"]]]],[11,"encode","","",19,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",19,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",15,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",16,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",17,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",18,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",19,[[["decin"]],[["result",["error"]],["error"]]]],[11,"encode_as","","",15,[[["self"]],["u8"]]],[11,"decode_from","","",15,[[["u8"]],["percent"]]],[11,"encode_as","","",16,[[["self"]],["u32"]]],[11,"decode_from","","",16,[[["u32"]],["permill"]]],[11,"encode_as","","",17,[[["self"]],["u32"]]],[11,"decode_from","","",17,[[["u32"]],["perbill"]]],[11,"encode_as","","",18,[[["self"]],["u64"]]],[11,"decode_from","","",18,[[["u64"]],["perquintill"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","","",17,[[["self"],["__s"]],["result"]]],[11,"serialize","","",18,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",15,[[["__d"]],["result"]]],[11,"deserialize","","",16,[[["__d"]],["result"]]],[11,"deserialize","","",17,[[["__d"]],["result"]]],[11,"deserialize","","",18,[[["__d"]],["result"]]]],"p":[[3,"BigUint"],[8,"IntegerSquareRoot"],[8,"Zero"],[8,"One"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"UniqueSaturatedFrom"],[8,"UniqueSaturatedInto"],[8,"Saturating"],[8,"SaturatedConversion"],[3,"Percent"],[3,"Permill"],[3,"Perbill"],[3,"Perquintill"],[3,"Fixed64"],[3,"Rational128"]]};
searchIndex["sp_core"] = {"doc":"Shareable Substrate types.","i":[[24,"RuntimeDebug","sp_core","",null,null],[3,"H160","","Fixed-size uninterpreted hash type with 20 bytes (160…",null,null],[12,"0","","",0,null],[3,"H256","","Fixed-size uninterpreted hash type with 32 bytes (256…",null,null],[12,"0","","",1,null],[3,"H512","","Fixed-size uninterpreted hash type with 64 bytes (512…",null,null],[12,"0","","",2,null],[3,"U256","","Little-endian large integer type",null,null],[12,"0","","",3,null],[8,"Hasher","","Trait describing an object that can hash a slice of bytes.…",null,null],[16,"Out","","The output type of the `Hasher`",4,null],[16,"StdHasher","","What to use to build `HashMap`s with this `Hasher`.",4,null],[18,"LENGTH","","The length in bytes of the `Hasher` output.",4,null],[10,"hash","","Compute the hash of the provided slice of bytes returning…",4,[[]]],[3,"ChangesTrieConfiguration","","Substrate changes trie configuration.",null,null],[12,"digest_interval","","Interval (in blocks) at which level1-digests are created.…",5,null],[12,"digest_levels","","Maximal number of digest levels in hierarchy. 0 means that…",5,null],[3,"Blake2Hasher","","Concrete implementation of Hasher using Blake2b 256-bit…",null,null],[3,"Bytes","","Hex-serialized shim for `Vec<u8>`.",null,null],[12,"0","","",6,null],[3,"OpaqueMetadata","","Stores the encoded `RuntimeMetadata` for the native side…",null,null],[4,"ExecutionContext","","Context for executing a call into the runtime.",null,null],[13,"Importing","","Context for general importing (including own blocks).",7,null],[13,"Syncing","","Context used when syncing the blockchain.",7,null],[13,"BlockConstruction","","Context used for block construction.",7,null],[13,"OffchainCall","","Context used for offchain calls.",7,null],[4,"NativeOrEncoded","","Something that is either a native or an encoded value.",null,null],[13,"Native","","The native representation.",8,null],[13,"Encoded","","The encoded representation.",8,null],[4,"NeverNativeValue","","A value that is never in a native representation. This is…",null,null],[4,"LogLevel","","A log level matching the one from `log` crate.",null,null],[13,"Error","","`Error` log level.",9,null],[13,"Warn","","`Warn` log level.",9,null],[13,"Info","","`Info` log level.",9,null],[13,"Debug","","`Debug` log level.",9,null],[13,"Trace","","`Trace` log level.",9,null],[0,"hashing","","Hashing functions.",null,null],[5,"blake2_512_into","sp_core::hashing","Do a Blake2 512-bit hash and place result in `dest`.",null,[[]]],[5,"blake2_512","","Do a Blake2 512-bit hash and return result.",null,[[]]],[5,"blake2_256_into","","Do a Blake2 256-bit hash and place result in `dest`.",null,[[]]],[5,"blake2_256","","Do a Blake2 256-bit hash and return result.",null,[[]]],[5,"blake2_128_into","","Do a Blake2 128-bit hash and place result in `dest`.",null,[[]]],[5,"blake2_128","","Do a Blake2 128-bit hash and return result.",null,[[]]],[5,"twox_64_into","","Do a XX 64-bit hash and place result in `dest`.",null,[[]]],[5,"twox_64","","Do a XX 64-bit hash and return result.",null,[[]]],[5,"twox_128_into","","Do a XX 128-bit hash and place result in `dest`.",null,[[]]],[5,"twox_128","","Do a XX 128-bit hash and return result.",null,[[]]],[5,"twox_256_into","","Do a XX 256-bit hash and place result in `dest`.",null,[[]]],[5,"twox_256","","Do a XX 256-bit hash and return result.",null,[[]]],[5,"keccak_256","","Do a keccak 256-bit hash and return result.",null,[[]]],[5,"sha2_256","","Do a sha2 256-bit hash and return result.",null,[[]]],[0,"hexdisplay","sp_core","Wrapper type for byte collections that outputs hex.",null,null],[3,"HexDisplay","sp_core::hexdisplay","Simple wrapper to display hex representation of bytes.",null,null],[5,"ascii_format","","Format into ASCII + # + hex, suitable for storage key…",null,[[],["string"]]],[8,"AsBytesRef","","Simple trait to transform various types to `&[u8]`",null,null],[10,"as_bytes_ref","","Transform `self` into `&[u8]`.",10,[[["self"]]]],[11,"from","","Create new instance that will display `d` as a hex string…",11,[[["r"]],["self"]]],[0,"crypto","sp_core","Cryptographic utilities.",null,null],[3,"Protected","sp_core::crypto","A store for sensitive data.",null,null],[3,"AccountId32","","An opaque 32-byte cryptographic identifier.",null,null],[3,"Dummy","","Dummy cryptography. Doesn't do anything.",null,null],[3,"KeyTypeId","","An identifier for a type of cryptographic key.",null,null],[12,"0","","",12,null],[4,"Infallible","","The infallible type.",null,null],[4,"SecretStringError","","An error with the interpretation of a secret.",null,null],[13,"InvalidFormat","","The overall format was invalid (e.g. the seed phrase…",13,null],[13,"InvalidPhrase","","The seed phrase provided is not a valid BIP39 phrase.",13,null],[13,"InvalidPassword","","The supplied password was invalid.",13,null],[13,"InvalidSeed","","The seed is invalid (bad content).",13,null],[13,"InvalidSeedLength","","The seed has an invalid length.",13,null],[13,"InvalidPath","","The derivation path was invalid (e.g. contains soft…",13,null],[4,"DeriveJunction","","A since derivation junction description. It is the single…",null,null],[13,"Soft","","Soft (vanilla) derivation. Public keys have a…",14,null],[13,"Hard","","Hard (\"hardened\") derivation. Public keys do not have a…",14,null],[4,"PublicError","","An error type for SS58 decoding.",null,null],[13,"BadBase58","","Bad alphabet.",15,null],[13,"BadLength","","Bad length.",15,null],[13,"UnknownVersion","","Unknown version.",15,null],[13,"InvalidChecksum","","Invalid checksum.",15,null],[13,"InvalidFormat","","Invalid format.",15,null],[13,"InvalidPath","","Invalid derivation path.",15,null],[4,"Ss58AddressFormat","","A known address (sub)format/network ID for SS58.",null,null],[13,"SubstrateAccountDirect","","Any Substrate network, direct checksum, standard account…",16,null],[13,"PolkadotAccountDirect","","Polkadot Relay-chain, direct checksum, standard account…",16,null],[13,"KusamaAccountDirect","","Kusama Relay-chain, direct checksum, standard account…",16,null],[13,"DothereumAccountDirect","","Dothereum Para-chain, direct checksum, standard account…",16,null],[13,"KulupuAccountDirect","","Kulupu mainnet, direct checksum, standard account (*25519).",16,null],[13,"EdgewareAccountDirect","","Edgeware mainnet, direct checksum, standard account…",16,null],[13,"Custom","","Use a manually provided numeric value.",16,null],[5,"set_default_ss58_version","","Set the default \"version\" (actually, this is a bit of a…",null,[[["ss58addressformat"]]]],[0,"key_types","","Known key types; this also functions as a global registry…",null,null],[17,"BABE","sp_core::crypto::key_types","Key type for Babe module, build-in.",null,null],[17,"GRANDPA","","Key type for Grandpa module, build-in.",null,null],[17,"ACCOUNT","","Key type for controlling an account in a Substrate…",null,null],[17,"AURA","","Key type for Aura module, built-in.",null,null],[17,"IM_ONLINE","","Key type for ImOnline module, built-in.",null,null],[17,"AUTHORITY_DISCOVERY","","Key type for AuthorityDiscovery module, built-in.",null,null],[17,"DUMMY","","A key type ID useful for tests.",null,null],[17,"DEV_PHRASE","sp_core::crypto","The root phrase for our publicly known keys.",null,null],[17,"DEV_ADDRESS","","The address of the associated root phrase for our publicly…",null,null],[17,"JUNCTION_ID_LEN","","The length of the junction identifier. Note that this is…",null,null],[8,"UncheckedFrom","","Similar to `From`, except that the onus is on the part of…",null,null],[10,"unchecked_from","","Convert from an instance of `T` to Self. This is not…",17,[[["t"]],["self"]]],[8,"UncheckedInto","","The counterpart to `UncheckedFrom`.",null,null],[10,"unchecked_into","","The counterpart to `unchecked_from`.",18,[[],["t"]]],[8,"Ss58Codec","","Key that can be encoded to/from SS58.",null,null],[11,"from_ss58check","","Some if the string is a properly encoded SS58Check address.",19,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ss58check_with_version","","Some if the string is a properly encoded SS58Check address.",19,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string","","Some if the string is a properly encoded SS58Check…",19,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"to_ss58check_with_version","","Return the ss58-check string for this key.",19,[[["self"],["ss58addressformat"]],["string"]]],[11,"to_ss58check","","Return the ss58-check string for this key.",19,[[["self"]],["string"]]],[11,"from_string_with_version","","Some if the string is a properly encoded SS58Check…",19,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[8,"Derive","","Derivable key trait.",null,null],[11,"derive","","Derive a child key from a series of given junctions.",20,[[["iterator"],["self"]],["option"]]],[8,"Public","","Trait suitable for typical cryptographic PKI key public…",null,null],[10,"from_slice","","A new instance from the given slice.",21,[[],["self"]]],[11,"to_raw_vec","","Return a `Vec<u8>` filled with raw data.",21,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"as_slice","","Return a slice filled with raw data.",21,[[["self"]]]],[8,"Pair","","Trait suitable for typical cryptographic PKI key pair type.",null,null],[16,"Public","","The type which is used to encode a public key.",22,null],[16,"Seed","","The type used to (minimally) encode the data required to…",22,null],[16,"Signature","","The type used to represent a signature. Can be created…",22,null],[16,"DeriveError","","Error returned from the `derive` function.",22,null],[11,"generate","","Generate new secure (random) key pair.",22,[[]]],[10,"generate_with_phrase","","Generate new secure (random) key pair and provide the…",22,[[["str"],["option",["str"]]]]],[10,"from_phrase","","Returns the KeyPair from the English BIP39 seed `phrase`,…",22,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[10,"derive","","Derive a child key from a series of given junctions.",22,[[["iterator"],["self"],["option"]],["result"]]],[10,"from_seed","","Generate new key pair from the provided `seed`.",22,[[],["self"]]],[10,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",22,[[],[["result",["secretstringerror"]],["secretstringerror"]]]],[10,"sign","","Sign a message.",22,[[["self"]]]],[10,"verify","","Verify a signature on a message. Returns true if the…",22,[[["asref"]],["bool"]]],[10,"verify_weak","","Verify a signature on a message. Returns true if the…",22,[[["asref"]],["bool"]]],[10,"public","","Get the public key.",22,[[["self"]]]],[11,"from_string_with_seed","","Interprets the string `s` in order to generate a key Pair.…",22,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"from_string","","Interprets the string `s` in order to generate a key pair.",22,[[["str"],["option",["str"]]],[["result",["secretstringerror"]],["secretstringerror"]]]],[10,"to_raw_vec","","Return a vec filled with raw data.",22,[[["self"]],[["vec",["u8"]],["u8"]]]],[8,"IsWrappedBy","","One type is wrapped by another.",null,null],[10,"from_ref","","Get a reference to the inner from the outer.",23,[[["outer"]],["self"]]],[10,"from_mut","","Get a mutable reference to the inner from the outer.",23,[[["outer"]],["self"]]],[8,"Wraps","","Opposite of `IsWrappedBy` - denotes a type which is a…",null,null],[16,"Inner","","The inner type it is wrapping.",24,null],[8,"CryptoType","","Type which has a particular kind of crypto associated with…",null,null],[16,"Pair","","The pair key type of this crypto.",25,null],[11,"soften","","Consume self to return a soft derive junction with the…",14,[[],["self"]]],[11,"harden","","Consume self to return a hard derive junction with the…",14,[[],["self"]]],[11,"soft","","Create a new soft (vanilla) DeriveJunction from a given,…",14,[[["encode"]],["self"]]],[11,"hard","","Create a new hard (hardened) DeriveJunction from a given,…",14,[[["encode"]],["self"]]],[11,"unwrap_inner","","Consume self to return the chain code.",14,[[]]],[11,"inner","","Get a reference to the inner junction id.",14,[[["self"]]]],[11,"is_soft","","Return `true` if the junction is soft.",14,[[["self"]],["bool"]]],[11,"is_hard","","Return `true` if the junction is hard.",14,[[["self"]],["bool"]]],[11,"all","","All known address formats.",16,[[]]],[11,"is_custom","","Whether the address is custom.",16,[[["self"]],["bool"]]],[0,"u32_trait","sp_core","An u32 trait with \"values\" as impl'd types.",null,null],[3,"_0","sp_core::u32_trait","Type representing the value 0 for the `Value` trait.",null,null],[3,"_1","","Type representing the value 1 for the `Value` trait.",null,null],[3,"_2","","Type representing the value 2 for the `Value` trait.",null,null],[3,"_3","","Type representing the value 3 for the `Value` trait.",null,null],[3,"_4","","Type representing the value 4 for the `Value` trait.",null,null],[3,"_5","","Type representing the value 5 for the `Value` trait.",null,null],[3,"_6","","Type representing the value 6 for the `Value` trait.",null,null],[3,"_7","","Type representing the value 7 for the `Value` trait.",null,null],[3,"_8","","Type representing the value 8 for the `Value` trait.",null,null],[3,"_9","","Type representing the value 9 for the `Value` trait.",null,null],[3,"_10","","Type representing the value 10 for the `Value` trait.",null,null],[3,"_11","","Type representing the value 11 for the `Value` trait.",null,null],[3,"_12","","Type representing the value 12 for the `Value` trait.",null,null],[3,"_13","","Type representing the value 13 for the `Value` trait.",null,null],[3,"_14","","Type representing the value 14 for the `Value` trait.",null,null],[3,"_15","","Type representing the value 15 for the `Value` trait.",null,null],[3,"_16","","Type representing the value 16 for the `Value` trait.",null,null],[3,"_17","","Type representing the value 17 for the `Value` trait.",null,null],[3,"_18","","Type representing the value 18 for the `Value` trait.",null,null],[3,"_19","","Type representing the value 19 for the `Value` trait.",null,null],[3,"_20","","Type representing the value 20 for the `Value` trait.",null,null],[3,"_21","","Type representing the value 21 for the `Value` trait.",null,null],[3,"_22","","Type representing the value 22 for the `Value` trait.",null,null],[3,"_23","","Type representing the value 23 for the `Value` trait.",null,null],[3,"_24","","Type representing the value 24 for the `Value` trait.",null,null],[3,"_25","","Type representing the value 25 for the `Value` trait.",null,null],[3,"_26","","Type representing the value 26 for the `Value` trait.",null,null],[3,"_27","","Type representing the value 27 for the `Value` trait.",null,null],[3,"_28","","Type representing the value 28 for the `Value` trait.",null,null],[3,"_29","","Type representing the value 29 for the `Value` trait.",null,null],[3,"_30","","Type representing the value 30 for the `Value` trait.",null,null],[3,"_31","","Type representing the value 31 for the `Value` trait.",null,null],[3,"_32","","Type representing the value 32 for the `Value` trait.",null,null],[3,"_33","","Type representing the value 33 for the `Value` trait.",null,null],[3,"_34","","Type representing the value 34 for the `Value` trait.",null,null],[3,"_35","","Type representing the value 35 for the `Value` trait.",null,null],[3,"_36","","Type representing the value 36 for the `Value` trait.",null,null],[3,"_37","","Type representing the value 37 for the `Value` trait.",null,null],[3,"_38","","Type representing the value 38 for the `Value` trait.",null,null],[3,"_39","","Type representing the value 39 for the `Value` trait.",null,null],[3,"_40","","Type representing the value 40 for the `Value` trait.",null,null],[3,"_41","","Type representing the value 41 for the `Value` trait.",null,null],[3,"_42","","Type representing the value 42 for the `Value` trait.",null,null],[3,"_43","","Type representing the value 43 for the `Value` trait.",null,null],[3,"_44","","Type representing the value 44 for the `Value` trait.",null,null],[3,"_45","","Type representing the value 45 for the `Value` trait.",null,null],[3,"_46","","Type representing the value 46 for the `Value` trait.",null,null],[3,"_47","","Type representing the value 47 for the `Value` trait.",null,null],[3,"_48","","Type representing the value 48 for the `Value` trait.",null,null],[3,"_49","","Type representing the value 49 for the `Value` trait.",null,null],[3,"_50","","Type representing the value 50 for the `Value` trait.",null,null],[3,"_51","","Type representing the value 51 for the `Value` trait.",null,null],[3,"_52","","Type representing the value 52 for the `Value` trait.",null,null],[3,"_53","","Type representing the value 53 for the `Value` trait.",null,null],[3,"_54","","Type representing the value 54 for the `Value` trait.",null,null],[3,"_55","","Type representing the value 55 for the `Value` trait.",null,null],[3,"_56","","Type representing the value 56 for the `Value` trait.",null,null],[3,"_57","","Type representing the value 57 for the `Value` trait.",null,null],[3,"_58","","Type representing the value 58 for the `Value` trait.",null,null],[3,"_59","","Type representing the value 59 for the `Value` trait.",null,null],[3,"_60","","Type representing the value 60 for the `Value` trait.",null,null],[3,"_61","","Type representing the value 61 for the `Value` trait.",null,null],[3,"_62","","Type representing the value 62 for the `Value` trait.",null,null],[3,"_63","","Type representing the value 63 for the `Value` trait.",null,null],[3,"_64","","Type representing the value 64 for the `Value` trait.",null,null],[3,"_65","","Type representing the value 65 for the `Value` trait.",null,null],[3,"_66","","Type representing the value 66 for the `Value` trait.",null,null],[3,"_67","","Type representing the value 67 for the `Value` trait.",null,null],[3,"_68","","Type representing the value 68 for the `Value` trait.",null,null],[3,"_69","","Type representing the value 69 for the `Value` trait.",null,null],[3,"_70","","Type representing the value 70 for the `Value` trait.",null,null],[3,"_71","","Type representing the value 71 for the `Value` trait.",null,null],[3,"_72","","Type representing the value 72 for the `Value` trait.",null,null],[3,"_73","","Type representing the value 73 for the `Value` trait.",null,null],[3,"_74","","Type representing the value 74 for the `Value` trait.",null,null],[3,"_75","","Type representing the value 75 for the `Value` trait.",null,null],[3,"_76","","Type representing the value 76 for the `Value` trait.",null,null],[3,"_77","","Type representing the value 77 for the `Value` trait.",null,null],[3,"_78","","Type representing the value 78 for the `Value` trait.",null,null],[3,"_79","","Type representing the value 79 for the `Value` trait.",null,null],[3,"_80","","Type representing the value 80 for the `Value` trait.",null,null],[3,"_81","","Type representing the value 81 for the `Value` trait.",null,null],[3,"_82","","Type representing the value 82 for the `Value` trait.",null,null],[3,"_83","","Type representing the value 83 for the `Value` trait.",null,null],[3,"_84","","Type representing the value 84 for the `Value` trait.",null,null],[3,"_85","","Type representing the value 85 for the `Value` trait.",null,null],[3,"_86","","Type representing the value 86 for the `Value` trait.",null,null],[3,"_87","","Type representing the value 87 for the `Value` trait.",null,null],[3,"_88","","Type representing the value 88 for the `Value` trait.",null,null],[3,"_89","","Type representing the value 89 for the `Value` trait.",null,null],[3,"_90","","Type representing the value 90 for the `Value` trait.",null,null],[3,"_91","","Type representing the value 91 for the `Value` trait.",null,null],[3,"_92","","Type representing the value 92 for the `Value` trait.",null,null],[3,"_93","","Type representing the value 93 for the `Value` trait.",null,null],[3,"_94","","Type representing the value 94 for the `Value` trait.",null,null],[3,"_95","","Type representing the value 95 for the `Value` trait.",null,null],[3,"_96","","Type representing the value 96 for the `Value` trait.",null,null],[3,"_97","","Type representing the value 97 for the `Value` trait.",null,null],[3,"_98","","Type representing the value 98 for the `Value` trait.",null,null],[3,"_99","","Type representing the value 99 for the `Value` trait.",null,null],[3,"_100","","Type representing the value 100 for the `Value` trait.",null,null],[3,"_112","","Type representing the value 112 for the `Value` trait.",null,null],[3,"_128","","Type representing the value 128 for the `Value` trait.",null,null],[3,"_160","","Type representing the value 160 for the `Value` trait.",null,null],[3,"_192","","Type representing the value 192 for the `Value` trait.",null,null],[3,"_224","","Type representing the value 224 for the `Value` trait.",null,null],[3,"_256","","Type representing the value 256 for the `Value` trait.",null,null],[3,"_384","","Type representing the value 384 for the `Value` trait.",null,null],[3,"_512","","Type representing the value 512 for the `Value` trait.",null,null],[8,"Value","","A u32 value, wrapped in a trait because we don't yet have…",null,null],[18,"VALUE","","The actual value represented by the impl'ing type.",26,null],[0,"ed25519","sp_core","Simple Ed25519 API.",null,null],[3,"Public","sp_core::ed25519","A public key.",null,null],[12,"0","","",27,null],[3,"Pair","","A key pair.",null,null],[3,"Signature","","A signature (a 512-bit value).",null,null],[12,"0","","",28,null],[3,"LocalizedSignature","","A localized signature also contains sender information.",null,null],[12,"signer","","The signer of the signature.",29,null],[12,"signature","","The signature itself.",29,null],[4,"PublicError","","An error type for SS58 decoding.",null,null],[13,"BadBase58","","Bad alphabet.",30,null],[13,"BadLength","","Bad length.",30,null],[13,"UnknownVersion","","Unknown version.",30,null],[13,"InvalidChecksum","","Invalid checksum.",30,null],[4,"DeriveError","","An error when deriving a key.",null,null],[13,"SoftKeyInPath","","A soft key was found in the path (and is unsupported).",31,null],[11,"from_raw","","A new instance from the given 64-byte `data`.",28,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 64…",28,[[],["self"]]],[11,"from_h512","","A new instance from an H512.",28,[[["h512"]],["signature"]]],[11,"from_raw","","A new instance from the given 32-byte `data`.",27,[[],["self"]]],[11,"from_h256","","A new instance from an H256.",27,[[["h256"]],["self"]]],[11,"as_array_ref","","Return a slice filled with raw data.",27,[[["self"]]]],[11,"seed","","Get the seed for this key.",32,[[["self"]]]],[11,"from_legacy_string","","Exactly as `from_string` except that if no matches are…",32,[[["str"],["option",["str"]]],["pair"]]],[0,"sr25519","sp_core","Simple sr25519 (Schnorr-Ristretto) API.",null,null],[3,"Public","sp_core::sr25519","An Schnorrkel/Ristretto x25519 (\"sr25519\") public key.",null,null],[12,"0","","",33,null],[3,"Pair","","An Schnorrkel/Ristretto x25519 (\"sr25519\") key pair.",null,null],[3,"Signature","","An Schnorrkel/Ristretto x25519 (\"sr25519\") signature.",null,null],[12,"0","","",34,null],[3,"LocalizedSignature","","A localized signature also contains sender information.…",null,null],[12,"signer","","The signer of the signature.",35,null],[12,"signature","","The signature itself.",35,null],[11,"from_raw","","A new instance from the given 64-byte `data`.",34,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 64…",34,[[],["self"]]],[11,"from_h512","","A new instance from an H512.",34,[[["h512"]],["signature"]]],[11,"from_raw","","A new instance from the given 32-byte `data`.",33,[[],["self"]]],[11,"from_h256","","A new instance from an H256.",33,[[["h256"]],["self"]]],[11,"as_array_ref","","Return a slice filled with raw data.",33,[[["self"]]]],[11,"from_entropy","","Make a new key pair from binary data derived from a valid…",36,[[["str"],["option",["str"]]]]],[0,"ecdsa","sp_core","Simple ECDSA API.",null,null],[3,"Signature","sp_core::ecdsa","A signature (a 512-bit value, plus 8 bits for recovery ID).",null,null],[3,"Pair","","A key pair.",null,null],[4,"Public","","The ECDSA public key.",null,null],[13,"Full","","A full raw ECDSA public key.",37,null],[13,"Compressed","","A compressed ECDSA public key.",37,null],[4,"PublicError","","An error type for SS58 decoding.",null,null],[13,"BadBase58","","Bad alphabet.",38,null],[13,"BadLength","","Bad length.",38,null],[13,"UnknownVersion","","Unknown version.",38,null],[13,"InvalidChecksum","","Invalid checksum.",38,null],[4,"DeriveError","","An error when deriving a key.",null,null],[13,"SoftKeyInPath","","A soft key was found in the path (and is unsupported).",39,null],[11,"from_raw","","A new instance from the given 64-byte `data`.",37,[[],["self"]]],[11,"from_full","","A new instance from the given 65-byte `data`.",37,[[],["self"]]],[11,"as_compressed","","Return in compressed format.",37,[[["self"]],["result"]]],[11,"into_compressed","","Convert `Self` into a compressed public key.",37,[[],["result"]]],[11,"from_raw","","A new instance from the given 65-byte `data`.",40,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 65…",40,[[],["self"]]],[11,"recover","","Recover the public key from this signature and a message.",40,[[["self"],["asref"]],[["option",["public"]],["public"]]]],[11,"seed","","Get the seed for this key.",41,[[["self"]]]],[11,"from_legacy_string","","Exactly as `from_string` except that if no matches are…",41,[[["str"],["option",["str"]]],["pair"]]],[0,"hash","sp_core","A fixed hash type.",null,null],[3,"H160","sp_core::hash","Fixed-size uninterpreted hash type with 20 bytes (160…",null,null],[12,"0","","",0,null],[3,"H256","","Fixed-size uninterpreted hash type with 32 bytes (256…",null,null],[12,"0","","",1,null],[3,"H512","","Fixed-size uninterpreted hash type with 64 bytes (512…",null,null],[12,"0","","",2,null],[5,"convert_hash","","Hash conversion. Used to convert between unbound…",null,[[["h2"]],[["asmut"],["default"]]]],[0,"offchain","sp_core","Offchain workers types",null,null],[3,"HttpRequestId","sp_core::offchain","Opaque type for offchain http requests.",null,null],[12,"0","","",42,null],[3,"OpaqueNetworkState","","A blob to hold information about the local node's network…",null,null],[12,"peer_id","","PeerId of the local node.",43,null],[12,"external_addresses","","List of addresses the node knows it can be reached as.",43,null],[3,"OpaquePeerId","","Simple blob to hold a `PeerId` without committing to its…",null,null],[12,"0","","",44,null],[3,"OpaqueMultiaddr","","Simple blob to hold a `Multiaddr` without committing to…",null,null],[12,"0","","",45,null],[3,"Timestamp","","Opaque timestamp type",null,null],[3,"Duration","","Duration type",null,null],[3,"Capabilities","","A set of capabilities",null,null],[3,"LimitedExternalities","","An `OffchainExternalities` implementation with limited…",null,null],[3,"OffchainExt","","The offchain extension that will be registered at the…",null,null],[12,"0","","",46,null],[3,"TransactionPoolExt","","An externalities extension to submit transactions to the…",null,null],[12,"0","","",47,null],[4,"StorageKind","","A type of supported crypto.",null,null],[13,"PERSISTENT","","Persistent storage is non-revertible and not fork-aware.…",48,null],[13,"LOCAL","","Local storage is revertible and fork-aware. It means that…",48,null],[4,"HttpError","","An error enum returned by some http methods.",null,null],[13,"DeadlineReached","","The requested action couldn't been completed within a…",49,null],[13,"IoError","","There was an IO Error while processing the request.",49,null],[13,"Invalid","","The ID of the request is invalid in this context.",49,null],[4,"HttpRequestStatus","","Status of the HTTP request",null,null],[13,"DeadlineReached","","Deadline was reached while we waited for this request to…",50,null],[13,"IoError","","An error has occured during the request, for example a…",50,null],[13,"Invalid","","The passed ID is invalid in this context.",50,null],[13,"Finished","","The request has finished with given status code.",50,null],[4,"Capability","","Execution context extra capabilities.",null,null],[13,"TransactionPool","","Access to transaction pool.",51,null],[13,"Http","","External http calls.",51,null],[13,"Keystore","","Keystore access.",51,null],[13,"Randomness","","Randomness source.",51,null],[13,"NetworkState","","Access to opaque network state.",51,null],[13,"OffchainWorkerDbRead","","Access to offchain worker DB (read only).",51,null],[13,"OffchainWorkerDbWrite","","Access to offchain worker DB (writes).",51,null],[0,"storage","","In-memory implementation of offchain workers database.",null,null],[3,"InMemOffchainStorage","sp_core::offchain::storage","In-memory storage for offchain workers.",null,null],[0,"testing","sp_core::offchain","Utilities for offchain calls testing.",null,null],[3,"PendingRequest","sp_core::offchain::testing","Pending request.",null,null],[12,"method","","HTTP method",52,null],[12,"uri","","URI",52,null],[12,"meta","","Encoded Metadata",52,null],[12,"headers","","Request headers",52,null],[12,"body","","Request body",52,null],[12,"sent","","Has the request been sent already.",52,null],[12,"response","","Response body",52,null],[12,"read","","Number of bytes already read from the response body.",52,null],[12,"response_headers","","Response headers",52,null],[3,"OffchainState","","Internal state of the externalities.",null,null],[12,"requests","","A list of pending requests.",53,null],[12,"persistent_storage","","Persistent local storage",53,null],[12,"local_storage","","Local storage",53,null],[3,"TestOffchainExt","","Implementation of offchain externalities used for tests.",null,null],[12,"0","","",54,null],[3,"PoolState","","The internal state of the fake transaction pool.",null,null],[12,"transactions","","A vector of transactions submitted from the runtime.",55,null],[3,"TestTransactionPoolExt","","Implementation of transaction pool used for test.",null,null],[11,"fulfill_pending_request","","Asserts that pending request has been submitted and fills…",53,[[["pendingrequest"],["u16"],["self"]]]],[11,"expect_request","","Add expected HTTP request.",53,[[["u16"],["self"],["pendingrequest"]]]],[11,"new","","Create new `TestOffchainExt` and a reference to the…",54,[[]]],[11,"new","","Create new `TestTransactionPoolExt` and a reference to the…",56,[[]]],[8,"OffchainStorage","sp_core::offchain","Offchain workers local storage.",null,null],[10,"set","","Persist a value in storage under given key and prefix.",57,[[["self"]]]],[10,"get","","Retrieve a value from storage under given key and prefix.",57,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"compare_and_set","","Replace the value in storage if given old_value matches…",57,[[["self"],["option"]],["bool"]]],[8,"Externalities","","An extended externalities for offchain workers.",null,null],[10,"is_validator","","Returns if the local node is a potential validator.",58,[[["self"]],["bool"]]],[10,"network_state","","Returns information about the local node's network state.",58,[[["self"]],[["result",["opaquenetworkstate"]],["opaquenetworkstate"]]]],[10,"timestamp","","Returns current UNIX timestamp (in millis)",58,[[["self"]],["timestamp"]]],[10,"sleep_until","","Pause the execution until `deadline` is reached.",58,[[["self"],["timestamp"]]]],[10,"random_seed","","Returns a random seed.",58,[[["self"]]]],[10,"local_storage_set","","Sets a value in the local storage.",58,[[["storagekind"],["self"]]]],[10,"local_storage_compare_and_set","","Sets a value in the local storage if it matches current…",58,[[["storagekind"],["self"],["option"]],["bool"]]],[10,"local_storage_get","","Gets a value from the local storage.",58,[[["self"],["storagekind"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"http_request_start","","Initiates a http request given HTTP verb and the URL.",58,[[["str"],["self"]],[["result",["httprequestid"]],["httprequestid"]]]],[10,"http_request_add_header","","Append header to the request.",58,[[["str"],["self"],["httprequestid"]],["result"]]],[10,"http_request_write_body","","Write a chunk of request body.",58,[[["timestamp"],["self"],["httprequestid"],["option",["timestamp"]]],[["httperror"],["result",["httperror"]]]]],[10,"http_response_wait","","Block and wait for the responses for given requests.",58,[[["timestamp"],["self"],["option",["timestamp"]]],[["vec",["httprequeststatus"]],["httprequeststatus"]]]],[10,"http_response_headers","","Read all response headers.",58,[[["self"],["httprequestid"]],["vec"]]],[10,"http_response_read_body","","Read a chunk of body response to given buffer.",58,[[["timestamp"],["self"],["httprequestid"],["option",["timestamp"]]],[["httperror"],["result",["usize","httperror"]],["usize"]]]],[8,"TransactionPool","","Abstraction over transaction pool.",null,null],[10,"submit_transaction","","Submit transaction.",59,[[["vec",["u8"]],["self"],["u8"]],["result"]]],[11,"new","","Create new `OpaquePeerId`",44,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new","","Create new `OpaqueMultiaddr`",45,[[["vec",["u8"]],["u8"]],["self"]]],[11,"from_millis","","Create new duration representing given number of…",60,[[["u64"]],["self"]]],[11,"millis","","Returns number of milliseconds this Duration represents.",60,[[["self"]],["u64"]]],[11,"from_unix_millis","","Creates new `Timestamp` given unix timestamp in miliseconds.",61,[[["u64"]],["self"]]],[11,"add","","Increase the timestamp by given `Duration`.",61,[[["duration"],["self"]],["timestamp"]]],[11,"sub","","Decrease the timestamp by given `Duration`",61,[[["duration"],["self"]],["timestamp"]]],[11,"diff","","Returns a saturated difference (Duration) between two…",61,[[["self"]],["duration"]]],[11,"unix_millis","","Return number of milliseconds since UNIX epoch.",61,[[["self"]],["u64"]]],[11,"none","","Return an object representing an empty set of capabilities.",62,[[],["self"]]],[11,"all","","Return an object representing all capabilities enabled.",62,[[],["self"]]],[11,"rich_offchain_call","","Return capabilities for rich offchain calls.",62,[[],["self"]]],[11,"has","","Check if particular capability is enabled.",62,[[["capability"],["self"]],["bool"]]],[11,"has_all","","Check if this capability object represents all capabilities.",62,[[["self"]],["bool"]]],[11,"new","","Create new externalities limited to given `capabilities`.",63,[[["capabilities"],["t"]],["self"]]],[11,"new","","Create a new instance of `Self`.",46,[[["externalities"]],["self"]]],[11,"new","","Create a new instance of `TransactionPoolExt`.",47,[[["transactionpool"],["send"]],["self"]]],[0,"sandbox","sp_core","Definition of a sandbox environment.",null,null],[3,"HostError","sp_core::sandbox","Error error that can be returned from host function.",null,null],[3,"Entry","","An entry in a environment definition table.",null,null],[12,"module_name","","Module name of which corresponding entity being defined.",64,null],[12,"field_name","","Field name in which corresponding entity being defined.",64,null],[12,"entity","","External entity being defined.",64,null],[3,"EnvironmentDefinition","","Definition of runtime that could be used by sandboxed code.",null,null],[12,"entries","","Vector of all entries in the environment definition.",65,null],[4,"TypedValue","","Representation of a typed wasm value.",null,null],[13,"I32","","Value of 32-bit signed or unsigned integer.",66,null],[13,"I64","","Value of 64-bit signed or unsigned integer.",66,null],[13,"F32","","Value of 32-bit IEEE 754-2008 floating point number…",66,null],[13,"F64","","Value of 64-bit IEEE 754-2008 floating point number…",66,null],[4,"ReturnValue","","Typed value that can be returned from a function.",null,null],[13,"Unit","","For returning nothing.",67,null],[13,"Value","","For returning some concrete value.",67,null],[4,"ExternEntity","","Describes an entity to define or import into the…",null,null],[13,"Function","","Function that is specified by an index in a default table…",68,null],[13,"Memory","","Linear memory that is specified by some identifier…",68,null],[17,"MEM_UNLIMITED","","Constant for specifying no limit when creating a sandboxed…",null,null],[17,"ERR_OK","","No error happened.",null,null],[17,"ERR_MODULE","","Validation or instantiation error occurred when creating…",null,null],[17,"ERR_OUT_OF_BOUNDS","","Out-of-bounds access attempted with memory or table.",null,null],[17,"ERR_EXECUTION","","Execution error occurred (typically trap).",null,null],[11,"as_i32","","Returns `Some` if this value of type `I32`.",66,[[["self"]],[["option",["i32"]],["i32"]]]],[18,"ENCODED_MAX_SIZE","","Maximum number of bytes `ReturnValue` might occupy when…",67,null],[0,"uint","sp_core","An unsigned fixed-size integer.",null,null],[3,"U256","sp_core::uint","Little-endian large integer type",null,null],[12,"0","","",3,null],[11,"new","sp_core","Create new configuration given digest interval and levels.",5,[[["u32"]],["self"]]],[11,"is_digest_build_enabled","","Is digest build enabled?",5,[[["self"]],["bool"]]],[11,"is_digest_build_required_at_block","","Do we need to build digest at given block?",5,[[["number"],["self"]],["bool"]]],[11,"max_digest_interval","","Returns max digest interval. One if digests are not…",5,[[["self"]],["u32"]]],[11,"prev_max_level_digest_block","","Returns max level digest block number that has been…",5,[[["number"],["self"]],["option"]]],[11,"next_max_level_digest_range","","Returns max level digest blocks range (inclusive) which…",5,[[["number"],["self"]],["option"]]],[11,"digest_level_at_block","","Returns Some if digest must be built at given block…",5,[[["number"],["self"]],["option"]]],[0,"traits","","Shareable Substrate traits.",null,null],[8,"Externalities","sp_core::traits","The Substrate externalities.",null,null],[10,"storage","","Read runtime storage.",69,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"storage_hash","","Get storage value hash. This may be optimized for large…",69,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"child_storage_hash","","Get child storage value hash. This may be optimized for…",69,[[["childinfo"],["self"],["childstoragekey"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"original_storage","","Read original runtime storage, ignoring any overlayed…",69,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"original_child_storage","","Read original runtime child storage, ignoring any…",69,[[["childinfo"],["self"],["childstoragekey"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"original_storage_hash","","Get original storage value hash, ignoring any overlayed…",69,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"original_child_storage_hash","","Get original child storage value hash, ignoring any…",69,[[["childinfo"],["self"],["childstoragekey"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"child_storage","","Read child runtime storage.",69,[[["childinfo"],["self"],["childstoragekey"]],[["vec",["u8"]],["option",["vec"]]]]],[11,"set_storage","","Set storage entry `key` of current contract being called…",69,[[["u8"],["self"],["vec",["u8"]]]]],[11,"set_child_storage","","Set child storage entry `key` of current contract being…",69,[[["u8"],["vec",["u8"]],["self"],["childinfo"],["childstoragekey"]]]],[11,"clear_storage","","Clear a storage entry (`key`) of current contract being…",69,[[["self"]]]],[11,"clear_child_storage","","Clear a child storage entry (`key`) of current contract…",69,[[["self"],["childinfo"],["childstoragekey"]]]],[11,"exists_storage","","Whether a storage entry exists.",69,[[["self"]],["bool"]]],[11,"exists_child_storage","","Whether a child storage entry exists.",69,[[["childinfo"],["self"],["childstoragekey"]],["bool"]]],[10,"next_storage_key","","Returns the key immediately following the given key, if it…",69,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"next_child_storage_key","","Returns the key immediately following the given key, if it…",69,[[["childinfo"],["self"],["childstoragekey"]],[["vec",["u8"]],["option",["vec"]]]]],[10,"kill_child_storage","","Clear an entire child storage.",69,[[["self"],["childinfo"],["childstoragekey"]]]],[10,"clear_prefix","","Clear storage entries which keys are start with the given…",69,[[["self"]]]],[10,"clear_child_prefix","","Clear child storage entries which keys are start with the…",69,[[["self"],["childinfo"],["childstoragekey"]]]],[10,"place_storage","","Set or clear a storage entry (`key`) of current contract…",69,[[["u8"],["option",["vec"]],["self"],["vec",["u8"]]]]],[10,"place_child_storage","","Set or clear a child storage entry. Return whether the…",69,[[["u8"],["vec",["u8"]],["option",["vec"]],["self"],["childinfo"],["childstoragekey"]]]],[10,"chain_id","","Get the identity of the chain.",69,[[["self"]],["u64"]]],[10,"storage_root","","Get the trie root of the current storage map. This will…",69,[[["self"]],[["u8"],["vec",["u8"]]]]],[10,"child_storage_root","","Get the trie root of a child storage map. This will also…",69,[[["self"],["childstoragekey"]],[["u8"],["vec",["u8"]]]]],[10,"storage_changes_root","","Get the change trie root of the current storage overlay at…",69,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[8,"ExternalitiesExt","","Extension for the [`Externalities`] trait.",null,null],[10,"extension","","Tries to find a registered extension and returns a mutable…",70,[[["self"]],[["option"],["t"]]]],[3,"KeystoreExt","","The keystore extension to register/retrieve from the…",null,null],[12,"0","","",71,null],[6,"BareCryptoStorePtr","","A pointer to the key store.",null,null],[8,"BareCryptoStore","","Something that generates, stores and provides access to…",null,null],[10,"sr25519_public_keys","","Returns all sr25519 public keys for the given key type.",72,[[["keytypeid"],["self"]],[["public"],["vec",["public"]]]]],[10,"sr25519_generate_new","","Generate a new sr25519 key pair for the given key type and…",72,[[["keytypeid"],["str"],["self"],["option",["str"]]],[["public"],["result",["public","string"]],["string"]]]],[10,"sr25519_key_pair","","Returns the sr25519 key pair for the given key type and…",72,[[["keytypeid"],["public"],["self"]],[["pair"],["option",["pair"]]]]],[10,"ed25519_public_keys","","Returns all ed25519 public keys for the given key type.",72,[[["keytypeid"],["self"]],[["vec",["public"]],["public"]]]],[10,"ed25519_generate_new","","Generate a new ed25519 key pair for the given key type and…",72,[[["keytypeid"],["str"],["self"],["option",["str"]]],[["result",["public","string"]],["string"],["public"]]]],[10,"ed25519_key_pair","","Returns the ed25519 key pair for the given key type and…",72,[[["keytypeid"],["self"],["public"]],[["option",["pair"]],["pair"]]]],[10,"insert_unknown","","Insert a new key. This doesn't require any known of the…",72,[[["keytypeid"],["str"],["self"]],["result"]]],[10,"password","","Get the password for this store.",72,[[["self"]],[["str"],["option",["str"]]]]],[8,"CodeExecutor","","Code execution engine.",null,null],[16,"Error","","Externalities error type.",73,null],[10,"call","","Call a given method in the runtime. Returns a tuple of the…",73,[[["unwindsafe"],["option"],["e"],["bool"],["str"],["self"],["fnonce"]]]],[0,"testing","sp_core","Types that should only be used for testing!",null,null],[3,"KeyStore","sp_core::testing","A keystore implementation usable in tests.",null,null],[17,"ED25519","","Key type for generic Ed25519 key.",null,null],[17,"SR25519","","Key type for generic Sr 25519 key.",null,null],[11,"new","","Creates a new instance of `Self`.",74,[[],["barecryptostoreptr"]]],[8,"TypeId","sp_core","Provide a simple 4 byte identifier for a type.",null,null],[18,"TYPE_ID","","Simple 4 byte identifier.",75,null],[11,"capabilities","","Returns the capabilities of particular context.",7,[[["self"]],["capabilities"]]],[11,"new","","Creates a new instance with the given metadata blob.",76,[[["vec",["u8"]],["u8"]],["self"]]],[11,"as_encoded","","Return the value as the encoded format.",8,[[["self"]],["cow"]]],[11,"into_encoded","","Return the value as the encoded format.",8,[[],[["vec",["u8"]],["u8"]]]],[14,"map","","Initialize a key-value collection from array.",null,null],[14,"wasm_export_functions","","Macro for exporting functions from wasm in with the…",null,null],[11,"unchecked_into","sp_core::hash","",0,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",0,[[],["v"]]],[11,"into_ffi_value","","",0,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",0,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"encode_hex","","",0,[[["self"]],["u"]]],[11,"encode_hex_upper","","",0,[[["self"]],["u"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"size_hint","","",1,[[["self"]],["usize"]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"encode","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",1,[[["w"],["self"]]]],[11,"decode","","",1,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",1,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",1,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",1,[[],["v"]]],[11,"into_ffi_value","","",1,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",1,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"encode_hex","","",1,[[["self"]],["u"]]],[11,"encode_hex_upper","","",1,[[["self"]],["u"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"size_hint","","",2,[[["self"]],["usize"]]],[11,"using_encoded","","",2,[[["self"],["f"]],["r"]]],[11,"encode","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",2,[[["w"],["self"]]]],[11,"decode","","",2,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",2,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",2,[[],["v"]]],[11,"into_ffi_value","","",2,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",2,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",2,[[["self"]]]],[11,"initialize","","",2,[[]]],[11,"encode_hex","","",2,[[["self"]],["u"]]],[11,"encode_hex_upper","","",2,[[["self"]],["u"]]],[11,"unchecked_into","sp_core::uint","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",3,[[],["v"]]],[11,"clear","","",3,[[["self"]]]],[11,"initialize","","",3,[[]]],[11,"unchecked_into","sp_core","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"size_hint","","",5,[[["self"]],["usize"]]],[11,"using_encoded","","",5,[[["self"],["f"]],["r"]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",5,[[["w"],["self"]]]],[11,"decode","","",5,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",5,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",5,[[],["v"]]],[11,"clear","","",5,[[["self"]]]],[11,"initialize","","",5,[[]]],[11,"unchecked_into","","",77,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",77,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",77,[[["outer"]],["t"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"unchecked_into","","",76,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",76,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",76,[[["outer"]],["t"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"size_hint","","",76,[[["self"]],["usize"]]],[11,"using_encoded","","",76,[[["self"],["f"]],["r"]]],[11,"encode","","",76,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",76,[[["w"],["self"]]]],[11,"decode","","",76,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",76,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",76,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",76,[[],["v"]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"unchecked_into","","",78,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",78,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",78,[[["outer"]],["t"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"size_hint","","",78,[[["self"]],["usize"]]],[11,"using_encoded","","",78,[[["self"],["f"]],["r"]]],[11,"encode","","",78,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",78,[[["w"],["self"]]]],[11,"decode","","",78,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",78,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",78,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",78,[[],["v"]]],[11,"unchecked_into","","",9,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"size_hint","","",9,[[["self"]],["usize"]]],[11,"using_encoded","","",9,[[["self"],["f"]],["r"]]],[11,"encode","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",9,[[["w"],["self"]]]],[11,"decode","","",9,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",9,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",9,[[],["v"]]],[11,"into_ffi_value","","",9,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",9,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","sp_core::hexdisplay","",11,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"unchecked_into","sp_core::crypto","",79,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",79,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",79,[[["outer"]],["t"]]],[11,"from","","",79,[[],["t"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"vzip","","",79,[[],["v"]]],[11,"zeroize","","",79,[[["self"]]]],[11,"encode_hex","","",79,[[["self"]],["u"]]],[11,"encode_hex_upper","","",79,[[["self"]],["u"]]],[11,"unchecked_from","","",80,[[["t"]],["outer"]]],[11,"unchecked_into","","",80,[[],["t"]]],[11,"from_string","","",80,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string_with_version","","",80,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",80,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",80,[[["outer"]],["t"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"to_string","","",80,[[["self"]],["string"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"size_hint","","",80,[[["self"]],["usize"]]],[11,"using_encoded","","",80,[[["self"],["f"]],["r"]]],[11,"encode","","",80,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",80,[[["w"],["self"]]]],[11,"decode","","",80,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",80,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",80,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",80,[[],["v"]]],[11,"clear","","",80,[[["self"]]]],[11,"initialize","","",80,[[]]],[11,"encode_hex","","",80,[[["self"]],["u"]]],[11,"encode_hex_upper","","",80,[[["self"]],["u"]]],[11,"unchecked_into","","",81,[[],["t"]]],[11,"from_string","","",81,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string_with_version","","",81,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",81,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",81,[[["outer"]],["t"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"clear","","",81,[[["self"]]]],[11,"initialize","","",81,[[]]],[11,"encode_hex","","",81,[[["self"]],["u"]]],[11,"encode_hex_upper","","",81,[[["self"]],["u"]]],[11,"unchecked_into","","",12,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"size_hint","","",12,[[["self"]],["usize"]]],[11,"using_encoded","","",12,[[["self"],["f"]],["r"]]],[11,"encode","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",12,[[["w"],["self"]]]],[11,"decode","","",12,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",12,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",12,[[],["v"]]],[11,"into_ffi_value","","",12,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",12,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",12,[[["self"]]]],[11,"initialize","","",12,[[]]],[11,"unchecked_into","","",82,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",82,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",82,[[["outer"]],["t"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"vzip","","",82,[[],["v"]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"unchecked_into","","",14,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"size_hint","","",14,[[["self"]],["usize"]]],[11,"using_encoded","","",14,[[["self"],["f"]],["r"]]],[11,"encode","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",14,[[["w"],["self"]]]],[11,"decode","","",14,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",14,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",14,[[],["v"]]],[11,"unchecked_into","","",15,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"clear","","",16,[[["self"]]]],[11,"initialize","","",16,[[]]],[11,"unchecked_into","sp_core::u32_trait","",83,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",83,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",83,[[["outer"]],["t"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"vzip","","",83,[[],["v"]]],[11,"unchecked_into","","",84,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",84,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",84,[[["outer"]],["t"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"vzip","","",84,[[],["v"]]],[11,"unchecked_into","","",85,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",85,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",85,[[["outer"]],["t"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"vzip","","",85,[[],["v"]]],[11,"unchecked_into","","",86,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",86,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",86,[[["outer"]],["t"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"vzip","","",86,[[],["v"]]],[11,"unchecked_into","","",87,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",87,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",87,[[["outer"]],["t"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"vzip","","",87,[[],["v"]]],[11,"unchecked_into","","",88,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",88,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",88,[[["outer"]],["t"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"vzip","","",88,[[],["v"]]],[11,"unchecked_into","","",89,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",89,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",89,[[["outer"]],["t"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"vzip","","",89,[[],["v"]]],[11,"unchecked_into","","",90,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",90,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",90,[[["outer"]],["t"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"vzip","","",90,[[],["v"]]],[11,"unchecked_into","","",91,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",91,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",91,[[["outer"]],["t"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"vzip","","",91,[[],["v"]]],[11,"unchecked_into","","",92,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"vzip","","",92,[[],["v"]]],[11,"unchecked_into","","",93,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"vzip","","",93,[[],["v"]]],[11,"unchecked_into","","",94,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"vzip","","",94,[[],["v"]]],[11,"unchecked_into","","",95,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"vzip","","",95,[[],["v"]]],[11,"unchecked_into","","",96,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"vzip","","",96,[[],["v"]]],[11,"unchecked_into","","",97,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"vzip","","",97,[[],["v"]]],[11,"unchecked_into","","",98,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"vzip","","",98,[[],["v"]]],[11,"unchecked_into","","",99,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",99,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",99,[[["outer"]],["t"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"vzip","","",99,[[],["v"]]],[11,"unchecked_into","","",100,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",100,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",100,[[["outer"]],["t"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"vzip","","",100,[[],["v"]]],[11,"unchecked_into","","",101,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"vzip","","",101,[[],["v"]]],[11,"unchecked_into","","",102,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"vzip","","",102,[[],["v"]]],[11,"unchecked_into","","",103,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"vzip","","",103,[[],["v"]]],[11,"unchecked_into","","",104,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"vzip","","",104,[[],["v"]]],[11,"unchecked_into","","",105,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"vzip","","",105,[[],["v"]]],[11,"unchecked_into","","",106,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"vzip","","",106,[[],["v"]]],[11,"unchecked_into","","",107,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"vzip","","",107,[[],["v"]]],[11,"unchecked_into","","",108,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"vzip","","",108,[[],["v"]]],[11,"unchecked_into","","",109,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"vzip","","",109,[[],["v"]]],[11,"unchecked_into","","",110,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"vzip","","",110,[[],["v"]]],[11,"unchecked_into","","",111,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"vzip","","",111,[[],["v"]]],[11,"unchecked_into","","",112,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"vzip","","",112,[[],["v"]]],[11,"unchecked_into","","",113,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"vzip","","",113,[[],["v"]]],[11,"unchecked_into","","",114,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"vzip","","",114,[[],["v"]]],[11,"unchecked_into","","",115,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"vzip","","",115,[[],["v"]]],[11,"unchecked_into","","",116,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"vzip","","",116,[[],["v"]]],[11,"unchecked_into","","",117,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",117,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",117,[[["outer"]],["t"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"vzip","","",117,[[],["v"]]],[11,"unchecked_into","","",118,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",118,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",118,[[["outer"]],["t"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"vzip","","",118,[[],["v"]]],[11,"unchecked_into","","",119,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",119,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",119,[[["outer"]],["t"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"vzip","","",119,[[],["v"]]],[11,"unchecked_into","","",120,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",120,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",120,[[["outer"]],["t"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"vzip","","",120,[[],["v"]]],[11,"unchecked_into","","",121,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",121,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",121,[[["outer"]],["t"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"vzip","","",121,[[],["v"]]],[11,"unchecked_into","","",122,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",122,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",122,[[["outer"]],["t"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"vzip","","",122,[[],["v"]]],[11,"unchecked_into","","",123,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",123,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",123,[[["outer"]],["t"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"vzip","","",123,[[],["v"]]],[11,"unchecked_into","","",124,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",124,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",124,[[["outer"]],["t"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"vzip","","",124,[[],["v"]]],[11,"unchecked_into","","",125,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",125,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",125,[[["outer"]],["t"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"vzip","","",125,[[],["v"]]],[11,"unchecked_into","","",126,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",126,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",126,[[["outer"]],["t"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"vzip","","",126,[[],["v"]]],[11,"unchecked_into","","",127,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",127,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",127,[[["outer"]],["t"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"vzip","","",127,[[],["v"]]],[11,"unchecked_into","","",128,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",128,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",128,[[["outer"]],["t"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"vzip","","",128,[[],["v"]]],[11,"unchecked_into","","",129,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",129,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",129,[[["outer"]],["t"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"vzip","","",129,[[],["v"]]],[11,"unchecked_into","","",130,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",130,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",130,[[["outer"]],["t"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"vzip","","",130,[[],["v"]]],[11,"unchecked_into","","",131,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",131,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",131,[[["outer"]],["t"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"vzip","","",131,[[],["v"]]],[11,"unchecked_into","","",132,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",132,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",132,[[["outer"]],["t"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"vzip","","",132,[[],["v"]]],[11,"unchecked_into","","",133,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",133,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",133,[[["outer"]],["t"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"vzip","","",133,[[],["v"]]],[11,"unchecked_into","","",134,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",134,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",134,[[["outer"]],["t"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"vzip","","",134,[[],["v"]]],[11,"unchecked_into","","",135,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",135,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",135,[[["outer"]],["t"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"vzip","","",135,[[],["v"]]],[11,"unchecked_into","","",136,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",136,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",136,[[["outer"]],["t"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"vzip","","",136,[[],["v"]]],[11,"unchecked_into","","",137,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",137,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",137,[[["outer"]],["t"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"vzip","","",137,[[],["v"]]],[11,"unchecked_into","","",138,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",138,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",138,[[["outer"]],["t"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"vzip","","",138,[[],["v"]]],[11,"unchecked_into","","",139,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",139,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",139,[[["outer"]],["t"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"vzip","","",139,[[],["v"]]],[11,"unchecked_into","","",140,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",140,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",140,[[["outer"]],["t"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"vzip","","",140,[[],["v"]]],[11,"unchecked_into","","",141,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",141,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",141,[[["outer"]],["t"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"vzip","","",141,[[],["v"]]],[11,"unchecked_into","","",142,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",142,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",142,[[["outer"]],["t"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"vzip","","",142,[[],["v"]]],[11,"unchecked_into","","",143,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",143,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",143,[[["outer"]],["t"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"vzip","","",143,[[],["v"]]],[11,"unchecked_into","","",144,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",144,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",144,[[["outer"]],["t"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[],["u"]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"vzip","","",144,[[],["v"]]],[11,"unchecked_into","","",145,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",145,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",145,[[["outer"]],["t"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[],["u"]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"vzip","","",145,[[],["v"]]],[11,"unchecked_into","","",146,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",146,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",146,[[["outer"]],["t"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"vzip","","",146,[[],["v"]]],[11,"unchecked_into","","",147,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",147,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",147,[[["outer"]],["t"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"vzip","","",147,[[],["v"]]],[11,"unchecked_into","","",148,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",148,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",148,[[["outer"]],["t"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[],["u"]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"vzip","","",148,[[],["v"]]],[11,"unchecked_into","","",149,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",149,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",149,[[["outer"]],["t"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[],["u"]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"vzip","","",149,[[],["v"]]],[11,"unchecked_into","","",150,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",150,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",150,[[["outer"]],["t"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"vzip","","",150,[[],["v"]]],[11,"unchecked_into","","",151,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",151,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",151,[[["outer"]],["t"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"vzip","","",151,[[],["v"]]],[11,"unchecked_into","","",152,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",152,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",152,[[["outer"]],["t"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"vzip","","",152,[[],["v"]]],[11,"unchecked_into","","",153,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",153,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",153,[[["outer"]],["t"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"vzip","","",153,[[],["v"]]],[11,"unchecked_into","","",154,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",154,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",154,[[["outer"]],["t"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[],["u"]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"vzip","","",154,[[],["v"]]],[11,"unchecked_into","","",155,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",155,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",155,[[["outer"]],["t"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"vzip","","",155,[[],["v"]]],[11,"unchecked_into","","",156,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",156,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",156,[[["outer"]],["t"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"vzip","","",156,[[],["v"]]],[11,"unchecked_into","","",157,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",157,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",157,[[["outer"]],["t"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"vzip","","",157,[[],["v"]]],[11,"unchecked_into","","",158,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",158,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",158,[[["outer"]],["t"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"vzip","","",158,[[],["v"]]],[11,"unchecked_into","","",159,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",159,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",159,[[["outer"]],["t"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"vzip","","",159,[[],["v"]]],[11,"unchecked_into","","",160,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",160,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",160,[[["outer"]],["t"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"vzip","","",160,[[],["v"]]],[11,"unchecked_into","","",161,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",161,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",161,[[["outer"]],["t"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[],["u"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"vzip","","",161,[[],["v"]]],[11,"unchecked_into","","",162,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",162,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",162,[[["outer"]],["t"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[],["u"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"vzip","","",162,[[],["v"]]],[11,"unchecked_into","","",163,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",163,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",163,[[["outer"]],["t"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"vzip","","",163,[[],["v"]]],[11,"unchecked_into","","",164,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",164,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",164,[[["outer"]],["t"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"vzip","","",164,[[],["v"]]],[11,"unchecked_into","","",165,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",165,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",165,[[["outer"]],["t"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"vzip","","",165,[[],["v"]]],[11,"unchecked_into","","",166,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",166,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",166,[[["outer"]],["t"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"vzip","","",166,[[],["v"]]],[11,"unchecked_into","","",167,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",167,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",167,[[["outer"]],["t"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"vzip","","",167,[[],["v"]]],[11,"unchecked_into","","",168,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",168,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",168,[[["outer"]],["t"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"vzip","","",168,[[],["v"]]],[11,"unchecked_into","","",169,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",169,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",169,[[["outer"]],["t"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"vzip","","",169,[[],["v"]]],[11,"unchecked_into","","",170,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",170,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",170,[[["outer"]],["t"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"vzip","","",170,[[],["v"]]],[11,"unchecked_into","","",171,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",171,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",171,[[["outer"]],["t"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"vzip","","",171,[[],["v"]]],[11,"unchecked_into","","",172,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",172,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",172,[[["outer"]],["t"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"vzip","","",172,[[],["v"]]],[11,"unchecked_into","","",173,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",173,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",173,[[["outer"]],["t"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"vzip","","",173,[[],["v"]]],[11,"unchecked_into","","",174,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",174,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",174,[[["outer"]],["t"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"vzip","","",174,[[],["v"]]],[11,"unchecked_into","","",175,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",175,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",175,[[["outer"]],["t"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"vzip","","",175,[[],["v"]]],[11,"unchecked_into","","",176,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",176,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",176,[[["outer"]],["t"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"vzip","","",176,[[],["v"]]],[11,"unchecked_into","","",177,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",177,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",177,[[["outer"]],["t"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"vzip","","",177,[[],["v"]]],[11,"unchecked_into","","",178,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",178,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",178,[[["outer"]],["t"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"vzip","","",178,[[],["v"]]],[11,"unchecked_into","","",179,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",179,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",179,[[["outer"]],["t"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"vzip","","",179,[[],["v"]]],[11,"unchecked_into","","",180,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",180,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",180,[[["outer"]],["t"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"vzip","","",180,[[],["v"]]],[11,"unchecked_into","","",181,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",181,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",181,[[["outer"]],["t"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"vzip","","",181,[[],["v"]]],[11,"unchecked_into","","",182,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",182,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",182,[[["outer"]],["t"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"vzip","","",182,[[],["v"]]],[11,"unchecked_into","","",183,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",183,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",183,[[["outer"]],["t"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"vzip","","",183,[[],["v"]]],[11,"unchecked_into","","",184,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",184,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",184,[[["outer"]],["t"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"vzip","","",184,[[],["v"]]],[11,"unchecked_into","","",185,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",185,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",185,[[["outer"]],["t"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"vzip","","",185,[[],["v"]]],[11,"unchecked_into","","",186,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",186,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",186,[[["outer"]],["t"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"vzip","","",186,[[],["v"]]],[11,"unchecked_into","","",187,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",187,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",187,[[["outer"]],["t"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"vzip","","",187,[[],["v"]]],[11,"unchecked_into","","",188,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",188,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",188,[[["outer"]],["t"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"vzip","","",188,[[],["v"]]],[11,"unchecked_into","","",189,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",189,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",189,[[["outer"]],["t"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"vzip","","",189,[[],["v"]]],[11,"unchecked_into","","",190,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",190,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",190,[[["outer"]],["t"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"vzip","","",190,[[],["v"]]],[11,"unchecked_into","","",191,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",191,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",191,[[["outer"]],["t"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"vzip","","",191,[[],["v"]]],[11,"unchecked_from","sp_core::ed25519","",27,[[["t"]],["outer"]]],[11,"unchecked_into","","",27,[[],["t"]]],[11,"from_string","","",27,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string_with_version","","",27,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"size_hint","","",27,[[["self"]],["usize"]]],[11,"using_encoded","","",27,[[["self"],["f"]],["r"]]],[11,"encode","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",27,[[["w"],["self"]]]],[11,"decode","","",27,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",27,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",27,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",27,[[],["v"]]],[11,"into_ffi_value","","",27,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",27,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",27,[[["self"]]]],[11,"initialize","","",27,[[]]],[11,"encode_hex","","",27,[[["self"]],["u"]]],[11,"encode_hex_upper","","",27,[[["self"]],["u"]]],[11,"unchecked_into","","",32,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"vzip","","",32,[[],["v"]]],[11,"unchecked_into","","",28,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"size_hint","","",28,[[["self"]],["usize"]]],[11,"using_encoded","","",28,[[["self"],["f"]],["r"]]],[11,"encode","","",28,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",28,[[["w"],["self"]]]],[11,"decode","","",28,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",28,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",28,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",28,[[],["v"]]],[11,"into_ffi_value","","",28,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",28,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",28,[[["self"]]]],[11,"initialize","","",28,[[]]],[11,"encode_hex","","",28,[[["self"]],["u"]]],[11,"encode_hex_upper","","",28,[[["self"]],["u"]]],[11,"unchecked_into","","",29,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",29,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",29,[[["outer"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"size_hint","","",29,[[["self"]],["usize"]]],[11,"using_encoded","","",29,[[["self"],["f"]],["r"]]],[11,"encode","","",29,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",29,[[["w"],["self"]]]],[11,"decode","","",29,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",29,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",29,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",29,[[],["v"]]],[11,"unchecked_into","","",30,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"vzip","","",30,[[],["v"]]],[11,"unchecked_into","","",31,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",31,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",31,[[["outer"]],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"vzip","","",31,[[],["v"]]],[11,"unchecked_from","sp_core::sr25519","",33,[[["t"]],["outer"]]],[11,"unchecked_into","","",33,[[],["t"]]],[11,"from_string","","",33,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string_with_version","","",33,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",33,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",33,[[["outer"]],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"size_hint","","",33,[[["self"]],["usize"]]],[11,"using_encoded","","",33,[[["self"],["f"]],["r"]]],[11,"encode","","",33,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",33,[[["w"],["self"]]]],[11,"decode","","",33,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",33,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",33,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",33,[[],["v"]]],[11,"into_ffi_value","","",33,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",33,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",33,[[["self"]]]],[11,"initialize","","",33,[[]]],[11,"encode_hex","","",33,[[["self"]],["u"]]],[11,"encode_hex_upper","","",33,[[["self"]],["u"]]],[11,"unchecked_into","","",36,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"vzip","","",36,[[],["v"]]],[11,"unchecked_into","","",34,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",34,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",34,[[["outer"]],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"size_hint","","",34,[[["self"]],["usize"]]],[11,"using_encoded","","",34,[[["self"],["f"]],["r"]]],[11,"encode","","",34,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",34,[[["w"],["self"]]]],[11,"decode","","",34,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",34,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",34,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",34,[[],["v"]]],[11,"into_ffi_value","","",34,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",34,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",34,[[["self"]]]],[11,"initialize","","",34,[[]]],[11,"encode_hex","","",34,[[["self"]],["u"]]],[11,"encode_hex_upper","","",34,[[["self"]],["u"]]],[11,"unchecked_into","","",35,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"unchecked_into","sp_core::ecdsa","",40,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",40,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",40,[[["outer"]],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"size_hint","","",40,[[["self"]],["usize"]]],[11,"using_encoded","","",40,[[["self"],["f"]],["r"]]],[11,"encode","","",40,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",40,[[["w"],["self"]]]],[11,"decode","","",40,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",40,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",40,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",40,[[],["v"]]],[11,"clear","","",40,[[["self"]]]],[11,"initialize","","",40,[[]]],[11,"encode_hex","","",40,[[["self"]],["u"]]],[11,"encode_hex_upper","","",40,[[["self"]],["u"]]],[11,"unchecked_into","","",41,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",41,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",41,[[["outer"]],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"unchecked_from","","",37,[[["t"]],["outer"]]],[11,"unchecked_into","","",37,[[],["t"]]],[11,"from_string","","",37,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"from_string_with_version","","",37,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",37,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",37,[[["outer"]],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"size_hint","","",37,[[["self"]],["usize"]]],[11,"using_encoded","","",37,[[["self"],["f"]],["r"]]],[11,"encode","","",37,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",37,[[["w"],["self"]]]],[11,"decode","","",37,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",37,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",37,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",37,[[],["v"]]],[11,"clear","","",37,[[["self"]]]],[11,"initialize","","",37,[[]]],[11,"encode_hex","","",37,[[["self"]],["u"]]],[11,"encode_hex_upper","","",37,[[["self"]],["u"]]],[11,"unchecked_into","","",38,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",38,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",38,[[["outer"]],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"unchecked_into","","",39,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",39,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",39,[[["outer"]],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"unchecked_into","sp_core::offchain","",42,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",42,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",42,[[["outer"]],["t"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"size_hint","","",42,[[["self"]],["usize"]]],[11,"using_encoded","","",42,[[["self"],["f"]],["r"]]],[11,"encode","","",42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",42,[[["w"],["self"]]]],[11,"decode","","",42,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",42,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",42,[[],["v"]]],[11,"into_ffi_value","","",42,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",42,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",43,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",43,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",43,[[["outer"]],["t"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"size_hint","","",43,[[["self"]],["usize"]]],[11,"using_encoded","","",43,[[["self"],["f"]],["r"]]],[11,"encode","","",43,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",43,[[["w"],["self"]]]],[11,"decode","","",43,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",43,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",43,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",43,[[],["v"]]],[11,"into_ffi_value","","",43,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",43,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",44,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",44,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",44,[[["outer"]],["t"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"size_hint","","",44,[[["self"]],["usize"]]],[11,"using_encoded","","",44,[[["self"],["f"]],["r"]]],[11,"encode","","",44,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",44,[[["w"],["self"]]]],[11,"decode","","",44,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",44,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",44,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",44,[[],["v"]]],[11,"into_ffi_value","","",44,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",44,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",44,[[["self"]]]],[11,"initialize","","",44,[[]]],[11,"unchecked_into","","",45,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",45,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",45,[[["outer"]],["t"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"size_hint","","",45,[[["self"]],["usize"]]],[11,"using_encoded","","",45,[[["self"],["f"]],["r"]]],[11,"encode","","",45,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",45,[[["w"],["self"]]]],[11,"decode","","",45,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",45,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",45,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",45,[[],["v"]]],[11,"into_ffi_value","","",45,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",45,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",61,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",61,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",61,[[["outer"]],["t"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"size_hint","","",61,[[["self"]],["usize"]]],[11,"using_encoded","","",61,[[["self"],["f"]],["r"]]],[11,"encode","","",61,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",61,[[["w"],["self"]]]],[11,"decode","","",61,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",61,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",61,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",61,[[],["v"]]],[11,"into_ffi_value","","",61,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",61,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",61,[[["self"]]]],[11,"initialize","","",61,[[]]],[11,"unchecked_into","","",60,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",60,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",60,[[["outer"]],["t"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"size_hint","","",60,[[["self"]],["usize"]]],[11,"using_encoded","","",60,[[["self"],["f"]],["r"]]],[11,"encode","","",60,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",60,[[["w"],["self"]]]],[11,"decode","","",60,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",60,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",60,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",60,[[],["v"]]],[11,"into_ffi_value","","",60,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",60,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",60,[[["self"]]]],[11,"initialize","","",60,[[]]],[11,"unchecked_into","","",62,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",62,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",62,[[["outer"]],["t"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"vzip","","",62,[[],["v"]]],[11,"unchecked_into","","",63,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",63,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",63,[[["outer"]],["t"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"vzip","","",63,[[],["v"]]],[11,"unchecked_into","","",46,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",46,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",46,[[["outer"]],["t"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"unchecked_into","","",47,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",47,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",47,[[["outer"]],["t"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"vzip","","",47,[[],["v"]]],[11,"unchecked_into","","",48,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",48,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",48,[[["outer"]],["t"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"size_hint","","",48,[[["self"]],["usize"]]],[11,"using_encoded","","",48,[[["self"],["f"]],["r"]]],[11,"encode","","",48,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",48,[[["w"],["self"]]]],[11,"decode","","",48,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",48,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",48,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",48,[[],["v"]]],[11,"into_ffi_value","","",48,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",48,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",49,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",49,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",49,[[["outer"]],["t"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"size_hint","","",49,[[["self"]],["usize"]]],[11,"using_encoded","","",49,[[["self"],["f"]],["r"]]],[11,"encode","","",49,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",49,[[["w"],["self"]]]],[11,"decode","","",49,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",49,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",49,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",49,[[],["v"]]],[11,"into_ffi_value","","",49,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",49,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",50,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",50,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",50,[[["outer"]],["t"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"size_hint","","",50,[[["self"]],["usize"]]],[11,"using_encoded","","",50,[[["self"],["f"]],["r"]]],[11,"encode","","",50,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",50,[[["w"],["self"]]]],[11,"decode","","",50,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",50,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",50,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",50,[[],["v"]]],[11,"into_ffi_value","","",50,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"from_ffi_value","","",50,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"unchecked_into","","",51,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",51,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",51,[[["outer"]],["t"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"vzip","","",51,[[],["v"]]],[11,"unchecked_into","sp_core::offchain::storage","",192,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",192,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",192,[[["outer"]],["t"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"vzip","","",192,[[],["v"]]],[11,"clear","","",192,[[["self"]]]],[11,"initialize","","",192,[[]]],[11,"unchecked_into","sp_core::offchain::testing","",52,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",52,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",52,[[["outer"]],["t"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"clear","","",52,[[["self"]]]],[11,"initialize","","",52,[[]]],[11,"unchecked_into","","",53,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",53,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",53,[[["outer"]],["t"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"clear","","",53,[[["self"]]]],[11,"initialize","","",53,[[]]],[11,"unchecked_into","","",54,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",54,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",54,[[["outer"]],["t"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"vzip","","",54,[[],["v"]]],[11,"clear","","",54,[[["self"]]]],[11,"initialize","","",54,[[]]],[11,"unchecked_into","","",55,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",55,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",55,[[["outer"]],["t"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"vzip","","",55,[[],["v"]]],[11,"clear","","",55,[[["self"]]]],[11,"initialize","","",55,[[]]],[11,"unchecked_into","","",56,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",56,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",56,[[["outer"]],["t"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"vzip","","",56,[[],["v"]]],[11,"clear","","",56,[[["self"]]]],[11,"initialize","","",56,[[]]],[11,"unchecked_into","sp_core::sandbox","",193,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",193,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",193,[[["outer"]],["t"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"size_hint","","",193,[[["self"]],["usize"]]],[11,"using_encoded","","",193,[[["self"],["f"]],["r"]]],[11,"encode","","",193,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",193,[[["w"],["self"]]]],[11,"decode","","",193,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",193,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",193,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",193,[[],["v"]]],[11,"unchecked_into","","",64,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",64,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",64,[[["outer"]],["t"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"size_hint","","",64,[[["self"]],["usize"]]],[11,"using_encoded","","",64,[[["self"],["f"]],["r"]]],[11,"encode","","",64,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",64,[[["w"],["self"]]]],[11,"decode","","",64,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",64,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",64,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",64,[[],["v"]]],[11,"unchecked_into","","",65,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",65,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",65,[[["outer"]],["t"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"size_hint","","",65,[[["self"]],["usize"]]],[11,"using_encoded","","",65,[[["self"],["f"]],["r"]]],[11,"encode","","",65,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",65,[[["w"],["self"]]]],[11,"decode","","",65,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",65,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",65,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",65,[[],["v"]]],[11,"unchecked_into","","",66,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",66,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",66,[[["outer"]],["t"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"size_hint","","",66,[[["self"]],["usize"]]],[11,"using_encoded","","",66,[[["self"],["f"]],["r"]]],[11,"encode","","",66,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",66,[[["w"],["self"]]]],[11,"decode","","",66,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",66,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",66,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",66,[[],["v"]]],[11,"unchecked_into","","",67,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",67,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",67,[[["outer"]],["t"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"size_hint","","",67,[[["self"]],["usize"]]],[11,"using_encoded","","",67,[[["self"],["f"]],["r"]]],[11,"encode","","",67,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",67,[[["w"],["self"]]]],[11,"decode","","",67,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",67,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",67,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",67,[[],["v"]]],[11,"unchecked_into","","",68,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",68,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",68,[[["outer"]],["t"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"size_hint","","",68,[[["self"]],["usize"]]],[11,"using_encoded","","",68,[[["self"],["f"]],["r"]]],[11,"encode","","",68,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",68,[[["w"],["self"]]]],[11,"decode","","",68,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",68,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",68,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",68,[[],["v"]]],[11,"unchecked_into","sp_core::traits","",71,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",71,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",71,[[["outer"]],["t"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"vzip","","",71,[[],["v"]]],[11,"unchecked_into","sp_core::testing","",74,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",74,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",74,[[["outer"]],["t"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"clear","","",74,[[["self"]]]],[11,"initialize","","",74,[[]]],[11,"inner","sp_core::hash","",2,[[["self"]]]],[11,"into_inner","","",2,[[]]],[11,"from_inner","","",2,[[],["h512"]]],[11,"inner","","",1,[[["self"]]]],[11,"into_inner","","",1,[[]]],[11,"from_inner","","",1,[[],["h256"]]],[11,"inner","","",0,[[["self"]]]],[11,"into_inner","","",0,[[]]],[11,"from_inner","","",0,[[],["h160"]]],[11,"div","sp_core::uint","",3,[[["t"]],["u256"]]],[11,"as_ref","sp_core::hash","",0,[[["self"]]]],[11,"as_ref","sp_core::uint","",3,[[["self"]]]],[11,"as_ref","sp_core::hash","",2,[[["self"]]]],[11,"as_ref","","",1,[[["self"]]]],[11,"rem_assign","sp_core::uint","",3,[[["self"],["t"]]]],[11,"shr_assign","","",3,[[["self"],["t"]]]],[11,"fmt","sp_core::hash","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::uint","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::hash","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitor","","",1,[[["h256"]]]],[11,"bitor","","",2,[[["h512"]]]],[11,"bitor","sp_core::uint","",3,[[["u256"]],["u256"]]],[11,"bitor","sp_core::hash","",0,[[["h160"]]]],[11,"eq","sp_core::uint","",3,[[["self"],["u256"]],["bool"]]],[11,"ne","","",3,[[["self"],["u256"]],["bool"]]],[11,"eq","sp_core::hash","",2,[[["self"],["h512"]],["bool"]]],[11,"eq","","",0,[[["self"],["h160"]],["bool"]]],[11,"eq","","",1,[[["self"],["h256"]],["bool"]]],[11,"sub","sp_core::uint","",3,[[["t"]],["u256"]]],[11,"mul","","",3,[[["u16"]],["u256"]]],[11,"mul","","",3,[[["i16"]],["u256"]]],[11,"mul","","",3,[[["i32"]],["u256"]]],[11,"mul","","",3,[[["u32"]],["u256"]]],[11,"mul","","",3,[[["isize"]],["u256"]]],[11,"mul","","",3,[[["u16"]],["u256"]]],[11,"mul","","",3,[[["u256"]],["u256"]]],[11,"mul","","",3,[[["i8"]],["u256"]]],[11,"mul","","",3,[[["usize"]],["u256"]]],[11,"mul","","",3,[[["i8"]],["u256"]]],[11,"mul","","",3,[[["i16"]],["u256"]]],[11,"mul","","",3,[[["usize"]],["u256"]]],[11,"mul","","",3,[[["u64"]],["u256"]]],[11,"mul","","",3,[[["u32"]],["u256"]]],[11,"mul","","",3,[[["u64"]],["u256"]]],[11,"mul","","",3,[[["u8"]],["u256"]]],[11,"mul","","",3,[[["u8"]],["u256"]]],[11,"mul","","",3,[[["i32"]],["u256"]]],[11,"mul","","",3,[[["isize"]],["u256"]]],[11,"mul","","",3,[[["i64"]],["u256"]]],[11,"mul","","",3,[[["u256"]],["u256"]]],[11,"mul","","",3,[[["i64"]],["u256"]]],[11,"decode","sp_core::hash","",1,[[["i"]],[["h256"],["error"],["result",["h256","error"]]]]],[11,"decode","","",0,[[["i"]],[["result",["h160","error"]],["h160"],["error"]]]],[11,"decode","sp_core::uint","",3,[[["i"]],[["error"],["result",["u256","error"]],["u256"]]]],[11,"decode","sp_core::hash","",2,[[["i"]],[["error"],["result",["h512","error"]],["h512"]]]],[11,"add_assign","sp_core::uint","",3,[[["self"],["u256"]]]],[11,"shl_assign","","",3,[[["self"],["t"]]]],[11,"cmp","sp_core::hash","",2,[[["self"],["h512"]],["ordering"]]],[11,"cmp","sp_core::uint","",3,[[["self"],["u256"]],["ordering"]]],[11,"cmp","sp_core::hash","",1,[[["self"],["h256"]],["ordering"]]],[11,"cmp","","",0,[[["self"],["h160"]],["ordering"]]],[11,"div_assign","sp_core::uint","",3,[[["self"],["t"]]]],[11,"fmt","sp_core::hash","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::uint","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::hash","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_mut","","",2,[[["self"]]]],[11,"as_mut","","",1,[[["self"]]]],[11,"as_mut","","",0,[[["self"]]]],[11,"serialize","","",0,[[["s"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core::uint","",3,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core::hash","",1,[[["s"],["self"]],["result"]]],[11,"mul_assign","sp_core::uint","",3,[[["self"],["u32"]]]],[11,"mul_assign","","",3,[[["self"],["u64"]]]],[11,"mul_assign","","",3,[[["self"],["u8"]]]],[11,"mul_assign","","",3,[[["self"],["u256"]]]],[11,"mul_assign","","",3,[[["i64"],["self"]]]],[11,"mul_assign","","",3,[[["isize"],["self"]]]],[11,"mul_assign","","",3,[[["self"],["i32"]]]],[11,"mul_assign","","",3,[[["self"],["usize"]]]],[11,"mul_assign","","",3,[[["self"],["i8"]]]],[11,"mul_assign","","",3,[[["self"],["i16"]]]],[11,"mul_assign","","",3,[[["u16"],["self"]]]],[11,"add","","",3,[[["t"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given reference to the…",0,[[],["h160"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",2,[[],["h512"]]],[11,"from","sp_core::uint","",3,[[],["u256"]]],[11,"from","","",3,[[["u32"]],["u256"]]],[11,"from","","",3,[[["u8"]],["u256"]]],[11,"from","sp_core::hash","",1,[[["h160"]],["h256"]]],[11,"from","sp_core::uint","",3,[[["u128"]],["u256"]]],[11,"from","","",3,[[["usize"]],["u256"]]],[11,"from","","",3,[[["u256"]],["u256"]]],[11,"from","","",3,[[["u16"]],["u256"]]],[11,"from","","",3,[[["isize"]],["u256"]]],[11,"from","","",3,[[["u64"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given reference to the…",1,[[],["h256"]]],[11,"from","sp_core::uint","",3,[[["i16"]],["u256"]]],[11,"from","","",3,[[],["u256"]]],[11,"from","","",3,[[["i32"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given reference to the…",1,[[],["h256"]]],[11,"from","sp_core::uint","",3,[[["i128"]],["u256"]]],[11,"from","","",3,[[["str"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given reference to the…",2,[[],["h512"]]],[11,"from","sp_core::uint","",3,[[["i64"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given bytes array of fixed…",1,[[],["h256"]]],[11,"from","","Constructs a hash type from the given reference to the…",2,[[],["h512"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",0,[[],["h160"]]],[11,"from","sp_core::uint","",3,[[["u128"]],["u256"]]],[11,"from","","",3,[[],["u256"]]],[11,"from","","",3,[[["i8"]],["u256"]]],[11,"from","sp_core::hash","Constructs a hash type from the given reference to the…",0,[[],["h160"]]],[11,"from","","",0,[[["h256"]],["h160"]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitand","","",1,[[["h256"]]]],[11,"bitand","sp_core::uint","",3,[[["u256"]],["u256"]]],[11,"bitand","sp_core::hash","",2,[[["h512"]]]],[11,"bitand","","",0,[[["h160"]]]],[11,"bitxor_assign","","",0,[[["self"],["h160"]]]],[11,"bitxor_assign","","",0,[[["self"],["h160"]]]],[11,"bitxor_assign","","",1,[[["self"],["h256"]]]],[11,"bitxor_assign","","",2,[[["h512"],["self"]]]],[11,"bitxor_assign","","",2,[[["self"],["h512"]]]],[11,"bitxor_assign","","",1,[[["self"],["h256"]]]],[11,"clone","","",2,[[["self"]],["h512"]]],[11,"clone","","",1,[[["self"]],["h256"]]],[11,"clone","sp_core::uint","",3,[[["self"]],["u256"]]],[11,"clone","sp_core::hash","",0,[[["self"]],["h160"]]],[11,"from_str","","Creates a hash type instance from the given string.",1,[[["str"]],[["h256"],["fromhexerror"],["result",["h256","fromhexerror"]]]]],[11,"from_str","","Creates a hash type instance from the given string.",2,[[["str"]],[["fromhexerror"],["result",["h512","fromhexerror"]],["h512"]]]],[11,"from_str","sp_core::uint","",3,[[["str"]],[["result",["u256"]],["u256"]]]],[11,"from_str","sp_core::hash","Creates a hash type instance from the given string.",0,[[["str"]],[["result",["h160","fromhexerror"]],["h160"],["fromhexerror"]]]],[11,"bitor_assign","","",1,[[["self"],["h256"]]]],[11,"bitor_assign","","",1,[[["self"],["h256"]]]],[11,"bitor_assign","","",0,[[["self"],["h160"]]]],[11,"bitor_assign","","",2,[[["h512"],["self"]]]],[11,"bitor_assign","","",2,[[["self"],["h512"]]]],[11,"bitor_assign","","",0,[[["self"],["h160"]]]],[11,"deserialize","","",1,[[["d"]],[["result",["h256"]],["h256"]]]],[11,"deserialize","","",2,[[["d"]],[["result",["h512"]],["h512"]]]],[11,"deserialize","sp_core::uint","",3,[[["d"]],[["result",["u256"]],["u256"]]]],[11,"deserialize","sp_core::hash","",0,[[["d"]],[["h160"],["result",["h160"]]]]],[11,"sub_assign","sp_core::uint","",3,[[["self"],["u256"]]]],[11,"hash","sp_core::hash","",0,[[["self"],["h"]]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"hash","sp_core::uint","",3,[[["self"],["__h"]]]],[11,"hash","sp_core::hash","",2,[[["self"],["h"]]]],[11,"index_mut","","",2,[[["self"],["i"]]]],[11,"index_mut","","",1,[[["self"],["i"]]]],[11,"index_mut","","",0,[[["self"],["i"]]]],[11,"try_from","sp_core::uint","",3,[[["u512"]],[["error"],["u256"],["result",["u256","error"]]]]],[11,"try_from","","",3,[[["u512"]],[["error"],["u256"],["result",["u256","error"]]]]],[11,"using_encoded","sp_core::hash","",0,[[["self"],["f"]],["r"]]],[11,"using_encoded","sp_core::uint","",3,[[["self"],["f"]],["r"]]],[11,"using_encoded","sp_core::hash","",2,[[["self"],["f"]],["r"]]],[11,"using_encoded","","",1,[[["self"],["f"]],["r"]]],[11,"index","","",1,[[["i"],["self"]]]],[11,"index","","",0,[[["i"],["self"]]]],[11,"index","","",2,[[["i"],["self"]]]],[11,"default","sp_core::uint","",3,[[],["u256"]]],[11,"default","sp_core::hash","",2,[[],["h512"]]],[11,"default","","",1,[[],["h256"]]],[11,"default","","",0,[[],["h160"]]],[11,"fmt","sp_core::uint","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::hash","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",2,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"shr","sp_core::uint","",3,[[["t"]],["u256"]]],[11,"bitxor","sp_core::hash","",0,[[["h160"]]]],[11,"bitxor","","",1,[[["h256"]]]],[11,"bitxor","","",2,[[["h512"]]]],[11,"bitxor","sp_core::uint","",3,[[["u256"]],["u256"]]],[11,"partial_cmp","sp_core::hash","",0,[[["self"],["h160"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["self"],["h512"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_core::uint","",3,[[["self"],["u256"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_core::hash","",1,[[["self"],["h256"]],[["ordering"],["option",["ordering"]]]]],[11,"not","sp_core::uint","",3,[[],["u256"]]],[11,"shl","","",3,[[["t"]],["u256"]]],[11,"bitand_assign","sp_core::hash","",2,[[["h512"],["self"]]]],[11,"bitand_assign","","",1,[[["self"],["h256"]]]],[11,"bitand_assign","","",0,[[["self"],["h160"]]]],[11,"bitand_assign","","",1,[[["self"],["h256"]]]],[11,"bitand_assign","","",2,[[["self"],["h512"]]]],[11,"bitand_assign","","",0,[[["self"],["h160"]]]],[11,"rem","sp_core::uint","",3,[[["t"]],["u256"]]],[11,"unchecked_from","sp_core::crypto","",80,[[["h256"]],["self"]]],[11,"unchecked_from","sp_core::ed25519","",27,[[],["self"]]],[11,"unchecked_from","","",27,[[["h256"]],["self"]]],[11,"unchecked_from","sp_core::sr25519","",33,[[],["self"]]],[11,"unchecked_from","","",33,[[["h256"]],["self"]]],[11,"unchecked_from","sp_core::ecdsa","",37,[[],["self"]]],[11,"derive","sp_core::sr25519","Derive a child key from a series of given junctions.",33,[[["iterator"],["self"]],[["option",["public"]],["public"]]]],[11,"from_slice","sp_core::crypto","",81,[[],["self"]]],[11,"to_raw_vec","","",81,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"as_slice","","",81,[[["self"]]]],[11,"from_slice","sp_core::ed25519","A new instance from the given slice that should be 32…",27,[[],["self"]]],[11,"from_slice","sp_core::sr25519","A new instance from the given slice that should be 32…",33,[[],["self"]]],[11,"from_slice","sp_core::ecdsa","A new instance from the given slice that should be 33…",37,[[],["self"]]],[11,"generate_with_phrase","sp_core::crypto","",81,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",81,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"derive","","",81,[[["iterator"],["dummy"],["self"],["option",["dummy"]]],["result"]]],[11,"from_seed","","",81,[[],["self"]]],[11,"from_seed_slice","","",81,[[],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"sign","","",81,[[["self"]]]],[11,"verify","","",81,[[["asref"]],["bool"]]],[11,"verify_weak","","",81,[[["asref"]],["bool"]]],[11,"public","","",81,[[["self"]]]],[11,"to_raw_vec","","",81,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"generate_with_phrase","sp_core::ed25519","Generate new secure (random) key pair and provide the…",32,[[["str"],["option",["str"]]]]],[11,"from_phrase","","Generate key pair from given recovery phrase and password.",32,[[["str"],["option",["str"]]],[["secretstringerror"],["result",["secretstringerror"]]]]],[11,"from_seed","","Make a new key pair from secret seed material.",32,[[],["pair"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",32,[[],[["result",["pair","secretstringerror"]],["secretstringerror"],["pair"]]]],[11,"derive","","Derive a child key from a series of given junctions.",32,[[["iterator"],["self"],["option"]],[["result",["deriveerror"]],["deriveerror"]]]],[11,"public","","Get the public key.",32,[[["self"]],["public"]]],[11,"sign","","Sign a message.",32,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",32,[[["asref"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",32,[[["asref"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",32,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from_seed","sp_core::sr25519","Make a new key pair from raw secret seed material.",36,[[],["pair"]]],[11,"public","","Get the public key.",36,[[["self"]],["public"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",36,[[],[["secretstringerror"],["result",["pair","secretstringerror"]],["pair"]]]],[11,"generate_with_phrase","","",36,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",36,[[["str"],["option",["str"]]],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"derive","","",36,[[["iterator"],["self"],["option"]],["result"]]],[11,"sign","","",36,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",36,[[["asref"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",36,[[["asref"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",36,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"generate_with_phrase","sp_core::ecdsa","Generate new secure (random) key pair and provide the…",41,[[["str"],["option",["str"]]]]],[11,"from_phrase","","Generate key pair from given recovery phrase and password.",41,[[["str"],["option",["str"]]],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"from_seed","","Make a new key pair from secret seed material.",41,[[],["pair"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",41,[[],[["result",["pair","secretstringerror"]],["pair"],["secretstringerror"]]]],[11,"derive","","Derive a child key from a series of given junctions.",41,[[["iterator"],["self"],["option"]],[["result",["deriveerror"]],["deriveerror"]]]],[11,"public","","Get the public key.",41,[[["self"]],["public"]]],[11,"sign","","Sign a message.",41,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",41,[[["asref"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",41,[[["asref"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",41,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"set","sp_core::offchain::storage","",192,[[["self"]]]],[11,"get","","",192,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"compare_and_set","","",192,[[["self"],["option"]],["bool"]]],[11,"is_validator","sp_core::offchain::testing","",54,[[["self"]],["bool"]]],[11,"network_state","","",54,[[["self"]],[["result",["opaquenetworkstate"]],["opaquenetworkstate"]]]],[11,"timestamp","","",54,[[["self"]],["timestamp"]]],[11,"sleep_until","","",54,[[["self"],["timestamp"]]]],[11,"random_seed","","",54,[[["self"]]]],[11,"local_storage_set","","",54,[[["storagekind"],["self"]]]],[11,"local_storage_compare_and_set","","",54,[[["storagekind"],["self"],["option"]],["bool"]]],[11,"local_storage_get","","",54,[[["self"],["storagekind"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"http_request_start","","",54,[[["str"],["self"]],[["result",["requestid"]],["requestid"]]]],[11,"http_request_add_header","","",54,[[["str"],["requestid"],["self"]],["result"]]],[11,"http_request_write_body","","",54,[[["requestid"],["timestamp"],["self"],["option",["timestamp"]]],[["httperror"],["result",["httperror"]]]]],[11,"http_response_wait","","",54,[[["timestamp"],["self"],["option",["timestamp"]]],[["vec",["requeststatus"]],["requeststatus"]]]],[11,"http_response_headers","","",54,[[["self"],["requestid"]],["vec"]]],[11,"http_response_read_body","","",54,[[["requestid"],["timestamp"],["self"],["option",["timestamp"]]],[["httperror"],["result",["usize","httperror"]],["usize"]]]],[11,"is_validator","sp_core::offchain","",63,[[["self"]],["bool"]]],[11,"network_state","","",63,[[["self"]],[["result",["opaquenetworkstate"]],["opaquenetworkstate"]]]],[11,"timestamp","","",63,[[["self"]],["timestamp"]]],[11,"sleep_until","","",63,[[["self"],["timestamp"]]]],[11,"random_seed","","",63,[[["self"]]]],[11,"local_storage_set","","",63,[[["storagekind"],["self"]]]],[11,"local_storage_compare_and_set","","",63,[[["storagekind"],["self"],["option"]],["bool"]]],[11,"local_storage_get","","",63,[[["self"],["storagekind"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"http_request_start","","",63,[[["str"],["self"]],[["result",["httprequestid"]],["httprequestid"]]]],[11,"http_request_add_header","","",63,[[["str"],["self"],["httprequestid"]],["result"]]],[11,"http_request_write_body","","",63,[[["timestamp"],["self"],["httprequestid"],["option",["timestamp"]]],[["httperror"],["result",["httperror"]]]]],[11,"http_response_wait","","",63,[[["timestamp"],["self"],["option",["timestamp"]]],[["vec",["httprequeststatus"]],["httprequeststatus"]]]],[11,"http_response_headers","","",63,[[["self"],["httprequestid"]],["vec"]]],[11,"http_response_read_body","","",63,[[["timestamp"],["self"],["httprequestid"],["option",["timestamp"]]],[["httperror"],["result",["usize","httperror"]],["usize"]]]],[11,"submit_transaction","sp_core::offchain::testing","",56,[[["vec",["u8"]],["self"],["u8"]],["result"]]],[11,"sr25519_public_keys","sp_core::testing","",74,[[["keytypeid"],["self"]],[["public"],["vec",["public"]]]]],[11,"sr25519_generate_new","","",74,[[["keytypeid"],["str"],["self"],["option",["str"]]],[["public"],["result",["public","string"]],["string"]]]],[11,"sr25519_key_pair","","",74,[[["keytypeid"],["public"],["self"]],[["pair"],["option",["pair"]]]]],[11,"ed25519_public_keys","","",74,[[["keytypeid"],["self"]],[["vec",["public"]],["public"]]]],[11,"ed25519_generate_new","","",74,[[["keytypeid"],["str"],["self"],["option",["str"]]],[["result",["public","string"]],["string"],["public"]]]],[11,"ed25519_key_pair","","",74,[[["keytypeid"],["self"],["public"]],[["option",["pair"]],["pair"]]]],[11,"insert_unknown","","",74,[[["keytypeid"],["str"],["self"]],["result"]]],[11,"password","","",74,[[["self"]],[["str"],["option",["str"]]]]],[11,"drop","sp_core::crypto","",79,[[["self"]]]],[11,"drop","sp_core::offchain::testing","",53,[[["self"]]]],[11,"as_mut","sp_core::crypto","",80,[[["self"]]]],[11,"as_mut","","",80,[[["self"]]]],[11,"as_mut","","",81,[[["self"]]]],[11,"as_mut","sp_core::ed25519","",27,[[["self"]]]],[11,"as_mut","","",28,[[["self"]]]],[11,"as_mut","sp_core::sr25519","",33,[[["self"]]]],[11,"as_mut","","",34,[[["self"]]]],[11,"as_mut","sp_core::ecdsa","",37,[[["self"]]]],[11,"as_mut","","",40,[[["self"]]]],[11,"as_ref","sp_core::crypto","",79,[[["self"]],["t"]]],[11,"as_ref","","",80,[[["self"]]]],[11,"as_ref","","",80,[[["self"]]]],[11,"as_ref","","",81,[[["self"]]]],[11,"as_ref","sp_core::ed25519","",27,[[["self"]]]],[11,"as_ref","","",27,[[["self"]]]],[11,"as_ref","","",28,[[["self"]]]],[11,"as_ref","","",28,[[["self"]]]],[11,"as_ref","sp_core::sr25519","",33,[[["self"]]]],[11,"as_ref","","",33,[[["self"]]]],[11,"as_ref","","",34,[[["self"]]]],[11,"as_ref","","",34,[[["self"]]]],[11,"as_ref","","",36,[[["self"]],["keypair"]]],[11,"as_ref","sp_core::ecdsa","",37,[[["self"]]]],[11,"as_ref","","",40,[[["self"]]]],[11,"as_ref","","",40,[[["self"]]]],[11,"from","sp_core::crypto","",79,[[["t"]],["self"]]],[11,"from","","",14,[[["t"]],["derivejunction"]]],[11,"from","","",80,[[],["accountid32"]]],[11,"from","","",12,[[["u32"]],["self"]]],[11,"from","sp_core::ed25519","",27,[[["pair"]],["self"]]],[11,"from","sp_core::hash","",1,[[["public"]],["self"]]],[11,"from","","",2,[[["signature"]],["h512"]]],[11,"from","","",1,[[["public"]],["h256"]]],[11,"from","","",2,[[["signature"]],["h512"]]],[11,"from","sp_core::sr25519","",34,[[["signature"]],["signature"]]],[11,"from","","",36,[[["minisecretkey"]],["pair"]]],[11,"from","","",36,[[["secretkey"]],["pair"]]],[11,"from","","",36,[[["keypair"]],["pair"]]],[11,"from","sp_core::ecdsa","",37,[[["pair"]],["self"]]],[11,"from","","",40,[[],["signature"]]],[11,"from","sp_core::offchain","",62,[[],["self"]]],[11,"from","sp_core::sandbox","",66,[[["runtimevalue"]],["typedvalue"]]],[11,"from","","",67,[[["typedvalue"]],["returnvalue"]]],[11,"from","sp_core","",6,[[["vec",["u8"]],["u8"]],["self"]]],[11,"from","","",6,[[["opaquemetadata"]],["self"]]],[11,"from","","",9,[[["u32"]],["self"]]],[11,"from","","",9,[[["level"]],["self"]]],[11,"clone","sp_core::crypto","",79,[[["self"]],["protected"]]],[11,"clone","","",13,[[["self"]],["secretstringerror"]]],[11,"clone","","",14,[[["self"]],["derivejunction"]]],[11,"clone","","",15,[[["self"]],["publicerror"]]],[11,"clone","","",16,[[["self"]],["ss58addressformat"]]],[11,"clone","","",80,[[["self"]],["accountid32"]]],[11,"clone","","",81,[[["self"]],["dummy"]]],[11,"clone","","",12,[[["self"]],["keytypeid"]]],[11,"clone","sp_core::ed25519","",27,[[["self"]],["public"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"clone","","",28,[[["self"]],["self"]]],[11,"clone","","",29,[[["self"]],["localizedsignature"]]],[11,"clone","","",30,[[["self"]],["publicerror"]]],[11,"clone","sp_core::sr25519","",33,[[["self"]],["public"]]],[11,"clone","","",36,[[["self"]],["self"]]],[11,"clone","","",34,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["localizedsignature"]]],[11,"clone","sp_core::ecdsa","",37,[[["self"]],["public"]]],[11,"clone","","",38,[[["self"]],["publicerror"]]],[11,"clone","","",40,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["pair"]]],[11,"clone","sp_core::offchain::storage","",192,[[["self"]],["inmemoffchainstorage"]]],[11,"clone","sp_core::offchain::testing","",54,[[["self"]],["testoffchainext"]]],[11,"clone","sp_core::offchain","",48,[[["self"]],["storagekind"]]],[11,"clone","","",42,[[["self"]],["httprequestid"]]],[11,"clone","","",49,[[["self"]],["httperror"]]],[11,"clone","","",50,[[["self"]],["httprequeststatus"]]],[11,"clone","","",43,[[["self"]],["opaquenetworkstate"]]],[11,"clone","","",44,[[["self"]],["opaquepeerid"]]],[11,"clone","","",45,[[["self"]],["opaquemultiaddr"]]],[11,"clone","","",61,[[["self"]],["timestamp"]]],[11,"clone","","",60,[[["self"]],["duration"]]],[11,"clone","","",51,[[["self"]],["capability"]]],[11,"clone","","",62,[[["self"]],["capabilities"]]],[11,"clone","sp_core::sandbox","",66,[[["self"]],["typedvalue"]]],[11,"clone","","",67,[[["self"]],["returnvalue"]]],[11,"clone","","",68,[[["self"]],["externentity"]]],[11,"clone","","",64,[[["self"]],["entry"]]],[11,"clone","","",65,[[["self"]],["environmentdefinition"]]],[11,"clone","sp_core","",5,[[["self"]],["changestrieconfiguration"]]],[11,"clone","","",6,[[["self"]],["bytes"]]],[11,"clone","","",9,[[["self"]],["loglevel"]]],[11,"default","sp_core::crypto","",16,[[],["self"]]],[11,"default","","",80,[[],["accountid32"]]],[11,"default","","",81,[[],["dummy"]]],[11,"default","","",12,[[],["keytypeid"]]],[11,"default","sp_core::ed25519","",27,[[],["public"]]],[11,"default","","",28,[[],["self"]]],[11,"default","sp_core::sr25519","",33,[[],["public"]]],[11,"default","","",34,[[],["self"]]],[11,"default","sp_core::ecdsa","",37,[[],["self"]]],[11,"default","","",40,[[],["self"]]],[11,"default","sp_core::offchain::storage","",192,[[],["inmemoffchainstorage"]]],[11,"default","sp_core::offchain::testing","",52,[[],["pendingrequest"]]],[11,"default","","",53,[[],["offchainstate"]]],[11,"default","","",54,[[],["testoffchainext"]]],[11,"default","","",55,[[],["poolstate"]]],[11,"default","","",56,[[],["testtransactionpoolext"]]],[11,"default","sp_core::offchain","",44,[[],["opaquepeerid"]]],[11,"default","","",61,[[],["timestamp"]]],[11,"default","","",60,[[],["duration"]]],[11,"default","sp_core","",5,[[],["changestrieconfiguration"]]],[11,"default","sp_core::testing","",74,[[],["keystore"]]],[11,"cmp","sp_core::crypto","",80,[[["accountid32"],["self"]],["ordering"]]],[11,"cmp","","",12,[[["keytypeid"],["self"]],["ordering"]]],[11,"cmp","sp_core::ed25519","",27,[[["public"],["self"]],["ordering"]]],[11,"cmp","sp_core::sr25519","",33,[[["public"],["self"]],["ordering"]]],[11,"cmp","sp_core::ecdsa","",37,[[["self"]],["ordering"]]],[11,"cmp","sp_core::offchain","",42,[[["httprequestid"],["self"]],["ordering"]]],[11,"cmp","","",61,[[["timestamp"],["self"]],["ordering"]]],[11,"cmp","","",60,[[["self"],["duration"]],["ordering"]]],[11,"cmp","sp_core","",6,[[["self"],["bytes"]],["ordering"]]],[11,"eq","sp_core::crypto","",13,[[["secretstringerror"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["derivejunction"]],["bool"]]],[11,"ne","","",14,[[["self"],["derivejunction"]],["bool"]]],[11,"eq","","",15,[[["publicerror"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["ss58addressformat"]],["bool"]]],[11,"ne","","",16,[[["self"],["ss58addressformat"]],["bool"]]],[11,"eq","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"ne","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"eq","","",81,[[["dummy"],["self"]],["bool"]]],[11,"eq","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"ne","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"eq","sp_core::ed25519","",27,[[["public"],["self"]],["bool"]]],[11,"ne","","",27,[[["public"],["self"]],["bool"]]],[11,"eq","","",28,[[["self"]],["bool"]]],[11,"eq","","",29,[[["self"],["localizedsignature"]],["bool"]]],[11,"ne","","",29,[[["self"],["localizedsignature"]],["bool"]]],[11,"eq","","",30,[[["self"],["publicerror"]],["bool"]]],[11,"eq","sp_core::sr25519","",33,[[["public"],["self"]],["bool"]]],[11,"ne","","",33,[[["public"],["self"]],["bool"]]],[11,"eq","","",34,[[["self"]],["bool"]]],[11,"eq","","",35,[[["localizedsignature"],["self"]],["bool"]]],[11,"ne","","",35,[[["localizedsignature"],["self"]],["bool"]]],[11,"eq","sp_core::ecdsa","",37,[[["self"]],["bool"]]],[11,"eq","","",38,[[["self"],["publicerror"]],["bool"]]],[11,"eq","","",40,[[["self"]],["bool"]]],[11,"eq","sp_core::offchain::testing","",52,[[["self"],["pendingrequest"]],["bool"]]],[11,"ne","","",52,[[["self"],["pendingrequest"]],["bool"]]],[11,"eq","sp_core::offchain","",48,[[["storagekind"],["self"]],["bool"]]],[11,"eq","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"ne","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"eq","","",49,[[["httperror"],["self"]],["bool"]]],[11,"eq","","",50,[[["self"],["httprequeststatus"]],["bool"]]],[11,"ne","","",50,[[["self"],["httprequeststatus"]],["bool"]]],[11,"eq","","",43,[[["opaquenetworkstate"],["self"]],["bool"]]],[11,"ne","","",43,[[["opaquenetworkstate"],["self"]],["bool"]]],[11,"eq","","",44,[[["opaquepeerid"],["self"]],["bool"]]],[11,"ne","","",44,[[["opaquepeerid"],["self"]],["bool"]]],[11,"eq","","",45,[[["opaquemultiaddr"],["self"]],["bool"]]],[11,"ne","","",45,[[["opaquemultiaddr"],["self"]],["bool"]]],[11,"eq","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"ne","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"eq","","",60,[[["self"],["duration"]],["bool"]]],[11,"ne","","",60,[[["self"],["duration"]],["bool"]]],[11,"eq","","",51,[[["self"],["capability"]],["bool"]]],[11,"eq","","",62,[[["capabilities"],["self"]],["bool"]]],[11,"ne","","",62,[[["capabilities"],["self"]],["bool"]]],[11,"eq","sp_core::sandbox","",66,[[["self"],["typedvalue"]],["bool"]]],[11,"ne","","",66,[[["self"],["typedvalue"]],["bool"]]],[11,"eq","","",67,[[["self"],["returnvalue"]],["bool"]]],[11,"ne","","",67,[[["self"],["returnvalue"]],["bool"]]],[11,"eq","","",68,[[["externentity"],["self"]],["bool"]]],[11,"ne","","",68,[[["externentity"],["self"]],["bool"]]],[11,"eq","","",64,[[["self"],["entry"]],["bool"]]],[11,"ne","","",64,[[["self"],["entry"]],["bool"]]],[11,"eq","","",65,[[["self"],["environmentdefinition"]],["bool"]]],[11,"ne","","",65,[[["self"],["environmentdefinition"]],["bool"]]],[11,"eq","sp_core","",5,[[["self"],["changestrieconfiguration"]],["bool"]]],[11,"ne","","",5,[[["self"],["changestrieconfiguration"]],["bool"]]],[11,"eq","","",6,[[["self"],["bytes"]],["bool"]]],[11,"ne","","",6,[[["self"],["bytes"]],["bool"]]],[11,"eq","","",76,[[["opaquemetadata"],["self"]],["bool"]]],[11,"ne","","",76,[[["opaquemetadata"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"]],["bool"]]],[11,"eq","","",78,[[["nevernativevalue"],["self"]],["bool"]]],[11,"partial_cmp","sp_core::crypto","",80,[[["accountid32"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"le","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"gt","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"ge","","",80,[[["accountid32"],["self"]],["bool"]]],[11,"partial_cmp","","",12,[[["keytypeid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"le","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"gt","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"ge","","",12,[[["keytypeid"],["self"]],["bool"]]],[11,"partial_cmp","sp_core::ed25519","",27,[[["public"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",27,[[["public"],["self"]],["bool"]]],[11,"le","","",27,[[["public"],["self"]],["bool"]]],[11,"gt","","",27,[[["public"],["self"]],["bool"]]],[11,"ge","","",27,[[["public"],["self"]],["bool"]]],[11,"partial_cmp","sp_core::sr25519","",33,[[["public"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",33,[[["public"],["self"]],["bool"]]],[11,"le","","",33,[[["public"],["self"]],["bool"]]],[11,"gt","","",33,[[["public"],["self"]],["bool"]]],[11,"ge","","",33,[[["public"],["self"]],["bool"]]],[11,"partial_cmp","sp_core::ecdsa","",37,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","sp_core::offchain","",42,[[["httprequestid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"le","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"gt","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"ge","","",42,[[["httprequestid"],["self"]],["bool"]]],[11,"partial_cmp","","",61,[[["timestamp"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"le","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"gt","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"ge","","",61,[[["timestamp"],["self"]],["bool"]]],[11,"partial_cmp","","",60,[[["self"],["duration"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",60,[[["self"],["duration"]],["bool"]]],[11,"le","","",60,[[["self"],["duration"]],["bool"]]],[11,"gt","","",60,[[["self"],["duration"]],["bool"]]],[11,"ge","","",60,[[["self"],["duration"]],["bool"]]],[11,"partial_cmp","sp_core","",6,[[["self"],["bytes"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["bytes"]],["bool"]]],[11,"le","","",6,[[["self"],["bytes"]],["bool"]]],[11,"gt","","",6,[[["self"],["bytes"]],["bool"]]],[11,"ge","","",6,[[["self"],["bytes"]],["bool"]]],[11,"deref","sp_core::crypto","",79,[[["self"]],["t"]]],[11,"deref","sp_core::ed25519","",27,[[["self"]]]],[11,"deref","sp_core::sr25519","",33,[[["self"]]]],[11,"deref","sp_core::offchain","",46,[[["self"]]]],[11,"deref","","",47,[[["self"]]]],[11,"deref","sp_core::traits","",71,[[["self"]]]],[11,"deref","sp_core","",6,[[["self"]]]],[11,"deref","","",76,[[["self"]]]],[11,"deref_mut","sp_core::offchain","",46,[[["self"]]]],[11,"deref_mut","","",47,[[["self"]]]],[11,"deref_mut","sp_core::traits","",71,[[["self"]]]],[11,"fmt","sp_core::hexdisplay","",11,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::crypto","",82,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_core::ed25519","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::sr25519","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::ecdsa","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::offchain::storage","",192,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::offchain::testing","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::offchain","",48,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::sandbox","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_core","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_core::hexdisplay","",11,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_core::crypto","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::ed25519","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::sr25519","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_core::ecdsa","",37,[[["formatter"],["self"]],["result"]]],[11,"hash","sp_core::crypto","",14,[[["self"],["__h"]]]],[11,"hash","","",81,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","sp_core::ed25519","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["h"]]]],[11,"hash","sp_core::sr25519","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["h"]]]],[11,"hash","sp_core::ecdsa","",37,[[["self"],["h"]]]],[11,"hash","","",40,[[["self"],["h"]]]],[11,"hash","sp_core::offchain","",42,[[["self"],["__h"]]]],[11,"hash","sp_core","",6,[[["self"],["__h"]]]],[11,"try_from","sp_core::crypto","",16,[[["u8"]],[["result",["ss58addressformat"]],["ss58addressformat"]]]],[11,"try_from","","",16,[[["str"]],[["result",["ss58addressformat"]],["ss58addressformat"]]]],[11,"try_from","","",80,[[],[["result",["accountid32"]],["accountid32"]]]],[11,"try_from","","",12,[[["str"]],["result"]]],[11,"try_from","sp_core::ed25519","",27,[[],["result"]]],[11,"try_from","","",28,[[],["result"]]],[11,"try_from","sp_core::sr25519","",33,[[],["result"]]],[11,"try_from","","",34,[[],["result"]]],[11,"try_from","sp_core::ecdsa","",37,[[],["result"]]],[11,"try_from","","",40,[[],["result"]]],[11,"try_from","sp_core::offchain","",48,[[["u8"]],["result"]]],[11,"try_from","","",48,[[["u32"]],["result"]]],[11,"try_from","","",49,[[["u8"]],["result"]]],[11,"try_from","","",49,[[["u32"]],["result"]]],[11,"try_from","","",50,[[["u32"]],["result"]]],[11,"try_from","sp_core","",9,[[["u8"]],["result"]]],[11,"from_str","sp_core::ed25519","",27,[[["str"]],["result"]]],[11,"from_str","sp_core::sr25519","",33,[[["str"]],["result"]]],[11,"serialize","sp_core::crypto","",80,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core::ed25519","",27,[[["s"],["self"]],["result"]]],[11,"serialize","","",28,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core::sr25519","",33,[[["s"],["self"]],["result"]]],[11,"serialize","","",34,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core::ecdsa","",37,[[["s"],["self"]],["result"]]],[11,"serialize","","",40,[[["s"],["self"]],["result"]]],[11,"serialize","sp_core","",5,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"deserialize","sp_core::crypto","",80,[[["d"]],["result"]]],[11,"deserialize","sp_core::ed25519","",27,[[["d"]],["result"]]],[11,"deserialize","","",28,[[["d"]],["result"]]],[11,"deserialize","sp_core::sr25519","",33,[[["d"]],["result"]]],[11,"deserialize","","",34,[[["d"]],["result"]]],[11,"deserialize","sp_core::ecdsa","",37,[[["d"]],["result"]]],[11,"deserialize","","",40,[[["d"]],["result"]]],[11,"deserialize","sp_core","",5,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"encode_to","sp_core::crypto","",14,[[["self"],["encout"]]]],[11,"encode_to","","",80,[[["self"],["encout"]]]],[11,"encode","","",80,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",80,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",12,[[["self"],["encout"]]]],[11,"encode","","",12,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",12,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_core::ed25519","",27,[[["self"],["encout"]]]],[11,"encode","","",27,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",27,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",28,[[["self"],["encout"]]]],[11,"encode","","",28,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",28,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",29,[[["self"],["encout"]]]],[11,"encode_to","sp_core::sr25519","",33,[[["self"],["encout"]]]],[11,"encode","","",33,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",33,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",34,[[["self"],["encout"]]]],[11,"encode","","",34,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",34,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_core::ecdsa","",37,[[["self"],["encout"]]]],[11,"encode_to","","",40,[[["self"],["encout"]]]],[11,"encode","","",40,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",40,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_core::offchain","",48,[[["self"],["encout"]]]],[11,"encode_to","","",42,[[["self"],["encout"]]]],[11,"encode","","",42,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",42,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",49,[[["self"],["encout"]]]],[11,"encode_to","","",50,[[["self"],["encout"]]]],[11,"encode_to","","",43,[[["self"],["encout"]]]],[11,"encode_to","","",44,[[["self"],["encout"]]]],[11,"encode","","",44,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",44,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",45,[[["self"],["encout"]]]],[11,"encode","","",45,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",45,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",61,[[["self"],["encout"]]]],[11,"encode","","",61,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",61,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",60,[[["self"],["encout"]]]],[11,"encode","","",60,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",60,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_core::sandbox","",193,[[["self"],["encout"]]]],[11,"encode_to","","",66,[[["self"],["encout"]]]],[11,"encode_to","","",67,[[["self"],["encout"]]]],[11,"encode_to","","",68,[[["self"],["encout"]]]],[11,"encode_to","","",64,[[["self"],["encout"]]]],[11,"encode_to","","",65,[[["self"],["encout"]]]],[11,"encode","","",65,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",65,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","sp_core","",5,[[["self"],["encout"]]]],[11,"encode_to","","",76,[[["self"],["encout"]]]],[11,"encode","","",76,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",76,[[["fnonce"],["self"]],["r"]]],[11,"encode","","",78,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"encode_to","","",9,[[["self"],["encout"]]]],[11,"decode","sp_core::crypto","",14,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",80,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",12,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core::ed25519","",27,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",28,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",29,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core::sr25519","",33,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",34,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core::ecdsa","",37,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",40,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core::offchain","",48,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",42,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",49,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",50,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",43,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",44,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",45,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",61,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",60,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core::sandbox","",193,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",66,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",67,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",68,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",64,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",65,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_core","",5,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",76,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",78,[[["i"]],[["result",["error"]],["error"]]]],[11,"decode","","",9,[[["decin"]],[["result",["error"]],["error"]]]],[11,"zeroize","sp_core::crypto","",79,[[["self"]]]],[11,"into_inner","","",12,[[]]],[11,"inner","","",12,[[["self"]]]],[11,"from_inner","","",12,[[],["self"]]],[11,"into_inner","sp_core::ed25519","",27,[[]]],[11,"inner","","",27,[[["self"]]]],[11,"from_inner","","",27,[[],["self"]]],[11,"into_inner","","",28,[[]]],[11,"inner","","",28,[[["self"]]]],[11,"from_inner","","",28,[[],["self"]]],[11,"into_inner","sp_core::sr25519","",33,[[]]],[11,"inner","","",33,[[["self"]]]],[11,"from_inner","","",33,[[],["self"]]],[11,"into_inner","","",34,[[]]],[11,"inner","","",34,[[["self"]]]],[11,"from_inner","","",34,[[],["self"]]],[11,"into_inner","sp_core::offchain","",42,[[]]],[11,"inner","","",42,[[["self"]]]],[11,"from_inner","","",42,[[],["self"]]],[11,"into_inner","","",44,[[]]],[11,"inner","","",44,[[["self"]]]],[11,"from_inner","","",44,[[],["self"]]],[11,"into_inner","","",45,[[]]],[11,"inner","","",45,[[["self"]]]],[11,"from_inner","","",45,[[],["self"]]],[11,"into_inner","","",61,[[]]],[11,"inner","","",61,[[["self"]]]],[11,"from_inner","","",61,[[],["self"]]],[11,"into_inner","","",60,[[]]],[11,"inner","","",60,[[["self"]]]],[11,"from_inner","","",60,[[],["self"]]],[11,"as_mut_any","","",46,[[["self"]],["any"]]],[11,"as_mut_any","","",47,[[["self"]],["any"]]],[11,"as_mut_any","sp_core::traits","",71,[[["self"]],["any"]]],[11,"hash","sp_core","",77,[[]]],[11,"repeat_byte","sp_core::hash","Returns a new fixed hash where all bits are set to the…",0,[[["u8"]],["h160"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",0,[[],["h160"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",0,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",0,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",0,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",0,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",0,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",0,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",0,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",0,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",0,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",0,[[],["h160"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",0,[[["self"],["h160"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",0,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",0,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",0,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",0,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",0,[[["u64"]],["h160"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",0,[[["u64"]],["h160"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",0,[[["u64"]],["h160"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",0,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",0,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",0,[[["r"]],["h160"]]],[11,"random","","Create a new hash with cryptographically random content.",0,[[],["h160"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",1,[[["u8"]],["h256"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",1,[[],["h256"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",1,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",1,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",1,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",1,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",1,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",1,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",1,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",1,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",1,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",1,[[],["h256"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",1,[[["self"],["h256"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",1,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",1,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",1,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",1,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",1,[[["u64"]],["h256"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",1,[[["u64"]],["h256"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",1,[[["u64"]],["h256"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",1,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",1,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",1,[[["r"]],["h256"]]],[11,"random","","Create a new hash with cryptographically random content.",1,[[],["h256"]]],[11,"repeat_byte","","Returns a new fixed hash where all bits are set to the…",2,[[["u8"]],["h512"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",2,[[],["h512"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",2,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",2,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",2,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",2,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",2,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",2,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",2,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",2,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",2,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",2,[[],["h512"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",2,[[["self"],["h512"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",2,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",2,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",2,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",2,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",2,[[["u64"]],["h512"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",2,[[["u64"]],["h512"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",2,[[["u64"]],["h512"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",2,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",2,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",2,[[["r"]],["h512"]]],[11,"random","","Create a new hash with cryptographically random content.",2,[[],["h512"]]],[11,"full_mul","sp_core::uint","Multiplies two 256-bit integers to produce full 512-bit…",3,[[["u256"]],["u512"]]],[11,"low_u128","","Low 2 words (u128)",3,[[["self"]],["u128"]]],[11,"as_u128","","Conversion to u128 with overflow checking",3,[[["self"]],["u128"]]],[18,"MAX","","Maximum value.",3,null],[11,"from_dec_str","","Convert from a decimal string.",3,[[["str"]],[["fromdecstrerr"],["result",["u256","fromdecstrerr"]],["u256"]]]],[11,"low_u32","","Conversion to u32",3,[[["self"]],["u32"]]],[11,"low_u64","","Low word (u64)",3,[[["self"]],["u64"]]],[11,"as_u32","","Conversion to u32 with overflow checking",3,[[["self"]],["u32"]]],[11,"as_u64","","Conversion to u64 with overflow checking",3,[[["self"]],["u64"]]],[11,"as_usize","","Conversion to usize with overflow checking",3,[[["self"]],["usize"]]],[11,"is_zero","","Whether this is zero.",3,[[["self"]],["bool"]]],[11,"bits","","Return the least number of bits needed to represent the…",3,[[["self"]],["usize"]]],[11,"bit","","Return if specific bit is set.",3,[[["self"],["usize"]],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",3,[[["self"]],["u32"]]],[11,"trailing_zeros","","Returns the number of leading zeros in the binary…",3,[[["self"]],["u32"]]],[11,"byte","","Return specific byte.",3,[[["self"],["usize"]],["u8"]]],[11,"to_big_endian","","Write to the slice in big-endian format.",3,[[["self"]]]],[11,"to_little_endian","","Write to the slice in little-endian format.",3,[[["self"]]]],[11,"exp10","","Create `10**n` as this type.",3,[[["usize"]],["u256"]]],[11,"zero","","Zero (additive identity) of this type.",3,[[],["u256"]]],[11,"one","","One (multiplicative identity) of this type.",3,[[],["u256"]]],[11,"max_value","","The maximum value which can be inhabited by this type.",3,[[],["u256"]]],[11,"div_mod","","Returns a pair `(self / other, self % other)`.",3,[[["u256"]]]],[11,"pow","","Fast exponentiation by squaring…",3,[[["u256"]],["u256"]]],[11,"overflowing_pow","","Fast exponentiation by squaring. Returns result and…",3,[[["u256"]]]],[11,"overflowing_add","","Add with overflow.",3,[[["u256"]]]],[11,"saturating_add","","Addition which saturates at the maximum value…",3,[[["u256"]],["u256"]]],[11,"checked_add","","Checked addition. Returns `None` if overflow occurred.",3,[[["u256"]],[["option",["u256"]],["u256"]]]],[11,"overflowing_sub","","Subtraction which underflows and returns a flag if it does.",3,[[["u256"]]]],[11,"saturating_sub","","Subtraction which saturates at zero.",3,[[["u256"]],["u256"]]],[11,"checked_sub","","Checked subtraction. Returns `None` if overflow occurred.",3,[[["u256"]],[["option",["u256"]],["u256"]]]],[11,"overflowing_mul","","Multiply with overflow, returning a flag if it does.",3,[[["u256"]]]],[11,"saturating_mul","","Multiplication which saturates at the maximum value..",3,[[["u256"]],["u256"]]],[11,"checked_mul","","Checked multiplication. Returns `None` if overflow occurred.",3,[[["u256"]],[["option",["u256"]],["u256"]]]],[11,"checked_div","","Checked division. Returns `None` if `other == 0`.",3,[[["u256"]],[["option",["u256"]],["u256"]]]],[11,"checked_rem","","Checked modulus. Returns `None` if `other == 0`.",3,[[["u256"]],[["option",["u256"]],["u256"]]]],[11,"overflowing_neg","","Negation with overflow.",3,[[]]],[11,"checked_neg","","Checked negation. Returns `None` unless `self == 0`.",3,[[],[["option",["u256"]],["u256"]]]],[11,"from_big_endian","","Converts from big endian representation bytes in memory.",3,[[],["u256"]]],[11,"from_little_endian","","Converts from little endian representation bytes in memory.",3,[[],["u256"]]]],"p":[[3,"H160"],[3,"H256"],[3,"H512"],[3,"U256"],[8,"Hasher"],[3,"ChangesTrieConfiguration"],[3,"Bytes"],[4,"ExecutionContext"],[4,"NativeOrEncoded"],[4,"LogLevel"],[8,"AsBytesRef"],[3,"HexDisplay"],[3,"KeyTypeId"],[4,"SecretStringError"],[4,"DeriveJunction"],[4,"PublicError"],[4,"Ss58AddressFormat"],[8,"UncheckedFrom"],[8,"UncheckedInto"],[8,"Ss58Codec"],[8,"Derive"],[8,"Public"],[8,"Pair"],[8,"IsWrappedBy"],[8,"Wraps"],[8,"CryptoType"],[8,"Value"],[3,"Public"],[3,"Signature"],[3,"LocalizedSignature"],[4,"PublicError"],[4,"DeriveError"],[3,"Pair"],[3,"Public"],[3,"Signature"],[3,"LocalizedSignature"],[3,"Pair"],[4,"Public"],[4,"PublicError"],[4,"DeriveError"],[3,"Signature"],[3,"Pair"],[3,"HttpRequestId"],[3,"OpaqueNetworkState"],[3,"OpaquePeerId"],[3,"OpaqueMultiaddr"],[3,"OffchainExt"],[3,"TransactionPoolExt"],[4,"StorageKind"],[4,"HttpError"],[4,"HttpRequestStatus"],[4,"Capability"],[3,"PendingRequest"],[3,"OffchainState"],[3,"TestOffchainExt"],[3,"PoolState"],[3,"TestTransactionPoolExt"],[8,"OffchainStorage"],[8,"Externalities"],[8,"TransactionPool"],[3,"Duration"],[3,"Timestamp"],[3,"Capabilities"],[3,"LimitedExternalities"],[3,"Entry"],[3,"EnvironmentDefinition"],[4,"TypedValue"],[4,"ReturnValue"],[4,"ExternEntity"],[8,"Externalities"],[8,"ExternalitiesExt"],[3,"KeystoreExt"],[8,"BareCryptoStore"],[8,"CodeExecutor"],[3,"KeyStore"],[8,"TypeId"],[3,"OpaqueMetadata"],[3,"Blake2Hasher"],[4,"NeverNativeValue"],[3,"Protected"],[3,"AccountId32"],[3,"Dummy"],[4,"Infallible"],[3,"_0"],[3,"_1"],[3,"_2"],[3,"_3"],[3,"_4"],[3,"_5"],[3,"_6"],[3,"_7"],[3,"_8"],[3,"_9"],[3,"_10"],[3,"_11"],[3,"_12"],[3,"_13"],[3,"_14"],[3,"_15"],[3,"_16"],[3,"_17"],[3,"_18"],[3,"_19"],[3,"_20"],[3,"_21"],[3,"_22"],[3,"_23"],[3,"_24"],[3,"_25"],[3,"_26"],[3,"_27"],[3,"_28"],[3,"_29"],[3,"_30"],[3,"_31"],[3,"_32"],[3,"_33"],[3,"_34"],[3,"_35"],[3,"_36"],[3,"_37"],[3,"_38"],[3,"_39"],[3,"_40"],[3,"_41"],[3,"_42"],[3,"_43"],[3,"_44"],[3,"_45"],[3,"_46"],[3,"_47"],[3,"_48"],[3,"_49"],[3,"_50"],[3,"_51"],[3,"_52"],[3,"_53"],[3,"_54"],[3,"_55"],[3,"_56"],[3,"_57"],[3,"_58"],[3,"_59"],[3,"_60"],[3,"_61"],[3,"_62"],[3,"_63"],[3,"_64"],[3,"_65"],[3,"_66"],[3,"_67"],[3,"_68"],[3,"_69"],[3,"_70"],[3,"_71"],[3,"_72"],[3,"_73"],[3,"_74"],[3,"_75"],[3,"_76"],[3,"_77"],[3,"_78"],[3,"_79"],[3,"_80"],[3,"_81"],[3,"_82"],[3,"_83"],[3,"_84"],[3,"_85"],[3,"_86"],[3,"_87"],[3,"_88"],[3,"_89"],[3,"_90"],[3,"_91"],[3,"_92"],[3,"_93"],[3,"_94"],[3,"_95"],[3,"_96"],[3,"_97"],[3,"_98"],[3,"_99"],[3,"_100"],[3,"_112"],[3,"_128"],[3,"_160"],[3,"_192"],[3,"_224"],[3,"_256"],[3,"_384"],[3,"_512"],[3,"InMemOffchainStorage"],[3,"HostError"]]};
searchIndex["sp_debug_derive"] = {"doc":"Macros to derive runtime debug implementation.","i":[[24,"RuntimeDebug","sp_debug_derive","",null,null]],"p":[]};
searchIndex["sp_externalities"] = {"doc":"Substrate externalities abstraction","i":[[3,"Extensions","sp_externalities","Stores extensions that should be made available through…",null,null],[5,"set_and_run_with_externalities","","Set the given externalities while executing the given…",null,[[["f"],["externalities"]],["r"]]],[5,"with_externalities","","Execute the given closure with the currently set…",null,[[["fnonce"]],["option"]]],[11,"new","","Create new instance of `Self`.",0,[[],["self"]]],[11,"register","","Register the given extension.",0,[[["extension"],["self"]]]],[11,"get_mut","","Return a mutable reference to the requested extension.",0,[[["typeid"],["self"]],[["option",["any"]],["any"]]]],[8,"Extension","","Marker trait for types that should be registered as…",null,null],[10,"as_mut_any","","Return the extension as `&mut dyn Any`.",1,[[["self"]],["any"]]],[8,"ExtensionStore","","Something that provides access to the [`Extensions`] store.",null,null],[10,"extension_by_type_id","","Tries to find a registered extension by the given…",2,[[["typeid"],["self"]],[["option",["any"]],["any"]]]],[8,"Externalities","","The Substrate externalities.",null,null],[10,"storage","","Read runtime storage.",3,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"storage_hash","","Get storage value hash. This may be optimized for large…",3,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"child_storage_hash","","Get child storage value hash. This may be optimized for…",3,[[["childstoragekey"],["childinfo"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"original_storage","","Read original runtime storage, ignoring any overlayed…",3,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"original_child_storage","","Read original runtime child storage, ignoring any…",3,[[["childstoragekey"],["childinfo"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"original_storage_hash","","Get original storage value hash, ignoring any overlayed…",3,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"original_child_storage_hash","","Get original child storage value hash, ignoring any…",3,[[["childstoragekey"],["childinfo"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"child_storage","","Read child runtime storage.",3,[[["childstoragekey"],["childinfo"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"set_storage","","Set storage entry `key` of current contract being called…",3,[[["vec",["u8"]],["self"],["u8"]]]],[11,"set_child_storage","","Set child storage entry `key` of current contract being…",3,[[["u8"],["childstoragekey"],["self"],["childinfo"],["vec",["u8"]]]]],[11,"clear_storage","","Clear a storage entry (`key`) of current contract being…",3,[[["self"]]]],[11,"clear_child_storage","","Clear a child storage entry (`key`) of current contract…",3,[[["childstoragekey"],["self"],["childinfo"]]]],[11,"exists_storage","","Whether a storage entry exists.",3,[[["self"]],["bool"]]],[11,"exists_child_storage","","Whether a child storage entry exists.",3,[[["childstoragekey"],["childinfo"],["self"]],["bool"]]],[10,"next_storage_key","","Returns the key immediately following the given key, if it…",3,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"next_child_storage_key","","Returns the key immediately following the given key, if it…",3,[[["childstoragekey"],["childinfo"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[10,"kill_child_storage","","Clear an entire child storage.",3,[[["childstoragekey"],["self"],["childinfo"]]]],[10,"clear_prefix","","Clear storage entries which keys are start with the given…",3,[[["self"]]]],[10,"clear_child_prefix","","Clear child storage entries which keys are start with the…",3,[[["childstoragekey"],["self"],["childinfo"]]]],[10,"place_storage","","Set or clear a storage entry (`key`) of current contract…",3,[[["vec",["u8"]],["self"],["option",["vec"]],["u8"]]]],[10,"place_child_storage","","Set or clear a child storage entry. Return whether the…",3,[[["u8"],["option",["vec"]],["childstoragekey"],["self"],["childinfo"],["vec",["u8"]]]]],[10,"chain_id","","Get the identity of the chain.",3,[[["self"]],["u64"]]],[10,"storage_root","","Get the trie root of the current storage map. This will…",3,[[["self"]],[["vec",["u8"]],["u8"]]]],[10,"child_storage_root","","Get the trie root of a child storage map. This will also…",3,[[["childstoragekey"],["self"]],[["vec",["u8"]],["u8"]]]],[10,"storage_changes_root","","Get the change trie root of the current storage overlay at…",3,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[8,"ExternalitiesExt","","Extension for the [`Externalities`] trait.",null,null],[10,"extension","","Tries to find a registered extension and returns a mutable…",4,[[["self"]],[["option"],["t"]]]],[14,"decl_extension","","Macro for declaring an extension that usable with…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"default","","",0,[[],["extensions"]]]],"p":[[3,"Extensions"],[8,"Extension"],[8,"ExtensionStore"],[8,"Externalities"],[8,"ExternalitiesExt"]]};
searchIndex["sp_inherents"] = {"doc":"Provides types and traits for creating and checking…","i":[[3,"Error","sp_inherents","An error that can occur within the inherent data system.",null,null],[3,"InherentData","","Inherent data to include in a block.",null,null],[3,"CheckInherentsResult","","The result of checking inherents.",null,null],[3,"InherentDataProviders","","All `InherentData` providers.",null,null],[3,"MakeFatalError","","Auxiliary to make any given error resolve to…",null,null],[6,"InherentIdentifier","","An identifier for an inherent.",null,null],[8,"ProvideInherentData","","Something that provides inherent data.",null,null],[11,"on_register","","Is called when this inherent data provider is registered…",0,[[["self"],["inherentdataproviders"]],[["result",["error"]],["error"]]]],[10,"inherent_identifier","","The identifier of the inherent for that data will be…",0,[[["self"]],["inherentidentifier"]]],[10,"provide_inherent_data","","Provide inherent data that should be included in a block.",0,[[["self"],["inherentdata"]],[["result",["error"]],["error"]]]],[10,"error_to_string","","Convert the given encoded error to a string.",0,[[["self"]],[["string"],["option",["string"]]]]],[8,"IsFatalError","","Did we encounter a fatal error while checking an inherent?",null,null],[10,"is_fatal_error","","Is this a fatal error?",1,[[["self"]],["bool"]]],[8,"ProvideInherent","","A module that provides an inherent and may also verifies it.",null,null],[16,"Call","","The call type of the module.",2,null],[16,"Error","","The error returned by `check_inherent`.",2,null],[18,"INHERENT_IDENTIFIER","","The inherent identifier used by this inherent.",2,null],[10,"create_inherent","","Create an inherent out of the given `InherentData`.",2,[[["inherentdata"]],["option"]]],[11,"check_inherent","","Check the given inherent if it is valid. Checking the…",2,[[["inherentdata"]],["result"]]],[11,"into_string","","Convert this error into a `String`.",3,[[],["string"]]],[11,"new","","Create a new instance.",4,[[],["self"]]],[11,"put_data","","Put data for an inherent into the internal storage.",4,[[["inherentidentifier"],["self"],["i"]],[["result",["error"]],["error"]]]],[11,"replace_data","","Replace the data for an inherent.",4,[[["inherentidentifier"],["self"],["i"]]]],[11,"get_data","","Returns the data for the requested inherent.",4,[[["self"],["inherentidentifier"]],[["error"],["result",["option","error"]],["option"]]]],[11,"new","","Create a new instance.",5,[[],["self"]]],[11,"put_error","","Put an error into the result.",5,[[["inherentidentifier"],["self"],["e"]],[["result",["error"]],["error"]]]],[11,"get_error","","Get an error out of the result.",5,[[["self"],["inherentidentifier"]],[["option"],["error"],["result",["option","error"]]]]],[11,"into_errors","","Convert into an iterator over all contained errors.",5,[[],[["inherentidentifier"],["vec",["u8"]],["intoiter",["inherentidentifier","vec"]]]]],[11,"ok","","Is this result ok?",5,[[["self"]],["bool"]]],[11,"fatal_error","","Is this a fatal error?",5,[[["self"]],["bool"]]],[11,"new","","Create a new instance.",6,[[],["self"]]],[11,"register_provider","","Register an `InherentData` provider.",6,[[["provideinherentdata"],["send"],["sync"],["self"]],[["result",["error"]],["error"]]]],[11,"has_provider","","Returns if a provider for the given identifier exists.",6,[[["self"],["inherentidentifier"]],["bool"]]],[11,"create_inherent_data","","Create inherent data.",6,[[["self"]],[["result",["inherentdata","error"]],["inherentdata"],["error"]]]],[11,"error_to_string","","Converts a given encoded error into a `String`.",6,[[["self"],["inherentidentifier"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"size_hint","","",4,[[["self"]],["usize"]]],[11,"using_encoded","","",4,[[["self"],["f"]],["r"]]],[11,"encode","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",4,[[["w"],["self"]]]],[11,"decode","","",4,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",4,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",4,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"clear","","",4,[[["self"]]]],[11,"initialize","","",4,[[]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"size_hint","","",5,[[["self"]],["usize"]]],[11,"using_encoded","","",5,[[["self"],["f"]],["r"]]],[11,"encode","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",5,[[["w"],["self"]]]],[11,"decode","","",5,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",5,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",5,[[],[["error"],["result",["error"]]]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"clear","","",5,[[["self"]]]],[11,"initialize","","",5,[[]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"vzip","","",6,[[],["v"]]],[11,"clear","","",6,[[["self"]]]],[11,"initialize","","",6,[[]]],[11,"from","","",7,[[],["t"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"size_hint","","",7,[[["self"]],["usize"]]],[11,"using_encoded","","",7,[[["self"],["f"]],["r"]]],[11,"encode","","",7,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",7,[[["w"],["self"]]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"vzip","","",7,[[],["v"]]],[11,"is_fatal_error","","",7,[[["self"]],["bool"]]],[11,"from","","",3,[[["t"]],["error"]]],[11,"from","","",7,[[["e"]],["self"]]],[11,"clone","","",4,[[["self"]],["inherentdata"]]],[11,"clone","","",5,[[["self"]],["checkinherentsresult"]]],[11,"clone","","",6,[[["self"]],["inherentdataproviders"]]],[11,"default","","",4,[[],["inherentdata"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",6,[[],["inherentdataproviders"]]],[11,"eq","","",5,[[["self"]],["bool"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"encode_to","","",3,[[["self"],["encout"]]]],[11,"encode","","",3,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",3,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",4,[[["self"],["encout"]]]],[11,"encode","","",4,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",4,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",5,[[["self"],["encout"]]]],[11,"encode_to","","",7,[[["self"],["encout"]]]],[11,"encode","","",7,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",7,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",3,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",4,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",5,[[["decin"]],[["result",["error"]],["error"]]]]],"p":[[8,"ProvideInherentData"],[8,"IsFatalError"],[8,"ProvideInherent"],[3,"Error"],[3,"InherentData"],[3,"CheckInherentsResult"],[3,"InherentDataProviders"],[3,"MakeFatalError"]]};
searchIndex["sp_io"] = {"doc":"This is part of the Substrate runtime.","i":[[4,"EcdsaVerifyError","sp_io","Error verifying ECDSA signature",null,null],[13,"BadRS","","Incorrect value of R or S",0,null],[13,"BadV","","Incorrect value of V",0,null],[13,"BadSignature","","Invalid signature",0,null],[0,"storage","","Interface for accessing the storage from within the runtime.",null,null],[3,"HostFunctions","sp_io::storage","Provides implementations for the extern host functions.",null,null],[5,"get","","Returns the data for `key` in the storage or `None` if the…",null,[[],[["option",["vec"]],["vec",["u8"]]]]],[5,"child_get","","All Child api uses : - A `child_storage_key` to define the…",null,[[["u32"]],[["option",["vec"]],["vec",["u8"]]]]],[5,"read","","Get `key` from storage, placing the value into `value_out`…",null,[[["u32"]],[["option",["u32"]],["u32"]]]],[5,"child_read","","Get `key` from child storage, placing the value into…",null,[[["u32"]],[["option",["u32"]],["u32"]]]],[5,"set","","Set `key` to `value` in the storage.",null,[[]]],[5,"child_set","","Set `key` to `value` in the child storage denoted by…",null,[[["u32"]]]],[5,"clear","","Clear the storage of the given `key` and its value.",null,[[]]],[5,"child_clear","","Clear the given child storage of the given `key` and its…",null,[[["u32"]]]],[5,"child_storage_kill","","Clear an entire child storage.",null,[[["u32"]]]],[5,"exists","","Check whether the given `key` exists in storage.",null,[[],["bool"]]],[5,"child_exists","","Check whether the given `key` exists in storage.",null,[[["u32"]],["bool"]]],[5,"clear_prefix","","Clear the storage of each key-value pair where the key…",null,[[]]],[5,"child_clear_prefix","","Clear the child storage of each key-value pair where the…",null,[[["u32"]]]],[5,"root","","\"Commit\" all existing operations and compute the resulting…",null,[[],[["vec",["u8"]],["u8"]]]],[5,"child_root","","\"Commit\" all existing operations and compute the resulting…",null,[[],[["vec",["u8"]],["u8"]]]],[5,"changes_root","","\"Commit\" all existing operations and get the resulting…",null,[[],[["option",["vec"]],["vec",["u8"]]]]],[5,"next_key","","Get the next key in storage after the given one in…",null,[[],[["option",["vec"]],["vec",["u8"]]]]],[5,"child_next_key","","Get the next key in storage after the given one in…",null,[[["u32"]],[["option",["vec"]],["vec",["u8"]]]]],[0,"trie","sp_io","Interface that provides trie related functionality.",null,null],[3,"HostFunctions","sp_io::trie","Provides implementations for the extern host functions.",null,null],[5,"blake2_256_root","","A trie root formed from the iterated items.",null,[[["vec"]],["h256"]]],[5,"blake2_256_ordered_root","","A trie root formed from the enumerated items.",null,[[["vec",["u8"]],["vec",["vec"]]],["h256"]]],[0,"misc","sp_io","Interface that provides miscellaneous functions for…",null,null],[3,"HostFunctions","sp_io::misc","Provides implementations for the extern host functions.",null,null],[5,"chain_id","","The current relay chain identifier.",null,[[],["u64"]]],[5,"print_num","","Print a number.",null,[[["u64"]]]],[5,"print_utf8","","Print any valid `utf8` buffer.",null,[[]]],[5,"print_hex","","Print any `u8` slice as hex.",null,[[]]],[0,"crypto","sp_io","Interfaces for working with crypto related types from…",null,null],[3,"HostFunctions","sp_io::crypto","Provides implementations for the extern host functions.",null,null],[5,"ed25519_public_keys","","Returns all `ed25519` public keys for the given key id…",null,[[["keytypeid"]],[["vec",["public"]],["public"]]]],[5,"ed25519_generate","","Generate an `ed22519` key for the given key type using an…",null,[[["option",["vec"]],["vec",["u8"]],["keytypeid"]],["public"]]],[5,"ed25519_sign","","Sign the given `msg` with the `ed25519` key that…",null,[[["keytypeid"],["public"]],[["option",["signature"]],["signature"]]]],[5,"ed25519_verify","","Verify an `ed25519` signature.",null,[[["signature"],["public"]],["bool"]]],[5,"sr25519_public_keys","","Returns all `sr25519` public keys for the given key id…",null,[[["keytypeid"]],[["public"],["vec",["public"]]]]],[5,"sr25519_generate","","Generate an `sr22519` key for the given key type using an…",null,[[["option",["vec"]],["vec",["u8"]],["keytypeid"]],["public"]]],[5,"sr25519_sign","","Sign the given `msg` with the `sr25519` key that…",null,[[["public"],["keytypeid"]],[["option",["signature"]],["signature"]]]],[5,"sr25519_verify","","Verify an `sr25519` signature.",null,[[["public"],["signature"]],["bool"]]],[5,"secp256k1_ecdsa_recover","","Verify and recover a SECP256k1 ECDSA signature. - `sig` is…",null,[[],[["result",["ecdsaverifyerror"]],["ecdsaverifyerror"]]]],[5,"secp256k1_ecdsa_recover_compressed","","Verify and recover a SECP256k1 ECDSA signature. - `sig` is…",null,[[],[["result",["ecdsaverifyerror"]],["ecdsaverifyerror"]]]],[0,"hashing","sp_io","Interface that provides functions for hashing with…",null,null],[3,"HostFunctions","sp_io::hashing","Provides implementations for the extern host functions.",null,null],[5,"keccak_256","","Conduct a 256-bit Keccak hash.",null,[[]]],[5,"sha2_256","","Conduct a 256-bit Sha2 hash.",null,[[]]],[5,"blake2_128","","Conduct a 128-bit Blake2 hash.",null,[[]]],[5,"blake2_256","","Conduct a 256-bit Blake2 hash.",null,[[]]],[5,"twox_256","","Conduct four XX hashes to give a 256-bit result.",null,[[]]],[5,"twox_128","","Conduct two XX hashes to give a 128-bit result.",null,[[]]],[5,"twox_64","","Conduct two XX hashes to give a 64-bit result.",null,[[]]],[0,"offchain","sp_io","Interface that provides functions to access the offchain…",null,null],[3,"HostFunctions","sp_io::offchain","Provides implementations for the extern host functions.",null,null],[5,"is_validator","","Returns if the local node is a potential validator.",null,[[],["bool"]]],[5,"submit_transaction","","Submit an encoded transaction to the pool.",null,[[["vec",["u8"]],["u8"]],["result"]]],[5,"network_state","","Returns information about the local node's network state.",null,[[],[["opaquenetworkstate"],["result",["opaquenetworkstate"]]]]],[5,"timestamp","","Returns current UNIX timestamp (in millis)",null,[[],["timestamp"]]],[5,"sleep_until","","Pause the execution until `deadline` is reached.",null,[[["timestamp"]]]],[5,"random_seed","","Returns a random seed.",null,[[]]],[5,"local_storage_set","","Sets a value in the local storage.",null,[[["storagekind"]]]],[5,"local_storage_compare_and_set","","Sets a value in the local storage if it matches current…",null,[[["storagekind"],["option",["vec"]],["vec",["u8"]]],["bool"]]],[5,"local_storage_get","","Gets a value from the local storage.",null,[[["storagekind"]],[["option",["vec"]],["vec",["u8"]]]]],[5,"http_request_start","","Initiates a http request given HTTP verb and the URL.",null,[[["str"]],[["httprequestid"],["result",["httprequestid"]]]]],[5,"http_request_add_header","","Append header to the request.",null,[[["httprequestid"],["str"]],["result"]]],[5,"http_request_write_body","","Write a chunk of request body.",null,[[["httprequestid"],["timestamp"],["option",["timestamp"]]],[["httperror"],["result",["httperror"]]]]],[5,"http_response_wait","","Block and wait for the responses for given requests.",null,[[["timestamp"],["option",["timestamp"]]],[["vec",["httprequeststatus"]],["httprequeststatus"]]]],[5,"http_response_headers","","Read all response headers.",null,[[["httprequestid"]],["vec"]]],[5,"http_response_read_body","","Read a chunk of body response to given buffer.",null,[[["httprequestid"],["timestamp"],["option",["timestamp"]]],[["result",["u32","httperror"]],["u32"],["httperror"]]]],[0,"logging","sp_io","Interface that provides functions for logging from within…",null,null],[3,"HostFunctions","sp_io::logging","Provides implementations for the extern host functions.",null,null],[5,"log","","Request to print a log message on the host.",null,[[["str"],["loglevel"]]]],[0,"sandbox","sp_io","Wasm-only interface that provides functions for…",null,null],[3,"HostFunctions","sp_io::sandbox","Provides implementations for the extern host functions.",null,null],[6,"TestExternalities","sp_io","Type alias for Externalities implementation used in tests.",null,null],[6,"SubstrateHostFunctions","","The host functions Substrate provides for the Wasm runtime…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["error"],["result",["error"]]]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","sp_io::storage","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","sp_io::trie","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","sp_io::misc","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","sp_io::crypto","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","sp_io::hashing","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","sp_io::offchain","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","sp_io::logging","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","sp_io::sandbox","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"vzip","","",8,[[],["v"]]],[11,"encode_to","sp_io","",0,[[["self"],["encout"]]]],[11,"decode","","",0,[[["decin"]],[["result",["error"]],["error"]]]],[11,"host_functions","sp_io::storage","",1,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::trie","",2,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::misc","",3,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::crypto","",4,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::hashing","",5,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::offchain","",6,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::logging","",7,[[],[["function"],["vec",["function"]]]]],[11,"host_functions","sp_io::sandbox","",8,[[],[["function"],["vec",["function"]]]]]],"p":[[4,"EcdsaVerifyError"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"],[3,"HostFunctions"]]};
searchIndex["sp_panic_handler"] = {"doc":"Custom panic hook with bug report link","i":[[3,"AbortGuard","sp_panic_handler","RAII guard for whether panics in the current thread should…",null,null],[5,"set","","Set the panic hook.",null,[[["str"],["str"]]]],[11,"force_unwind","","Create a new guard. While the guard is alive, panics that…",0,[[],["abortguard"]]],[11,"force_abort","","Create a new guard. While the guard is alive, panics that…",0,[[],["abortguard"]]],[11,"never_abort","","Create a new guard. While the guard is alive, panics that…",0,[[],["abortguard"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"drop","","",0,[[["self"]]]]],"p":[[3,"AbortGuard"]]};
searchIndex["sp_runtime"] = {"doc":"Runtime Modules shared primitive types.","i":[[3,"Storage","sp_runtime","Struct containing data needed for a storage.",null,null],[12,"top","","Top trie storage data.",0,null],[12,"children","","Children trie storage data by storage key.",0,null],[3,"StorageChild","","Child trie storage data.",null,null],[12,"data","","Child data for storage.",1,null],[12,"child_info","","Associated child info for a child trie.",1,null],[8,"TypeId","","Re-export this since it's part of the API of this crate.…",null,null],[18,"TYPE_ID","","Simple 4 byte identifier.",2,null],[0,"key_types","","Re-export this since it's part of the API of this crate.…",null,null],[17,"BABE","sp_runtime::key_types","Key type for Babe module, build-in.",null,null],[17,"GRANDPA","","Key type for Grandpa module, build-in.",null,null],[17,"ACCOUNT","","Key type for controlling an account in a Substrate…",null,null],[17,"AURA","","Key type for Aura module, built-in.",null,null],[17,"IM_ONLINE","","Key type for ImOnline module, built-in.",null,null],[17,"AUTHORITY_DISCOVERY","","Key type for AuthorityDiscovery module, built-in.",null,null],[17,"DUMMY","","A key type ID useful for tests.",null,null],[3,"KeyTypeId","sp_runtime","Re-export this since it's part of the API of this crate.…",null,null],[12,"0","","",3,null],[8,"CryptoType","","Re-export this since it's part of the API of this crate.…",null,null],[16,"Pair","","The pair key type of this crypto.",4,null],[3,"AccountId32","","Re-export this since it's part of the API of this crate.…",null,null],[8,"RuntimeAppPublic","","A runtime interface for an application's public key.",null,null],[18,"ID","","An identifier for this application-specific key type.",5,null],[16,"Signature","","The signature that will be generated when signing with the…",5,null],[10,"all","","Returns all public keys for this application in the…",5,[[],["vec"]]],[10,"generate_pair","","Generate a public/private pair with an optional `seed` and…",5,[[["option",["vec"]],["vec",["u8"]]],["self"]]],[10,"sign","","Sign the given message with the corresponding private key…",5,[[["self"],["m"]],["option"]]],[10,"verify","","Verify that the given signature matches the given message…",5,[[["self"],["m"]],["bool"]]],[8,"BoundToRuntimeAppPublic","","Something that bound to a fixed `RuntimeAppPublic`.",null,null],[16,"Public","","The `RuntimeAppPublic` this type is bound to.",6,null],[24,"RuntimeDebug","","Re-export `RuntimeDebug`, to avoid dependency clutter.",null,null],[3,"Perquintill","","Re-export top-level arithmetic stuff. A fixed point…",null,null],[3,"Perbill","","Re-export top-level arithmetic stuff. A fixed point…",null,null],[3,"Permill","","Re-export top-level arithmetic stuff. A fixed point…",null,null],[3,"Percent","","Re-export top-level arithmetic stuff. A fixed point…",null,null],[3,"Rational128","","Re-export top-level arithmetic stuff. A wrapper for any…",null,null],[3,"Fixed64","","Re-export top-level arithmetic stuff. An unsigned fixed…",null,null],[0,"helpers_128bit","","Re-export 128 bit helpers. Some helper functions to work…",null,null],[5,"gcd","sp_runtime::helpers_128bit","Helper gcd function used in Rational128 implementation.",null,[[["u128"]],["u128"]]],[5,"split","","split a u128 into two u64 limbs",null,[[["u128"]]]],[5,"to_big_uint","","Convert a u128 to a u32 based biguint.",null,[[["u128"]],["biguint"]]],[5,"multiply_by_rational","","Safely and accurately compute `a * b / c`. The approach…",null,[[["u128"]],[["result",["u128","str"]],["str"],["u128"]]]],[0,"biguint","sp_runtime","Re-export big_uint stuff. Infinite precision unsigned…",null,null],[6,"Single","sp_runtime::biguint","Representation of a single limb.",null,null],[6,"Double","","Representation of two limbs.",null,null],[5,"split","","Splits a [`Double`] limb number into a tuple of two…",null,[[["u64"]]]],[5,"mul_single","","Assumed as a given primitive.",null,[[["u32"]],["u64"]]],[5,"add_single","","Assumed as a given primitive.",null,[[["u32"]]]],[3,"BigUint","","Simple wrapper around an infinitely large integer,…",null,null],[8,"Serialize","sp_runtime","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",7,[[["s"],["self"]],["result"]]],[24,"Serialize","","",null,null],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",8,[[["d"]],["result"]]],[24,"Deserialize","","",null,null],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[3,"Digest","","Generic header digest.",null,null],[12,"logs","","A list of logs in the digest.",9,null],[3,"ModuleId","","A module identifier. These are per module and should be…",null,null],[12,"0","","",10,null],[3,"AnySignature","","Signature verify that can work with any known signature…",null,null],[3,"OpaqueExtrinsic","","Simple blob to hold an extrinsic without committing to its…",null,null],[12,"0","","",11,null],[4,"DigestItem","","Digest item that is able to encode/decode 'system' digest…",null,null],[13,"ChangesTrieRoot","","System digest item that contains the root of changes trie…",12,null],[13,"PreRuntime","","A pre-runtime digest.",12,null],[13,"Consensus","","A message from the runtime to the consensus engine. This…",12,null],[13,"Seal","","Put a Seal on it. This is only used by native code, and is…",12,null],[13,"Other","","Some other thing. Unsupported and experimental.",12,null],[4,"MultiSignature","","Signature verify that can work with any known signature…",null,null],[13,"Ed25519","","An Ed25519 signature.",13,null],[13,"Sr25519","","An Sr25519 signature.",13,null],[13,"Ecdsa","","An ECDSA/SECP256k1 signature.",13,null],[4,"MultiSigner","","Public key for any known crypto algorithm.",null,null],[13,"Ed25519","","An Ed25519 identity.",14,null],[13,"Sr25519","","An Sr25519 identity.",14,null],[13,"Ecdsa","","An SECP256k1/ECDSA identity (actually, the Blake2 hash of…",14,null],[4,"DispatchError","","Reason why a dispatch call failed",null,null],[13,"Other","","Some error occurred.",15,null],[13,"CannotLookup","","Failed to lookup some data.",15,null],[13,"BadOrigin","","A bad origin.",15,null],[13,"Module","","A custom error in a module",15,null],[12,"index","sp_runtime::DispatchError","Module index, matching the metadata module index",15,null],[12,"error","","Module specific error value",15,null],[12,"message","","Optional error message.",15,null],[5,"verify_encoded_lazy","sp_runtime","Verify a signature on an encoded value in a lazy manner.…",null,[[["v"],["t"]],["bool"]]],[5,"print","","Print something that implements `Printable` from the…",null,[[]]],[0,"curve","","Provides some utilities to define a piecewise linear…",null,null],[3,"PiecewiseLinear","sp_runtime::curve","Piecewise Linear function in [0, 1] -> [0, 1].",null,null],[12,"points","","Array of points. Must be in order from the lowest…",16,null],[12,"maximum","","The maximum value that can be returned.",16,null],[11,"calculate_for_fraction_times_denominator","","Compute `f(n/d)*d` with `n <= d`. This is useful to avoid…",16,[[["self"],["n"]],["n"]]],[0,"generic","sp_runtime","Generic implementations of Extrinsic/Header/Block.",null,null],[3,"UncheckedExtrinsic","sp_runtime::generic","A extrinsic right from the external world. This is…",null,null],[12,"signature","","The signature, address, number of extrinsics have come…",17,null],[12,"function","","The function that should be called.",17,null],[3,"SignedPayload","","A payload that has been signed for an unchecked extrinsics.",null,null],[3,"CheckedExtrinsic","","Definition of something that the external world might want…",null,null],[12,"signed","","Who this purports to be from and the number of extrinsics…",18,null],[12,"function","","The function that should be called.",18,null],[3,"Header","","Abstraction over a block header for a substrate chain.",null,null],[12,"parent_hash","","The parent hash.",19,null],[12,"number","","The block number.",19,null],[12,"state_root","","The state trie merkle root",19,null],[12,"extrinsics_root","","The merkle root of the extrinsics.",19,null],[12,"digest","","A chain-specific digest of data useful for light clients…",19,null],[3,"Block","","Abstraction over a substrate block.",null,null],[12,"header","","The block header.",20,null],[12,"extrinsics","","The accompanying extrinsics.",20,null],[3,"SignedBlock","","Abstraction over a substrate block and justification.",null,null],[12,"block","","Full block.",21,null],[12,"justification","","Block justification.",21,null],[3,"Digest","","Generic header digest.",null,null],[12,"logs","","A list of logs in the digest.",9,null],[4,"Era","","An era to describe the longevity of a transaction.",null,null],[13,"Immortal","","The transaction is valid forever. The genesis hash must be…",22,null],[13,"Mortal","","Period and phase are encoded: - The period of validity…",22,null],[4,"BlockId","","Something to identify a block.",null,null],[13,"Hash","","Identify by block header hash.",23,null],[13,"Number","","Identify by block number.",23,null],[4,"DigestItem","","Digest item that is able to encode/decode 'system' digest…",null,null],[13,"ChangesTrieRoot","","System digest item that contains the root of changes trie…",12,null],[13,"PreRuntime","","A pre-runtime digest.",12,null],[13,"Consensus","","A message from the runtime to the consensus engine. This…",12,null],[13,"Seal","","Put a Seal on it. This is only used by native code, and is…",12,null],[13,"Other","","Some other thing. Unsupported and experimental.",12,null],[4,"DigestItemRef","","A 'referencing view' for digest item. Does not own its…",null,null],[13,"ChangesTrieRoot","","Reference to `DigestItem::ChangesTrieRoot`.",24,null],[13,"PreRuntime","","A pre-runtime digest.",24,null],[13,"Consensus","","A message from the runtime to the consensus engine. This…",24,null],[13,"Seal","","Put a Seal on it. This is only used by native code, and is…",24,null],[13,"Other","","Any 'non-system' digest item, opaque to the native code.",24,null],[4,"OpaqueDigestItemId","","Type of a digest item that contains raw data; this also…",null,null],[13,"PreRuntime","","Type corresponding to DigestItem::PreRuntime.",25,null],[13,"Consensus","","Type corresponding to DigestItem::Consensus.",25,null],[13,"Seal","","Type corresponding to DigestItem::Seal.",25,null],[13,"Other","","Some other (non-prescribed) type.",25,null],[11,"new_signed","","New instance of a signed extrinsic aka \"transaction\".",17,[[["signature"],["extra"],["call"],["address"]],["self"]]],[11,"new_unsigned","","New instance of an unsigned extrinsic aka \"inherent\".",17,[[["call"]],["self"]]],[11,"new","","Create new `SignedPayload`.",26,[[["extra"],["call"]],[["result",["transactionvalidityerror"]],["transactionvalidityerror"]]]],[11,"from_raw","","Create new `SignedPayload` from raw components.",26,[[["extra"],["call"]],["self"]]],[11,"deconstruct","","Deconstruct the payload into it's components.",26,[[]]],[11,"mortal","","Create a new era based on a period (which should be a…",22,[[["u64"]],["self"]]],[11,"immortal","","Create an \"immortal\" transaction.",22,[[],["self"]]],[11,"is_immortal","","`true` if this is an immortal transaction.",22,[[["self"]],["bool"]]],[11,"birth","","Get the block number of the start of the era whose…",22,[[["u64"]],["u64"]]],[11,"death","","Get the block number of the first block at which the era…",22,[[["u64"]],["u64"]]],[11,"hash","","Convenience helper for computing the hash of the header…",19,[[["self"]]]],[11,"hash","","Create a block ID from a hash.",23,[[],["self"]]],[11,"number","","Create a block ID from a number.",23,[[],["self"]]],[11,"logs","sp_runtime","Get reference to all digest items.",9,[[["self"]]]],[11,"push","","Push new digest item.",9,[[["self"],["digestitem"]]]],[11,"pop","","Pop a digest item.",9,[[["self"]],[["digestitem"],["option",["digestitem"]]]]],[11,"log","","Get reference to the first digest item that matches the…",9,[[["fn"],["self"]],[["option"],["t"]]]],[11,"convert_first","","Get a conversion of the first digest item that…",9,[[["self"],["fn"]],["option"]]],[11,"dref","","Returns a 'referencing view' for this digest item.",12,[[["self"]],["digestitemref"]]],[11,"as_changes_trie_root","","Returns `Some` if the entry is the `ChangesTrieRoot` entry.",12,[[["self"]],[["hash"],["option"]]]],[11,"as_pre_runtime","","Returns `Some` if this entry is the `PreRuntime` entry.",12,[[["self"]],["option"]]],[11,"as_consensus","","Returns `Some` if this entry is the `Consensus` entry.",12,[[["self"]],["option"]]],[11,"as_seal","","Returns `Some` if this entry is the `Seal` entry.",12,[[["self"]],["option"]]],[11,"as_other","","Returns Some if `self` is a `DigestItem::Other`.",12,[[["self"]],["option"]]],[11,"try_as_raw","","Returns the opaque data contained in the item if `Some` if…",12,[[["self"],["opaquedigestitemid"]],["option"]]],[11,"try_to","","Returns the data contained in the item if `Some` if this…",12,[[["self"],["opaquedigestitemid"]],[["decode"],["option"]]]],[11,"as_changes_trie_root","sp_runtime::generic","Cast this digest item into `ChangesTrieRoot`.",24,[[["self"]],[["hash"],["option"]]]],[11,"as_pre_runtime","","Cast this digest item into `PreRuntime`",24,[[["self"]],["option"]]],[11,"as_consensus","","Cast this digest item into `Consensus`",24,[[["self"]],["option"]]],[11,"as_seal","","Cast this digest item into `Seal`",24,[[["self"]],["option"]]],[11,"as_other","","Cast this digest item into `PreRuntime`",24,[[["self"]],["option"]]],[11,"try_as_raw","","Try to match this digest item to the given opaque item…",24,[[["self"],["opaquedigestitemid"]],["option"]]],[11,"try_to","","Try to match this digest item to the given opaque item…",24,[[["self"],["opaquedigestitemid"]],[["decode"],["option"]]]],[6,"Phase","","Era phase",null,null],[0,"offchain","sp_runtime","A collection of higher lever helpers for offchain calls.",null,null],[0,"http","sp_runtime::offchain","A high-level helpers for making HTTP requests from…",null,null],[3,"Request","sp_runtime::offchain::http","An HTTP request builder.",null,null],[12,"method","","Request method",27,null],[12,"url","","Request URL",27,null],[12,"body","","Body of the request",27,null],[12,"deadline","","Deadline to finish sending the request",27,null],[3,"PendingRequest","","A struct representing an uncompleted http request.",null,null],[12,"id","","Request ID",28,null],[3,"Response","","A HTTP response.",null,null],[12,"id","","Request id",29,null],[12,"code","","Response status code",29,null],[3,"ResponseBody","","A buffered byte iterator over response body.",null,null],[3,"Headers","","A collection of Headers in the response.",null,null],[12,"raw","","Raw headers",30,null],[3,"HeadersIterator","","A custom iterator traversing all the headers.",null,null],[4,"Method","","Request method (HTTP verb)",null,null],[13,"Get","","GET request",31,null],[13,"Post","","POST request",31,null],[13,"Put","","PUT request",31,null],[13,"Patch","","PATCH request",31,null],[13,"Delete","","DELETE request",31,null],[13,"Other","","Custom verb",31,null],[4,"Error","","A request error",null,null],[13,"DeadlineReached","","Deadline has been reached.",32,null],[13,"IoError","","Request had timed out.",32,null],[13,"Unknown","","Unknown error has been ecountered.",32,null],[6,"HttpResult","","A result of waiting for a pending request.",null,null],[11,"get","","Start a simple GET request",27,[[["str"]],["self"]]],[11,"post","","Create new POST request with given body.",27,[[["str"],["t"]],["self"]]],[11,"new","","Create new Request builder with given URL and body.",27,[[["str"]],["self"]]],[11,"method","","Change the method of the request",27,[[["method"]],["self"]]],[11,"url","","Change the URL of the request.",27,[[["str"]],["self"]]],[11,"body","","Set the body of the request.",27,[[["t"]],["self"]]],[11,"add_header","","Add a header.",27,[[["str"]],["self"]]],[11,"deadline","","Set the deadline of the request.",27,[[["timestamp"]],["self"]]],[11,"send","","Send the request and return a handle.",27,[[],[["httperror"],["result",["pendingrequest","httperror"]],["pendingrequest"]]]],[11,"wait","","Wait for the request to complete.",28,[[],["httpresult"]]],[11,"try_wait","","Attempts to wait for the request to finish, but will…",28,[[],[["result",["httpresult","pendingrequest"]],["httpresult"],["pendingrequest"]]]],[11,"wait_all","","Wait for all provided requests.",28,[[["vec",["pendingrequest"]],["pendingrequest"]],[["vec",["httpresult"]],["httpresult"]]]],[11,"try_wait_all","","Attempt to wait for all provided requests, but up to given…",28,[[["vec",["pendingrequest"]],["pendingrequest"]],[["result",["httpresult","pendingrequest"]],["vec",["result"]]]]],[11,"headers","","Retrieve the headers for this response.",29,[[["self"]],["headers"]]],[11,"body","","Retrieve the body of this response.",29,[[["self"]],["responsebody"]]],[11,"deadline","","Set the deadline for reading the body.",33,[[["self"]]]],[11,"error","","Return an error that caused the iterator to return `None`.",33,[[["self"]],["option"]]],[11,"find","","Retrieve a single header from the list of headers.",30,[[["str"],["self"]],[["str"],["option",["str"]]]]],[11,"into_iter","","Convert this headers into an iterator.",30,[[["self"]],["headersiterator"]]],[11,"next","","Move the iterator to the next position.",34,[[["self"]],["bool"]]],[11,"current","","Returns current element (if any).",34,[[["self"]],["option"]]],[0,"testing","sp_runtime","Testing utilities.",null,null],[3,"H256","sp_runtime::testing","Fixed-size uninterpreted hash type with 32 bytes (256…",null,null],[12,"0","","",35,null],[0,"sr25519","","Simple sr25519 (Schnorr-Ristretto) API.",null,null],[3,"Public","sp_runtime::testing::sr25519","An Schnorrkel/Ristretto x25519 (\"sr25519\") public key.",null,null],[12,"0","","",36,null],[3,"Pair","","An Schnorrkel/Ristretto x25519 (\"sr25519\") key pair.",null,null],[3,"Signature","","An Schnorrkel/Ristretto x25519 (\"sr25519\") signature.",null,null],[12,"0","","",37,null],[3,"LocalizedSignature","","A localized signature also contains sender information.…",null,null],[12,"signer","","The signer of the signature.",38,null],[12,"signature","","The signature itself.",38,null],[3,"UintAuthorityId","sp_runtime::testing","Authority Id",null,null],[12,"0","","",39,null],[3,"Header","","Block Header",null,null],[12,"parent_hash","","Parent hash",40,null],[12,"number","","Block Number",40,null],[12,"state_root","","Post-execution state trie root",40,null],[12,"extrinsics_root","","Merkle root of block's extrinsics",40,null],[12,"digest","","Digest items",40,null],[3,"ExtrinsicWrapper","","An opaque extrinsic wrapper type.",null,null],[3,"Block","","Testing block",null,null],[12,"header","","Block header",41,null],[12,"extrinsics","","List of extrinsics",41,null],[3,"TestXt","","Test transaction, tuple of (sender, call, signed_extra)…",null,null],[12,"0","","",42,null],[12,"1","","",42,null],[6,"DigestItem","","Digest item",null,null],[6,"Digest","","Header Digest",null,null],[11,"to_public_key","","Convert this authority id into a public key.",39,[[["self"]],["public"]]],[11,"set_all_keys","","Set the list of keys returned by the runtime call for all…",39,[[]]],[11,"new_from_number","","A new header with the given number and default hash for…",40,[[],["self"]]],[0,"traits","sp_runtime","Primitives for the runtime modules.",null,null],[8,"SimpleArithmetic","sp_runtime::traits","A meta trait for arithmetic.",null,null],[8,"UniqueSaturatedInto","","Just like `Into` except that if the source value is too…",null,null],[10,"unique_saturated_into","","Consume self to return an equivalent value of `T`.",43,[[],["t"]]],[8,"UniqueSaturatedFrom","","Just like `From` except that if the source value is too…",null,null],[10,"unique_saturated_from","","Convert from a value of `T` into an equivalent instance of…",44,[[["t"]],["self"]]],[8,"Saturating","","Simple trait to use checked mul and max value to give a…",null,null],[10,"saturating_add","","Saturated addition - if the product can't fit in the type…",45,[[],["self"]]],[10,"saturating_sub","","Saturated subtraction - if the product can't fit in the…",45,[[],["self"]]],[10,"saturating_mul","","Saturated multiply - if the product can't fit in the type…",45,[[],["self"]]],[8,"SaturatedConversion","","Convenience type to work around the highly unergonomic…",null,null],[11,"saturated_from","","Convert from a value of `T` into an equivalent instance of…",46,[[["t"]],["self"]]],[11,"saturated_into","","Consume self to return an equivalent value of `T`.",46,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",47,[[],["self"]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",47,[[["self"]]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",47,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",48,[[],["self"]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",48,[[["self"]]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",48,[[["self"]],["bool"]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",49,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",49,[[],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",50,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",51,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",52,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",53,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",54,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",55,[[["u32"],["self"]],["option"]]],[8,"IntegerSquareRoot","","A trait implementing integer square root.",null,null],[11,"integer_sqrt","","Find the integer square root.",56,[[["self"]],["self"]]],[10,"integer_sqrt_checked","","Find the integer square root, returning `None` if the…",56,[[["self"]],["option"]]],[3,"BadOrigin","","An error type that indicates that the origin is invalid.",null,null],[3,"LookupError","","An error that indicates that a lookup failed.",null,null],[3,"IdentityLookup","","A lookup implementation returning the input value.",null,null],[3,"Identity","","A structure that performs identity conversion.",null,null],[3,"ConvertInto","","A structure that performs standard conversion using the…",null,null],[3,"BlakeTwo256","","Blake2-256 Hash implementation.",null,null],[3,"ApiRef","","Auxiliary wrapper that holds an api instance and binds it…",null,null],[3,"AppendZerosInput","","Input that adds infinite number of zero after wrapped input.",null,null],[3,"TrailingZeroInput","","Input that adds infinite number of zero after wrapped input.",null,null],[6,"HashFor","","Extract the hashing type for a block.",null,null],[6,"NumberFor","","Extract the number type for a block.",null,null],[6,"DigestFor","","Extract the digest type for a block.",null,null],[6,"DigestItemFor","","Extract the digest item type for a block.",null,null],[8,"Lazy","","A lazy value.",null,null],[10,"get","","Get a reference to the underlying value.",57,[[["self"]],["t"]]],[8,"IdentifyAccount","","Some type that is able to be collapsed into an account ID.…",null,null],[16,"AccountId","","The account ID that this can be transformed into.",58,null],[10,"into_account","","Transform into an account.",58,[[]]],[8,"Verify","","Means of signature verification.",null,null],[16,"Signer","","Type of the signer.",59,null],[10,"verify","","Verify a signature. Return `true` if signature is valid…",59,[[["lazy"],["self"]],["bool"]]],[8,"AppVerify","","Means of signature verification of an application key.",null,null],[16,"AccountId","","Type of the signer.",60,null],[10,"verify","","Verify a signature. Return `true` if signature is valid…",60,[[["lazy"],["self"]],["bool"]]],[8,"EnsureOrigin","","Some sort of check on the origin is performed by this…",null,null],[16,"Success","","A return type.",61,null],[11,"ensure_origin","","Perform the origin check.",61,[[["outerorigin"]],[["badorigin"],["result",["badorigin"]]]]],[10,"try_origin","","Perform the origin check.",61,[[["outerorigin"]],["result"]]],[8,"Lookup","","Means of changing one type into another in a manner…",null,null],[16,"Source","","Type to lookup from.",62,null],[16,"Target","","Type to lookup into.",62,null],[10,"lookup","","Attempt a lookup.",62,[[["self"]],[["result",["lookuperror"]],["lookuperror"]]]],[8,"StaticLookup","","Means of changing one type into another in a manner…",null,null],[16,"Source","","Type to lookup from.",63,null],[16,"Target","","Type to lookup into.",63,null],[10,"lookup","","Attempt a lookup.",63,[[],[["lookuperror"],["result",["lookuperror"]]]]],[10,"unlookup","","Convert from Target back to Source.",63,[[]]],[8,"Convert","","Extensible conversion trait. Generic over both source and…",null,null],[10,"convert","","Make conversion.",64,[[["a"]],["b"]]],[8,"CheckedConversion","","Convenience type to work around the highly unergonomic…",null,null],[11,"checked_from","","Convert from a value of `T` into an equivalent instance of…",65,[[["t"]],["option"]]],[11,"checked_into","","Consume self to return `Some` equivalent value of…",65,[[],["option"]]],[8,"Scale","","Multiply and divide by a number that isn't necessarily the…",null,null],[16,"Output","","The output type of the product of `self` and `Other`.",66,null],[10,"mul","","@return the product of `self` and `other`.",66,[[["other"]]]],[10,"div","","@return the integer division of `self` and `other`.",66,[[["other"]]]],[10,"rem","","@return the modulo remainder of `self` and `other`.",66,[[["other"]]]],[8,"Clear","","Trait for things that can be clear (have no bits set). For…",null,null],[10,"is_clear","","True iff no bits are set.",67,[[["self"]],["bool"]]],[10,"clear","","Return the value of Self that is clear.",67,[[],["self"]]],[8,"SimpleBitOps","","A meta trait for all bit ops.",null,null],[8,"OnFinalize","","The block finalization trait. Implementing this lets you…",null,null],[11,"on_finalize","","The block is being finalized. Implement to have something…",68,[[["blocknumber"]]]],[8,"OnInitialize","","The block initialization trait. Implementing this lets you…",null,null],[11,"on_initialize","","The block is being initialized. Implement to have…",69,[[["blocknumber"]]]],[8,"OffchainWorker","","Off-chain computation trait.",null,null],[11,"offchain_worker","","This function is being called after every block import…",70,[[["blocknumber"]]]],[8,"Hash","","Abstraction around hashing",null,null],[16,"Output","","The hash type produced.",71,null],[16,"Hasher","","The associated hash_db Hasher type.",71,null],[10,"hash","","Produce the hash of some byte-slice.",71,[[]]],[11,"hash_of","","Produce the hash of some codec-encodable value.",71,[[["s"]]]],[10,"ordered_trie_root","","The ordered Patricia tree root of the given `input`.",71,[[["vec",["u8"]],["vec",["vec"]]]]],[10,"trie_root","","The Patricia tree root of the given mapping.",71,[[["vec"]]]],[8,"CheckEqual","","Something that can be checked for equality and printed out…",null,null],[10,"check_equal","","Perform the equality check.",72,[[["self"]]]],[8,"MaybeDisplay","","A type that implements Display when in std environment.",null,null],[8,"MaybeHash","","A type that implements Hash when in std environment.",null,null],[8,"MaybeSerialize","","A type that implements Serialize when in std environment.",null,null],[8,"MaybeSerializeDeserialize","","A type that implements Serialize, DeserializeOwned and…",null,null],[8,"RandomnessBeacon","","A type that provides a randomness beacon.",null,null],[10,"random","","Returns 32 bytes of random data. The output will change…",73,[[]]],[8,"Member","","A type that can be used in runtime structures.",null,null],[8,"IsMember","","Determine if a `MemberId` is a valid member.",null,null],[10,"is_member","","Is the given `MemberId` a valid member?",74,[[["memberid"]],["bool"]]],[8,"Header","","Something which fulfills the abstract idea of a Substrate…",null,null],[16,"Number","","Header number.",75,null],[16,"Hash","","Header hash type",75,null],[16,"Hashing","","Hashing algorithm",75,null],[10,"new","","Creates new header.",75,[[["digest"]],["self"]]],[10,"number","","Returns a reference to the header number.",75,[[["self"]]]],[10,"set_number","","Sets the header number.",75,[[["self"]]]],[10,"extrinsics_root","","Returns a reference to the extrinsics root.",75,[[["self"]]]],[10,"set_extrinsics_root","","Sets the extrinsic root.",75,[[["self"]]]],[10,"state_root","","Returns a reference to the state root.",75,[[["self"]]]],[10,"set_state_root","","Sets the state root.",75,[[["self"]]]],[10,"parent_hash","","Returns a reference to the parent hash.",75,[[["self"]]]],[10,"set_parent_hash","","Sets the parent hash.",75,[[["self"]]]],[10,"digest","","Returns a reference to the digest.",75,[[["self"]],["digest"]]],[10,"digest_mut","","Get a mutable reference to the digest.",75,[[["self"]],["digest"]]],[11,"hash","","Returns the hash of the header.",75,[[["self"]]]],[8,"Block","","Something which fulfills the abstract idea of a Substrate…",null,null],[16,"Extrinsic","","Type for extrinsics.",76,null],[16,"Header","","Header type.",76,null],[16,"Hash","","Block hash type.",76,null],[10,"header","","Returns a reference to the header.",76,[[["self"]]]],[10,"extrinsics","","Returns a reference to the list of extrinsics.",76,[[["self"]]]],[10,"deconstruct","","Split the block into header and list of extrinsics.",76,[[]]],[10,"new","","Creates new block from header and extrinsics.",76,[[["vec"]],["self"]]],[11,"hash","","Returns the hash of the block.",76,[[["self"]]]],[10,"encode_from","","Creates an encoded block from the given `header` and…",76,[[],[["vec",["u8"]],["u8"]]]],[8,"Extrinsic","","Something that acts like an `Extrinsic`.",null,null],[16,"Call","","The function call.",77,null],[16,"SignaturePayload","","The payload we carry for signed extrinsics.",77,null],[11,"is_signed","","Is this `Extrinsic` signed? If no information are…",77,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"new","","Create new instance of the extrinsic.",77,[[["option"]],["option"]]],[8,"Checkable","","A \"checkable\" piece of information, used by the standard…",null,null],[16,"Checked","","Returned if `check` succeeds.",78,null],[10,"check","","Check self, given an instance of Context.",78,[[["context"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[8,"BlindCheckable","","A \"checkable\" piece of information, used by the standard…",null,null],[16,"Checked","","Returned if `check` succeeds.",79,null],[10,"check","","Check self.",79,[[],[["result",["transactionvalidityerror"]],["transactionvalidityerror"]]]],[8,"Dispatchable","","A lazy call (module function and argument values) that can…",null,null],[16,"Origin","","Every function call from your runtime has an origin, which…",80,null],[16,"Trait","","...",80,null],[10,"dispatch","","Actually dispatch this call and result the result of it.",80,[[],["dispatchresult"]]],[8,"SignedExtension","","Means by which a transaction may be extended. This type…",null,null],[16,"AccountId","","The type which encodes the sender identity.",81,null],[16,"Call","","The type which encodes the call to be dispatched.",81,null],[16,"AdditionalSigned","","Any additional data that will go into the signed payload.…",81,null],[16,"Pre","","The type that encodes information that can be passed from…",81,null],[16,"DispatchInfo","","An opaque set of information attached to the transaction.…",81,null],[10,"additional_signed","","Construct any additional data that should be in the signed…",81,[[["self"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"validate","","Validate a signed transaction for the transaction queue.",81,[[["usize"],["self"]],["transactionvalidity"]]],[11,"pre_dispatch","","Do any pre-flight stuff for a signed transaction.",81,[[["usize"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"validate_unsigned","","Validate an unsigned transaction for the transaction queue.",81,[[["usize"]],["transactionvalidity"]]],[11,"pre_dispatch_unsigned","","Do any pre-flight stuff for a unsigned transaction.",81,[[["usize"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"post_dispatch","","Do any post-flight stuff for a transaction.",81,[[["usize"]]]],[8,"Applyable","","An \"executable\" piece of information, used by the standard…",null,null],[16,"AccountId","","ID of the account that is responsible for this piece of…",82,null],[16,"Call","","Type by which we can dispatch. Restricts the…",82,null],[16,"DispatchInfo","","An opaque set of information attached to the transaction.",82,null],[10,"sender","","Returns a reference to the sender if any.",82,[[["self"]],["option"]]],[10,"validate","","Checks to see if this is a valid transaction. It returns…",82,[[["usize"],["self"]],["transactionvalidity"]]],[10,"apply","","Executes all necessary logic needed prior to dispatch and…",82,[[["usize"]],["applyextrinsicresult"]]],[8,"ProvideRuntimeApi","","Something that provides a runtime api.",null,null],[16,"Api","","The concrete type that provides the api.",83,null],[10,"runtime_api","","Returns the runtime api. The returned instance will keep…",83,[[["self"]],["apiref"]]],[8,"GetRuntimeBlockType","","A marker trait for something that knows the type of the…",null,null],[16,"RuntimeBlock","","The `RuntimeBlock` type.",84,null],[8,"GetNodeBlockType","","A marker trait for something that knows the type of the…",null,null],[16,"NodeBlock","","The `NodeBlock` type.",85,null],[8,"RuntimeApiInfo","","Something that provides information about a runtime api.",null,null],[18,"ID","","The identifier of the runtime api.",86,null],[18,"VERSION","","The version of the runtime api.",86,null],[8,"ValidateUnsigned","","Something that can validate unsigned extrinsics for the…",null,null],[16,"Call","","The call to validate",87,null],[11,"pre_dispatch","","Validate the call right before dispatch.",87,[[],[["result",["transactionvalidityerror"]],["transactionvalidityerror"]]]],[10,"validate_unsigned","","Return the validity of the call",87,[[],["transactionvalidity"]]],[8,"OpaqueKeys","","Opaque datatype that may be destructured into a series of…",null,null],[16,"KeyTypeIdProviders","","Types bound to this opaque keys that provide the key type…",88,null],[10,"key_ids","","Return the key-type IDs supported by this set.",88,[[]]],[10,"get_raw","","Get the raw bytes of key with key-type ID `i`.",88,[[["keytypeid"],["self"]]]],[11,"get","","Get the decoded key with index `i`.",88,[[["keytypeid"],["self"]],[["decode"],["option"]]]],[11,"ownership_proof_is_valid","","Verify a proof of ownership for the keys.",88,[[["self"]],["bool"]]],[8,"AccountIdConversion","","This type can be converted into and possibly from an…",null,null],[11,"into_account","","Convert into an account ID. This is infallible.",89,[[["self"]],["accountid"]]],[11,"try_from_account","","Try to convert an account ID into this type. Might not…",89,[[["accountid"]],["option"]]],[10,"into_sub_account","","Convert this value amalgamated with the a secondary \"sub\"…",89,[[["encode"],["self"]],["accountid"]]],[10,"try_from_sub_account","","Try to convert an account ID into this type. Might not…",89,[[["accountid"]],["option"]]],[8,"Printable","","Trait for things which can be printed from the runtime.",null,null],[10,"print","","Print the object.",90,[[["self"]]]],[8,"BlockIdTo","","Something that can convert a [`BlockId`] to a number or a…",null,null],[16,"Error","","The error type that will be returned by the functions.",91,null],[10,"to_hash","","Convert the given `block_id` to the corresponding block…",91,[[["blockid"],["self"]],[["result",["option"]],["option"]]]],[10,"to_number","","Convert the given `block_id` to the corresponding block…",91,[[["blockid"],["self"]],[["option",["numberfor"]],["result",["option"]]]]],[11,"new","","Create a new instance from the given byte array.",92,[[["t"]],["self"]]],[11,"new","","Create a new instance from the given byte array.",93,[[],["self"]]],[0,"transaction_validity","sp_runtime","Transaction validity interface.",null,null],[3,"ValidTransaction","sp_runtime::transaction_validity","Information concerning a valid transaction.",null,null],[12,"priority","","Priority of the transaction.",94,null],[12,"requires","","Transaction dependencies",94,null],[12,"provides","","Provided tags",94,null],[12,"longevity","","Transaction longevity",94,null],[12,"propagate","","A flag indicating if the transaction should be propagated…",94,null],[4,"InvalidTransaction","","An invalid transaction validity.",null,null],[13,"Call","","The call of the transaction is not expected.",95,null],[13,"Payment","","General error to do with the inability to pay some fees…",95,null],[13,"Future","","General error to do with the transaction not yet being…",95,null],[13,"Stale","","General error to do with the transaction being outdated…",95,null],[13,"BadProof","","General error to do with the transaction's proofs (e.g.…",95,null],[13,"AncientBirthBlock","","The transaction birth block is ancient.",95,null],[13,"ExhaustsResources","","The transaction would exhaust the resources of current…",95,null],[13,"Custom","","Any other custom invalid validity that is not covered by…",95,null],[4,"UnknownTransaction","","An unknown transaction validity.",null,null],[13,"CannotLookup","","Could not lookup some information that is required to…",96,null],[13,"NoUnsignedValidator","","No validator found for the given unsigned transaction.",96,null],[13,"Custom","","Any other custom unknown validity that is not covered by…",96,null],[4,"TransactionValidityError","","Errors that can occur while checking the validity of a…",null,null],[13,"Invalid","","The transaction is invalid.",97,null],[13,"Unknown","","Transaction validity can't be determined.",97,null],[6,"TransactionPriority","","Priority for a transaction. Additive. Higher is better.",null,null],[6,"TransactionLongevity","","Minimum number of blocks a transaction will remain valid…",null,null],[6,"TransactionTag","","Tag for a transaction. No two transactions with the same…",null,null],[6,"TransactionValidity","","Information on a transaction's validity and, if valid, on…",null,null],[11,"exhausted_resources","","Returns if the reason for the invalidity was block…",95,[[["self"]],["bool"]]],[11,"exhausted_resources","","Returns `true` if the reason for the error was block…",97,[[["self"]],["bool"]]],[11,"combine_with","","Combine two instances into one, as a best effort. This…",94,[[["validtransaction"]],["self"]]],[0,"random_number_generator","sp_runtime","A simple pseudo random number generator that allows a…",null,null],[3,"RandomNumberGenerator","sp_runtime::random_number_generator","Pseudo-random number streamer. This retains the state of…",null,null],[11,"new","","A new source of random data.",98,[[],["self"]]],[11,"pick_u32","","Returns a number at least zero, at most `max`.",98,[[["self"],["u32"]],["u32"]]],[11,"pick_usize","","Returns a number at least zero, at most `max`.",98,[[["self"],["usize"]],["usize"]]],[11,"pick_item","","Pick a random element from an array of `items`.",98,[[["self"]],[["option"],["t"]]]],[6,"Justification","sp_runtime","An abstraction over justification for a block's validity…",null,null],[6,"RuntimeString","","A String that is a `&'static str` on `no_std` and a…",null,null],[6,"ConsensusEngineId","","Consensus engine unique ID.",null,null],[6,"DispatchResult","","Result of a module function call; either nothing…",null,null],[6,"DispatchOutcome","","This type specifies the outcome of dispatching a call to a…",null,null],[6,"ApplyExtrinsicResult","","The result of applying of an extrinsic.",null,null],[8,"BuildStorage","","Complex storage builder stuff.",null,null],[11,"build_storage","","Build the storage out of this builder.",99,[[["self"]],[["result",["storage","string"]],["storage"],["string"]]]],[10,"assimilate_storage","","Assimilate the storage for this module into pre-existing…",99,[[["self"],["storage"]],[["result",["string"]],["string"]]]],[8,"BuildModuleGenesisStorage","","Something that can build the genesis storage of a module.",null,null],[10,"build_module_genesis_storage","","Create the module genesis storage into the given `storage`…",100,[[["self"],["storage"]],[["result",["string"]],["string"]]]],[11,"stripped","","Return the same error but without the attached message.",15,[[],["self"]]],[14,"count","","Calls a given macro a number of times with a set of fixed…",null,null],[14,"impl_opaque_keys","","Implement `OpaqueKeys` for a described struct.",null,null],[14,"create_runtime_str","","Create a const [`RuntimeString`].",null,null],[14,"__impl_outer_config_types","","Helper macro for `impl_outer_config`",null,null],[14,"impl_outer_config","","Implement the output \"meta\" module configuration struct,…",null,null],[14,"assert_eq_error_rate","","Checks that `$x` is equal to `$y` with an error rate of…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"vzip","","",0,[[],["v"]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"unique_saturated_into","","",0,[[],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"unique_saturated_into","","",1,[[],["t"]]],[11,"is_clear","","",3,[[["self"]],["bool"]]],[11,"clear","","",3,[[],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"size_hint","","",3,[[["self"]],["usize"]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",3,[[["w"],["self"]]]],[11,"decode","","",3,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",3,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"into_ffi_value","","",3,[[["functioncontext"]],[["string"],["result",["string"]]]]],[11,"from_ffi_value","","",3,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",3,[[["self"]]]],[11,"initialize","","",3,[[]]],[11,"unique_saturated_into","","",3,[[],["t"]]],[11,"is_clear","","",101,[[["self"]],["bool"]]],[11,"clear","","",101,[[],["t"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"to_string","","",101,[[["self"]],["string"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"size_hint","","",101,[[["self"]],["usize"]]],[11,"using_encoded","","",101,[[["self"],["f"]],["r"]]],[11,"encode","","",101,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",101,[[["w"],["self"]]]],[11,"decode","","",101,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",101,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",101,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",101,[[["outer"]],["t"]]],[11,"unchecked_from","","",101,[[["t"]],["outer"]]],[11,"unchecked_into","","",101,[[],["t"]]],[11,"from_string","","",101,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",101,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"vzip","","",101,[[],["v"]]],[11,"clear","","",101,[[["self"]]]],[11,"initialize","","",101,[[]]],[11,"encode_hex","","",101,[[["self"]],["u"]]],[11,"encode_hex_upper","","",101,[[["self"]],["u"]]],[11,"unique_saturated_into","","",101,[[],["t"]]],[11,"is_clear","","",102,[[["self"]],["bool"]]],[11,"clear","","",102,[[],["t"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"size_hint","","",102,[[["self"]],["usize"]]],[11,"using_encoded","","",102,[[["self"],["f"]],["r"]]],[11,"encode","","",102,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",102,[[["w"],["self"]]]],[11,"decode","","",102,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",102,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",102,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",102,[[["outer"]],["t"]]],[11,"unchecked_into","","",102,[[],["t"]]],[11,"vzip","","",102,[[],["v"]]],[11,"clear","","",102,[[["self"]]]],[11,"initialize","","",102,[[]]],[11,"unique_saturated_into","","",102,[[],["t"]]],[11,"saturating_add","","",102,[[["t"]],["t"]]],[11,"saturating_sub","","",102,[[["t"]],["t"]]],[11,"saturating_mul","","",102,[[["t"]],["t"]]],[11,"is_clear","","",103,[[["self"]],["bool"]]],[11,"clear","","",103,[[],["t"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"size_hint","","",103,[[["self"]],["usize"]]],[11,"using_encoded","","",103,[[["self"],["f"]],["r"]]],[11,"encode","","",103,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",103,[[["w"],["self"]]]],[11,"decode","","",103,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",103,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",103,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",103,[[["outer"]],["t"]]],[11,"unchecked_into","","",103,[[],["t"]]],[11,"vzip","","",103,[[],["v"]]],[11,"clear","","",103,[[["self"]]]],[11,"initialize","","",103,[[]]],[11,"unique_saturated_into","","",103,[[],["t"]]],[11,"saturating_add","","",103,[[["t"]],["t"]]],[11,"saturating_sub","","",103,[[["t"]],["t"]]],[11,"saturating_mul","","",103,[[["t"]],["t"]]],[11,"is_clear","","",104,[[["self"]],["bool"]]],[11,"clear","","",104,[[],["t"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"size_hint","","",104,[[["self"]],["usize"]]],[11,"using_encoded","","",104,[[["self"],["f"]],["r"]]],[11,"encode","","",104,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",104,[[["w"],["self"]]]],[11,"decode","","",104,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",104,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",104,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",104,[[["outer"]],["t"]]],[11,"unchecked_into","","",104,[[],["t"]]],[11,"vzip","","",104,[[],["v"]]],[11,"clear","","",104,[[["self"]]]],[11,"initialize","","",104,[[]]],[11,"unique_saturated_into","","",104,[[],["t"]]],[11,"saturating_add","","",104,[[["t"]],["t"]]],[11,"saturating_sub","","",104,[[["t"]],["t"]]],[11,"saturating_mul","","",104,[[["t"]],["t"]]],[11,"is_clear","","",105,[[["self"]],["bool"]]],[11,"clear","","",105,[[],["t"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"size_hint","","",105,[[["self"]],["usize"]]],[11,"using_encoded","","",105,[[["self"],["f"]],["r"]]],[11,"encode","","",105,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",105,[[["w"],["self"]]]],[11,"decode","","",105,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",105,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",105,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",105,[[["outer"]],["t"]]],[11,"unchecked_into","","",105,[[],["t"]]],[11,"vzip","","",105,[[],["v"]]],[11,"clear","","",105,[[["self"]]]],[11,"initialize","","",105,[[]]],[11,"unique_saturated_into","","",105,[[],["t"]]],[11,"saturating_add","","",105,[[["t"]],["t"]]],[11,"saturating_sub","","",105,[[["t"]],["t"]]],[11,"saturating_mul","","",105,[[["t"]],["t"]]],[11,"is_clear","","",106,[[["self"]],["bool"]]],[11,"clear","","",106,[[],["t"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",106,[[["outer"]],["t"]]],[11,"unchecked_into","","",106,[[],["t"]]],[11,"vzip","","",106,[[],["v"]]],[11,"clear","","",106,[[["self"]]]],[11,"initialize","","",106,[[]]],[11,"unique_saturated_into","","",106,[[],["t"]]],[11,"is_clear","","",107,[[["self"]],["bool"]]],[11,"clear","","",107,[[],["t"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"size_hint","","",107,[[["self"]],["usize"]]],[11,"using_encoded","","",107,[[["self"],["f"]],["r"]]],[11,"encode","","",107,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",107,[[["w"],["self"]]]],[11,"decode","","",107,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",107,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",107,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",107,[[["outer"]],["t"]]],[11,"unchecked_into","","",107,[[],["t"]]],[11,"vzip","","",107,[[],["v"]]],[11,"clear","","",107,[[["self"]]]],[11,"initialize","","",107,[[]]],[11,"unique_saturated_into","","",107,[[],["t"]]],[11,"saturating_add","","",107,[[["t"]],["t"]]],[11,"saturating_sub","","",107,[[["t"]],["t"]]],[11,"saturating_mul","","",107,[[["t"]],["t"]]],[11,"is_clear","sp_runtime::biguint","",108,[[["self"]],["bool"]]],[11,"clear","","",108,[[],["t"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",108,[[["outer"]],["t"]]],[11,"unchecked_into","","",108,[[],["t"]]],[11,"vzip","","",108,[[],["v"]]],[11,"clear","","",108,[[["self"]]]],[11,"initialize","","",108,[[]]],[11,"unique_saturated_into","","",108,[[],["t"]]],[11,"is_clear","sp_runtime","",9,[[["self"]],["bool"]]],[11,"clear","","",9,[[],["t"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"size_hint","","",9,[[["self"]],["usize"]]],[11,"using_encoded","","",9,[[["self"],["f"]],["r"]]],[11,"encode","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",9,[[["w"],["self"]]]],[11,"decode","","",9,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",9,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",9,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"unchecked_into","","",9,[[],["t"]]],[11,"vzip","","",9,[[],["v"]]],[11,"clear","","",9,[[["self"]]]],[11,"initialize","","",9,[[]]],[11,"unique_saturated_into","","",9,[[],["t"]]],[11,"into_sub_account","","",10,[[["s"],["self"]],["t"]]],[11,"try_from_sub_account","","",10,[[["t"]],["option"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"size_hint","","",10,[[["self"]],["usize"]]],[11,"using_encoded","","",10,[[["self"],["f"]],["r"]]],[11,"encode","","",10,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",10,[[["w"],["self"]]]],[11,"decode","","",10,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",10,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",10,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"unchecked_into","","",10,[[],["t"]]],[11,"vzip","","",10,[[],["v"]]],[11,"unique_saturated_into","","",10,[[],["t"]]],[11,"is_clear","","",109,[[["self"]],["bool"]]],[11,"clear","","",109,[[],["t"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"size_hint","","",109,[[["self"]],["usize"]]],[11,"using_encoded","","",109,[[["self"],["f"]],["r"]]],[11,"encode","","",109,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",109,[[["w"],["self"]]]],[11,"decode","","",109,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",109,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",109,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",109,[[["outer"]],["t"]]],[11,"unchecked_into","","",109,[[],["t"]]],[11,"vzip","","",109,[[],["v"]]],[11,"clear","","",109,[[["self"]]]],[11,"initialize","","",109,[[]]],[11,"unique_saturated_into","","",109,[[],["t"]]],[11,"is_clear","","",11,[[["self"]],["bool"]]],[11,"clear","","",11,[[],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"size_hint","","",11,[[["self"]],["usize"]]],[11,"using_encoded","","",11,[[["self"],["f"]],["r"]]],[11,"encode","","",11,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",11,[[["w"],["self"]]]],[11,"decode","","",11,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",11,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",11,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"unchecked_into","","",11,[[],["t"]]],[11,"vzip","","",11,[[],["v"]]],[11,"clear","","",11,[[["self"]]]],[11,"initialize","","",11,[[]]],[11,"unique_saturated_into","","",11,[[],["t"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"size_hint","","",12,[[["self"]],["usize"]]],[11,"using_encoded","","",12,[[["self"],["f"]],["r"]]],[11,"encode","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",12,[[["w"],["self"]]]],[11,"decode","","",12,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",12,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",12,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"unchecked_into","","",12,[[],["t"]]],[11,"vzip","","",12,[[],["v"]]],[11,"unique_saturated_into","","",12,[[],["t"]]],[11,"is_clear","","",13,[[["self"]],["bool"]]],[11,"clear","","",13,[[],["t"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"size_hint","","",13,[[["self"]],["usize"]]],[11,"using_encoded","","",13,[[["self"],["f"]],["r"]]],[11,"encode","","",13,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",13,[[["w"],["self"]]]],[11,"decode","","",13,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",13,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",13,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"vzip","","",13,[[],["v"]]],[11,"clear","","",13,[[["self"]]]],[11,"initialize","","",13,[[]]],[11,"unique_saturated_into","","",13,[[],["t"]]],[11,"is_clear","","",14,[[["self"]],["bool"]]],[11,"clear","","",14,[[],["t"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"size_hint","","",14,[[["self"]],["usize"]]],[11,"using_encoded","","",14,[[["self"],["f"]],["r"]]],[11,"encode","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",14,[[["w"],["self"]]]],[11,"decode","","",14,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",14,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",14,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"unchecked_from","","",14,[[["t"]],["outer"]]],[11,"unchecked_into","","",14,[[],["t"]]],[11,"vzip","","",14,[[],["v"]]],[11,"clear","","",14,[[["self"]]]],[11,"initialize","","",14,[[]]],[11,"encode_hex","","",14,[[["self"]],["u"]]],[11,"encode_hex_upper","","",14,[[["self"]],["u"]]],[11,"unique_saturated_into","","",14,[[],["t"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"size_hint","","",15,[[["self"]],["usize"]]],[11,"using_encoded","","",15,[[["self"],["f"]],["r"]]],[11,"encode","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",15,[[["w"],["self"]]]],[11,"decode","","",15,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",15,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",15,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"unchecked_into","","",15,[[],["t"]]],[11,"vzip","","",15,[[],["v"]]],[11,"unique_saturated_into","","",15,[[],["t"]]],[11,"from","sp_runtime::curve","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"vzip","","",16,[[],["v"]]],[11,"unique_saturated_into","","",16,[[],["t"]]],[11,"check","sp_runtime::generic","",17,[[["context"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"unchecked_into","","",17,[[],["t"]]],[11,"vzip","","",17,[[],["v"]]],[11,"unique_saturated_into","","",17,[[],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"size_hint","","",26,[[["self"]],["usize"]]],[11,"using_encoded","","",26,[[["self"],["f"]],["r"]]],[11,"encode","","",26,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",26,[[["w"],["self"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"unchecked_into","","",26,[[],["t"]]],[11,"vzip","","",26,[[],["v"]]],[11,"unique_saturated_into","","",26,[[],["t"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"unchecked_into","","",18,[[],["t"]]],[11,"vzip","","",18,[[],["v"]]],[11,"unique_saturated_into","","",18,[[],["t"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"size_hint","","",19,[[["self"]],["usize"]]],[11,"using_encoded","","",19,[[["self"],["f"]],["r"]]],[11,"encode","","",19,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",19,[[["w"],["self"]]]],[11,"decode","","",19,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",19,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",19,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"unchecked_into","","",19,[[],["t"]]],[11,"vzip","","",19,[[],["v"]]],[11,"unique_saturated_into","","",19,[[],["t"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"size_hint","","",20,[[["self"]],["usize"]]],[11,"using_encoded","","",20,[[["self"],["f"]],["r"]]],[11,"encode","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",20,[[["w"],["self"]]]],[11,"decode","","",20,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",20,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",20,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"unchecked_into","","",20,[[],["t"]]],[11,"vzip","","",20,[[],["v"]]],[11,"unique_saturated_into","","",20,[[],["t"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"size_hint","","",21,[[["self"]],["usize"]]],[11,"using_encoded","","",21,[[["self"],["f"]],["r"]]],[11,"encode","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",21,[[["w"],["self"]]]],[11,"decode","","",21,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",21,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",21,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",21,[[["outer"]],["t"]]],[11,"unchecked_into","","",21,[[],["t"]]],[11,"vzip","","",21,[[],["v"]]],[11,"unique_saturated_into","","",21,[[],["t"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"size_hint","","",22,[[["self"]],["usize"]]],[11,"using_encoded","","",22,[[["self"],["f"]],["r"]]],[11,"encode","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",22,[[["w"],["self"]]]],[11,"decode","","",22,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",22,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",22,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",22,[[["outer"]],["t"]]],[11,"unchecked_into","","",22,[[],["t"]]],[11,"vzip","","",22,[[],["v"]]],[11,"unique_saturated_into","","",22,[[],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",23,[[["outer"]],["t"]]],[11,"unchecked_into","","",23,[[],["t"]]],[11,"vzip","","",23,[[],["v"]]],[11,"unique_saturated_into","","",23,[[],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"size_hint","","",24,[[["self"]],["usize"]]],[11,"using_encoded","","",24,[[["self"],["f"]],["r"]]],[11,"encode","","",24,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",24,[[["w"],["self"]]]],[11,"from_ref","","Get a reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",24,[[["outer"]],["t"]]],[11,"unchecked_into","","",24,[[],["t"]]],[11,"vzip","","",24,[[],["v"]]],[11,"unique_saturated_into","","",24,[[],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"unchecked_into","","",25,[[],["t"]]],[11,"vzip","","",25,[[],["v"]]],[11,"unique_saturated_into","","",25,[[],["t"]]],[11,"is_clear","sp_runtime::offchain::http","",27,[[["self"]],["bool"]]],[11,"clear","","",27,[[],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",27,[[["outer"]],["t"]]],[11,"unchecked_into","","",27,[[],["t"]]],[11,"vzip","","",27,[[],["v"]]],[11,"clear","","",27,[[["self"]]]],[11,"initialize","","",27,[[]]],[11,"unique_saturated_into","","",27,[[],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",28,[[["outer"]],["t"]]],[11,"unchecked_into","","",28,[[],["t"]]],[11,"vzip","","",28,[[],["v"]]],[11,"unique_saturated_into","","",28,[[],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",29,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",29,[[["outer"]],["t"]]],[11,"unchecked_into","","",29,[[],["t"]]],[11,"vzip","","",29,[[],["v"]]],[11,"unique_saturated_into","","",29,[[],["t"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"into_iter","","",33,[[],["i"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",33,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",33,[[["outer"]],["t"]]],[11,"unchecked_into","","",33,[[],["t"]]],[11,"vzip","","",33,[[],["v"]]],[11,"unique_saturated_into","","",33,[[],["t"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",30,[[["outer"]],["t"]]],[11,"unchecked_into","","",30,[[],["t"]]],[11,"vzip","","",30,[[],["v"]]],[11,"unique_saturated_into","","",30,[[],["t"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",34,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",34,[[["outer"]],["t"]]],[11,"unchecked_into","","",34,[[],["t"]]],[11,"vzip","","",34,[[],["v"]]],[11,"unique_saturated_into","","",34,[[],["t"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",31,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",31,[[["outer"]],["t"]]],[11,"unchecked_into","","",31,[[],["t"]]],[11,"vzip","","",31,[[],["v"]]],[11,"unique_saturated_into","","",31,[[],["t"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",32,[[["outer"]],["t"]]],[11,"unchecked_into","","",32,[[],["t"]]],[11,"vzip","","",32,[[],["v"]]],[11,"unique_saturated_into","","",32,[[],["t"]]],[11,"is_clear","sp_runtime::testing","",35,[[["self"]],["bool"]]],[11,"clear","","",35,[[],["t"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"to_string","","",35,[[["self"]],["string"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"size_hint","","",35,[[["self"]],["usize"]]],[11,"using_encoded","","",35,[[["self"],["f"]],["r"]]],[11,"encode","","",35,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",35,[[["w"],["self"]]]],[11,"decode","","",35,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",35,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",35,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",35,[[["outer"]],["t"]]],[11,"unchecked_into","","",35,[[],["t"]]],[11,"vzip","","",35,[[],["v"]]],[11,"into_ffi_value","","",35,[[["functioncontext"]],[["string"],["result",["string"]]]]],[11,"from_ffi_value","","",35,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",35,[[["self"]]]],[11,"initialize","","",35,[[]]],[11,"encode_hex","","",35,[[["self"]],["u"]]],[11,"encode_hex_upper","","",35,[[["self"]],["u"]]],[11,"unique_saturated_into","","",35,[[],["t"]]],[11,"is_clear","sp_runtime::testing::sr25519","",36,[[["self"]],["bool"]]],[11,"clear","","",36,[[],["t"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"to_string","","",36,[[["self"]],["string"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"size_hint","","",36,[[["self"]],["usize"]]],[11,"using_encoded","","",36,[[["self"],["f"]],["r"]]],[11,"encode","","",36,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",36,[[["w"],["self"]]]],[11,"decode","","",36,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",36,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",36,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",36,[[["outer"]],["t"]]],[11,"unchecked_from","","",36,[[["t"]],["outer"]]],[11,"unchecked_into","","",36,[[],["t"]]],[11,"from_string","","",36,[[["str"]],[["result",["publicerror"]],["publicerror"]]]],[11,"from_string_with_version","","",36,[[["str"]],[["publicerror"],["result",["publicerror"]]]]],[11,"vzip","","",36,[[],["v"]]],[11,"into_ffi_value","","",36,[[["functioncontext"]],[["string"],["result",["string"]]]]],[11,"from_ffi_value","","",36,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",36,[[["self"]]]],[11,"initialize","","",36,[[]]],[11,"encode_hex","","",36,[[["self"]],["u"]]],[11,"encode_hex_upper","","",36,[[["self"]],["u"]]],[11,"unique_saturated_into","","",36,[[],["t"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",110,[[["outer"]],["t"]]],[11,"unchecked_into","","",110,[[],["t"]]],[11,"vzip","","",110,[[],["v"]]],[11,"unique_saturated_into","","",110,[[],["t"]]],[11,"is_clear","","",37,[[["self"]],["bool"]]],[11,"clear","","",37,[[],["t"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"size_hint","","",37,[[["self"]],["usize"]]],[11,"using_encoded","","",37,[[["self"],["f"]],["r"]]],[11,"encode","","",37,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",37,[[["w"],["self"]]]],[11,"decode","","",37,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",37,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",37,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",37,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",37,[[["outer"]],["t"]]],[11,"unchecked_into","","",37,[[],["t"]]],[11,"vzip","","",37,[[],["v"]]],[11,"into_ffi_value","","",37,[[["functioncontext"]],[["string"],["result",["string"]]]]],[11,"from_ffi_value","","",37,[[["functioncontext"]],[["result",["string"]],["string"]]]],[11,"clear","","",37,[[["self"]]]],[11,"initialize","","",37,[[]]],[11,"encode_hex","","",37,[[["self"]],["u"]]],[11,"encode_hex_upper","","",37,[[["self"]],["u"]]],[11,"unique_saturated_into","","",37,[[],["t"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",38,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",38,[[["outer"]],["t"]]],[11,"unchecked_into","","",38,[[],["t"]]],[11,"vzip","","",38,[[],["v"]]],[11,"unique_saturated_into","","",38,[[],["t"]]],[11,"is_clear","sp_runtime::testing","",39,[[["self"]],["bool"]]],[11,"clear","","",39,[[],["t"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"size_hint","","",39,[[["self"]],["usize"]]],[11,"using_encoded","","",39,[[["self"],["f"]],["r"]]],[11,"encode","","",39,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",39,[[["w"],["self"]]]],[11,"decode","","",39,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",39,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",39,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",39,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",39,[[["outer"]],["t"]]],[11,"unchecked_into","","",39,[[],["t"]]],[11,"vzip","","",39,[[],["v"]]],[11,"clear","","",39,[[["self"]]]],[11,"initialize","","",39,[[]]],[11,"encode_hex","","",39,[[["self"]],["u"]]],[11,"encode_hex_upper","","",39,[[["self"]],["u"]]],[11,"unique_saturated_into","","",39,[[],["t"]]],[11,"is_clear","","",40,[[["self"]],["bool"]]],[11,"clear","","",40,[[],["t"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"size_hint","","",40,[[["self"]],["usize"]]],[11,"using_encoded","","",40,[[["self"],["f"]],["r"]]],[11,"encode","","",40,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",40,[[["w"],["self"]]]],[11,"decode","","",40,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",40,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",40,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",40,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",40,[[["outer"]],["t"]]],[11,"unchecked_into","","",40,[[],["t"]]],[11,"vzip","","",40,[[],["v"]]],[11,"clear","","",40,[[["self"]]]],[11,"initialize","","",40,[[]]],[11,"unique_saturated_into","","",40,[[],["t"]]],[11,"from","","",111,[[],["t"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"size_hint","","",111,[[["self"]],["usize"]]],[11,"using_encoded","","",111,[[["self"],["f"]],["r"]]],[11,"encode","","",111,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",111,[[["w"],["self"]]]],[11,"decode","","",111,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",111,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",111,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",111,[[["outer"]],["t"]]],[11,"unchecked_into","","",111,[[],["t"]]],[11,"vzip","","",111,[[],["v"]]],[11,"unique_saturated_into","","",111,[[],["t"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"size_hint","","",41,[[["self"]],["usize"]]],[11,"using_encoded","","",41,[[["self"],["f"]],["r"]]],[11,"encode","","",41,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",41,[[["w"],["self"]]]],[11,"decode","","",41,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",41,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",41,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",41,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",41,[[["outer"]],["t"]]],[11,"unchecked_into","","",41,[[],["t"]]],[11,"vzip","","",41,[[],["v"]]],[11,"unique_saturated_into","","",41,[[],["t"]]],[11,"check","","",42,[[["context"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"size_hint","","",42,[[["self"]],["usize"]]],[11,"using_encoded","","",42,[[["self"],["f"]],["r"]]],[11,"encode","","",42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",42,[[["w"],["self"]]]],[11,"decode","","",42,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",42,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",42,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",42,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",42,[[["outer"]],["t"]]],[11,"unchecked_into","","",42,[[],["t"]]],[11,"vzip","","",42,[[],["v"]]],[11,"unique_saturated_into","","",42,[[],["t"]]],[11,"from","sp_runtime::traits","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"size_hint","","",112,[[["self"]],["usize"]]],[11,"using_encoded","","",112,[[["self"],["f"]],["r"]]],[11,"encode","","",112,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",112,[[["w"],["self"]]]],[11,"decode","","",112,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",112,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",112,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",112,[[["outer"]],["t"]]],[11,"unchecked_into","","",112,[[],["t"]]],[11,"vzip","","",112,[[],["v"]]],[11,"unique_saturated_into","","",112,[[],["t"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"size_hint","","",113,[[["self"]],["usize"]]],[11,"using_encoded","","",113,[[["self"],["f"]],["r"]]],[11,"encode","","",113,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",113,[[["w"],["self"]]]],[11,"decode","","",113,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",113,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",113,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",113,[[["outer"]],["t"]]],[11,"unchecked_into","","",113,[[],["t"]]],[11,"vzip","","",113,[[],["v"]]],[11,"unique_saturated_into","","",113,[[],["t"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",114,[[["outer"]],["t"]]],[11,"unchecked_into","","",114,[[],["t"]]],[11,"vzip","","",114,[[],["v"]]],[11,"clear","","",114,[[["self"]]]],[11,"initialize","","",114,[[]]],[11,"unique_saturated_into","","",114,[[],["t"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",115,[[["outer"]],["t"]]],[11,"unchecked_into","","",115,[[],["t"]]],[11,"vzip","","",115,[[],["v"]]],[11,"unique_saturated_into","","",115,[[],["t"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",116,[[["outer"]],["t"]]],[11,"unchecked_into","","",116,[[],["t"]]],[11,"vzip","","",116,[[],["v"]]],[11,"unique_saturated_into","","",116,[[],["t"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",117,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",117,[[["outer"]],["t"]]],[11,"unchecked_into","","",117,[[],["t"]]],[11,"vzip","","",117,[[],["v"]]],[11,"unique_saturated_into","","",117,[[],["t"]]],[11,"from","","",118,[[],["t"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",118,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",118,[[["outer"]],["t"]]],[11,"unchecked_into","","",118,[[],["t"]]],[11,"vzip","","",118,[[],["v"]]],[11,"unique_saturated_into","","",118,[[],["t"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",92,[[["outer"]],["t"]]],[11,"unchecked_into","","",92,[[],["t"]]],[11,"vzip","","",92,[[],["v"]]],[11,"unique_saturated_into","","",92,[[],["t"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from_ref","","Get a reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",93,[[["outer"]],["t"]]],[11,"unchecked_into","","",93,[[],["t"]]],[11,"vzip","","",93,[[],["v"]]],[11,"unique_saturated_into","","",93,[[],["t"]]],[11,"is_clear","sp_runtime::transaction_validity","",94,[[["self"]],["bool"]]],[11,"clear","","",94,[[],["t"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"size_hint","","",94,[[["self"]],["usize"]]],[11,"using_encoded","","",94,[[["self"],["f"]],["r"]]],[11,"encode","","",94,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",94,[[["w"],["self"]]]],[11,"decode","","",94,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",94,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",94,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",94,[[["outer"]],["t"]]],[11,"unchecked_into","","",94,[[],["t"]]],[11,"vzip","","",94,[[],["v"]]],[11,"clear","","",94,[[["self"]]]],[11,"initialize","","",94,[[]]],[11,"unique_saturated_into","","",94,[[],["t"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"size_hint","","",95,[[["self"]],["usize"]]],[11,"using_encoded","","",95,[[["self"],["f"]],["r"]]],[11,"encode","","",95,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",95,[[["w"],["self"]]]],[11,"decode","","",95,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",95,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",95,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",95,[[["outer"]],["t"]]],[11,"unchecked_into","","",95,[[],["t"]]],[11,"vzip","","",95,[[],["v"]]],[11,"unique_saturated_into","","",95,[[],["t"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"size_hint","","",96,[[["self"]],["usize"]]],[11,"using_encoded","","",96,[[["self"],["f"]],["r"]]],[11,"encode","","",96,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",96,[[["w"],["self"]]]],[11,"decode","","",96,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",96,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",96,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",96,[[["outer"]],["t"]]],[11,"unchecked_into","","",96,[[],["t"]]],[11,"vzip","","",96,[[],["v"]]],[11,"unique_saturated_into","","",96,[[],["t"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"size_hint","","",97,[[["self"]],["usize"]]],[11,"using_encoded","","",97,[[["self"],["f"]],["r"]]],[11,"encode","","",97,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",97,[[["w"],["self"]]]],[11,"decode","","",97,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",97,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",97,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",97,[[["outer"]],["t"]]],[11,"unchecked_into","","",97,[[],["t"]]],[11,"vzip","","",97,[[],["v"]]],[11,"unique_saturated_into","","",97,[[],["t"]]],[11,"from","sp_runtime::random_number_generator","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"size_hint","","",98,[[["self"]],["usize"]]],[11,"using_encoded","","",98,[[["self"],["f"]],["r"]]],[11,"encode","","",98,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",98,[[["w"],["self"]]]],[11,"decode","","",98,[[["i"]],[["error"],["result",["error"]]]]],[11,"to_keyed_vec","","",98,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",98,[[],[["error"],["result",["error"]]]]],[11,"from_ref","","Get a reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",98,[[["outer"]],["t"]]],[11,"unchecked_into","","",98,[[],["t"]]],[11,"vzip","","",98,[[],["v"]]],[11,"unique_saturated_into","","",98,[[],["t"]]],[11,"from","sp_runtime::testing::sr25519","",36,[[["public"]],["public"]]],[11,"from","","",110,[[["pair"]],["pair"]]],[11,"from","","",37,[[["signature"]],["signature"]]],[11,"all","","",36,[[["keytypeid"]],[["vec",["public"]],["public"]]]],[11,"generate_pair","","",36,[[["keytypeid"],["option",["vec"]],["vec",["u8"]]],["public"]]],[11,"sign","","",36,[[["keytypeid"],["self"],["m"]],["option"]]],[11,"verify","","",36,[[["self"],["m"]],["bool"]]],[11,"as_ref","sp_runtime","",101,[[["self"]]]],[11,"as_ref","sp_runtime::testing::sr25519","",36,[[["self"]]]],[11,"as_ref","","",37,[[["self"]]]],[11,"as_ref","","",36,[[["self"]]]],[11,"as_ref","","",37,[[["self"]]]],[11,"as_ref","sp_runtime","",101,[[["self"]]]],[11,"as_ref","sp_runtime::testing::sr25519","",110,[[["self"]],["keypair"]]],[11,"deref","","",36,[[["self"]]]],[11,"into_inner","sp_runtime","",3,[[]]],[11,"inner","","",3,[[["self"]]]],[11,"from_inner","","",3,[[],["keytypeid"]]],[11,"into_inner","sp_runtime::testing::sr25519","",36,[[]]],[11,"inner","","",36,[[["self"]]]],[11,"from_inner","","",36,[[],["public"]]],[11,"into_inner","","",37,[[]]],[11,"inner","","",37,[[["self"]]]],[11,"from_inner","","",37,[[],["signature"]]],[11,"fmt","","",38,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime::testing::sr25519","",37,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",36,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"deserialize","sp_runtime::testing::sr25519","",37,[[["d"]],[["signature"],["result",["signature"]]]]],[11,"deserialize","","",36,[[["d"]],[["public"],["result",["public"]]]]],[11,"deserialize","sp_runtime","",101,[[["d"]],[["accountid32"],["result",["accountid32"]]]]],[11,"eq","sp_runtime::testing::sr25519","",36,[[["self"],["public"]],["bool"]]],[11,"ne","","",36,[[["self"],["public"]],["bool"]]],[11,"eq","","",37,[[["self"],["signature"]],["bool"]]],[11,"eq","","",38,[[["self"],["localizedsignature"]],["bool"]]],[11,"ne","","",38,[[["self"],["localizedsignature"]],["bool"]]],[11,"eq","sp_runtime","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"ne","","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"eq","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"ne","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"serialize","","",101,[[["s"],["self"]],["result"]]],[11,"serialize","sp_runtime::testing::sr25519","",37,[[["s"],["self"]],["result"]]],[11,"serialize","","",36,[[["s"],["self"]],["result"]]],[11,"decode","","",36,[[["decin"]],[["result",["public","error"]],["public"],["error"]]]],[11,"decode","sp_runtime","",3,[[["decin"]],[["keytypeid"],["error"],["result",["keytypeid","error"]]]]],[11,"decode","sp_runtime::testing::sr25519","",37,[[["decin"]],[["result",["signature","error"]],["signature"],["error"]]]],[11,"decode","sp_runtime","",101,[[["decin"]],[["accountid32"],["error"],["result",["accountid32","error"]]]]],[11,"cmp","sp_runtime::testing::sr25519","",36,[[["self"],["public"]],["ordering"]]],[11,"cmp","sp_runtime","",3,[[["self"],["keytypeid"]],["ordering"]]],[11,"cmp","","",101,[[["accountid32"],["self"]],["ordering"]]],[11,"from_seed","sp_runtime::testing::sr25519","Make a new key pair from raw secret seed material.",110,[[],["pair"]]],[11,"public","","Get the public key.",110,[[["self"]],["public"]]],[11,"from_seed_slice","","Make a new key pair from secret seed material. The slice…",110,[[],[["pair"],["result",["pair","secretstringerror"]],["secretstringerror"]]]],[11,"generate_with_phrase","","",110,[[["str"],["option",["str"]]]]],[11,"from_phrase","","",110,[[["str"],["option",["str"]]],[["result",["secretstringerror"]],["secretstringerror"]]]],[11,"derive","","",110,[[["option"],["iter"],["self"]],["result"]]],[11,"sign","","",110,[[["self"]],["signature"]]],[11,"verify","","Verify a signature on a message. Returns true if the…",110,[[["m"]],["bool"]]],[11,"verify_weak","","Verify a signature on a message. Returns true if the…",110,[[["m"],["p"]],["bool"]]],[11,"to_raw_vec","","Return a vec filled with raw data.",110,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"fmt","","",36,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_mut","sp_runtime::testing::sr25519","",37,[[["self"]]]],[11,"as_mut","","",36,[[["self"]]]],[11,"as_mut","sp_runtime","",101,[[["self"]]]],[11,"as_mut","","",101,[[["self"]]]],[11,"from_slice","sp_runtime::testing::sr25519","A new instance from the given slice that should be 32…",36,[[],["public"]]],[11,"from","","",110,[[["minisecretkey"]],["pair"]]],[11,"from","","",110,[[["secretkey"]],["pair"]]],[11,"from","sp_runtime::testing","",35,[[["public"]],["h256"]]],[11,"from","sp_runtime","",3,[[["u32"]],["keytypeid"]]],[11,"from","sp_runtime::testing::sr25519","",37,[[["signature"]],["signature"]]],[11,"from","sp_runtime","",101,[[],["accountid32"]]],[11,"from","sp_runtime::testing::sr25519","",110,[[["keypair"]],["pair"]]],[11,"from","sp_runtime::testing","",35,[[["public"]],["h256"]]],[11,"clone","sp_runtime","",3,[[["self"]],["keytypeid"]]],[11,"clone","","",101,[[["self"]],["accountid32"]]],[11,"clone","sp_runtime::testing::sr25519","",36,[[["self"]],["public"]]],[11,"clone","","",38,[[["self"]],["localizedsignature"]]],[11,"clone","","",110,[[["self"]],["pair"]]],[11,"clone","","",37,[[["self"]],["signature"]]],[11,"from_str","","",36,[[["str"]],[["result",["public"]],["public"]]]],[11,"unchecked_from","","",36,[[],["public"]]],[11,"unchecked_from","","",36,[[["h256"]],["public"]]],[11,"unchecked_from","sp_runtime","",101,[[["h256"]],["accountid32"]]],[11,"derive","sp_runtime::testing::sr25519","Derive a child key from a series of given junctions.",36,[[["self"],["iter"]],[["option",["public"]],["public"]]]],[11,"encode_to","","",37,[[["self"],["encout"]]]],[11,"encode","","",37,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",37,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_runtime","",101,[[["self"],["encout"]]]],[11,"encode","","",101,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",101,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_runtime::testing::sr25519","",36,[[["self"],["encout"]]]],[11,"encode","","",36,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",36,[[["self"],["f"]],["r"]]],[11,"encode_to","sp_runtime","",3,[[["self"],["encout"]]]],[11,"encode","","",3,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",3,[[["self"],["f"]],["r"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","sp_runtime::testing::sr25519","",36,[[["self"],["__h"]]]],[11,"hash","","",37,[[["self"],["h"]]]],[11,"try_from","","",36,[[],[["public"],["result",["public"]]]]],[11,"try_from","sp_runtime","",101,[[],[["result",["accountid32"]],["accountid32"]]]],[11,"try_from","sp_runtime::testing::sr25519","",37,[[],[["result",["signature"]],["signature"]]]],[11,"try_from","sp_runtime","",3,[[["str"]],[["result",["keytypeid"]],["keytypeid"]]]],[11,"default","sp_runtime::testing::sr25519","",36,[[],["public"]]],[11,"default","sp_runtime","",3,[[],["keytypeid"]]],[11,"default","sp_runtime::testing::sr25519","",37,[[],["signature"]]],[11,"default","sp_runtime","",101,[[],["accountid32"]]],[11,"partial_cmp","sp_runtime::testing::sr25519","",36,[[["self"],["public"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",36,[[["self"],["public"]],["bool"]]],[11,"le","","",36,[[["self"],["public"]],["bool"]]],[11,"gt","","",36,[[["self"],["public"]],["bool"]]],[11,"ge","","",36,[[["self"],["public"]],["bool"]]],[11,"partial_cmp","sp_runtime","",101,[[["accountid32"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"le","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"gt","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"ge","","",101,[[["accountid32"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["keytypeid"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"le","","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"gt","","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"ge","","",3,[[["self"],["keytypeid"]],["bool"]]],[11,"inner","sp_runtime::testing","",35,[[["self"]]]],[11,"into_inner","","",35,[[]]],[11,"from_inner","","",35,[[],["h256"]]],[11,"fmt","sp_runtime","",0,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"default","","",0,[[],["storage"]]],[11,"clone","","",1,[[["self"]],["storagechild"]]],[11,"clone","","",0,[[["self"]],["storage"]]],[11,"eq","","",1,[[["storagechild"],["self"]],["bool"]]],[11,"ne","","",1,[[["storagechild"],["self"]],["bool"]]],[11,"as_ref","sp_runtime::testing","",35,[[["self"]]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitor","","",35,[[["h256"]]]],[11,"eq","","",35,[[["self"],["h256"]],["bool"]]],[11,"decode","","",35,[[["i"]],[["h256"],["error"],["result",["h256","error"]]]]],[11,"cmp","","",35,[[["self"],["h256"]],["ordering"]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_mut","","",35,[[["self"]]]],[11,"serialize","","",35,[[["s"],["self"]],["result"]]],[11,"from","","",35,[[["h160"]],["h256"]]],[11,"from","","Constructs a hash type from the given reference to the…",35,[[],["h256"]]],[11,"from","","Constructs a hash type from the given reference to the…",35,[[],["h256"]]],[11,"from","","Constructs a hash type from the given bytes array of fixed…",35,[[],["h256"]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitand","","",35,[[["h256"]]]],[11,"bitxor_assign","","",35,[[["self"],["h256"]]]],[11,"bitxor_assign","","",35,[[["h256"],["self"]]]],[11,"clone","","",35,[[["self"]],["h256"]]],[11,"from_str","","Creates a hash type instance from the given string.",35,[[["str"]],[["result",["h256","fromhexerror"]],["h256"],["fromhexerror"]]]],[11,"bitor_assign","","",35,[[["h256"],["self"]]]],[11,"bitor_assign","","",35,[[["self"],["h256"]]]],[11,"deserialize","","",35,[[["d"]],[["result",["h256"]],["h256"]]]],[11,"hash","","",35,[[["self"],["h"]]]],[11,"index_mut","","",35,[[["self"],["i"]]]],[11,"using_encoded","","",35,[[["self"],["f"]],["r"]]],[11,"index","","",35,[[["i"],["self"]]]],[11,"default","","",35,[[],["h256"]]],[11,"fmt","","",35,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitxor","","",35,[[["h256"]]]],[11,"partial_cmp","","",35,[[["self"],["h256"]],[["ordering"],["option",["ordering"]]]]],[11,"bitand_assign","","",35,[[["self"],["h256"]]]],[11,"bitand_assign","","",35,[[["h256"],["self"]]]],[11,"fmt","sp_runtime","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",105,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",107,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",106,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",102,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime::biguint","",108,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_runtime","",104,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"eq","","",105,[[["percent"],["self"]],["bool"]]],[11,"ne","","",105,[[["percent"],["self"]],["bool"]]],[11,"eq","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"ne","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"eq","","",103,[[["self"],["perbill"]],["bool"]]],[11,"ne","","",103,[[["self"],["perbill"]],["bool"]]],[11,"eq","","",106,[[["rational128"],["self"]],["bool"]]],[11,"eq","sp_runtime::biguint","",108,[[["self"],["biguint"]],["bool"]]],[11,"eq","sp_runtime","",104,[[["self"],["permill"]],["bool"]]],[11,"ne","","",104,[[["self"],["permill"]],["bool"]]],[11,"eq","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"ne","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"sub","sp_runtime::biguint","",108,[[["biguint"]]]],[11,"sub","sp_runtime","",107,[[["fixed64"]]]],[11,"mul","sp_runtime::biguint","",108,[[["biguint"]]]],[11,"mul","sp_runtime","",105,[[["n"]]]],[11,"mul","","",104,[[["n"]]]],[11,"mul","","",102,[[["n"]]]],[11,"mul","","",103,[[["n"]]]],[11,"decode","","",104,[[["decin"]],[["result",["permill","error"]],["permill"],["error"]]]],[11,"decode","","",103,[[["decin"]],[["perbill"],["error"],["result",["perbill","error"]]]]],[11,"decode","","",102,[[["decin"]],[["error"],["result",["perquintill","error"]],["perquintill"]]]],[11,"decode","","",105,[[["decin"]],[["result",["percent","error"]],["percent"],["error"]]]],[11,"decode","","",107,[[["decin"]],[["fixed64"],["error"],["result",["fixed64","error"]]]]],[11,"cmp","","",104,[[["self"],["permill"]],["ordering"]]],[11,"cmp","","",105,[[["percent"],["self"]],["ordering"]]],[11,"cmp","","",102,[[["perquintill"],["self"]],["ordering"]]],[11,"cmp","","",107,[[["self"],["fixed64"]],["ordering"]]],[11,"cmp","","",106,[[["rational128"],["self"]],["ordering"]]],[11,"cmp","sp_runtime::biguint","",108,[[["self"],["biguint"]],["ordering"]]],[11,"cmp","sp_runtime","",103,[[["self"],["perbill"]],["ordering"]]],[11,"serialize","","",104,[[["self"],["__s"]],["result"]]],[11,"serialize","","",105,[[["self"],["__s"]],["result"]]],[11,"serialize","","",103,[[["self"],["__s"]],["result"]]],[11,"serialize","","",102,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",102,[[["__d"]],[["result",["perquintill"]],["perquintill"]]]],[11,"deserialize","","",104,[[["__d"]],[["result",["permill"]],["permill"]]]],[11,"deserialize","","",103,[[["__d"]],[["perbill"],["result",["perbill"]]]]],[11,"deserialize","","",105,[[["__d"]],[["percent"],["result",["percent"]]]]],[11,"from","sp_runtime::biguint","",108,[[["u8"]],["biguint"]]],[11,"from","","",108,[[["u64"]],["biguint"]]],[11,"from","sp_runtime","",104,[[["compact",["permill"]],["permill"]],["permill"]]],[11,"from","","",105,[[["percent"],["compact",["percent"]]],["percent"]]],[11,"from","sp_runtime::biguint","",108,[[["u16"]],["biguint"]]],[11,"from","sp_runtime","",102,[[["perquintill"],["compact",["perquintill"]]],["perquintill"]]],[11,"from","sp_runtime::biguint","",108,[[["u32"]],["biguint"]]],[11,"from","sp_runtime","",103,[[["perbill"],["compact",["perbill"]]],["perbill"]]],[11,"add","sp_runtime::biguint","",108,[[["biguint"]]]],[11,"add","sp_runtime","",107,[[["fixed64"]]]],[11,"zero","sp_runtime::biguint","",108,[[],["biguint"]]],[11,"is_zero","","",108,[[["self"]],["bool"]]],[11,"checked_sub","sp_runtime","",107,[[["self"],["fixed64"]],[["fixed64"],["option",["fixed64"]]]]],[11,"clone","","",102,[[["self"]],["perquintill"]]],[11,"clone","","",106,[[["self"]],["rational128"]]],[11,"clone","","",107,[[["self"]],["fixed64"]]],[11,"clone","","",103,[[["self"]],["perbill"]]],[11,"clone","sp_runtime::biguint","",108,[[["self"]],["biguint"]]],[11,"clone","sp_runtime","",104,[[["self"]],["permill"]]],[11,"clone","","",105,[[["self"]],["percent"]]],[11,"saturating_add","","",105,[[["percent"]],["percent"]]],[11,"saturating_sub","","",105,[[["percent"]],["percent"]]],[11,"saturating_mul","","",105,[[["percent"]],["percent"]]],[11,"saturating_add","","",107,[[["fixed64"]],["fixed64"]]],[11,"saturating_mul","","",107,[[["fixed64"]],["fixed64"]]],[11,"saturating_sub","","",107,[[["fixed64"]],["fixed64"]]],[11,"saturating_add","","",103,[[["perbill"]],["perbill"]]],[11,"saturating_sub","","",103,[[["perbill"]],["perbill"]]],[11,"saturating_mul","","",103,[[["perbill"]],["perbill"]]],[11,"saturating_add","","",102,[[["perquintill"]],["perquintill"]]],[11,"saturating_sub","","",102,[[["perquintill"]],["perquintill"]]],[11,"saturating_mul","","",102,[[["perquintill"]],["perquintill"]]],[11,"saturating_add","","",104,[[["permill"]],["permill"]]],[11,"saturating_sub","","",104,[[["permill"]],["permill"]]],[11,"saturating_mul","","",104,[[["permill"]],["permill"]]],[11,"encode_to","","",103,[[["self"],["encout"]]]],[11,"encode","","",103,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",103,[[["self"],["f"]],["r"]]],[11,"encode_to","","",105,[[["self"],["encout"]]]],[11,"encode","","",105,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",105,[[["self"],["f"]],["r"]]],[11,"encode_to","","",107,[[["self"],["encout"]]]],[11,"encode","","",107,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",107,[[["self"],["f"]],["r"]]],[11,"encode_to","","",104,[[["self"],["encout"]]]],[11,"encode","","",104,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",104,[[["self"],["f"]],["r"]]],[11,"encode_to","","",102,[[["self"],["encout"]]]],[11,"encode","","",102,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"using_encoded","","",102,[[["self"],["f"]],["r"]]],[11,"default","","",105,[[],["percent"]]],[11,"default","sp_runtime::biguint","",108,[[],["biguint"]]],[11,"default","sp_runtime","",102,[[],["perquintill"]]],[11,"default","","",103,[[],["perbill"]]],[11,"default","","",107,[[],["fixed64"]]],[11,"default","","",106,[[],["rational128"]]],[11,"default","","",104,[[],["permill"]]],[11,"checked_add","","",107,[[["self"],["fixed64"]],[["fixed64"],["option",["fixed64"]]]]],[11,"encode_as","","",105,[[["self"]],["u8"]]],[11,"decode_from","","",105,[[["u8"]],["percent"]]],[11,"encode_as","","",102,[[["self"]],["u64"]]],[11,"decode_from","","",102,[[["u64"]],["perquintill"]]],[11,"encode_as","","",103,[[["self"]],["u32"]]],[11,"decode_from","","",103,[[["u32"]],["perbill"]]],[11,"encode_as","","",104,[[["self"]],["u32"]]],[11,"decode_from","","",104,[[["u32"]],["permill"]]],[11,"div","","",102,[[["perquintill"]]]],[11,"div","","",105,[[["percent"]]]],[11,"div","","",104,[[["permill"]]]],[11,"div","","",103,[[["perbill"]]]],[11,"div","","",107,[[["fixed64"]]]],[11,"checked_div","","",107,[[["self"],["fixed64"]],[["fixed64"],["option",["fixed64"]]]]],[11,"partial_cmp","","",106,[[["rational128"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",107,[[["self"],["fixed64"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"le","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"gt","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"ge","","",107,[[["self"],["fixed64"]],["bool"]]],[11,"partial_cmp","","",103,[[["self"],["perbill"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",103,[[["self"],["perbill"]],["bool"]]],[11,"le","","",103,[[["self"],["perbill"]],["bool"]]],[11,"gt","","",103,[[["self"],["perbill"]],["bool"]]],[11,"ge","","",103,[[["self"],["perbill"]],["bool"]]],[11,"partial_cmp","","",105,[[["percent"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",105,[[["percent"],["self"]],["bool"]]],[11,"le","","",105,[[["percent"],["self"]],["bool"]]],[11,"gt","","",105,[[["percent"],["self"]],["bool"]]],[11,"ge","","",105,[[["percent"],["self"]],["bool"]]],[11,"partial_cmp","","",102,[[["perquintill"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"le","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"gt","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"ge","","",102,[[["perquintill"],["self"]],["bool"]]],[11,"partial_cmp","sp_runtime::biguint","",108,[[["self"],["biguint"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_runtime","",104,[[["self"],["permill"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",104,[[["self"],["permill"]],["bool"]]],[11,"le","","",104,[[["self"],["permill"]],["bool"]]],[11,"gt","","",104,[[["self"],["permill"]],["bool"]]],[11,"ge","","",104,[[["self"],["permill"]],["bool"]]],[11,"into_account","sp_runtime::testing::sr25519","",36,[[],["self"]]],[11,"into_account","sp_runtime","",14,[[],["accountid32"]]],[11,"verify","sp_runtime::testing::sr25519","",37,[[["lazy"],["self"],["public"]],["bool"]]],[11,"verify","sp_runtime","",13,[[["lazy"],["accountid32"],["self"]],["bool"]]],[11,"verify","","",109,[[["lazy"],["public"],["self"]],["bool"]]],[11,"lookup","sp_runtime::traits","",114,[[["self"],["t"]],[["lookuperror"],["result",["lookuperror"]]]]],[11,"lookup","","",114,[[["t"]],[["lookuperror"],["result",["lookuperror"]]]]],[11,"unlookup","","",114,[[["t"]],["t"]]],[11,"convert","","",115,[[["t"]],["t"]]],[11,"convert","","",116,[[["a"]],["b"]]],[11,"hash","","",117,[[]]],[11,"trie_root","","",117,[[["vec"]]]],[11,"ordered_trie_root","","",117,[[["vec",["u8"]],["vec",["vec"]]]]],[11,"check_equal","sp_runtime::testing","",35,[[["self"]]]],[11,"check_equal","sp_runtime","",12,[[["self"]]]],[11,"number","sp_runtime::generic","",19,[[["self"]]]],[11,"set_number","","",19,[[["self"]]]],[11,"extrinsics_root","","",19,[[["self"]]]],[11,"set_extrinsics_root","","",19,[[["self"]]]],[11,"state_root","","",19,[[["self"]]]],[11,"set_state_root","","",19,[[["self"]]]],[11,"parent_hash","","",19,[[["self"]]]],[11,"set_parent_hash","","",19,[[["self"]]]],[11,"digest","","",19,[[["self"]],["digest"]]],[11,"digest_mut","","",19,[[["self"]],["digest"]]],[11,"new","","",19,[[["digest"]],["self"]]],[11,"number","sp_runtime::testing","",40,[[["self"]]]],[11,"set_number","","",40,[[["self"]]]],[11,"extrinsics_root","","",40,[[["self"]]]],[11,"set_extrinsics_root","","",40,[[["self"]]]],[11,"state_root","","",40,[[["self"]]]],[11,"set_state_root","","",40,[[["self"]]]],[11,"parent_hash","","",40,[[["self"]]]],[11,"set_parent_hash","","",40,[[["self"]]]],[11,"digest","","",40,[[["self"]],["digest"]]],[11,"digest_mut","","",40,[[["self"]],["digest"]]],[11,"new","","",40,[[["digest"]],["self"]]],[11,"header","sp_runtime::generic","",20,[[["self"]]]],[11,"extrinsics","","",20,[[["self"]]]],[11,"deconstruct","","",20,[[]]],[11,"new","","",20,[[["vec"]],["self"]]],[11,"encode_from","","",20,[[],[["vec",["u8"]],["u8"]]]],[11,"header","sp_runtime::testing","",41,[[["self"]]]],[11,"extrinsics","","",41,[[["self"]]]],[11,"deconstruct","","",41,[[]]],[11,"new","","",41,[[["vec"]],["self"]]],[11,"encode_from","","",41,[[],[["vec",["u8"]],["u8"]]]],[11,"is_signed","sp_runtime::generic","",17,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"new","","",17,[[["option"],["call"]],["option"]]],[11,"is_signed","sp_runtime::testing","",111,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"is_signed","","",42,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"new","","",42,[[["option"],["call"]],["option"]]],[11,"check","sp_runtime::generic","",17,[[["lookup"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"check","sp_runtime::testing","",42,[[["context"]],[["transactionvalidityerror"],["result",["transactionvalidityerror"]]]]],[11,"sender","sp_runtime::generic","",18,[[["self"]],["option"]]],[11,"validate","","",18,[[["usize"],["self"]],["transactionvalidity"]]],[11,"apply","","",18,[[["usize"]],["applyextrinsicresult"]]],[11,"sender","sp_runtime::testing","",42,[[["self"]],["option"]]],[11,"validate","","Checks to see if this is a valid transaction. It returns…",42,[[["usize"],["self"]],["transactionvalidity"]]],[11,"apply","","Executes all necessary logic needed prior to dispatch and…",42,[[["usize"]],["applyextrinsicresult"]]],[11,"key_ids","","",39,[[]]],[11,"get_raw","","",39,[[["self"],["keytypeid"]]]],[11,"get","","",39,[[["self"],["keytypeid"]],[["decode"],["option"]]]],[11,"print","sp_runtime","",15,[[["self"]]]],[11,"assimilate_storage","","",0,[[["self"],["storage"]],[["result",["string"]],["string"]]]],[11,"as_ref","sp_runtime::offchain::http","",31,[[["self"]],["str"]]],[11,"as_ref","sp_runtime::testing","",39,[[["self"]]]],[11,"as_ref","sp_runtime","",14,[[["self"]]]],[11,"from","sp_runtime::testing","",39,[[["u64"]],["self"]]],[11,"from","","",111,[[["xt"]],["self"]]],[11,"from","sp_runtime::transaction_validity","",97,[[["lookuperror"]],["self"]]],[11,"from","sp_runtime::traits","",118,[[["t"]],["self"]]],[11,"from","sp_runtime::transaction_validity","",97,[[["invalidtransaction"]],["self"]]],[11,"from","","",97,[[["unknowntransaction"]],["self"]]],[11,"from","sp_runtime","",13,[[["signature"]],["self"]]],[11,"from","","",13,[[["signature"]],["self"]]],[11,"from","","",13,[[["signature"]],["self"]]],[11,"from","","",14,[[["public"]],["self"]]],[11,"from","","",14,[[["public"]],["self"]]],[11,"from","","",14,[[["public"]],["self"]]],[11,"from","","",109,[[["signature"]],["self"]]],[11,"from","","",109,[[["signature"]],["self"]]],[11,"from","","",119,[[["dispatcherror"]],["self"]]],[11,"from","","",15,[[["lookuperror"]],["self"]]],[11,"from","","",15,[[["badorigin"]],["self"]]],[11,"from","","",15,[[["str"]],["dispatcherror"]]],[11,"into","sp_runtime::transaction_validity","",95,[[],["transactionvalidity"]]],[11,"into","","",96,[[],["transactionvalidity"]]],[11,"into","sp_runtime","",15,[[],["str"]]],[11,"next","sp_runtime::offchain::http","",33,[[["self"]],["option"]]],[11,"clone","sp_runtime::generic","",17,[[["self"]],["uncheckedextrinsic"]]],[11,"clone","","",22,[[["self"]],["era"]]],[11,"clone","","",18,[[["self"]],["checkedextrinsic"]]],[11,"clone","","",19,[[["self"]],["header"]]],[11,"clone","","",23,[[["self"]],["blockid"]]],[11,"clone","","",20,[[["self"]],["block"]]],[11,"clone","","",21,[[["self"]],["signedblock"]]],[11,"clone","sp_runtime","",9,[[["self"]],["digest"]]],[11,"clone","","",12,[[["self"]],["digestitem"]]],[11,"clone","sp_runtime::generic","",24,[[["self"]],["digestitemref"]]],[11,"clone","","",25,[[["self"]],["opaquedigestitemid"]]],[11,"clone","sp_runtime::offchain::http","",31,[[["self"]],["method"]]],[11,"clone","","",27,[[["self"]],["request"]]],[11,"clone","","",32,[[["self"]],["error"]]],[11,"clone","","",33,[[["self"]],["responsebody"]]],[11,"clone","","",30,[[["self"]],["headers"]]],[11,"clone","","",34,[[["self"]],["headersiterator"]]],[11,"clone","sp_runtime::testing","",39,[[["self"]],["uintauthorityid"]]],[11,"clone","","",40,[[["self"]],["header"]]],[11,"clone","","",111,[[["self"]],["extrinsicwrapper"]]],[11,"clone","","",41,[[["self"]],["block"]]],[11,"clone","","",42,[[["self"]],["testxt"]]],[11,"clone","sp_runtime::traits","",117,[[["self"]],["blaketwo256"]]],[11,"clone","sp_runtime::transaction_validity","",95,[[["self"]],["invalidtransaction"]]],[11,"clone","","",96,[[["self"]],["unknowntransaction"]]],[11,"clone","","",97,[[["self"]],["transactionvalidityerror"]]],[11,"clone","","",94,[[["self"]],["validtransaction"]]],[11,"clone","sp_runtime","",10,[[["self"]],["moduleid"]]],[11,"clone","","",13,[[["self"]],["multisignature"]]],[11,"clone","","",14,[[["self"]],["multisigner"]]],[11,"clone","","",109,[[["self"]],["anysignature"]]],[11,"clone","","",15,[[["self"]],["dispatcherror"]]],[11,"clone","","",11,[[["self"]],["opaqueextrinsic"]]],[11,"default","","",9,[[],["self"]]],[11,"default","sp_runtime::offchain::http","",27,[[],["self"]]],[11,"default","sp_runtime::testing","",39,[[],["uintauthorityid"]]],[11,"default","","",40,[[],["header"]]],[11,"default","sp_runtime::traits","",114,[[],["identitylookup"]]],[11,"default","sp_runtime::transaction_validity","",94,[[],["self"]]],[11,"default","sp_runtime","",13,[[],["self"]]],[11,"default","","",14,[[],["self"]]],[11,"default","","",109,[[],["anysignature"]]],[11,"default","","",11,[[],["opaqueextrinsic"]]],[11,"cmp","sp_runtime::generic","",25,[[["self"],["opaquedigestitemid"]],["ordering"]]],[11,"cmp","sp_runtime::testing","",39,[[["uintauthorityid"],["self"]],["ordering"]]],[11,"cmp","sp_runtime","",14,[[["multisigner"],["self"]],["ordering"]]],[11,"eq","sp_runtime::curve","",16,[[["piecewiselinear"],["self"]],["bool"]]],[11,"ne","","",16,[[["piecewiselinear"],["self"]],["bool"]]],[11,"eq","sp_runtime::generic","",17,[[["uncheckedextrinsic"],["self"]],["bool"]]],[11,"ne","","",17,[[["uncheckedextrinsic"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["era"]],["bool"]]],[11,"ne","","",22,[[["self"],["era"]],["bool"]]],[11,"eq","","",18,[[["checkedextrinsic"],["self"]],["bool"]]],[11,"ne","","",18,[[["checkedextrinsic"],["self"]],["bool"]]],[11,"eq","","",19,[[["header"],["self"]],["bool"]]],[11,"ne","","",19,[[["header"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["blockid"]],["bool"]]],[11,"ne","","",23,[[["self"],["blockid"]],["bool"]]],[11,"eq","","",20,[[["block"],["self"]],["bool"]]],[11,"ne","","",20,[[["block"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["signedblock"]],["bool"]]],[11,"ne","","",21,[[["self"],["signedblock"]],["bool"]]],[11,"eq","sp_runtime","",9,[[["self"],["digest"]],["bool"]]],[11,"ne","","",9,[[["self"],["digest"]],["bool"]]],[11,"eq","","",12,[[["digestitem"],["self"]],["bool"]]],[11,"ne","","",12,[[["digestitem"],["self"]],["bool"]]],[11,"eq","sp_runtime::generic","",24,[[["digestitemref"],["self"]],["bool"]]],[11,"ne","","",24,[[["digestitemref"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"ne","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"eq","sp_runtime::offchain::http","",31,[[["method"],["self"]],["bool"]]],[11,"ne","","",31,[[["method"],["self"]],["bool"]]],[11,"eq","","",27,[[["self"],["request"]],["bool"]]],[11,"ne","","",27,[[["self"],["request"]],["bool"]]],[11,"eq","","",32,[[["self"],["error"]],["bool"]]],[11,"eq","","",28,[[["self"],["pendingrequest"]],["bool"]]],[11,"ne","","",28,[[["self"],["pendingrequest"]],["bool"]]],[11,"eq","","",30,[[["self"],["headers"]],["bool"]]],[11,"ne","","",30,[[["self"],["headers"]],["bool"]]],[11,"eq","sp_runtime::testing","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"ne","","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"eq","","",40,[[["self"],["header"]],["bool"]]],[11,"ne","","",40,[[["self"],["header"]],["bool"]]],[11,"eq","","",111,[[["self"],["extrinsicwrapper"]],["bool"]]],[11,"ne","","",111,[[["self"],["extrinsicwrapper"]],["bool"]]],[11,"eq","","",41,[[["block"],["self"]],["bool"]]],[11,"ne","","",41,[[["block"],["self"]],["bool"]]],[11,"eq","","",42,[[["testxt"],["self"]],["bool"]]],[11,"ne","","",42,[[["testxt"],["self"]],["bool"]]],[11,"eq","sp_runtime::traits","",117,[[["blaketwo256"],["self"]],["bool"]]],[11,"eq","sp_runtime::transaction_validity","",95,[[["invalidtransaction"],["self"]],["bool"]]],[11,"ne","","",95,[[["invalidtransaction"],["self"]],["bool"]]],[11,"eq","","",96,[[["self"],["unknowntransaction"]],["bool"]]],[11,"ne","","",96,[[["self"],["unknowntransaction"]],["bool"]]],[11,"eq","","",97,[[["transactionvalidityerror"],["self"]],["bool"]]],[11,"ne","","",97,[[["transactionvalidityerror"],["self"]],["bool"]]],[11,"eq","","",94,[[["self"],["validtransaction"]],["bool"]]],[11,"ne","","",94,[[["self"],["validtransaction"]],["bool"]]],[11,"eq","sp_runtime","",10,[[["self"],["moduleid"]],["bool"]]],[11,"ne","","",10,[[["self"],["moduleid"]],["bool"]]],[11,"eq","","",13,[[["self"],["multisignature"]],["bool"]]],[11,"ne","","",13,[[["self"],["multisignature"]],["bool"]]],[11,"eq","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"ne","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"eq","","",109,[[["self"],["anysignature"]],["bool"]]],[11,"ne","","",109,[[["self"],["anysignature"]],["bool"]]],[11,"eq","","",15,[[["self"],["dispatcherror"]],["bool"]]],[11,"ne","","",15,[[["self"],["dispatcherror"]],["bool"]]],[11,"eq","","",11,[[["opaqueextrinsic"],["self"]],["bool"]]],[11,"ne","","",11,[[["opaqueextrinsic"],["self"]],["bool"]]],[11,"partial_cmp","sp_runtime::generic","",25,[[["self"],["opaquedigestitemid"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"le","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"gt","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"ge","","",25,[[["self"],["opaquedigestitemid"]],["bool"]]],[11,"partial_cmp","sp_runtime::testing","",39,[[["uintauthorityid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"le","","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"gt","","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"ge","","",39,[[["uintauthorityid"],["self"]],["bool"]]],[11,"partial_cmp","sp_runtime","",14,[[["multisigner"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"le","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"gt","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"ge","","",14,[[["multisigner"],["self"]],["bool"]]],[11,"deref","sp_runtime::testing","",111,[[["self"]]]],[11,"deref","sp_runtime::traits","",118,[[["self"]]]],[11,"deref_mut","","",118,[[["self"]],["t"]]],[11,"fmt","sp_runtime::curve","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::generic","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::generic","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::offchain::http","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::testing","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::traits","",117,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::transaction_validity","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime::generic","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_runtime","",14,[[["formatter"],["self"]],["result"]]],[11,"hash","sp_runtime::testing","",39,[[["self"],["__h"]]]],[11,"try_from","sp_runtime::testing::sr25519","",36,[[["multisigner"]],["result"]]],[11,"remaining_len","sp_runtime::traits","",92,[[["self"]],[["result",["option","error"]],["option",["usize"]],["error"]]]],[11,"read","","",92,[[["self"]],[["result",["error"]],["error"]]]],[11,"remaining_len","","",93,[[["self"]],[["result",["option","error"]],["option",["usize"]],["error"]]]],[11,"read","","",93,[[["self"]],[["result",["error"]],["error"]]]],[11,"using_encoded","sp_runtime::generic","Get an encoded version of this payload.",26,[[["fnonce"],["self"]],["r"]]],[11,"encode","","",17,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"encode_to","","",22,[[["self"],["t"]]]],[11,"encode_to","","",19,[[["self"],["t"]]]],[11,"encode_to","","",20,[[["self"],["encout"]]]],[11,"encode_to","","",21,[[["self"],["encout"]]]],[11,"encode_to","sp_runtime","",9,[[["self"],["encout"]]]],[11,"encode","","",9,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",9,[[["fnonce"],["self"]],["r"]]],[11,"encode","","",12,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"encode","sp_runtime::generic","",24,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"encode_to","sp_runtime::testing","",39,[[["self"],["encout"]]]],[11,"encode","","",39,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",39,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",40,[[["self"],["encout"]]]],[11,"encode_to","","",111,[[["self"],["encout"]]]],[11,"encode","","",111,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",111,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",41,[[["self"],["encout"]]]],[11,"encode_to","","",42,[[["self"],["encout"]]]],[11,"encode_to","sp_runtime::traits","",112,[[["self"],["encout"]]]],[11,"encode_to","","",113,[[["self"],["encout"]]]],[11,"encode_to","sp_runtime::transaction_validity","",95,[[["self"],["encout"]]]],[11,"encode_to","","",96,[[["self"],["encout"]]]],[11,"encode_to","","",97,[[["self"],["encout"]]]],[11,"encode_to","","",94,[[["self"],["encout"]]]],[11,"encode_to","sp_runtime::random_number_generator","",98,[[["self"],["encout"]]]],[11,"encode_to","sp_runtime","",10,[[["self"],["encout"]]]],[11,"encode","","",10,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",10,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",13,[[["self"],["encout"]]]],[11,"encode_to","","",14,[[["self"],["encout"]]]],[11,"encode_to","","",109,[[["self"],["encout"]]]],[11,"encode","","",109,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",109,[[["fnonce"],["self"]],["r"]]],[11,"encode_to","","",15,[[["self"],["encout"]]]],[11,"encode_to","","",11,[[["self"],["encout"]]]],[11,"encode","","",11,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",11,[[["fnonce"],["self"]],["r"]]],[11,"decode","sp_runtime::generic","",17,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",22,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",19,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","","",20,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",21,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_runtime","",9,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",12,[[["i"]],[["error"],["result",["error"]]]]],[11,"decode","sp_runtime::testing","",39,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",40,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",111,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",41,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",42,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_runtime::traits","",112,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",113,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_runtime::transaction_validity","",95,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",96,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",97,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",94,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_runtime::random_number_generator","",98,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","sp_runtime","",10,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",13,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",14,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",109,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",15,[[["decin"]],[["result",["error"]],["error"]]]],[11,"decode","","",11,[[["decin"]],[["result",["error"]],["error"]]]],[11,"serialize","sp_runtime::generic","",17,[[["s"],["self"]],["result"]]],[11,"serialize","","",22,[[["self"],["__s"]],["result"]]],[11,"serialize","","",19,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"serialize","","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","sp_runtime","",9,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["s"],["self"]],["result"]]],[11,"serialize","sp_runtime::testing","",39,[[["self"],["__s"]],["result"]]],[11,"serialize","","",40,[[["self"],["__s"]],["result"]]],[11,"serialize","","",111,[[["s"],["self"]],["result"]]],[11,"serialize","","",41,[[["self"],["__s"]],["result"]]],[11,"serialize","","",42,[[["s"],["self"]],["result"]]],[11,"serialize","sp_runtime::traits","",117,[[["self"],["__s"]],["result"]]],[11,"serialize","sp_runtime::transaction_validity","",95,[[["self"],["__s"]],["result"]]],[11,"serialize","","",96,[[["self"],["__s"]],["result"]]],[11,"serialize","","",97,[[["self"],["__s"]],["result"]]],[11,"serialize","sp_runtime","",13,[[["self"],["__s"]],["result"]]],[11,"serialize","","",14,[[["self"],["__s"]],["result"]]],[11,"serialize","","",109,[[["self"],["__s"]],["result"]]],[11,"serialize","","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["s"],["self"]],["result"]]],[11,"deserialize","sp_runtime::generic","",22,[[["__d"]],["result"]]],[11,"deserialize","","",19,[[["__d"]],["result"]]],[11,"deserialize","","",20,[[["__d"]],["result"]]],[11,"deserialize","","",21,[[["__d"]],["result"]]],[11,"deserialize","sp_runtime","",9,[[["__d"]],["result"]]],[11,"deserialize","","",12,[[["d"]],["result"]]],[11,"deserialize","sp_runtime::testing","",39,[[["__d"]],["result"]]],[11,"deserialize","","",40,[[["deserializer"]],["result"]]],[11,"deserialize","","",41,[[["deserializer"]],["result"]]],[11,"deserialize","sp_runtime::traits","",117,[[["__d"]],["result"]]],[11,"deserialize","sp_runtime","",13,[[["__d"]],["result"]]],[11,"deserialize","","",14,[[["__d"]],["result"]]],[11,"deserialize","","",109,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["d"]],["result"]]],[11,"all","sp_runtime::testing","",39,[[],["vec"]]],[11,"generate_pair","","",39,[[["option",["vec"]],["vec",["u8"]]],["self"]]],[11,"sign","","",39,[[["self"],["m"]],["option"]]],[11,"verify","","",39,[[["self"],["m"]],["bool"]]],[11,"unchecked_from","sp_runtime","",14,[[["t"]],["self"]]],[11,"zero","","Nothing.",102,[[],["perquintill"]]],[11,"is_zero","","`true` if this is nothing.",102,[[["self"]],["bool"]]],[11,"one","","Everything.",102,[[],["perquintill"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",102,[[],["u64"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",102,[[],["u64"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",102,[[["u64"]],["perquintill"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",102,[[["u64"]],["perquintill"]]],[11,"square","","Return the product of multiplication of this value by…",102,[[],["perquintill"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",102,[[["f64"]],["perquintill"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",102,[[["n"]],["perquintill"]]],[11,"zero","","Nothing.",103,[[],["perbill"]]],[11,"is_zero","","`true` if this is nothing.",103,[[["self"]],["bool"]]],[11,"one","","Everything.",103,[[],["perbill"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",103,[[],["u32"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",103,[[],["u32"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",103,[[["u32"]],["perbill"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",103,[[["u32"]],["perbill"]]],[11,"square","","Return the product of multiplication of this value by…",103,[[],["perbill"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",103,[[["f64"]],["perbill"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",103,[[["n"]],["perbill"]]],[11,"zero","","Nothing.",104,[[],["permill"]]],[11,"is_zero","","`true` if this is nothing.",104,[[["self"]],["bool"]]],[11,"one","","Everything.",104,[[],["permill"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",104,[[],["u32"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",104,[[],["u32"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",104,[[["u32"]],["permill"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",104,[[["u32"]],["permill"]]],[11,"square","","Return the product of multiplication of this value by…",104,[[],["permill"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",104,[[["f64"]],["permill"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",104,[[["n"]],["permill"]]],[11,"zero","","Nothing.",105,[[],["percent"]]],[11,"is_zero","","`true` if this is nothing.",105,[[["self"]],["bool"]]],[11,"one","","Everything.",105,[[],["percent"]]],[11,"deconstruct","","Consume self and deconstruct into a raw numeric type.",105,[[],["u8"]]],[11,"accuracy","","Return the scale at which this per-thing is working.",105,[[],["u8"]]],[11,"from_parts","","From an explicitly defined number of parts per maximum of…",105,[[["u8"]],["percent"]]],[11,"from_percent","","Converts from a percent. Equal to `x / 100`.",105,[[["u8"]],["percent"]]],[11,"square","","Return the product of multiplication of this value by…",105,[[],["percent"]]],[11,"from_fraction","","Converts a fraction into `Permill`.",105,[[["f64"]],["percent"]]],[11,"from_rational_approximation","","Approximate the fraction `p/q` into a per-thing fraction.…",105,[[["n"]],["percent"]]],[11,"zero","","Nothing.",106,[[],["rational128"]]],[11,"is_zero","","If it is zero or not",106,[[["self"]],["bool"]]],[11,"from","","Build from a raw `n/d`.",106,[[["u128"]],["rational128"]]],[11,"from_unchecked","","Build from a raw `n/d`. This could lead to / 0 if not…",106,[[["u128"]],["rational128"]]],[11,"n","","Return the numerator.",106,[[["self"]],["u128"]]],[11,"d","","Return the denominator.",106,[[["self"]],["u128"]]],[11,"to_den","","Convert `self` to a similar rational number where…",106,[[["u128"]],[["result",["rational128","str"]],["str"],["rational128"]]]],[11,"lcm","","Get the least common divisor of `self` and `other`.",106,[[["rational128"],["self"]],[["result",["u128","str"]],["str"],["u128"]]]],[11,"lazy_saturating_add","","A saturating add that assumes `self` and `other` have the…",106,[[["rational128"]],["rational128"]]],[11,"lazy_saturating_sub","","A saturating subtraction that assumes `self` and `other`…",106,[[["rational128"]],["rational128"]]],[11,"checked_add","","Addition. Simply tries to unify the denominators and add…",106,[[["rational128"]],[["result",["rational128","str"]],["str"],["rational128"]]]],[11,"checked_sub","","Subtraction. Simply tries to unify the denominators and…",106,[[["rational128"]],[["result",["rational128","str"]],["str"],["rational128"]]]],[11,"from_natural","","creates self from a natural number.",107,[[["i64"]],["fixed64"]]],[11,"accuracy","","Return the accuracy of the type. Given that this function…",107,[[],["i64"]]],[11,"into_inner","","Consume self and return the inner value.",107,[[],["i64"]]],[11,"from_parts","","Raw constructor. Equal to `parts / 1_000_000_000`.",107,[[["i64"]],["fixed64"]]],[11,"from_rational","","creates self from a rational number. Equal to `n/d`.",107,[[["i64"],["u64"]],["fixed64"]]],[11,"saturated_multiply_accumulate","","Performs a saturated multiply and accumulate by unsigned…",107,[[["n"]],["n"]]],[11,"with_capacity","sp_runtime::biguint","Create a new instance with `size` limbs. This prevents any…",108,[[["usize"]],["biguint"]]],[11,"from_limbs","","Raw constructor from custom limbs. If `limbs` is empty,…",108,[[],["biguint"]]],[11,"len","","Number of limbs.",108,[[["self"]],["usize"]]],[11,"get","","A naive getter for limb at `index`. Note that the order is…",108,[[["self"],["usize"]],["u32"]]],[11,"checked_get","","A naive getter for limb at `index`. Note that the order is…",108,[[["self"],["usize"]],[["u32"],["option",["u32"]]]]],[11,"set","","A naive setter for limb at `index`. Note that the order is…",108,[[["self"],["usize"],["u32"]]]],[11,"lsb","","returns the least significant limb of the number.",108,[[["self"]],["u32"]]],[11,"msb","","returns the most significant limb of the number.",108,[[["self"]],["u32"]]],[11,"lstrip","","Strips zeros from the left side (the most significant…",108,[[["self"]]]],[11,"lpad","","Zero-pad `self` from left to reach `size` limbs. Will not…",108,[[["self"],["usize"]]]],[11,"add","","Adds `self` with `other`. self and other do not have to…",108,[[["biguint"]],["biguint"]]],[11,"sub","","Subtracts `other` from `self`. self and other do not have…",108,[[["biguint"]],[["result",["biguint","biguint"]],["biguint"]]]],[11,"mul","","Multiplies n-limb number `self` with m-limb number `other`.",108,[[["biguint"]],["biguint"]]],[11,"div_unit","","Divides `self` by a single limb `other`. This can be used…",108,[[["u32"]],["biguint"]]],[11,"div","","Divides an `n + m` limb self by a `n` limb `other`. The…",108,[[["bool"],["biguint"]],["option"]]],[11,"repeat_byte","sp_runtime::testing","Returns a new fixed hash where all bits are set to the…",35,[[["u8"]],["h256"]]],[11,"zero","","Returns a new zero-initialized fixed hash.",35,[[],["h256"]]],[11,"len_bytes","","Returns the size of this hash in bytes.",35,[[],["usize"]]],[11,"as_bytes","","Extracts a byte slice containing the entire fixed hash.",35,[[["self"]]]],[11,"as_bytes_mut","","Extracts a mutable byte slice containing the entire fixed…",35,[[["self"]]]],[11,"as_fixed_bytes","","Extracts a reference to the byte array containing the…",35,[[["self"]]]],[11,"as_fixed_bytes_mut","","Extracts a reference to the byte array containing the…",35,[[["self"]]]],[11,"to_fixed_bytes","","Returns the inner bytes array.",35,[[]]],[11,"as_ptr","","Returns a constant raw pointer to the value.",35,[[["self"]]]],[11,"as_mut_ptr","","Returns a mutable raw pointer to the value.",35,[[["self"]]]],[11,"assign_from_slice","","Assign the bytes from the byte slice `src` to `self`.",35,[[["self"]]]],[11,"from_slice","","Create a new fixed-hash from the given slice `src`.",35,[[],["h256"]]],[11,"covers","","Returns `true` if all bits set in `b` are also set in…",35,[[["self"],["h256"]],["bool"]]],[11,"is_zero","","Returns `true` if no bits are set.",35,[[["self"]],["bool"]]],[11,"to_low_u64_be","","Returns the lowest 8 bytes interpreted as big-endian.",35,[[["self"]],["u64"]]],[11,"to_low_u64_le","","Returns the lowest 8 bytes interpreted as little-endian.",35,[[["self"]],["u64"]]],[11,"to_low_u64_ne","","Returns the lowest 8 bytes interpreted as native-endian.",35,[[["self"]],["u64"]]],[11,"from_low_u64_be","","Creates a new hash type from the given `u64` value.",35,[[["u64"]],["h256"]]],[11,"from_low_u64_le","","Creates a new hash type from the given `u64` value.",35,[[["u64"]],["h256"]]],[11,"from_low_u64_ne","","Creates a new hash type from the given `u64` value.",35,[[["u64"]],["h256"]]],[11,"randomize_using","","Assign `self` to a cryptographically random value using…",35,[[["self"],["r"]]]],[11,"randomize","","Assign `self` to a cryptographically random value.",35,[[["self"]]]],[11,"random_using","","Create a new hash with cryptographically random content…",35,[[["r"]],["h256"]]],[11,"random","","Create a new hash with cryptographically random content.",35,[[],["h256"]]],[11,"from_raw","sp_runtime::testing::sr25519","A new instance from the given 32-byte `data`.",36,[[],["public"]]],[11,"from_h256","","A new instance from an H256.",36,[[["h256"]],["public"]]],[11,"as_array_ref","","Return a slice filled with raw data.",36,[[["self"]]]],[11,"from_entropy","","Make a new key pair from binary data derived from a valid…",110,[[["str"],["option",["str"]]]]],[11,"from_raw","","A new instance from the given 64-byte `data`.",37,[[],["signature"]]],[11,"from_slice","","A new instance from the given slice that should be 64…",37,[[],["signature"]]],[11,"from_h512","","A new instance from an H512.",37,[[["h512"]],["signature"]]]],"p":[[3,"Storage"],[3,"StorageChild"],[8,"TypeId"],[3,"KeyTypeId"],[8,"CryptoType"],[8,"RuntimeAppPublic"],[8,"BoundToRuntimeAppPublic"],[8,"Serialize"],[8,"Deserialize"],[3,"Digest"],[3,"ModuleId"],[3,"OpaqueExtrinsic"],[4,"DigestItem"],[4,"MultiSignature"],[4,"MultiSigner"],[4,"DispatchError"],[3,"PiecewiseLinear"],[3,"UncheckedExtrinsic"],[3,"CheckedExtrinsic"],[3,"Header"],[3,"Block"],[3,"SignedBlock"],[4,"Era"],[4,"BlockId"],[4,"DigestItemRef"],[4,"OpaqueDigestItemId"],[3,"SignedPayload"],[3,"Request"],[3,"PendingRequest"],[3,"Response"],[3,"Headers"],[4,"Method"],[4,"Error"],[3,"ResponseBody"],[3,"HeadersIterator"],[3,"H256"],[3,"Public"],[3,"Signature"],[3,"LocalizedSignature"],[3,"UintAuthorityId"],[3,"Header"],[3,"Block"],[3,"TestXt"],[8,"UniqueSaturatedInto"],[8,"UniqueSaturatedFrom"],[8,"Saturating"],[8,"SaturatedConversion"],[8,"Zero"],[8,"One"],[8,"Bounded"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"IntegerSquareRoot"],[8,"Lazy"],[8,"IdentifyAccount"],[8,"Verify"],[8,"AppVerify"],[8,"EnsureOrigin"],[8,"Lookup"],[8,"StaticLookup"],[8,"Convert"],[8,"CheckedConversion"],[8,"Scale"],[8,"Clear"],[8,"OnFinalize"],[8,"OnInitialize"],[8,"OffchainWorker"],[8,"Hash"],[8,"CheckEqual"],[8,"RandomnessBeacon"],[8,"IsMember"],[8,"Header"],[8,"Block"],[8,"Extrinsic"],[8,"Checkable"],[8,"BlindCheckable"],[8,"Dispatchable"],[8,"SignedExtension"],[8,"Applyable"],[8,"ProvideRuntimeApi"],[8,"GetRuntimeBlockType"],[8,"GetNodeBlockType"],[8,"RuntimeApiInfo"],[8,"ValidateUnsigned"],[8,"OpaqueKeys"],[8,"AccountIdConversion"],[8,"Printable"],[8,"BlockIdTo"],[3,"AppendZerosInput"],[3,"TrailingZeroInput"],[3,"ValidTransaction"],[4,"InvalidTransaction"],[4,"UnknownTransaction"],[4,"TransactionValidityError"],[3,"RandomNumberGenerator"],[8,"BuildStorage"],[8,"BuildModuleGenesisStorage"],[3,"AccountId32"],[3,"Perquintill"],[3,"Perbill"],[3,"Permill"],[3,"Percent"],[3,"Rational128"],[3,"Fixed64"],[3,"BigUint"],[3,"AnySignature"],[3,"Pair"],[3,"ExtrinsicWrapper"],[3,"BadOrigin"],[3,"LookupError"],[3,"IdentityLookup"],[3,"Identity"],[3,"ConvertInto"],[3,"BlakeTwo256"],[3,"ApiRef"],[6,"DispatchOutcome"]]};
searchIndex["sp_runtime_interface"] = {"doc":"Substrate runtime interface","i":[[23,"runtime_interface","sp_runtime_interface","Attribute macro for transforming a trait declaration into…",null,null],[5,"unpack_ptr_and_len","","Unpacks an `u64` into the pointer and length.",null,[[["u64"]]]],[0,"host","","Traits required by the runtime interface from the host side.",null,null],[8,"IntoFFIValue","sp_runtime_interface::host","Something that can be converted into a ffi value.",null,null],[10,"into_ffi_value","","Convert `self` into a ffi value.",0,[[["functioncontext"]],["result"]]],[8,"IntoPreallocatedFFIValue","","Something that can be converted into a preallocated ffi…",null,null],[16,"SelfInstance","","As `Self` can be an unsized type, it needs to be…",1,null],[10,"into_preallocated_ffi_value","","Convert `self_instance` into the given preallocated ffi…",1,[[["functioncontext"]],["result"]]],[8,"FromFFIValue","","Something that can be created from a ffi value.",null,null],[16,"SelfInstance","","As `Self` can be an unsized type, it needs to be…",2,null],[10,"from_ffi_value","","Create `SelfInstance` from the given",2,[[["functioncontext"]],["result"]]],[0,"pass_by","sp_runtime_interface","Provides the `PassBy` trait to simplify the implementation…",null,null],[24,"PassByCodec","sp_runtime_interface::pass_by","Derive macro for implementing [`PassBy`] with the…",null,null],[24,"PassByInner","","Derive macro for implementing [`PassBy`] with the…",null,null],[24,"PassByEnum","","Derive macro for implementing [`PassBy`] with the [`Enum`]…",null,null],[3,"Codec","","The implementation of the pass by codec strategy. This…",null,null],[3,"Inner","","The implementation of the pass by inner type strategy. The…",null,null],[3,"Enum","","The implementation of the pass by enum strategy. This…",null,null],[8,"PassBy","","Something that should be passed between wasm and the host…",null,null],[16,"PassBy","","The strategy that should be used to pass the type.",3,null],[8,"PassByImpl","","Something that provides a strategy for passing a type…",null,null],[10,"into_ffi_value","","Convert the given instance to the ffi value.",4,[[["t"],["functioncontext"]],["result"]]],[10,"from_ffi_value","","Create `T` from the given ffi value.",4,[[["functioncontext"]],["result"]]],[8,"PassByInner","","Trait that needs to be implemented by a type that should…",null,null],[16,"Inner","","The inner type that is wrapped by `Self`.",5,null],[10,"into_inner","","Consumes `self` and returns the inner type.",5,[[]]],[10,"inner","","Returns the reference to the inner type.",5,[[["self"]]]],[10,"from_inner","","Construct `Self` from the given `inner`.",5,[[],["self"]]],[6,"Pointer","sp_runtime_interface","A pointer that can be used in a runtime interface function…",null,null],[8,"RIType","","Something that can be used by the runtime interface as…",null,null],[16,"FFIType","","The ffi type that is used to represent `Self`.",6,null],[11,"from","sp_runtime_interface::pass_by","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"into_ffi_value","sp_runtime_interface","",10,[[["functioncontext"]],[["result",["u32"]],["u32"]]]],[11,"from_ffi_value","","",10,[[["u32"],["functioncontext"]],["result"]]],[11,"into_ffi_value","sp_runtime_interface::pass_by","",7,[[["t"],["functioncontext"]],["result"]]],[11,"from_ffi_value","","",7,[[["functioncontext"]],["result"]]],[11,"into_ffi_value","","",8,[[["t"],["functioncontext"]],["result"]]],[11,"from_ffi_value","","",8,[[["functioncontext"]],["result"]]],[11,"into_ffi_value","","",9,[[["t"],["functioncontext"]],["result"]]],[11,"from_ffi_value","","",9,[[["functioncontext"]],["result"]]]],"p":[[8,"IntoFFIValue"],[8,"IntoPreallocatedFFIValue"],[8,"FromFFIValue"],[8,"PassBy"],[8,"PassByImpl"],[8,"PassByInner"],[8,"RIType"],[3,"Codec"],[3,"Inner"],[3,"Enum"],[6,"Pointer"]]};
searchIndex["sp_runtime_interface_proc_macro"] = {"doc":"This crate provides procedural macros for usage within the…","i":[[23,"runtime_interface","sp_runtime_interface_proc_macro","",null,null],[24,"PassByCodec","","",null,null],[24,"PassByInner","","",null,null],[24,"PassByEnum","","",null,null]],"p":[]};
searchIndex["sp_state_machine"] = {"doc":"Substrate state machine implementation.","i":[[6,"Layout","sp_state_machine","",null,null],[6,"TrieDBMut","","Persistent trie database write-access interface for the a…",null,null],[8,"TrieMut","","A key-value datastore implemented as a database-backed…",null,null],[10,"root","","Return the root of the trie.",0,[[["self"]]]],[10,"is_empty","","Is the trie empty?",0,[[["self"]],["bool"]]],[11,"contains","","Does the trie contain a given key?",0,[[["self"]],[["result",["bool","box"]],["box",["trieerror"]],["bool"]]]],[10,"get","","What is the value of the given key in this trie?",0,[[["self"]],[["result",["option","box"]],["box",["trieerror"]],["option",["vec"]]]]],[10,"insert","","Insert a `key`/`value` pair into the trie. An empty value…",0,[[["self"]],[["result",["option","box"]],["box",["trieerror"]],["option",["vec"]]]]],[10,"remove","","Remove a `key` from the trie. Equivalent to making it…",0,[[["self"]],[["result",["option","box"]],["box",["trieerror"]],["option",["vec"]]]]],[6,"DBValue","","Database value",null,null],[6,"MemoryDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[3,"TestExternalities","","Simple HashMap-based Externalities impl.",null,null],[3,"BasicExternalities","","Simple Map-based Externalities impl.",null,null],[3,"Ext","","Wraps a read-only backend, call executor, and current…",null,null],[12,"id","","Pseudo-unique id used for tracing.",1,null],[3,"ChangesTrieAnchorBlockId","","Block identifier that could be used to determine fork of…",null,null],[12,"hash","","Hash of this block.",2,null],[12,"number","","Number of this block.",2,null],[3,"InMemoryChangesTrieStorage","","In-memory implementation of changes trie storage.",null,null],[3,"ChangesTrieBuildCache","","Changes trie build cache.",null,null],[3,"ChangesTrieConfigurationRange","","Blocks range where configuration has been constant.",null,null],[12,"config","","Active configuration.",3,null],[12,"zero","","Zero block of this configuration. The configuration is…",3,null],[12,"end","","End block of this configuration. It is the last block…",3,null],[3,"OverlayedChanges","","The overlayed changes to state to be queried on top of the…",null,null],[3,"ProvingBackend","","Patricia trie-based backend which also tracks all touched…",null,null],[3,"ProvingBackendRecorder","","Patricia trie-based backend specialized in get value proofs.",null,null],[3,"StorageProof","","A proof that some set of key-value pairs are included in…",null,null],[3,"TrieBackend","","Patricia trie-based backend. Transaction type is an…",null,null],[3,"StateMachine","","The substrate state machine.",null,null],[4,"ChangesTrieCacheAction","","The action to perform when block-with-changes-trie is…",null,null],[13,"CacheBuildData","","Cache data that has been collected when CT has been built.",4,null],[13,"Clear","","Clear cache from all existing entries.",4,null],[4,"ExecutionError","","Externalities Error.",null,null],[13,"Backend","","Backend error.",5,null],[13,"CodeEntryDoesNotExist","","The entry `:code` doesn't exist in storage so there's no…",5,null],[13,"UnableToGenerateProof","","Backend is incompatible with execution proof generation…",5,null],[13,"InvalidProof","","Invalid execution proof.",5,null],[4,"ExecutionStrategy","","Strategy for executing a call into the runtime.",null,null],[13,"NativeWhenPossible","","Execute with the native equivalent if it is compatible…",6,null],[13,"AlwaysWasm","","Use the given wasm module.",6,null],[13,"Both","","Run with both the wasm and the native variant (if…",6,null],[13,"NativeElseWasm","","First native, then if that fails or is not possible, wasm.",6,null],[4,"BackendTrustLevel","","Storage backend trust level.",null,null],[13,"Trusted","","Panics from trusted backends are considered justified, and…",7,null],[13,"Untrusted","","Panics from untrusted backend are caught and interpreted…",7,null],[4,"ExecutionManager","","Like `ExecutionStrategy` only it also stores a handler in…",null,null],[13,"NativeWhenPossible","","Execute with the native equivalent if it is compatible…",8,null],[13,"AlwaysWasm","","Use the given wasm module. The backend on which code is…",8,null],[13,"Both","","Run with both the wasm and the native variant (if…",8,null],[13,"NativeElseWasm","","First native, then if that fails or is not possible, wasm.",8,null],[5,"key_changes","","Return changes of given key at given blocks range. `max`…",null,[[["blocknumber"],["anchorblockid"],["option"],["configurationrange"],["storage"]],[["result",["drilldowniterator","string"]],["string"],["drilldowniterator"]]]],[5,"key_changes_proof","","Returns proof of changes of given key at given blocks…",null,[[["blocknumber"],["anchorblockid"],["configurationrange"],["option"],["storage"]],[["vec",["vec"]],["string"],["result",["vec","string"]]]]],[5,"key_changes_proof_check","","Check key changes proof and return changes of the key at…",null,[[["blocknumber"],["configurationrange"],["vec",["vec"]],["rootsstorage"],["vec",["u8"]],["anchorblockid"],["option"]],[["result",["vec","string"]],["string"],["vec"]]]],[5,"prune_changes_tries","","Prune obsolete changes tries. Pruning happens at the same…",null,[[["s"],["blocknumber"],["fnmut"],["changestrieconfiguration"],["anchorblockid"]]]],[5,"oldest_non_pruned_changes_trie","","Get number of oldest block for which changes trie is not…",null,[[["blocknumber"],["changestrieconfiguration"]],["blocknumber"]]],[5,"create_proof_check_backend","","Create proof check backend.",null,[[["storageproof"]],[["result",["triebackend","box"]],["triebackend",["memorydb"]],["box",["error"]]]]],[5,"create_proof_check_backend_storage","","Create in-memory storage of proof check backend.",null,[[["storageproof"]],["memorydb"]]],[5,"merge_storage_proofs","","Merges multiple storage proofs covering potentially…",null,[[["i"]],["storageproof"]]],[5,"native_else_wasm","","Evaluate to ExecutionManager::NativeElseWasm, without…",null,[[],[["defaulthandler"],["executionmanager",["defaulthandler"]]]]],[5,"prove_execution","","Prove execution using the given state backend, overlayed…",null,[[["exec"],["str"],["overlayedchanges"],["b"]],[["box",["error"]],["result",["box"]]]]],[5,"prove_execution_on_trie_backend","","Prove execution using the given trie backend, overlayed…",null,[[["exec"],["str"],["overlayedchanges"],["triebackend"]],[["box",["error"]],["result",["box"]]]]],[5,"execution_proof_check","","Check execution proof, generated by `prove_execution` call.",null,[[["storageproof"],["exec"],["str"],["overlayedchanges"]],[["vec",["u8"]],["box",["error"]],["result",["vec","box"]]]]],[5,"execution_proof_check_on_trie_backend","","Check execution proof on proving backend, generated by…",null,[[["triebackend"],["exec"],["str"],["overlayedchanges"]],[["vec",["u8"]],["box",["error"]],["result",["vec","box"]]]]],[5,"prove_read","","Generate storage read proof.",null,[[["i"],["b"]],[["storageproof"],["box",["error"]],["result",["storageproof","box"]]]]],[5,"prove_child_read","","Generate child storage read proof.",null,[[["childinfo"],["i"],["b"]],[["storageproof"],["box",["error"]],["result",["storageproof","box"]]]]],[5,"prove_read_on_trie_backend","","Generate storage read proof on pre-created trie backend.",null,[[["triebackend"],["i"]],[["storageproof"],["box",["error"]],["result",["storageproof","box"]]]]],[5,"prove_child_read_on_trie_backend","","Generate storage read proof on pre-created trie backend.",null,[[["childinfo"],["triebackend"],["i"]],[["storageproof"],["box",["error"]],["result",["storageproof","box"]]]]],[5,"read_proof_check","","Check storage read proof, generated by `prove_read` call.",null,[[["storageproof"],["i"]],[["hashmap",["vec","option"]],["box",["error"]],["result",["hashmap","box"]]]]],[5,"read_child_proof_check","","Check child storage read proof, generated by…",null,[[["storageproof"],["i"]],[["hashmap",["vec","option"]],["box",["error"]],["result",["hashmap","box"]]]]],[5,"read_proof_check_on_proving_backend","","Check storage read proof on pre-created proving backend.",null,[[["triebackend"]],[["option",["vec"]],["box",["error"]],["result",["option","box"]]]]],[5,"read_child_proof_check_on_proving_backend","","Check child storage read proof on pre-created proving…",null,[[["triebackend"]],[["option",["vec"]],["box",["error"]],["result",["option","box"]]]]],[0,"backend","","State machine backends. These manage the code and storage…",null,null],[3,"InMemory","sp_state_machine::backend","In-memory backend. Fully recomputes tries each time…",null,null],[4,"Void","","Error impossible.",null,null],[8,"Backend","","A state backend is used to read state data and can have…",null,null],[16,"Error","","An error type when fetching data is not possible.",9,null],[16,"Transaction","","Storage changes to be applied if committing",9,null],[16,"TrieBackendStorage","","Type of trie backend storage.",9,null],[10,"storage","","Get keyed storage or None if there is nothing associated.",9,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"storage_hash","","Get keyed storage value hash or None if there is nothing…",9,[[["self"]],[["result",["option"]],["option"]]]],[10,"child_storage","","Get keyed child storage or None if there is nothing…",9,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"child_storage_hash","","Get child keyed storage value hash or None if there is…",9,[[["childinfo"],["self"]],[["result",["option"]],["option"]]]],[11,"exists_storage","","true if a key exists in storage.",9,[[["self"]],[["bool"],["result",["bool"]]]]],[11,"exists_child_storage","","true if a key exists in child storage.",9,[[["childinfo"],["self"]],[["bool"],["result",["bool"]]]]],[10,"next_storage_key","","Return the next key in storage in lexicographic order or…",9,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[10,"next_child_storage_key","","Return the next key in child storage in lexicographic…",9,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[10,"for_keys_in_child_storage","","Retrieve all entries keys of child storage and call `f`…",9,[[["fnmut"],["childinfo"],["self"]]]],[11,"for_keys_with_prefix","","Retrieve all entries keys which start with the given…",9,[[["fnmut"],["self"]]]],[10,"for_key_values_with_prefix","","Retrieve all entries keys and values of which start with…",9,[[["fnmut"],["self"]]]],[10,"for_child_keys_with_prefix","","Retrieve all child entries keys which start with the given…",9,[[["fnmut"],["childinfo"],["self"]]]],[10,"storage_root","","Calculate the storage root, with given delta over what is…",9,[[["i"],["self"]]]],[10,"child_storage_root","","Calculate the child storage root, with given delta over…",9,[[["childinfo"],["i"],["self"]]]],[10,"pairs","","Get all key/value pairs into a Vec.",9,[[["self"]],["vec"]]],[11,"keys","","Get all keys with given prefix",9,[[["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"child_keys","","Get all keys of child storage with given prefix",9,[[["childinfo"],["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"as_trie_backend","","Try convert into trie backend.",9,[[["self"]],[["option",["triebackend"]],["triebackend"]]]],[11,"full_storage_root","","Calculate the storage root, with given delta over what is…",9,[[["i1"],["self"],["i2"]]]],[8,"Consolidate","","Trait that allows consolidate two transactions together.",null,null],[10,"consolidate","","Consolidate two transactions into one.",10,[[["self"]]]],[11,"update","","Copy the state, with applied updates",11,[[["self"]],["self"]]],[11,"child_storage_keys","","child storage key iterator",11,[[["self"]]]],[11,"new","sp_state_machine","Create new changes trie build cache.",12,[[],["self"]]],[11,"get","","Get cached changed keys for changes trie with given root.",12,[[["self"],["h"]],[["hashmap"],["option",["hashmap"]]]]],[11,"with_changed_keys","","Execute given functor with cached entry for given block.…",12,[[["fnmut"],["self"],["h"]],["bool"]]],[11,"perform","","Insert data into cache.",12,[[["cacheaction"],["self"]]]],[11,"with_db","","Creates storage from given in-memory database.",13,[[["memorydb"]],["self"]]],[11,"new","","Creates storage with empty database.",13,[[],["self"]]],[11,"with_proof","","Creates storage with given proof.",13,[[["vec",["u8"]],["vec",["vec"]]],["self"]]],[11,"cache_mut","","Get mutable cache reference.",13,[[["self"]],["buildcache"]]],[11,"with_blocks","","Create the storage with given blocks.",13,[[["vec"]],["self"]]],[11,"insert","","Insert changes trie for given block.",13,[[["memorydb"],["number"],["self"]]]],[11,"new","","Create a new `Ext` from overlayed changes and read-only…",1,[[["extensions"],["overlayedchanges"],["b"],["option",["extensions"]],["option"],["t"]],["self"]]],[11,"transaction","","Get the transaction necessary to update the backend.",1,[[["self"]]]],[11,"ext","","Get externalities implementation.",14,[[["self"]],[["inmemory"],["ext",["inmemory","changestrieinmemorystorage"]],["changestrieinmemorystorage"]]]],[11,"new","","Create a new instance of `TestExternalities` with storage.",14,[[["storage"]],["self"]]],[11,"new_with_code","","Create a new instance of `TestExternalities` with code and…",14,[[["storage"]],["self"]]],[11,"insert","","Insert key/value into backend",14,[[["vec",["u8"]],["self"],["u8"]]]],[11,"register_extension","","Registers the given extension for this instance.",14,[[["self"],["any"],["extension"]]]],[11,"changes_trie_storage","","Get mutable reference to changes trie storage.",14,[[["self"]],["changestrieinmemorystorage"]]],[11,"commit_all","","Return a new backend with all pending value.",14,[[["self"]],["inmemory"]]],[11,"execute_with","","Execute the given closure while `self` is set as…",14,[[["self"]],["r"]]],[11,"new","","Create a new instance of `BasicExternalities`",15,[[["storage"]],["self"]]],[11,"insert","","Insert key/value",15,[[["vec",["u8"]],["self"],["u8"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"into_storages","","Consume self and returns inner storages",15,[[],["storage"]]],[11,"execute_with_storage","","Execute the given closure `f` with the externalities set…",15,[[["storage"]],["r"]]],[11,"execute_with","","Execute the given closure while `self` is set as…",15,[[["self"]],["r"]]],[11,"is_empty","","Whether the overlayed changes are empty.",16,[[["self"]],["bool"]]],[11,"storage","","Returns a double-Option: None if the key is unknown (i.e.…",16,[[["self"]],[["option",["option"]],["option"]]]],[11,"child_storage","","Returns a double-Option: None if the key is unknown (i.e.…",16,[[["self"]],[["option",["option"]],["option"]]]],[11,"discard_prospective","","Discard prospective changes to state.",16,[[["self"]]]],[11,"commit_prospective","","Commit prospective changes to state.",16,[[["self"]]]],[11,"into_committed","","Consume `OverlayedChanges` and take committed set.",16,[[]]],[11,"child_info","","Get child info for a storage key. Take the latest value so…",16,[[["self"]],[["ownedchildinfo"],["option",["ownedchildinfo"]]]]],[11,"next_storage_key_change","","Returns the next (in lexicographic order) storage key in…",16,[[["self"]],["option"]]],[11,"next_child_storage_key_change","","Returns the next (in lexicographic order) child storage…",16,[[["self"]],["option"]]],[11,"new","","Constructs a storage proof from a subset of encoded trie…",17,[[["vec",["u8"]],["vec",["vec"]]],["self"]]],[11,"empty","","Returns a new empty proof.",17,[[],["self"]]],[11,"is_empty","","Returns whether this is an empty proof.",17,[[["self"]],["bool"]]],[11,"iter_nodes","","Create an iterator over trie nodes constructed from the…",17,[[],["storageproofnodeiterator"]]],[11,"storage","","Produce proof for a key query.",18,[[["self"]],[["option",["vec"]],["result",["option","string"]],["string"]]]],[11,"child_storage","","Produce proof for a child key query.",18,[[["childinfo"],["self"]],[["option",["vec"]],["result",["option","string"]],["string"]]]],[11,"record_all_keys","","Produce proof for the whole backend.",18,[[["self"]]]],[11,"new","","Create new proving backend.",19,[[["triebackend"]],["self"]]],[11,"new_with_recorder","","Create new proving backend with the given recorder.",19,[[["proofrecorder"],["triebackend"]],["self"]]],[11,"extract_proof","","Extracting the gathered unordered proof.",19,[[["self"]],["storageproof"]]],[11,"new","","Create new trie-based backend.",20,[[["s"]],["self"]]],[11,"essence","","Get backend essence reference.",20,[[["self"]],["triebackendessence"]]],[11,"backend_storage","","Get backend storage reference.",20,[[["self"]],["s"]]],[11,"root","","Get trie root.",20,[[["self"]]]],[11,"into_storage","","Consumes self and returns underlying storage.",20,[[],["s"]]],[6,"ProofRecorder","","Global proof recorder, act as a layer over a hash db for…",null,null],[6,"DefaultHandler","","Default handler of the execution manager.",null,null],[6,"ChangesTrieTransaction","","Type of changes trie transaction.",null,null],[8,"ChangesTrieStorage","","Changes trie storage. Provides access to trie roots and…",null,null],[10,"as_roots_storage","","Casts from self reference to RootsStorage reference.",21,[[["self"]],["rootsstorage"]]],[10,"with_cached_changed_keys","","Execute given functor with cached entry for given trie…",21,[[["self"],["fnmut"]],["bool"]]],[10,"get","","Get a trie node.",21,[[["self"],["prefix"]],[["result",["option","string"]],["string"],["option",["dbvalue"]]]]],[8,"ChangesTrieRootsStorage","","Changes trie storage. Provides access to trie roots and…",null,null],[10,"build_anchor","","Resolve hash of the block into anchor.",22,[[["self"]],[["anchorblockid"],["string"],["result",["anchorblockid","string"]]]]],[10,"root","","Get changes trie root for the block with given number…",22,[[["number"],["self"],["anchorblockid"]],[["string"],["option"],["result",["option","string"]]]]],[8,"TrieBackendStorage","","Key-value pairs storage that is used by trie backend…",null,null],[16,"Overlay","","Type of in-memory overlay.",23,null],[10,"get","","Get the value stored at key.",23,[[["self"],["prefix"]],[["result",["option","string"]],["string"],["option",["dbvalue"]]]]],[8,"Storage","","Patricia trie-based storage trait.",null,null],[10,"get","","Get a trie node.",24,[[["self"],["prefix"]],[["result",["option","string"]],["string"],["option",["dbvalue"]]]]],[8,"Error","","State Machine Error bound.",null,null],[11,"get_manager","","Gets the corresponding manager for the execution strategy.",6,[[],[["defaulthandler"],["executionmanager",["defaulthandler"]]]]],[11,"new","","Creates new substrate state machine.",25,[[["extensions"],["overlayedchanges"],["option"],["exec"],["t"],["b"],["str"]],["self"]]],[11,"execute","","Execute a call using the given state backend, overlayed…",25,[[["self"],["executionstrategy"]],[["result",["box"]],["box",["error"]]]]],[11,"execute_using_consensus_failure_handler","","Execute a call using the given state backend, overlayed…",25,[[["executionmanager"],["option"],["self"],["bool"]],[["result",["box"]],["box",["error"]]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"unchecked_into","","",14,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",14,[[["outer"]],["t"]]],[11,"vzip","","",14,[[],["v"]]],[11,"clear","","",14,[[["self"]]]],[11,"initialize","","",14,[[]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"unchecked_into","","",15,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",15,[[["outer"]],["t"]]],[11,"vzip","","",15,[[],["v"]]],[11,"clear","","",15,[[["self"]]]],[11,"initialize","","",15,[[]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"unchecked_into","","",2,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",2,[[["outer"]],["t"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"unchecked_into","","",12,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"unchecked_into","","",3,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",3,[[["outer"]],["t"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"unchecked_into","","",16,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",16,[[["outer"]],["t"]]],[11,"vzip","","",16,[[],["v"]]],[11,"clear","","",16,[[["self"]]]],[11,"initialize","","",16,[[]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"unchecked_into","","",19,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",19,[[["outer"]],["t"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"unchecked_into","","",18,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",18,[[["outer"]],["t"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"size_hint","","",17,[[["self"]],["usize"]]],[11,"using_encoded","","",17,[[["self"],["f"]],["r"]]],[11,"encode","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",17,[[["w"],["self"]]]],[11,"decode","","",17,[[["i"]],[["result",["error"]],["error"]]]],[11,"to_keyed_vec","","",17,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",17,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",17,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",17,[[["outer"]],["t"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"unchecked_into","","",20,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",20,[[["outer"]],["t"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"unchecked_into","","",25,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",25,[[["outer"]],["t"]]],[11,"vzip","","",25,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"unchecked_into","","",4,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",4,[[["outer"]],["t"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"unchecked_into","","",5,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",5,[[["outer"]],["t"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"unchecked_into","","",6,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",6,[[["outer"]],["t"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","sp_state_machine::backend","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"unchecked_into","","",11,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"vzip","","",11,[[],["v"]]],[11,"clear","","",11,[[["self"]]]],[11,"initialize","","",11,[[]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"unchecked_into","","",26,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",26,[[["outer"]],["t"]]],[11,"vzip","","",26,[[],["v"]]],[11,"as_fail","","",26,[[["self"]],["fail"]]],[11,"storage","","",11,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"child_storage","","",11,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"exists_storage","","",11,[[["self"]],[["bool"],["result",["bool"]]]]],[11,"next_storage_key","","",11,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"next_child_storage_key","","",11,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"for_keys_with_prefix","","",11,[[["fnmut"],["self"]]]],[11,"for_key_values_with_prefix","","",11,[[["fnmut"],["self"]]]],[11,"for_keys_in_child_storage","","",11,[[["fnmut"],["childinfo"],["self"]]]],[11,"for_child_keys_with_prefix","","",11,[[["fnmut"],["childinfo"],["self"]]]],[11,"storage_root","","",11,[[["i"],["self"]]]],[11,"child_storage_root","","",11,[[["childinfo"],["i"],["self"]]]],[11,"pairs","","",11,[[["self"]],["vec"]]],[11,"keys","","",11,[[["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"child_keys","","",11,[[["childinfo"],["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"as_trie_backend","","",11,[[["self"]],[["option",["triebackend"]],["triebackend"]]]],[11,"storage","sp_state_machine","",19,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"child_storage","","",19,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"for_keys_in_child_storage","","",19,[[["fnmut"],["childinfo"],["self"]]]],[11,"next_storage_key","","",19,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"next_child_storage_key","","",19,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"for_keys_with_prefix","","",19,[[["fnmut"],["self"]]]],[11,"for_key_values_with_prefix","","",19,[[["fnmut"],["self"]]]],[11,"for_child_keys_with_prefix","","",19,[[["fnmut"],["childinfo"],["self"]]]],[11,"pairs","","",19,[[["self"]],["vec"]]],[11,"keys","","",19,[[["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"child_keys","","",19,[[["childinfo"],["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"storage_root","","",19,[[["i"],["self"]]]],[11,"child_storage_root","","",19,[[["childinfo"],["i"],["self"]]]],[11,"storage","","",20,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"child_storage","","",20,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"next_storage_key","","",20,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"next_child_storage_key","","",20,[[["childinfo"],["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"for_keys_with_prefix","","",20,[[["fnmut"],["self"]]]],[11,"for_key_values_with_prefix","","",20,[[["fnmut"],["self"]]]],[11,"for_keys_in_child_storage","","",20,[[["fnmut"],["childinfo"],["self"]]]],[11,"for_child_keys_with_prefix","","",20,[[["fnmut"],["childinfo"],["self"]]]],[11,"pairs","","",20,[[["self"]],["vec"]]],[11,"keys","","",20,[[["self"]],[["vec",["u8"]],["vec",["vec"]]]]],[11,"storage_root","","",20,[[["i"],["self"]]]],[11,"child_storage_root","","",20,[[["childinfo"],["i"],["self"]]]],[11,"as_trie_backend","","",20,[[["self"]],[["option",["triebackend"]],["triebackend"]]]],[11,"build_anchor","","",13,[[["self"]],[["anchorblockid"],["string"],["result",["anchorblockid","string"]]]]],[11,"root","","",13,[[["number"],["self"],["anchorblockid"]],[["string"],["option"],["result",["option","string"]]]]],[11,"as_roots_storage","","",13,[[["self"]],["rootsstorage"]]],[11,"with_cached_changed_keys","","",13,[[["self"],["fnmut"]],["bool"]]],[11,"get","","",13,[[["self"],["prefix"]],[["result",["option","string"]],["string"],["option",["dbvalue"]]]]],[11,"get","","",27,[[["self"],["prefix"]],[["result",["option","string"]],["string"],["option",["dbvalue"]]]]],[11,"from","sp_state_machine::backend","",11,[[["option"],["hashmap",["option","btreemap"]],["btreemap",["vec","vec"]]],["self"]]],[11,"from","","",11,[[["storage"]],["self"]]],[11,"from","","",11,[[["vec",["u8"]],["btreemap",["vec","vec"]]],["self"]]],[11,"from","","",11,[[["vec"]],["self"]]],[11,"from","sp_state_machine","",14,[[["storage"]],["self"]]],[11,"from","","",15,[[["vec",["u8"]],["btreemap",["vec","vec"]]],["self"]]],[11,"from","","",6,[[["executionmanager"]],["self"]]],[11,"clone","sp_state_machine::backend","",11,[[["self"]],["self"]]],[11,"clone","sp_state_machine","",3,[[["self"]],["configurationrange"]]],[11,"clone","","",16,[[["self"]],["overlayedchanges"]]],[11,"clone","","",17,[[["self"]],["storageproof"]]],[11,"clone","","",6,[[["self"]],["executionstrategy"]]],[11,"clone","","",7,[[["self"]],["backendtrustlevel"]]],[11,"clone","","",8,[[["self"]],["executionmanager"]]],[11,"default","sp_state_machine::backend","",11,[[],["self"]]],[11,"default","sp_state_machine","",14,[[],["self"]]],[11,"default","","",15,[[],["self"]]],[11,"default","","",16,[[],["overlayedchanges"]]],[11,"eq","sp_state_machine::backend","",11,[[["self"]],["bool"]]],[11,"eq","sp_state_machine","",4,[[["cacheaction"],["self"]],["bool"]]],[11,"ne","","",4,[[["cacheaction"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["executionerror"]],["bool"]]],[11,"ne","","",5,[[["self"],["executionerror"]],["bool"]]],[11,"eq","","This doesn't test if they are in the same state, only if…",14,[[["testexternalities"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["basicexternalities"]],["bool"]]],[11,"eq","","",17,[[["self"],["storageproof"]],["bool"]]],[11,"ne","","",17,[[["self"],["storageproof"]],["bool"]]],[11,"eq","","",6,[[["self"],["executionstrategy"]],["bool"]]],[11,"fmt","sp_state_machine::backend","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_state_machine","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","sp_state_machine::backend","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","sp_state_machine","",5,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",15,[[["intoiterator"]],["self"]]],[11,"description","sp_state_machine::backend","",26,[[["self"]],["str"]]],[11,"encode_to","sp_state_machine","",17,[[["self"],["encout"]]]],[11,"encode","","",17,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"using_encoded","","",17,[[["fnonce"],["self"]],["r"]]],[11,"decode","","",17,[[["decin"]],[["error"],["result",["error"]]]]],[11,"storage","","",1,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"storage_hash","","",1,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_storage","","",1,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_storage_hash","","",1,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"child_storage","","",1,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"child_storage_hash","","",1,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_child_storage","","",1,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_child_storage_hash","","",1,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"exists_storage","","",1,[[["self"]],["bool"]]],[11,"exists_child_storage","","",1,[[["childinfo"],["childstoragekey"],["self"]],["bool"]]],[11,"next_storage_key","","",1,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"next_child_storage_key","","",1,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"place_storage","","",1,[[["vec",["u8"]],["self"],["option",["vec"]],["u8"]]]],[11,"place_child_storage","","",1,[[["childstoragekey"],["childinfo"],["vec",["u8"]],["self"],["option",["vec"]],["u8"]]]],[11,"kill_child_storage","","",1,[[["self"],["childstoragekey"],["childinfo"]]]],[11,"clear_prefix","","",1,[[["self"]]]],[11,"clear_child_prefix","","",1,[[["childstoragekey"],["childinfo"],["self"]]]],[11,"chain_id","","",1,[[["self"]],["u64"]]],[11,"storage_root","","",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"child_storage_root","","",1,[[["self"],["childstoragekey"]],[["vec",["u8"]],["u8"]]]],[11,"storage_changes_root","","",1,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"storage","","",15,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"storage_hash","","",15,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_storage","","",15,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_storage_hash","","",15,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"child_storage","","",15,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"child_storage_hash","","",15,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_child_storage_hash","","",15,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"original_child_storage","","",15,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"next_storage_key","","",15,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"next_child_storage_key","","",15,[[["childinfo"],["childstoragekey"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"place_storage","","",15,[[["vec",["u8"]],["self"],["option",["vec"]],["u8"]]]],[11,"place_child_storage","","",15,[[["childstoragekey"],["childinfo"],["vec",["u8"]],["self"],["option",["vec"]],["u8"]]]],[11,"kill_child_storage","","",15,[[["self"],["childstoragekey"],["childinfo"]]]],[11,"clear_prefix","","",15,[[["self"]]]],[11,"clear_child_prefix","","",15,[[["childstoragekey"],["childinfo"],["self"]]]],[11,"chain_id","","",15,[[["self"]],["u64"]]],[11,"storage_root","","",15,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"child_storage_root","","",15,[[["self"],["childstoragekey"]],[["vec",["u8"]],["u8"]]]],[11,"storage_changes_root","","",15,[[["self"]],[["result",["option"]],["option",["vec"]]]]],[11,"extension_by_type_id","","",1,[[["typeid"],["self"]],[["option",["any"]],["any"]]]],[11,"extension_by_type_id","","",14,[[["typeid"],["self"]],[["option",["any"]],["any"]]]],[11,"extension_by_type_id","","",15,[[["typeid"],["self"]],[["option",["any"]],["any"]]]]],"p":[[8,"TrieMut"],[3,"Ext"],[3,"ChangesTrieAnchorBlockId"],[3,"ChangesTrieConfigurationRange"],[4,"ChangesTrieCacheAction"],[4,"ExecutionError"],[4,"ExecutionStrategy"],[4,"BackendTrustLevel"],[4,"ExecutionManager"],[8,"Backend"],[8,"Consolidate"],[3,"InMemory"],[3,"ChangesTrieBuildCache"],[3,"InMemoryChangesTrieStorage"],[3,"TestExternalities"],[3,"BasicExternalities"],[3,"OverlayedChanges"],[3,"StorageProof"],[3,"ProvingBackendRecorder"],[3,"ProvingBackend"],[3,"TrieBackend"],[8,"ChangesTrieStorage"],[8,"ChangesTrieRootsStorage"],[8,"TrieBackendStorage"],[8,"Storage"],[3,"StateMachine"],[4,"Void"],[6,"MemoryDB"]]};
searchIndex["sp_std"] = {"doc":"Lowest-abstraction level for the Substrate runtime: just…","i":[[0,"alloc","sp_std","Memory allocation APIs",null,null],[3,"System","sp_std::alloc","The default memory allocator provided by the operating…",null,null],[5,"set_alloc_error_hook","","Registers a custom allocation error hook, replacing any…",null,[[]]],[5,"take_alloc_error_hook","","Unregisters the current allocation error hook, returning it.",null,[[]]],[3,"AllocErr","","The `AllocErr` error indicates an allocation failure that…",null,null],[3,"CannotReallocInPlace","","The `CannotReallocInPlace` error is used when…",null,null],[3,"LayoutErr","","The parameters given to `Layout::from_size_align` or some…",null,null],[8,"GlobalAlloc","","A memory allocator that can be registered as the standard…",null,null],[10,"alloc","","Allocate memory as described by the given `layout`.",0,[[["layout"],["self"]]]],[10,"dealloc","","Deallocate the block of memory at the given `ptr` pointer…",0,[[["layout"],["self"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",0,[[["layout"],["self"]]]],[11,"realloc","","Shrink or grow a block of memory to the given `new_size`.…",0,[[["layout"],["usize"],["self"]]]],[3,"Layout","","Layout of a block of memory.",null,null],[3,"Global","","The global memory allocator.",null,null],[5,"alloc","","Allocate memory with the global allocator.",null,[[["layout"]]]],[5,"dealloc","","Deallocate memory with the global allocator.",null,[[["layout"]]]],[5,"realloc","","Reallocate memory with the global allocator.",null,[[["layout"],["usize"]]]],[5,"alloc_zeroed","","Allocate zero-initialized memory with the global allocator.",null,[[["layout"]]]],[5,"handle_alloc_error","","Abort on memory allocation error or failure.",null,[[["layout"]]]],[3,"Excess","","Represents the combination of a starting address and a…",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[8,"Alloc","","An implementation of `Alloc` can allocate, reallocate, and…",null,null],[10,"alloc","","Returns a pointer meeting the size and alignment…",2,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[10,"dealloc","","Deallocate the memory referenced by `ptr`.",2,[[["nonnull",["u8"]],["layout"],["self"],["u8"]]]],[11,"usable_size","","Returns bounds on the guaranteed usable size of a…",2,[[["layout"],["self"]]]],[11,"realloc","","Returns a pointer suitable for holding data described by a…",2,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"alloc_zeroed","","Behaves like `alloc`, but also ensures that the contents…",2,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"alloc_excess","","Behaves like `alloc`, but also returns the whole size of…",2,[[["layout"],["self"]],[["excess"],["allocerr"],["result",["excess","allocerr"]]]]],[11,"realloc_excess","","Behaves like `realloc`, but also returns the whole size of…",2,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["excess"],["allocerr"],["result",["excess","allocerr"]]]]],[11,"grow_in_place","","Attempts to extend the allocation referenced by `ptr` to…",2,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"shrink_in_place","","Attempts to shrink the allocation referenced by `ptr` to…",2,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["cannotreallocinplace"],["result",["cannotreallocinplace"]]]]],[11,"alloc_one","","Allocates a block suitable for holding an instance of `T`.",2,[[["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_one","","Deallocates a block suitable for holding an instance of `T`.",2,[[["nonnull"],["self"]]]],[11,"alloc_array","","Allocates a block suitable for holding `n` instances of `T`.",2,[[["self"],["usize"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"realloc_array","","Reallocates a block previously suitable for holding…",2,[[["nonnull"],["usize"],["self"]],[["result",["nonnull","allocerr"]],["nonnull"],["allocerr"]]]],[11,"dealloc_array","","Deallocates a block suitable for holding `n` instances of…",2,[[["nonnull"],["self"],["usize"]],[["result",["allocerr"]],["allocerr"]]]],[0,"any","sp_std","This module implements the `Any` trait, which enables…",null,null],[8,"Any","sp_std::any","A trait to emulate dynamic typing.",null,null],[10,"type_id","","Gets the `TypeId` of `self`.",3,[[["self"]],["typeid"]]],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a…",null,null],[5,"type_name","","Returns the name of a type as a string slice.",null,[[],["str"]]],[5,"type_name_of_val","","Returns the name of the type of the pointed-to value as a…",null,[[["t"]],["str"]]],[0,"borrow","sp_std","A module for working with borrowed data.",null,null],[8,"ToOwned","sp_std::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","The resulting type after obtaining ownership.",4,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",4,[[["self"]]]],[11,"clone_into","","Uses borrowed data to replace owned data, usually by…",4,[[["self"]]]],[4,"Cow","","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",5,null],[13,"Owned","","Owned data.",5,null],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",6,[[["self"]],["borrowed"]]],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",7,[[["self"]],["borrowed"]]],[0,"boxed","sp_std","A pointer type for heap allocation.",null,null],[3,"Box","sp_std::boxed","A pointer type for heap allocation.",null,null],[0,"cell","sp_std","Shareable mutable containers.",null,null],[3,"Cell","sp_std::cell","A mutable memory location.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow…",null,null],[3,"BorrowError","","An error returned by `RefCell::try_borrow`.",null,null],[3,"BorrowMutError","","An error returned by `RefCell::try_borrow_mut`.",null,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.…",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a…",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"clone","sp_std","The `Clone` trait for types that cannot be 'implicitly…",null,null],[8,"Clone","sp_std::clone","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",8,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",8,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[0,"cmp","sp_std","Functionality for ordering and comparison.",null,null],[8,"PartialEq","sp_std::cmp","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",9,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",9,[[["rhs"],["self"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two…",null,null],[13,"Less","","An ordering where a compared value is less than another.",10,null],[13,"Equal","","An ordering where a compared value is equal to another.",10,null],[13,"Greater","","An ordering where a compared value is greater than another.",10,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",11,null],[8,"Ord","","Trait for types that form a total order.",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and…",12,[[["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",12,[[],["self"]]],[11,"min","","Compares and returns the minimum of two values.",12,[[],["self"]]],[11,"clamp","","Restrict a value to a certain interval.",12,[[],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other`…",13,[[["rhs"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","This method tests less than (for `self` and `other`) and…",13,[[["rhs"],["self"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and…",13,[[["rhs"],["self"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`)…",13,[[["rhs"],["self"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and…",13,[[["rhs"],["self"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",null,[[["t"]],["t"]]],[5,"min_by","","Returns the minimum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"min_by_key","","Returns the element that gives the minimum value from the…",null,[[["t"],["f"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",null,[[["t"]],["t"]]],[5,"max_by","","Returns the maximum of two values with respect to the…",null,[[["t"],["f"]],["t"]]],[5,"max_by_key","","Returns the element that gives the maximum value from the…",null,[[["t"],["f"]],["t"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[14,"Ord","","Derive macro generating an impl of the trait `Ord`.",null,null],[14,"PartialOrd","","Derive macro generating an impl of the trait `PartialOrd`.",null,null],[0,"convert","sp_std","Traits for conversions between types.",null,null],[5,"identity","sp_std::convert","The identity function.",null,[[["t"]],["t"]]],[8,"AsRef","","Used to do a cheap reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",14,[[["self"]],["t"]]],[8,"AsMut","","Used to do a cheap mutable-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"Into","","A value-to-value conversion that consumes the input value.…",null,null],[10,"into","","Performs the conversion.",16,[[],["t"]]],[8,"From","","Used to do value-to-value conversions while consuming the…",null,null],[10,"from","","Performs the conversion.",17,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or…",null,null],[16,"Error","","The type returned in the event of a conversion error.",18,null],[10,"try_into","","Performs the conversion.",18,[[],["result"]]],[8,"TryFrom","","Simple and safe type conversions that may fail in a…",null,null],[16,"Error","","The type returned in the event of a conversion error.",19,null],[10,"try_from","","Performs the conversion.",19,[[["t"]],["result"]]],[4,"Infallible","","The error type for errors that can never happen.",null,null],[8,"FloatToInt","","Supporting trait for inherent methods of `f32` and `f64`…",null,null],[0,"default","sp_std","The `Default` trait for types which may have meaningful…",null,null],[8,"Default","sp_std::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the \"default value\" for a type.",20,[[],["self"]]],[14,"Default","","Derive macro generating an impl of the trait `Default`.",null,null],[0,"fmt","sp_std","Utilities for formatting and printing `String`s.",null,null],[5,"format","sp_std::fmt","The `format` function takes an [`Arguments`] struct and…",null,[[["arguments"]],["string"]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",21,null],[13,"Right","","Indication that contents should be right-aligned.",21,null],[13,"Center","","Indication that contents should be center-aligned.",21,null],[3,"Error","","The error type which is returned from formatting a message…",null,null],[5,"write","","The `write` function takes an output stream, and an…",null,[[["write"],["arguments"]],[["result",["error"]],["error"]]]],[3,"Arguments","","This structure represents a safely precompiled version of…",null,null],[8,"Binary","","`b` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",22,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Octal","","`o` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",23,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Debug","","`?` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",24,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[14,"Debug","","Derive macro generating an impl of the trait `Debug`.",null,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",25,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"Formatter","","Configuration for formatting.",null,null],[6,"Result","","The type returned by formatter methods.",null,null],[8,"Write","","A collection of methods that are required to format a…",null,null],[10,"write_str","","Writes a string slice into this writer, returning whether…",26,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the…",26,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors…",26,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[8,"LowerExp","","`e` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",27,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperExp","","`E` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",28,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"LowerHex","","`x` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",29,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"Pointer","","`p` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",30,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[8,"UpperHex","","`X` formatting.",null,null],[10,"fmt","","Formats the value using the given formatter.",31,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[0,"hash","sp_std","Generic hashing support.",null,null],[8,"Hash","sp_std::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the given [`Hasher`].",32,[[["self"],["h"]]]],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",32,[[["h"]]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"finish","","Returns the hash value for the values written so far.",33,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",33,[[["self"]]]],[11,"write_u8","","Writes a single `u8` into this hasher.",33,[[["self"],["u8"]]]],[11,"write_u16","","Writes a single `u16` into this hasher.",33,[[["u16"],["self"]]]],[11,"write_u32","","Writes a single `u32` into this hasher.",33,[[["self"],["u32"]]]],[11,"write_u64","","Writes a single `u64` into this hasher.",33,[[["self"],["u64"]]]],[11,"write_u128","","Writes a single `u128` into this hasher.",33,[[["self"],["u128"]]]],[11,"write_usize","","Writes a single `usize` into this hasher.",33,[[["self"],["usize"]]]],[11,"write_i8","","Writes a single `i8` into this hasher.",33,[[["self"],["i8"]]]],[11,"write_i16","","Writes a single `i16` into this hasher.",33,[[["self"],["i16"]]]],[11,"write_i32","","Writes a single `i32` into this hasher.",33,[[["self"],["i32"]]]],[11,"write_i64","","Writes a single `i64` into this hasher.",33,[[["i64"],["self"]]]],[11,"write_i128","","Writes a single `i128` into this hasher.",33,[[["self"],["i128"]]]],[11,"write_isize","","Writes a single `isize` into this hasher.",33,[[["isize"],["self"]]]],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",null,null],[16,"Hasher","","Type of the hasher that will be created.",34,null],[10,"build_hasher","","Creates a new hasher.",34,[[["self"]]]],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for…",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[14,"Hash","","Derive macro generating an impl of the trait `Hash`.",null,null],[0,"iter","sp_std","Composable external iteration.",null,null],[8,"Iterator","sp_std::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",35,null],[10,"next","","Advances the iterator and returns the next value.",35,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",35,[[["self"]]]],[11,"count","","Consumes the iterator, counting the number of iterations…",35,[[],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",35,[[],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",35,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but…",35,[[["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both…",35,[[["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",35,[[["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that…",35,[[["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",35,[[["f"]]]],[11,"filter","","Creates an iterator which uses a closure to determine if…",35,[[["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",35,[[["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration…",35,[[],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the…",35,[[],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a…",35,[[["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a…",35,[[["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",35,[[["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",35,[[["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds…",35,[[["f"],["st"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens…",35,[[["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",35,[[],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",35,[[],["fuse"]]],[11,"inspect","","Does something with each element of an iterator, passing…",35,[[["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",35,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",35,[[],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",35,[[["f"]]]],[11,"partition_in_place","","Reorders the elements of this iterator in-place according…",35,[[["p"]],["usize"]]],[11,"is_partitioned","","Checks if the elements of this iterator are partitioned…",35,[[["p"]],["bool"]]],[11,"try_fold","","An iterator method that applies a function as long as it…",35,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to…",35,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a…",35,[[["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",35,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",35,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a…",35,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns…",35,[[["self"],["f"]],["option"]]],[11,"try_find","","Applies function to the elements of iterator and returns…",35,[[["self"],["f"]],[["option"],["result",["option"]]]]],[11,"position","","Searches for an element in an iterator, returning its index.",35,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right,…",35,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",35,[[],["option"]]],[11,"min","","Returns the minimum element of an iterator.",35,[[],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the…",35,[[["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with…",35,[[["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the…",35,[[["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with…",35,[[["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",35,[[],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",35,[[]]],[11,"copied","","Creates an iterator which copies all of its elements.",35,[[],["copied"]]],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",35,[[],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",35,[[],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",35,[[],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the…",35,[[],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator`…",35,[[["i"]],["ordering"]]],[11,"cmp_by","","Lexicographically compares the elements of this `Iterator`…",35,[[["i"],["f"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator`…",35,[[["i"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp_by","","Lexicographically compares the elements of this `Iterator`…",35,[[["i"],["f"]],[["ordering"],["option",["ordering"]]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to…",35,[[["i"]],["bool"]]],[11,"eq_by","","Determines if the elements of this `Iterator` are equal to…",35,[[["i"],["f"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal…",35,[[["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are…",35,[[["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are…",35,[[["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are…",35,[[["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are…",35,[[["i"]],["bool"]]],[11,"is_sorted","","Checks if the elements of this iterator are sorted.",35,[[],["bool"]]],[11,"is_sorted_by","","Checks if the elements of this iterator are sorted using…",35,[[["f"]],["bool"]]],[11,"is_sorted_by_key","","Checks if the elements of this iterator are sorted using…",35,[[["f"]],["bool"]]],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"steps_between","","Returns the number of steps between two step objects. The…",36,[[["self"]],[["option",["usize"]],["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning a clone of itself.",36,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning a clone of itself.",36,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result.",36,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result.",36,[[["self"]],["self"]]],[10,"add_usize","","Adds a `usize`, returning `None` on overflow.",36,[[["self"],["usize"]],["option"]]],[11,"sub_usize","","Subtracts a `usize`, returning `None` on underflow.",36,[[["self"],["usize"]],["option"]]],[5,"empty","","Creates an iterator that yields nothing.",null,[[],["empty"]]],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"from_fn","","Creates a new iterator where each iteration calls the…",null,[[["f"]],["fromfn"]]],[3,"FromFn","","An iterator where each iteration calls the provided…",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,[[["t"]],["once"]]],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once_with","","Creates an iterator that lazily generates a value exactly…",null,[[["f"]],["oncewith"]]],[3,"OnceWith","","An iterator that yields a single element of type `A` by…",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single…",null,[[["t"]],["repeat"]]],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A`…",null,[[["f"]],["repeatwith"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by…",null,null],[5,"successors","","Creates a new iterator where each successive item is…",null,[[["f"],["option"]],["successors"]]],[3,"Successors","","An new iterator where each successive item is computed…",null,null],[8,"FusedIterator","","An iterator that always continues to yield `None` when…",null,null],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","Removes and returns an element from the end of the iterator.",37,[[["self"]],["option"]]],[11,"nth_back","","Returns the `n`th element from the end of the iterator.",37,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes…",37,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to…",37,[[["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that…",37,[[["self"],["p"]],["option"]]],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",38,[[["self"],["t"]]]],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",39,[[["t"]],["self"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",40,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",40,null],[10,"into_iter","","Creates an iterator from a value.",40,[[]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",41,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the iterator is empty.",41,[[["self"]],["bool"]]],[8,"Product","","Trait to represent types that can be created by…",null,null],[10,"product","","Method which takes an iterator and generates `Self` from…",42,[[["i"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up…",null,null],[10,"sum","","Method which takes an iterator and generates `Self` from…",43,[[["i"]],["self"]]],[3,"Cloned","","An iterator that clones the elements of an underlying…",null,null],[3,"Copied","","An iterator that copies the elements of an underlying…",null,null],[3,"Flatten","","An iterator that flattens one level of nesting in an…",null,null],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",null,null],[3,"Chain","","An iterator that links two iterators together, in a chain.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element…",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with…",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements…",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Rev","","A double-ended iterator with the direction inverted.",null,null],[3,"Zip","","An iterator that iterates two other iterators…",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and…",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional…",null,null],[3,"Scan","","An iterator to maintain state while iterating another…",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate`…",null,null],[3,"Take","","An iterator that only iterates over the first `n`…",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate`…",null,null],[3,"Fuse","","An iterator that yields `None` forever after the…",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each…",null,null],[0,"marker","sp_std","Primitive traits and types representing basic properties…",null,null],[8,"Send","sp_std::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile time.",null,null],[8,"Unsize","","Types that can be \"unsized\" to a dynamically-sized type.",null,null],[8,"StructuralPartialEq","","Required trait for constants used in pattern matches.",null,null],[8,"StructuralEq","","Required trait for constants used in pattern matches.",null,null],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",null,null],[8,"Sync","","Types for which it is safe to share references between…",null,null],[3,"PhantomData","","Zero-sized type used to mark things that \"act like\" they…",null,null],[8,"Unpin","","Types that can be safely moved after being pinned.",null,null],[3,"PhantomPinned","","A marker type which does not implement `Unpin`.",null,null],[14,"Copy","","Derive macro generating an impl of the trait `Copy`.",null,null],[0,"mem","sp_std","Basic functions for dealing with memory.",null,null],[5,"forget","sp_std::mem","Takes ownership and \"forgets\" about the value without…",null,[[["t"]]]],[5,"forget_unsized","","Like [`forget`], but also accepts unsized values.",null,[[["t"]]]],[5,"size_of","","Returns the size of a type in bytes.",null,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",null,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",null,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type…",null,[[["t"]],["usize"]]],[5,"needs_drop","","Returns `true` if dropping values of type `T` matters.",null,[[],["bool"]]],[5,"zeroed","","Returns the value of type `T` represented by the all-zero…",null,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by…",null,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without…",null,[[["t"]]]],[5,"take","","Replaces `dest` with the default value of `T`, returning…",null,[[["t"]],["t"]]],[5,"replace","","Moves `src` into the referenced `dest`, returning the…",null,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",null,[[["t"]]]],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src`…",null,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",null,null],[5,"discriminant","","Returns a value uniquely identifying the enum variant in…",null,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling…",null,null],[19,"MaybeUninit","","A wrapper type to construct uninitialized instances of `T`.",null,null],[5,"transmute","","Reinterprets the bits of a value of one type as another…",null,[[["t"]],["u"]]],[0,"num","sp_std","Additional functionality for numerics.",null,null],[3,"Wrapping","sp_std::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",44,null],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero.",45,null],[13,"Infinite","","Positive or negative infinity.",45,null],[13,"Zero","","Positive or negative zero.",45,null],[13,"Subnormal","","De-normalized floating point representation (less precise…",45,null],[13,"Normal","","A regular floating point number.",45,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"TryFromIntError","","The error type returned when a checked integral type…",null,null],[3,"NonZeroI128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroI8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroIsize","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU128","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU16","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU32","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU64","","An integer that is known not to equal zero.",null,null],[3,"NonZeroU8","","An integer that is known not to equal zero.",null,null],[3,"NonZeroUsize","","An integer that is known not to equal zero.",null,null],[4,"IntErrorKind","","Enum to store the various types of errors that can cause…",null,null],[13,"Empty","","Value being parsed is empty.",46,null],[13,"InvalidDigit","","Contains an invalid digit.",46,null],[13,"Overflow","","Integer is too large to store in target integer type.",46,null],[13,"Underflow","","Integer is too small to store in target integer type.",46,null],[13,"Zero","","Value was Zero",46,null],[0,"ops","sp_std","Overloadable operators.",null,null],[8,"Add","sp_std::ops","The addition operator `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator.",47,null],[10,"add","","Performs the `+` operation.",47,[[["rhs"]]]],[8,"Div","","The division operator `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator.",48,null],[10,"div","","Performs the `/` operation.",48,[[["rhs"]]]],[8,"Mul","","The multiplication operator `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator.",49,null],[10,"mul","","Performs the `*` operation.",49,[[["rhs"]]]],[8,"Neg","","The unary negation operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",50,null],[10,"neg","","Performs the unary `-` operation.",50,[[]]],[8,"Rem","","The remainder operator `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator.",51,null],[10,"rem","","Performs the `%` operation.",51,[[["rhs"]]]],[8,"Sub","","The subtraction operator `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator.",52,null],[10,"sub","","Performs the `-` operation.",52,[[["rhs"]]]],[8,"AddAssign","","The addition assignment operator `+=`.",null,null],[10,"add_assign","","Performs the `+=` operation.",53,[[["self"],["rhs"]]]],[8,"DivAssign","","The division assignment operator `/=`.",null,null],[10,"div_assign","","Performs the `/=` operation.",54,[[["self"],["rhs"]]]],[8,"MulAssign","","The multiplication assignment operator `*=`.",null,null],[10,"mul_assign","","Performs the `*=` operation.",55,[[["self"],["rhs"]]]],[8,"RemAssign","","The remainder assignment operator `%=`.",null,null],[10,"rem_assign","","Performs the `%=` operation.",56,[[["self"],["rhs"]]]],[8,"SubAssign","","The subtraction assignment operator `-=`.",null,null],[10,"sub_assign","","Performs the `-=` operation.",57,[[["self"],["rhs"]]]],[8,"BitAnd","","The bitwise AND operator `&`.",null,null],[16,"Output","","The resulting type after applying the `&` operator.",58,null],[10,"bitand","","Performs the `&` operation.",58,[[["rhs"]]]],[8,"BitOr","","The bitwise OR operator `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator.",59,null],[10,"bitor","","Performs the `|` operation.",59,[[["rhs"]]]],[8,"BitXor","","The bitwise XOR operator `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator.",60,null],[10,"bitxor","","Performs the `^` operation.",60,[[["rhs"]]]],[8,"Not","","The unary logical negation operator `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator.",61,null],[10,"not","","Performs the unary `!` operation.",61,[[]]],[8,"Shl","","The left shift operator `<<`. Note that because this trait…",null,null],[16,"Output","","The resulting type after applying the `<<` operator.",62,null],[10,"shl","","Performs the `<<` operation.",62,[[["rhs"]]]],[8,"Shr","","The right shift operator `>>`. Note that because this…",null,null],[16,"Output","","The resulting type after applying the `>>` operator.",63,null],[10,"shr","","Performs the `>>` operation.",63,[[["rhs"]]]],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",null,null],[10,"bitand_assign","","Performs the `&=` operation.",64,[[["self"],["rhs"]]]],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",null,null],[10,"bitor_assign","","Performs the `|=` operation.",65,[[["self"],["rhs"]]]],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",null,null],[10,"bitxor_assign","","Performs the `^=` operation.",66,[[["self"],["rhs"]]]],[8,"ShlAssign","","The left shift assignment operator `<<=`.",null,null],[10,"shl_assign","","Performs the `<<=` operation.",67,[[["self"],["rhs"]]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",null,null],[10,"shr_assign","","Performs the `>>=` operation.",68,[[["self"],["rhs"]]]],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing.",69,null],[10,"deref","","Dereferences the value.",69,[[["self"]]]],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",null,null],[10,"deref_mut","","Mutably dereferences the value.",70,[[["self"]]]],[8,"Drop","","Used to run some code when a value goes out of scope. This…",null,null],[10,"drop","","Executes the destructor for this type.",71,[[["self"]]]],[8,"Fn","","The version of the call operator that takes an immutable…",null,null],[10,"call","","Performs the call operation.",72,[[["args"],["self"]]]],[8,"FnMut","","The version of the call operator that takes a mutable…",null,null],[10,"call_mut","","Performs the call operation.",73,[[["args"],["self"]]]],[8,"FnOnce","","The version of the call operator that takes a by-value…",null,null],[16,"Output","","The returned type after the call operator is used.",74,null],[10,"call_once","","Performs the call operation.",74,[[["args"]]]],[8,"Index","","Used for indexing operations (`container[index]`) in…",null,null],[16,"Output","","The returned type after indexing.",75,null],[10,"index","","Performs the indexing (`container[index]`) operation.",75,[[["idx"],["self"]]]],[8,"IndexMut","","Used for indexing operations (`container[index]`) in…",null,null],[10,"index_mut","","Performs the mutable indexing (`container[index]`)…",76,[[["self"],["idx"]]]],[3,"Range","","A (half-open) range bounded inclusively below and…",null,null],[12,"start","","The lower bound of the range (inclusive).",77,null],[12,"end","","The upper bound of the range (exclusive).",77,null],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",null,null],[12,"start","","The lower bound of the range (inclusive).",78,null],[3,"RangeFull","","An unbounded range (`..`).",null,null],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",null,null],[12,"end","","The upper bound of the range (exclusive).",79,null],[4,"Bound","","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",80,null],[13,"Excluded","","An exclusive bound.",80,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in…",80,null],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range…",null,null],[10,"start_bound","","Start index bound.",81,[[["self"]],[["t"],["bound"]]]],[10,"end_bound","","End index bound.",81,[[["self"]],[["t"],["bound"]]]],[11,"contains","","Returns `true` if `item` is contained in the range.",81,[[["self"],["u"]],["bool"]]],[3,"RangeInclusive","","A range bounded inclusively below and above (`start..=end`).",null,null],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",null,null],[12,"end","","The upper bound of the range (inclusive)",82,null],[8,"Try","","A trait for customizing the behavior of the `?` operator.",null,null],[16,"Ok","","The type of this value when viewed as successful.",83,null],[16,"Error","","The type of this value when viewed as failed.",83,null],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that…",83,[[],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For…",83,[[],["self"]]],[10,"from_ok","","Wrap an OK value to construct the composite result. For…",83,[[],["self"]]],[8,"Generator","","The trait implemented by builtin generator types.",null,null],[16,"Yield","","The type of value this generator yields.",84,null],[16,"Return","","The type of value this generator returns.",84,null],[10,"resume","","Resumes the execution of this generator.",84,[[["self"],["pin"]],["generatorstate"]]],[4,"GeneratorState","","The result of a generator resumption.",null,null],[13,"Yielded","","The generator suspended with a value.",85,null],[13,"Complete","","The generator completed with a return value.",85,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper…",null,null],[8,"DispatchFromDyn","","This is used for object safety, to check that a method's…",null,null],[0,"ptr","sp_std","Manually manage memory through raw pointers.",null,null],[5,"drop_in_place","sp_std::ptr","Executes the destructor (if any) of the pointed-to value.",null,[[]]],[5,"null","","Creates a null raw pointer.",null,[[]]],[5,"null_mut","","Creates a null mutable raw pointer.",null,[[]]],[5,"slice_from_raw_parts","","Forms a raw slice from a pointer and a length.",null,[[["usize"]]]],[5,"slice_from_raw_parts_mut","","Performs the same functionality as…",null,[[["usize"]]]],[5,"swap","","Swaps the values at two mutable locations of the same…",null,[[]]],[5,"swap_nonoverlapping","","Swaps `count * size_of::<T>()` bytes between the two…",null,[[["usize"]]]],[5,"replace","","Moves `src` into the pointed `dst`, returning the previous…",null,[[["t"]],["t"]]],[5,"read","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"read_unaligned","","Reads the value from `src` without moving it. This leaves…",null,[[],["t"]]],[5,"write","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"write_unaligned","","Overwrites a memory location with the given value without…",null,[[["t"]]]],[5,"read_volatile","","Performs a volatile read of the value from `src` without…",null,[[],["t"]]],[5,"write_volatile","","Performs a volatile write of a memory location with the…",null,[[["t"]]]],[5,"eq","","Compares raw pointers for equality.",null,[[],["bool"]]],[5,"hash","","Hash a raw pointer.",null,[[["s"]]]],[5,"copy_nonoverlapping","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"copy","","Copies `count * size_of::<T>()` bytes from `src` to `dst`.…",null,[[["usize"]]]],[5,"write_bytes","","Sets `count * size_of::<T>()` bytes of memory starting at…",null,[[["u8"],["usize"]]]],[3,"NonNull","","`*mut T` but non-zero and covariant.",null,null],[0,"rc","sp_std","Single-threaded reference-counting pointers. 'Rc' stands…",null,null],[3,"Rc","sp_std::rc","A single-threaded reference-counting pointer. 'Rc' stands…",null,null],[3,"Weak","","`Weak` is a version of [`Rc`] that holds a non-owning…",null,null],[0,"result","sp_std","Error handling with the `Result` type.",null,null],[4,"Result","sp_std::result","`Result` is a type that represents either success ([`Ok`])…",null,null],[13,"Ok","","Contains the success value",86,null],[13,"Err","","Contains the error value",86,null],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a…",null,null],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant…",null,null],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a…",null,null],[0,"slice","sp_std","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"Concat","sp_std::slice","Helper trait for `[T]::concat`.",null,null],[16,"Output","","The resulting type after concatenation",87,null],[10,"concat","","Implementation of `[T]::concat`",87,[[["self"]]]],[8,"Join","","Helper trait for `[T]::join`",null,null],[16,"Output","","The resulting type after concatenation",88,null],[10,"join","","Implementation of `[T]::join`",88,[[["self"],["separator"]]]],[8,"SliceIndex","","A helper trait used for indexing operations.",null,null],[16,"Output","","The output type returned by methods.",89,null],[10,"get","","Returns a shared reference to the output at this location,…",89,[[["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this…",89,[[["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location,…",89,[[["t"]]]],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this…",89,[[["t"]]]],[10,"index","","Returns a shared reference to the output at this location,…",89,[[["t"]]]],[10,"index_mut","","Returns a mutable reference to the output at this…",89,[[["t"]]]],[5,"from_mut","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_ref","","Converts a reference to T into a slice of length 1…",null,[[["t"]]]],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,[[["usize"]]]],[5,"from_raw_parts_mut","","Performs the same functionality as [`from_raw_parts`],…",null,[[["usize"]]]],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"ChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"ChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"Split","","An iterator over subslices separated by elements that…",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"RChunks","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExact","","An iterator over a slice in (non-overlapping) chunks…",null,null],[3,"RChunksExactMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RChunksMut","","An iterator over a slice in (non-overlapping) mutable…",null,null],[3,"RSplit","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitMut","","An iterator over the subslices of the vector which are…",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that…",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that…",null,null],[3,"SplitN","","An iterator over subslices separated by elements that…",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that…",null,null],[0,"str","sp_std","Unicode string slices.",null,null],[5,"from_boxed_utf8_unchecked","sp_std::str","Converts a boxed slice of bytes to a boxed string slice…",null,[[["box"]],[["str"],["box",["str"]]]]],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","sp_std::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",90,null],[10,"into_searcher","","Constructs the associated searcher from `self` and the…",90,[[["str"]]]],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",90,[[["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the…",90,[[["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the…",90,[[["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or…",null,null],[13,"Match","","Expresses that a match of the pattern has been found at…",91,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a…",91,null],[13,"Done","","Expresses that every byte of the haystack has been…",91,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlying string to be searched in",92,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",92,[[["self"]],["searchstep"]]],[11,"next_match","","Finds the next `Match` result. See `next()`",92,[[["self"]],["option"]]],[11,"next_reject","","Finds the next `Reject` result. See `next()` and…",92,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",93,[[["self"]],["searchstep"]]],[11,"next_match_back","","Finds the next `Match` result. See `next_back()`",93,[[["self"]],["option"]]],[11,"next_reject_back","","Finds the next `Reject` result. See `next_back()`",93,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be…",null,null],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",null,null],[3,"EncodeUtf16","sp_std::str","An iterator of [`u16`] over the string encoded as UTF-16.",null,null],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a…",null,null],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a…",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,[[],[["str"],["result",["str","utf8error"]],["utf8error"]]]],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",null,[[],[["result",["str","utf8error"]],["str"],["utf8error"]]]],[3,"Bytes","","An iterator over the bytes of a string slice.",null,null],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and…",null,null],[3,"Chars","","An iterator over the [`char`]s of a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without…",null,[[],["str"]]],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`]…",null,null],[3,"EscapeDebug","","The return type of [`str::escape_debug`].",null,null],[3,"EscapeDefault","","The return type of [`str::escape_default`].",null,null],[3,"EscapeUnicode","","The return type of [`str::escape_unicode`].",null,null],[8,"FromStr","","Parse a value from a string",null,null],[16,"Err","","The associated error which can be returned from parsing.",94,null],[10,"from_str","","Parses a string `s` to return a value of this type.",94,[[["str"]],["result"]]],[3,"Utf8Error","","Errors which can occur when attempting to interpret a…",null,null],[3,"Lines","","An iterator over the lines of a string, as string slices.",null,null],[3,"LinesAny","","Created with the method [`lines_any`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",null,null],[3,"Matches","","Created with the method [`matches`].",null,null],[3,"RMatches","","Created with the method [`rmatches`].",null,null],[3,"RSplit","","Created with the method [`rsplit`].",null,null],[3,"Split","","Created with the method [`split`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn`].",null,null],[3,"SplitN","","Created with the method [`splitn`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator`].",null,null],[0,"vec","sp_std","A contiguous growable array type with heap-allocated…",null,null],[3,"Vec","sp_std::vec","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"IntoIter","","An iterator that moves out of a vector.",null,null],[3,"Drain","","A draining iterator for `Vec<T>`.",null,null],[3,"Splice","","A splicing iterator for `Vec`.",null,null],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",null,null],[14,"vec","sp_std","Creates a [`Vec`] containing the arguments.",null,null],[0,"collections","","",null,null],[0,"btree_map","sp_std::collections","A map based on a B-Tree.",null,null],[3,"BTreeMap","sp_std::collections::btree_map","A map based on a B-Tree.",null,null],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",null,null],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",null,null],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",null,null],[3,"Values","","An iterator over the values of a `BTreeMap`.",null,null],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",null,null],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a…",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant entry.",95,null],[13,"Occupied","","An occupied entry.",95,null],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of…",null,null],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part…",null,null],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",null,null],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",null,null],[0,"btree_set","sp_std::collections","A set based on a B-Tree.",null,null],[3,"Iter","sp_std::collections::btree_set","An iterator over the items of a `BTreeSet`.",null,null],[3,"Difference","","A lazy iterator producing elements in the difference of…",null,null],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric…",null,null],[3,"Intersection","","A lazy iterator producing elements in the intersection of…",null,null],[3,"Union","","A lazy iterator producing elements in the union of…",null,null],[3,"BTreeSet","","A set based on a B-Tree.",null,null],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",null,null],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",null,null],[0,"vec_deque","sp_std::collections","A double-ended queue implemented with a growable ring…",null,null],[3,"VecDeque","sp_std::collections::vec_deque","A double-ended queue implemented with a growable ring…",null,null],[3,"Iter","","An iterator over the elements of a `VecDeque`.",null,null],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",null,null],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",null,null],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",null,null],[0,"prelude","sp_std","Prelude of common useful imports.",null,null],[3,"Vec","sp_std::prelude","A contiguous growable array type, written `Vec<T>` but…",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[8,"Eq","","Trait for equality comparisons which are equivalence…",null,null],[14,"Eq","","Derive macro generating an impl of the trait `Eq`.",null,null],[8,"PartialEq","","Trait for equality comparisons which are partial…",null,null],[10,"eq","","This method tests for `self` and `other` values to be…",9,[[["rhs"],["self"]],["bool"]]],[11,"ne","","This method tests for `!=`.",9,[[["rhs"],["self"]],["bool"]]],[14,"PartialEq","","Derive macro generating an impl of the trait `PartialEq`.",null,null],[3,"Reverse","","A helper struct for reverse ordering.",null,null],[12,"0","","",11,null],[8,"Clone","","A common trait for the ability to explicitly duplicate an…",null,null],[10,"clone","","Returns a copy of the value.",8,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",8,[[["self"],["self"]]]],[14,"Clone","","Derive macro generating an impl of the trait `Clone`.",null,null],[14,"map","sp_std","",null,null],[14,"if_std","","Feature gate some code that should only be run when `std`…",null,null],[11,"from","sp_std::alloc","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"to_string","","",97,[[["self"]],["string"]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"to_string","","",98,[[["self"]],["string"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"to_string","","",99,[[["self"]],["string"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","sp_std::any","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","sp_std::borrow","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","sp_std::prelude","",103,[[],["t"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"into_iter","","",103,[[],["i"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"to_string","","",103,[[["self"]],["string"]]],[11,"into_searcher","","",103,[[["str"]],["charpredicatesearcher"]]],[11,"is_contained_in","","",103,[[["str"]],["bool"]]],[11,"is_prefix_of","","",103,[[["str"]],["bool"]]],[11,"is_suffix_of","","",103,[[["str"]],["bool"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","sp_std::cell","",104,[[],["t"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[],["t"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_string","","",106,[[["self"]],["string"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_string","","",107,[[["self"]],["string"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_string","","",108,[[["self"]],["string"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_string","","",109,[[["self"]],["string"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"from","","",110,[[],["t"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"from","sp_std::cmp","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","sp_std::prelude","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","sp_std::convert","",111,[[],["t"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"to_string","","",111,[[["self"]],["string"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"from","sp_std::fmt","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"to_string","","",112,[[["self"]],["string"]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"to_string","","",113,[[["self"]],["string"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"from","sp_std::hash","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,[[["self"],["t"]]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"from","sp_std::iter","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"into_iter","","",122,[[],["i"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"into_iter","","",123,[[],["i"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"into_iter","","",124,[[],["i"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"into_iter","","",125,[[],["i"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"into_iter","","",126,[[],["i"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,[[["self"],["t"]]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"into_iter","","",127,[[],["i"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,[[["self"],["t"]]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"into_iter","","",128,[[],["i"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"into_iter","","",129,[[],["i"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"into_iter","","",130,[[],["i"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"into_iter","","",131,[[],["i"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"into_iter","","",132,[[],["i"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"into_iter","","",133,[[],["i"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"into_iter","","",134,[[],["i"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"into_iter","","",135,[[],["i"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"into_iter","","",136,[[],["i"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,[[["self"],["t"]]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"into_iter","","",137,[[],["i"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,[[["self"],["t"]]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"into_iter","","",138,[[],["i"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,[[["self"],["t"]]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"into_iter","","",139,[[],["i"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,[[["self"],["t"]]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"into_iter","","",140,[[],["i"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,[[["self"],["t"]]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"into_iter","","",141,[[],["i"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,[[["self"],["t"]]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"into_iter","","",142,[[],["i"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"into_iter","","",143,[[],["i"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[],["u"]]],[11,"into_iter","","",144,[[],["i"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[],["u"]]],[11,"into_iter","","",145,[[],["i"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[],["u"]]],[11,"into_iter","","",146,[[],["i"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"into_iter","","",147,[[],["i"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[],["u"]]],[11,"into_iter","","",148,[[],["i"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[],["u"]]],[11,"into_iter","","",149,[[],["i"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"from","sp_std::marker","",150,[[["t"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"from","sp_std::mem","",152,[[["t"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,[[["self"],["t"]]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"from","sp_std::num","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"to_string","","",44,[[["self"]],["string"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"to_string","","",155,[[["self"]],["string"]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"to_string","","",156,[[["self"]],["string"]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"from","","",157,[[],["t"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,[[["self"],["t"]]]],[11,"to_string","","",157,[[["self"]],["string"]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"to_string","","",158,[[["self"]],["string"]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,[[["self"],["t"]]]],[11,"to_string","","",159,[[["self"]],["string"]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,[[["self"],["t"]]]],[11,"to_string","","",160,[[["self"]],["string"]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,[[["self"],["t"]]]],[11,"to_string","","",161,[[["self"]],["string"]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"to_string","","",162,[[["self"]],["string"]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,[[["self"],["t"]]]],[11,"to_string","","",163,[[["self"]],["string"]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"to_string","","",164,[[["self"]],["string"]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"to_string","","",165,[[["self"]],["string"]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,[[["self"],["t"]]]],[11,"to_string","","",166,[[["self"]],["string"]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,[[["self"],["t"]]]],[11,"to_string","","",167,[[["self"]],["string"]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"to_string","","",168,[[["self"]],["string"]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"to_string","","",169,[[["self"]],["string"]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","sp_std::ops","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"into_iter","","",77,[[],["i"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"into_iter","","",78,[[],["i"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,[[["self"],["t"]]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"into_iter","","",171,[[],["i"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,[[["self"],["t"]]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","sp_std::ptr","",172,[[["t"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,[[["self"],["t"]]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"from","sp_std::rc","",173,[[],["t"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,[[["self"],["t"]]]],[11,"to_string","","",173,[[["self"]],["string"]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,[[["self"],["t"]]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"from","sp_std::result","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"into_iter","","",86,[[],["i"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"into_iter","","",175,[[],["i"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,[[["self"],["t"]]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"into_iter","","",176,[[],["i"]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"into_iter","","",177,[[],["i"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,[[["self"],["t"]]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"from","sp_std::slice","",178,[[["t"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"into_iter","","",178,[[],["i"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"into_iter","","",179,[[],["i"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,[[["self"],["t"]]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"into_iter","","",180,[[],["i"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"into_iter","","",181,[[],["i"]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"into_iter","","",182,[[],["i"]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"into_iter","","",183,[[],["i"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,[[["self"],["t"]]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"into_iter","","",184,[[],["i"]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"into_iter","","",185,[[],["i"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"into_iter","","",186,[[],["i"]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"into_iter","","",187,[[],["i"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,[[["self"],["t"]]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"into_iter","","",188,[[],["i"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"into_iter","","",189,[[],["i"]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"into_iter","","",190,[[],["i"]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"into_iter","","",191,[[],["i"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"into_iter","","",192,[[],["i"]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"into_iter","","",193,[[],["i"]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[],["u"]]],[11,"into_iter","","",194,[[],["i"]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[],["u"]]],[11,"into_iter","","",195,[[],["i"]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[],["u"]]],[11,"into_iter","","",196,[[],["i"]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"from","sp_std::str::pattern","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,[[["self"],["t"]]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,[[["self"],["t"]]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,[[["self"],["t"]]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,[[["self"],["t"]]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"from","sp_std::str","",201,[[["t"]],["t"]]],[11,"into","","",201,[[],["u"]]],[11,"into_iter","","",201,[[],["i"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,[[["self"],["t"]]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[],["u"]]],[11,"into_iter","","",202,[[],["i"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[],["u"]]],[11,"into_iter","","",203,[[],["i"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,[[["self"],["t"]]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[],["u"]]],[11,"into_iter","","",204,[[],["i"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,[[["self"],["t"]]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[],["u"]]],[11,"into_iter","","",205,[[],["i"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,[[["self"],["t"]]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[],["u"]]],[11,"into_iter","","",206,[[],["i"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"to_string","","",207,[[["self"]],["string"]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[],["u"]]],[11,"into_iter","","",208,[[],["i"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"to_string","","",208,[[["self"]],["string"]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[],["u"]]],[11,"into_iter","","",209,[[],["i"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"to_string","","",209,[[["self"]],["string"]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[],["u"]]],[11,"into_iter","","",210,[[],["i"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"to_string","","",210,[[["self"]],["string"]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"to_string","","",211,[[["self"]],["string"]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[],["u"]]],[11,"into_iter","","",212,[[],["i"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,[[["self"],["t"]]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[],["u"]]],[11,"into_iter","","",213,[[],["i"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,[[["self"],["t"]]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[],["u"]]],[11,"into_iter","","",214,[[],["i"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,[[["self"],["t"]]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[],["u"]]],[11,"into_iter","","",215,[[],["i"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[],["u"]]],[11,"into_iter","","",216,[[],["i"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,[[["self"],["t"]]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[],["u"]]],[11,"into_iter","","",217,[[],["i"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,[[["self"],["t"]]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[],["u"]]],[11,"into_iter","","",218,[[],["i"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,[[["self"],["t"]]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[],["u"]]],[11,"into_iter","","",219,[[],["i"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,[[["self"],["t"]]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[],["u"]]],[11,"into_iter","","",220,[[],["i"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,[[["self"],["t"]]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[],["u"]]],[11,"into_iter","","",221,[[],["i"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[],["u"]]],[11,"into_iter","","",222,[[],["i"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[],["u"]]],[11,"into_iter","","",223,[[],["i"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,[[["self"],["t"]]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"from","sp_std::prelude","",224,[[["t"]],["t"]]],[11,"into","","",224,[[],["u"]]],[11,"into_iter","","",224,[[],["i"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"from","sp_std::vec","",225,[[["t"]],["t"]]],[11,"into","","",225,[[],["u"]]],[11,"into_iter","","",225,[[],["i"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,[[["self"],["t"]]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"try_into","","",225,[[],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[],["u"]]],[11,"into_iter","","",226,[[],["i"]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[],["u"]]],[11,"into_iter","","",227,[[],["i"]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[],["u"]]],[11,"into_iter","","",228,[[],["i"]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"from","sp_std::collections::btree_map","",229,[[["t"]],["t"]]],[11,"into","","",229,[[],["u"]]],[11,"into_iter","","",229,[[],["i"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,[[["self"],["t"]]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[],["u"]]],[11,"into_iter","","",230,[[],["i"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,[[["self"],["t"]]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[],["u"]]],[11,"into_iter","","",231,[[],["i"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,[[["self"],["t"]]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into","","",232,[[],["u"]]],[11,"into_iter","","",232,[[],["i"]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"try_into","","",232,[[],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"into","","",233,[[],["u"]]],[11,"into_iter","","",233,[[],["i"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,[[["self"],["t"]]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"try_into","","",233,[[],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into","","",234,[[],["u"]]],[11,"into_iter","","",234,[[],["i"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"try_into","","",234,[[],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into","","",235,[[],["u"]]],[11,"into_iter","","",235,[[],["i"]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into","","",236,[[],["u"]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"into","","",237,[[],["u"]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into","","",238,[[],["u"]]],[11,"into_iter","","",238,[[],["i"]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"try_into","","",238,[[],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"into","","",239,[[],["u"]]],[11,"into_iter","","",239,[[],["i"]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"from","sp_std::collections::btree_set","",240,[[["t"]],["t"]]],[11,"into","","",240,[[],["u"]]],[11,"into_iter","","",240,[[],["i"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,[[["self"],["t"]]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"into","","",241,[[],["u"]]],[11,"into_iter","","",241,[[],["i"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,[[["self"],["t"]]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into","","",242,[[],["u"]]],[11,"into_iter","","",242,[[],["i"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,[[["self"],["t"]]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"into","","",243,[[],["u"]]],[11,"into_iter","","",243,[[],["i"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,[[["self"],["t"]]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into","","",244,[[],["u"]]],[11,"into_iter","","",244,[[],["i"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"into","","",245,[[],["u"]]],[11,"into_iter","","",245,[[],["i"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,[[["self"],["t"]]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into","","",246,[[],["u"]]],[11,"into_iter","","",246,[[],["i"]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into","","",247,[[],["u"]]],[11,"into_iter","","",247,[[],["i"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"from","sp_std::collections::vec_deque","",248,[[["t"]],["t"]]],[11,"into","","",248,[[],["u"]]],[11,"into_iter","","",248,[[],["i"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,[[["self"],["t"]]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into","","",249,[[],["u"]]],[11,"into_iter","","",249,[[],["i"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,[[["self"],["t"]]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into","","",250,[[],["u"]]],[11,"into_iter","","",250,[[],["i"]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into","","",251,[[],["u"]]],[11,"into_iter","","",251,[[],["i"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,[[["self"],["t"]]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"into","","",252,[[],["u"]]],[11,"into_iter","","",252,[[],["i"]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"alloc","sp_std::alloc","",96,[[["layout"],["self"]]]],[11,"alloc_zeroed","","",96,[[["layout"],["self"]]]],[11,"dealloc","","",96,[[["layout"],["self"]]]],[11,"realloc","","",96,[[["layout"],["usize"],["self"]]]],[11,"default","","",96,[[],["system"]]],[11,"default","sp_std::prelude","",103,[[],[["box",["osstr"]],["osstr"]]]],[11,"default","","",103,[[],[["box",["cstr"]],["cstr"]]]],[11,"report","sp_std::result","",86,[[],["i32"]]],[11,"report","","",86,[[],["i32"]]],[11,"write","sp_std::prelude","",103,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"write_vectored","","",103,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"flush","","",103,[[["self"]],[["result",["error"]],["error"]]]],[11,"write_all","","",103,[[["self"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","",103,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"write","","",224,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"write_vectored","","",224,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"write_all","","",224,[[["self"]],[["result",["error"]],["error"]]]],[11,"flush","","",224,[[["self"]],[["result",["error"]],["error"]]]],[11,"description","sp_std::convert","",111,[[["self"]],["str"]]],[11,"description","sp_std::fmt","",112,[[["self"]],["str"]]],[11,"description","sp_std::str","",211,[[["self"]],["str"]]],[11,"description","sp_std::prelude","",103,[[["self"]],["str"]]],[11,"cause","","",103,[[["self"]],[["error"],["option",["error"]]]]],[11,"source","","",103,[[["self"]],[["option",["error"]],["error"]]]],[11,"description","sp_std::cell","",107,[[["self"]],["str"]]],[11,"description","","",106,[[["self"]],["str"]]],[11,"description","sp_std::num","",156,[[["self"]],["str"]]],[11,"description","sp_std::str","",207,[[["self"]],["str"]]],[11,"description","sp_std::num","",157,[[["self"]],["str"]]],[11,"description","","",155,[[["self"]],["str"]]],[11,"read","sp_std::prelude","",103,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"read_vectored","","",103,[[["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"initializer","","",103,[[["self"]],["initializer"]]],[11,"read_to_end","","",103,[[["vec"],["self"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"read_to_string","","",103,[[["self"],["string"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"read_exact","","",103,[[["self"]],[["result",["error"]],["error"]]]],[11,"from","","Converts a [`OsString`] into a [`Box`]`<OsStr>` without…",103,[[["osstring"]],[["box",["osstr"]],["osstr"]]]],[11,"from","","Converts a type of [`Error`] into a box of dyn [`Error`].",103,[[["e"]],[["error"],["box",["error"]]]]],[11,"from","sp_std::rc","",173,[[["cstr"]],[["rc",["cstr"]],["cstr"]]]],[11,"from","sp_std::prelude","Converts a [`CString`] into a [`Box`]`<CStr>` without…",103,[[["cstring"]],[["box",["cstr"]],["cstr"]]]],[11,"from","sp_std::borrow","",5,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","sp_std::prelude","Converts a [`Cow`] into a box of dyn [`Error`].",103,[[["str"],["cow",["str"]]],[["error"],["box",["error"]]]]],[11,"from","sp_std::rc","Converts a [`OsString`] into a [`Rc`]`<OsStr>` without…",173,[[["osstring"]],[["osstr"],["rc",["osstr"]]]]],[11,"from","sp_std::prelude","Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`]…",103,[[["str"],["cow",["str"]]],[["box",["error"]],["error"]]]],[11,"from","sp_std::rc","Converts a `Path` into an `Rc` by copying the `Path` data…",173,[[["path"]],[["path"],["rc",["path"]]]]],[11,"from","","Converts a [`CString`] into a [`Rc`]`<CStr>` without…",173,[[["cstring"]],[["rc",["cstr"]],["cstr"]]]],[11,"from","sp_std::borrow","",5,[[["cstring"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","","",5,[[["pathbuf"]],[["cow",["path"]],["path"]]]],[11,"from","sp_std::rc","Converts a `PathBuf` into an `Rc` by moving the `PathBuf`…",173,[[["pathbuf"]],[["path"],["rc",["path"]]]]],[11,"from","","",173,[[["osstr"]],[["osstr"],["rc",["osstr"]]]]],[11,"from","sp_std::prelude","Converts a type of [`Error`] + [`Send`] + [`Sync`] into a…",103,[[["e"]],[["box",["error"]],["error"]]]],[11,"from","sp_std::borrow","",5,[[["osstr"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","sp_std::prelude","Converts a [`String`] into a box of dyn [`Error`] +…",103,[[["string"]],[["error"],["box",["error"]]]]],[11,"from","","Converts a [`str`] into a box of dyn [`Error`].",103,[[["str"]],[["error"],["box",["error"]]]]],[11,"from","","",103,[[["osstr"]],[["box",["osstr"]],["osstr"]]]],[11,"from","sp_std::borrow","",5,[[["pathbuf"]],[["cow",["path"]],["path"]]]],[11,"from","","",5,[[["osstring"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","","",5,[[["cstr"]],[["cow",["cstr"]],["cstr"]]]],[11,"from","sp_std::prelude","Converts a [`String`] into a box of dyn [`Error`].",103,[[["string"]],[["error"],["box",["error"]]]]],[11,"from","sp_std::borrow","",5,[[["osstring"]],[["osstr"],["cow",["osstr"]]]]],[11,"from","sp_std::prelude","Converts a [`CString`] into a [`Vec`]`<u8>`.",224,[[["cstring"]],[["u8"],["vec",["u8"]]]]],[11,"from","","Converts a [`str`] into a box of dyn [`Error`] + [`Send`]…",103,[[["str"]],[["box",["error"]],["error"]]]],[11,"from","","Converts a `PathBuf` into a `Box<Path>`",103,[[["pathbuf"]],[["box",["path"]],["path"]]]],[11,"from","sp_std::borrow","",5,[[["path"]],[["cow",["path"]],["path"]]]],[11,"from","sp_std::prelude","",103,[[["path"]],[["box",["path"]],["path"]]]],[11,"from","","",103,[[["cstr"]],[["box",["cstr"]],["cstr"]]]],[11,"fmt","sp_std::alloc","",96,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"partial_cmp","sp_std::borrow","",5,[[["self"],["path"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["pathbuf"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["osstr"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["osstring"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["osstring"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["path"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["path"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["osstr"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["osstr"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["pathbuf"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["osstr"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["self"],["path"]],[["ordering"],["option",["ordering"]]]]],[11,"eq","","",5,[[["osstr"],["self"]],["bool"]]],[11,"eq","","",5,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["osstring"]],["bool"]]],[11,"eq","","",5,[[["self"],["path"]],["bool"]]],[11,"eq","","",5,[[["pathbuf"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["path"]],["bool"]]],[11,"eq","","",5,[[["self"],["osstring"]],["bool"]]],[11,"eq","","",5,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",5,[[["self"],["osstr"]],["bool"]]],[11,"eq","","",5,[[["self"],["path"]],["bool"]]],[11,"eq","","",5,[[["self"],["path"]],["bool"]]],[11,"eq","","",5,[[["osstr"],["self"]],["bool"]]],[11,"alloc","sp_std::alloc","",96,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"alloc_zeroed","","",96,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"dealloc","","",96,[[["nonnull",["u8"]],["layout"],["self"],["u8"]]]],[11,"realloc","","",96,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"clone","","",96,[[["self"]],["system"]]],[11,"clone","sp_std::prelude","",103,[[["self"]],[["box",["osstr"]],["osstr"]]]],[11,"clone","","",103,[[["self"]],[["box",["path"]],["path"]]]],[11,"clone","","",103,[[["self"]],[["box",["cstr"]],["cstr"]]]],[11,"fill_buf","","",103,[[["self"]],[["error"],["result",["error"]]]]],[11,"consume","","",103,[[["self"],["usize"]]]],[11,"read_until","","",103,[[["vec"],["self"],["u8"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"read_line","","",103,[[["self"],["string"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"seek","","",103,[[["self"],["seekfrom"]],[["result",["u64","error"]],["u64"],["error"]]]],[11,"as_ref","sp_std::borrow","",5,[[["self"]],["path"]]],[11,"deref_mut","sp_std::mem","",153,[[["self"]],["t"]]],[11,"deref_mut","sp_std::cell","",109,[[["self"]],["t"]]],[11,"into_result","sp_std::result","",86,[[],["result"]]],[11,"from_ok","","",86,[[["t"]],["result"]]],[11,"from_error","","",86,[[["e"]],["result"]]],[11,"fmt","sp_std::num","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"shr_assign","","",44,[[["self"],["usize"]]]],[11,"not","","",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"not","","",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"not","","",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"not","","",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"not","","",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"not","","",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"not","","",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"not","","",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"not","","",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"not","","",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"not","","",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"not","","",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"get","sp_std::ops","",79,[[],["option"]]],[11,"get_mut","","",79,[[],["option"]]],[11,"get_unchecked","","",79,[[]]],[11,"get_unchecked_mut","","",79,[[]]],[11,"index","","",79,[[]]],[11,"index_mut","","",79,[[]]],[11,"get","","",170,[[],["option"]]],[11,"get_mut","","",170,[[],["option"]]],[11,"get_unchecked","","",170,[[]]],[11,"get_unchecked_mut","","",170,[[]]],[11,"index","","",170,[[]]],[11,"index_mut","","",170,[[]]],[11,"get","","",79,[[["str"]],["option"]]],[11,"get_mut","","",79,[[["str"]],["option"]]],[11,"get_unchecked","","",79,[[["str"]]]],[11,"get_unchecked_mut","","",79,[[["str"]]]],[11,"index","","",79,[[["str"]]]],[11,"index_mut","","",79,[[["str"]]]],[11,"get","","",77,[[["str"]],["option"]]],[11,"get_mut","","",77,[[["str"]],["option"]]],[11,"get_unchecked","","",77,[[["str"]]]],[11,"get_unchecked_mut","","",77,[[["str"]]]],[11,"index","","",77,[[["str"]]]],[11,"index_mut","","",77,[[["str"]]]],[11,"get","","",171,[[["str"]],["option"]]],[11,"get_mut","","",171,[[["str"]],["option"]]],[11,"get_unchecked","","",171,[[["str"]]]],[11,"get_unchecked_mut","","",171,[[["str"]]]],[11,"index","","",171,[[["str"]]]],[11,"index_mut","","",171,[[["str"]]]],[11,"get","","",78,[[],["option"]]],[11,"get_mut","","",78,[[],["option"]]],[11,"get_unchecked","","",78,[[]]],[11,"get_unchecked_mut","","",78,[[]]],[11,"index","","",78,[[]]],[11,"index_mut","","",78,[[]]],[11,"get","","",171,[[],["option"]]],[11,"get_mut","","",171,[[],["option"]]],[11,"get_unchecked","","",171,[[]]],[11,"get_unchecked_mut","","",171,[[]]],[11,"index","","",171,[[]]],[11,"index_mut","","",171,[[]]],[11,"get","","",82,[[["str"]],["option"]]],[11,"get_mut","","",82,[[["str"]],["option"]]],[11,"get_unchecked","","",82,[[["str"]]]],[11,"get_unchecked_mut","","",82,[[["str"]]]],[11,"index","","",82,[[["str"]]]],[11,"index_mut","","",82,[[["str"]]]],[11,"get","","",82,[[],["option"]]],[11,"get_mut","","",82,[[],["option"]]],[11,"get_unchecked","","",82,[[]]],[11,"get_unchecked_mut","","",82,[[]]],[11,"index","","",82,[[]]],[11,"index_mut","","",82,[[]]],[11,"get","","",77,[[],["option"]]],[11,"get_mut","","",77,[[],["option"]]],[11,"get_unchecked","","",77,[[]]],[11,"get_unchecked_mut","","",77,[[]]],[11,"index","","",77,[[]]],[11,"index_mut","","",77,[[]]],[11,"get","","",170,[[["str"]],["option"]]],[11,"get_mut","","",170,[[["str"]],["option"]]],[11,"get_unchecked","","",170,[[["str"]]]],[11,"get_unchecked_mut","","",170,[[["str"]]]],[11,"index","","",170,[[["str"]]]],[11,"index_mut","","",170,[[["str"]]]],[11,"get","","",78,[[["str"]],["option"]]],[11,"get_mut","","",78,[[["str"]],["option"]]],[11,"get_unchecked","","",78,[[["str"]]]],[11,"get_unchecked_mut","","",78,[[["str"]]]],[11,"index","","",78,[[["str"]]]],[11,"index_mut","","",78,[[["str"]]]],[11,"shl_assign","sp_std::num","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"shl_assign","","",44,[[["self"],["usize"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitand_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitand_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitand_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"bitand_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"bitand_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"bitand_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitand_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitand_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitand_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]],[["wrapping",["u32"]],["u32"]]]],[11,"shl","","",44,[[["usize"]],[["usize"],["wrapping",["usize"]]]]],[11,"shl","","",44,[[["usize"]],[["i8"],["wrapping",["i8"]]]]],[11,"shl","","",44,[[["usize"]],[["u128"],["wrapping",["u128"]]]]],[11,"shl","","",44,[[["usize"]],[["wrapping",["i128"]],["i128"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]],[["i32"],["wrapping",["i32"]]]]],[11,"shl","","",44,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shl","","",44,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shl","","",44,[[["usize"]],[["wrapping",["u64"]],["u64"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]]]],[11,"shl","","",44,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shl","","",44,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shl","","",44,[[["usize"]]]],[11,"len","sp_std::iter","",139,[[["self"]],["usize"]]],[11,"is_empty","","",139,[[["self"]],["bool"]]],[11,"len","","",130,[[["self"]],["usize"]]],[11,"is_empty","","",130,[[["self"]],["bool"]]],[11,"len","","",125,[[["self"]],["usize"]]],[11,"len","sp_std::str","",204,[[["self"]],["usize"]]],[11,"is_empty","","",204,[[["self"]],["bool"]]],[11,"len","sp_std::iter","",129,[[["self"]],["usize"]]],[11,"is_empty","","",129,[[["self"]],["bool"]]],[11,"len","","",149,[[["self"]],["usize"]]],[11,"is_empty","","",149,[[["self"]],["bool"]]],[11,"len","","",124,[[["self"]],["usize"]]],[11,"is_empty","sp_std::slice","",189,[[["self"]],["bool"]]],[11,"len","sp_std::iter","",138,[[["self"]],["usize"]]],[11,"is_empty","","",138,[[["self"]],["bool"]]],[11,"is_empty","sp_std::slice","",180,[[["self"]],["bool"]]],[11,"len","","",185,[[["self"]],["usize"]]],[11,"is_empty","","",185,[[["self"]],["bool"]]],[11,"len","sp_std::iter","",148,[[["self"]],["usize"]]],[11,"is_empty","","",148,[[["self"]],["bool"]]],[11,"is_empty","sp_std::slice","",188,[[["self"]],["bool"]]],[11,"len","sp_std::iter","",135,[[["self"]],["usize"]]],[11,"is_empty","","",135,[[["self"]],["bool"]]],[11,"len","sp_std::slice","",186,[[["self"]],["usize"]]],[11,"is_empty","","",186,[[["self"]],["bool"]]],[11,"is_empty","","",181,[[["self"]],["bool"]]],[11,"len","sp_std::iter","",122,[[["self"]],["usize"]]],[11,"fmt","sp_std::ptr","",172,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"rem_assign","sp_std::num","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"rem_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"rem_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["wrapping"],["self"]]]],[11,"rem_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"rem_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["wrapping"],["self"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["wrapping"],["self"]]]],[11,"rem_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"rem_assign","","",44,[[["self"],["wrapping"]]]],[11,"rem_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"rem_assign","","",44,[[["wrapping"],["self"]]]],[11,"rem_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"rem_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"sub_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"sub_assign","","",44,[[["wrapping"],["self"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"sub_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"sub_assign","","",44,[[["wrapping"],["self"]]]],[11,"sub_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["wrapping"],["self"]]]],[11,"sub_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"sub_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"sub_assign","","",44,[[["wrapping"],["self"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping"]]]],[11,"sub_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"sub_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"sub_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"clone","","",162,[[["self"]],["nonzeroi8"]]],[11,"clone","","",155,[[["self"]],["parsefloaterror"]]],[11,"clone","sp_std::slice","",180,[[["self"]],["chunksexact"]]],[11,"clone","sp_std::iter","",133,[[["self"]],["chain"]]],[11,"clone","sp_std::hash","",120,[[["self"]],["buildhasherdefault"]]],[11,"clone","sp_std::prelude","",11,[[["self"]],["reverse"]]],[11,"clone","sp_std::any","",102,[[["self"]],["typeid"]]],[11,"clone","sp_std::ops","",85,[[["self"]],["generatorstate"]]],[11,"clone","sp_std::num","",46,[[["self"]],["interrorkind"]]],[11,"clone","","",164,[[["self"]],["nonzerou128"]]],[11,"clone","sp_std::slice","",178,[[["self"]],["chunks"]]],[11,"clone","sp_std::str","",222,[[["self"]],["rsplitterminator"]]],[11,"clone","sp_std::fmt","",112,[[["self"]],["error"]]],[11,"clone","sp_std::str","",212,[[["self"]],["lines"]]],[11,"clone","sp_std::iter","",124,[[["self"]],["once"]]],[11,"clone","sp_std::str","",206,[[["self"]],["chars"]]],[11,"clone","sp_std::iter","",148,[[["self"]],["fuse"]]],[11,"clone","sp_std::result","",175,[[["self"]],["iter"]]],[11,"clone","sp_std::str","",214,[[["self"]],["matchindices"]]],[11,"clone","sp_std::slice","",179,[[["self"]],["windows"]]],[11,"clone","sp_std::num","",167,[[["self"]],["nonzerou64"]]],[11,"clone","sp_std::str","",219,[[["self"]],["split"]]],[11,"clone","sp_std::ops","",79,[[["self"]],["rangeto"]]],[11,"clone","sp_std::iter","",126,[[["self"]],["repeat"]]],[11,"clone","","",130,[[["self"]],["copied"]]],[11,"clone","sp_std::alloc","",99,[[["self"]],["layouterr"]]],[11,"clone","sp_std::ops","",78,[[["self"]],["rangefrom"]]],[11,"clone","sp_std::str","",211,[[["self"]],["utf8error"]]],[11,"clone","sp_std::slice","",185,[[["self"]],["iter"]]],[11,"clone","sp_std::str::pattern","",200,[[["self"]],["strsearcher"]]],[11,"clone","sp_std::alloc","",100,[[["self"]],["layout"]]],[11,"clone","sp_std::cell","Panics",105,[[["self"]],["refcell"]]],[11,"clone","sp_std::hash","",121,[[["self"]],["siphasher"]]],[11,"clone","sp_std::iter","",145,[[["self"]],["skipwhile"]]],[11,"clone","sp_std::num","",45,[[["self"]],["fpcategory"]]],[11,"clone","sp_std::iter","",147,[[["self"]],["takewhile"]]],[11,"clone","sp_std::str","",202,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","","",209,[[["self"]],["escapedefault"]]],[11,"clone","sp_std::marker","",150,[[["self"]],["phantomdata"]]],[11,"clone","sp_std::str","",216,[[["self"]],["matches"]]],[11,"clone","sp_std::iter","",142,[[["self"]],["peekable"]]],[11,"clone","sp_std::str","",220,[[["self"]],["rsplitn"]]],[11,"clone","","",204,[[["self"]],["bytes"]]],[11,"clone","sp_std::marker","",151,[[["self"]],["phantompinned"]]],[11,"clone","sp_std::iter","",123,[[["self"]],["fromfn"]]],[11,"clone","sp_std::slice","",191,[[["self"]],["rsplit"]]],[11,"clone","sp_std::num","",166,[[["self"]],["nonzerou32"]]],[11,"clone","sp_std::mem","",152,[[["self"]],["discriminant"]]],[11,"clone","sp_std::num","",44,[[["self"]],["wrapping"]]],[11,"clone","sp_std::str::pattern","",198,[[["self"]],["charslicesearcher"]]],[11,"clone","sp_std::iter","",146,[[["self"]],["take"]]],[11,"clone","sp_std::str","",217,[[["self"]],["rmatches"]]],[11,"clone","sp_std::iter","",132,[[["self"]],["stepby"]]],[11,"clone","","",137,[[["self"]],["filtermap"]]],[11,"clone","sp_std::str::pattern","",197,[[["self"]],["charsearcher"]]],[11,"clone","sp_std::num","",157,[[["self"]],["tryfrominterror"]]],[11,"clone","sp_std::slice","",187,[[["self"]],["rchunks"]]],[11,"clone","sp_std::iter","",135,[[["self"]],["enumerate"]]],[11,"clone","sp_std::cell","",104,[[["self"]],["cell"]]],[11,"clone","sp_std::num","",165,[[["self"]],["nonzerou16"]]],[11,"clone","","",158,[[["self"]],["nonzeroi128"]]],[11,"clone","","",161,[[["self"]],["nonzeroi64"]]],[11,"clone","","",168,[[["self"]],["nonzerou8"]]],[11,"clone","","",159,[[["self"]],["nonzeroi16"]]],[11,"clone","","",169,[[["self"]],["nonzerousize"]]],[11,"clone","sp_std::ops","",82,[[["self"]],["rangetoinclusive"]]],[11,"clone","sp_std::str::pattern","",91,[[["self"]],["searchstep"]]],[11,"clone","sp_std::str","",210,[[["self"]],["escapeunicode"]]],[11,"clone","","",207,[[["self"]],["parseboolerror"]]],[11,"clone","sp_std::ops","",80,[[["self"]],["bound"]]],[11,"clone","","",77,[[["self"]],["range"]]],[11,"clone","","",170,[[["self"]],["rangefull"]]],[11,"clone","sp_std::cmp","",10,[[["self"]],["ordering"]]],[11,"clone","sp_std::iter","",129,[[["self"]],["cloned"]]],[11,"clone","sp_std::str","",208,[[["self"]],["escapedebug"]]],[11,"clone","","",213,[[["self"]],["linesany"]]],[11,"clone","sp_std::convert","",111,[[["self"]],["infallible"]]],[11,"clone","sp_std::iter","",143,[[["self"]],["scan"]]],[11,"clone","","",131,[[["self"]],["flatten"]]],[11,"clone","sp_std::num","",156,[[["self"]],["parseinterror"]]],[11,"clone","sp_std::str","",205,[[["self"]],["charindices"]]],[11,"clone","sp_std::str::pattern","",199,[[["self"]],["charpredicatesearcher"]]],[11,"clone","sp_std::iter","",144,[[["self"]],["skip"]]],[11,"clone","","",128,[[["self"]],["successors"]]],[11,"clone","sp_std::str","",223,[[["self"]],["splitterminator"]]],[11,"clone","sp_std::iter","",122,[[["self"]],["empty"]]],[11,"clone","sp_std::alloc","",97,[[["self"]],["allocerr"]]],[11,"clone","sp_std::str","",215,[[["self"]],["rmatchindices"]]],[11,"clone","sp_std::iter","",125,[[["self"]],["oncewith"]]],[11,"clone","sp_std::str","",203,[[["self"]],["splitwhitespace"]]],[11,"clone","sp_std::num","",160,[[["self"]],["nonzeroi32"]]],[11,"clone","sp_std::iter","",127,[[["self"]],["repeatwith"]]],[11,"clone","sp_std::result","",86,[[["self"]],["result"]]],[11,"clone_from","","",86,[[["self"],["result"]]]],[11,"clone","sp_std::iter","",149,[[["self"]],["inspect"]]],[11,"clone","","",141,[[["self"]],["flatmap"]]],[11,"clone","","",136,[[["self"]],["filter"]]],[11,"clone","sp_std::slice","",183,[[["self"]],["split"]]],[11,"clone","sp_std::iter","",138,[[["self"]],["map"]]],[11,"clone","sp_std::ptr","",172,[[["self"]],["nonnull"]]],[11,"clone","sp_std::slice","",188,[[["self"]],["rchunksexact"]]],[11,"clone","sp_std::iter","",140,[[["self"]],["zip"]]],[11,"clone","sp_std::ops","",171,[[["self"]],["rangeinclusive"]]],[11,"clone","sp_std::result","",177,[[["self"]],["intoiter"]]],[11,"clone","sp_std::alloc","",98,[[["self"]],["cannotreallocinplace"]]],[11,"clone","sp_std::str","",201,[[["self"]],["encodeutf16"]]],[11,"clone","sp_std::num","",163,[[["self"]],["nonzeroisize"]]],[11,"clone","sp_std::str","",221,[[["self"]],["splitn"]]],[11,"clone","sp_std::iter","",139,[[["self"]],["rev"]]],[11,"clone","sp_std::mem","",154,[[["self"]],["maybeuninit"]]],[11,"clone","sp_std::iter","",134,[[["self"]],["cycle"]]],[11,"clone","sp_std::fmt","",113,[[["self"]],["arguments"]]],[11,"clone","sp_std::mem","",153,[[["self"]],["manuallydrop"]]],[11,"clone","sp_std::str","",218,[[["self"]],["rsplit"]]],[11,"into_iter","sp_std::result","Returns a consuming iterator over the possibly contained…",86,[[],["intoiter"]]],[11,"bitxor","sp_std::num","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"bitxor","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"bitxor","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitxor","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitxor","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitxor","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitxor","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitxor","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"bitxor","","",44,[[["wrapping"]]]],[11,"write","sp_std::hash","",121,[[["self"]]]],[11,"finish","","",121,[[["self"]],["u64"]]],[11,"next_back","sp_std::slice","",191,[[["self"]],["option"]]],[11,"next_back","sp_std::str","",215,[[["self"]],["option"]]],[11,"next_back","","",213,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::slice","",192,[[["self"]],["option"]]],[11,"next_back","sp_std::iter","",137,[[["self"]],["option"]]],[11,"try_rfold","","",137,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",137,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",141,[[["self"]],["option"]]],[11,"try_rfold","","",141,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",141,[[["acc"],["fold"]],["acc"]]],[11,"next_back","sp_std::slice","",179,[[["self"]],["option"]]],[11,"nth_back","","",179,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::str","",214,[[["self"]],["option"]]],[11,"next_back","sp_std::slice","",183,[[["self"]],["option"]]],[11,"next_back","sp_std::iter","",138,[[["self"]],["option"]]],[11,"try_rfold","","",138,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",138,[[["acc"],["g"]],["acc"]]],[11,"next_back","sp_std::slice","",187,[[["self"]],["option"]]],[11,"nth_back","","",187,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::str","",202,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::ops","",171,[[["self"]],["option"]]],[11,"nth_back","","",171,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",171,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","sp_std::iter","",122,[[["self"]],["option"]]],[11,"next_back","sp_std::slice","",190,[[["self"]],["option"]]],[11,"nth_back","","",190,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::str","",203,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::iter","",135,[[["self"]],["option"]]],[11,"nth_back","","",135,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",135,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",135,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",139,[[["self"]],["option"]]],[11,"nth_back","","",139,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",139,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",139,[[["acc"],["f"]],["acc"]]],[11,"rfind","","",139,[[["self"],["p"]],["option"]]],[11,"next_back","","",136,[[["self"]],["option"]]],[11,"try_rfold","","",136,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",136,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",133,[[["self"]],["option"]]],[11,"nth_back","","",133,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",133,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",133,[[["acc"],["f"]],["acc"]]],[11,"next_back","sp_std::result","",177,[[["self"]],["option"]]],[11,"next_back","sp_std::iter","",130,[[["self"]],["option"]]],[11,"try_rfold","","",130,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",130,[[["acc"],["f"]],["acc"]]],[11,"next_back","sp_std::str","",204,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"nth_back","","",204,[[["self"],["usize"]],["option"]]],[11,"rfind","","",204,[[["self"],["p"]],["option"]]],[11,"next_back","sp_std::slice","",185,[[["self"]],[["t"],["option"]]]],[11,"nth_back","","",185,[[["self"],["usize"]],[["t"],["option"]]]],[11,"next_back","","",184,[[["self"]],["option"]]],[11,"next_back","","",181,[[["self"]],["option"]]],[11,"nth_back","","",181,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::result","",175,[[["self"]],[["t"],["option"]]]],[11,"next_back","sp_std::iter","",129,[[["self"]],["option"]]],[11,"try_rfold","","",129,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",129,[[["acc"],["f"]],["acc"]]],[11,"next_back","sp_std::slice","",182,[[["self"]],["option"]]],[11,"nth_back","","",182,[[["self"],["usize"]],["option"]]],[11,"next_back","","",186,[[["self"]],[["t"],["option"]]]],[11,"nth_back","","",186,[[["self"],["usize"]],[["t"],["option"]]]],[11,"next_back","sp_std::iter","",140,[[["self"]],["option"]]],[11,"next_back","","",124,[[["self"]],["option"]]],[11,"next_back","","",146,[[["self"]],["option"]]],[11,"nth_back","","",146,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",146,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","","",144,[[["self"]],["option"]]],[11,"nth_back","","",144,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",144,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","sp_std::str","",216,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::slice","",178,[[["self"]],["option"]]],[11,"nth_back","","",178,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::iter","",148,[[["self"]],["option"]]],[11,"nth_back","","",148,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",148,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",148,[[["acc"],["fold"]],["acc"]]],[11,"next_back","sp_std::str","",217,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::iter","",149,[[["self"]],["option"]]],[11,"try_rfold","","",149,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",149,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",125,[[["self"]],["option"]]],[11,"next_back","sp_std::str","",218,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","","",222,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","","",212,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","sp_std::slice","",180,[[["self"]],["option"]]],[11,"nth_back","","",180,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::str","",205,[[["self"]],["option"]]],[11,"next_back","","",206,[[["self"]],[["char"],["option",["char"]]]]],[11,"next_back","sp_std::iter","",126,[[["self"]],["option"]]],[11,"next_back","sp_std::slice","",189,[[["self"]],["option"]]],[11,"nth_back","","",189,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::result","",176,[[["self"]],[["t"],["option"]]]],[11,"next_back","sp_std::ops","",77,[[["self"]],["option"]]],[11,"nth_back","","",77,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::slice","",188,[[["self"]],["option"]]],[11,"nth_back","","",188,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::iter","",131,[[["self"]],["option"]]],[11,"try_rfold","","",131,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",131,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",142,[[["self"]],["option"]]],[11,"try_rfold","","",142,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",142,[[["acc"],["fold"]],["acc"]]],[11,"next_back","","",132,[[["self"]],["option"]]],[11,"nth_back","","",132,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",132,[[["self"],["acc"],["f"]],["r"]]],[11,"next_back","","",148,[[["self"]],["option"]]],[11,"nth_back","","",148,[[["self"],["usize"]],["option"]]],[11,"try_rfold","","",148,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",148,[[["acc"],["fold"]],["acc"]]],[11,"next_back","sp_std::str","",219,[[["self"]],[["str"],["option",["str"]]]]],[11,"next_back","","",223,[[["self"]],[["str"],["option",["str"]]]]],[11,"haystack","sp_std::str::pattern","",198,[[["self"]],["str"]]],[11,"next","","",198,[[["self"]],["searchstep"]]],[11,"next_match","","",198,[[["self"]],["option"]]],[11,"next_reject","","",198,[[["self"]],["option"]]],[11,"haystack","","",200,[[["self"]],["str"]]],[11,"next","","",200,[[["self"]],["searchstep"]]],[11,"next_match","","",200,[[["self"]],["option"]]],[11,"haystack","","",197,[[["self"]],["str"]]],[11,"next","","",197,[[["self"]],["searchstep"]]],[11,"next_match","","",197,[[["self"]],["option"]]],[11,"haystack","","",199,[[["self"]],["str"]]],[11,"next","","",199,[[["self"]],["searchstep"]]],[11,"next_match","","",199,[[["self"]],["option"]]],[11,"next_reject","","",199,[[["self"]],["option"]]],[11,"build_hasher","sp_std::hash","",120,[[["self"]],["h"]]],[11,"bitor","sp_std::num","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitor","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitor","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitor","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"bitor","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitor","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"bitor","","",44,[[["wrapping"]]]],[11,"bitor","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"eq","sp_std::convert","",111,[[["infallible"],["self"]],["bool"]]],[11,"eq","sp_std::ops","",78,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",78,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","sp_std::cell","Panics",105,[[["self"],["refcell"]],["bool"]]],[11,"eq","sp_std::str","",207,[[["parseboolerror"],["self"]],["bool"]]],[11,"ne","","",207,[[["parseboolerror"],["self"]],["bool"]]],[11,"eq","sp_std::ops","",170,[[["rangefull"],["self"]],["bool"]]],[11,"eq","sp_std::alloc","",97,[[["self"],["allocerr"]],["bool"]]],[11,"eq","","",100,[[["layout"],["self"]],["bool"]]],[11,"ne","","",100,[[["layout"],["self"]],["bool"]]],[11,"eq","sp_std::ops","",171,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","sp_std::num","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ne","","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"eq","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"ne","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"eq","","",157,[[["tryfrominterror"],["self"]],["bool"]]],[11,"ne","","",157,[[["tryfrominterror"],["self"]],["bool"]]],[11,"eq","","",155,[[["parsefloaterror"],["self"]],["bool"]]],[11,"ne","","",155,[[["parsefloaterror"],["self"]],["bool"]]],[11,"eq","sp_std::ops","",79,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",79,[[["self"],["rangeto"]],["bool"]]],[11,"eq","sp_std::num","",44,[[["self"],["wrapping"]],["bool"]]],[11,"ne","","",44,[[["self"],["wrapping"]],["bool"]]],[11,"eq","sp_std::cmp","",10,[[["ordering"],["self"]],["bool"]]],[11,"eq","sp_std::mem","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"ne","","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"eq","sp_std::marker","",150,[[["phantomdata"],["self"]],["bool"]]],[11,"eq","sp_std::num","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"ne","","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"eq","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"ne","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"eq","sp_std::ptr","",172,[[["nonnull"],["self"]],["bool"]]],[11,"eq","sp_std::alloc","",99,[[["layouterr"],["self"]],["bool"]]],[11,"ne","","",99,[[["layouterr"],["self"]],["bool"]]],[11,"eq","sp_std::num","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ne","","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"eq","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ne","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"eq","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"ne","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"eq","sp_std::any","",102,[[["typeid"],["self"]],["bool"]]],[11,"ne","","",102,[[["typeid"],["self"]],["bool"]]],[11,"eq","sp_std::ops","",77,[[["self"],["range"]],["bool"]]],[11,"ne","","",77,[[["self"],["range"]],["bool"]]],[11,"eq","sp_std::num","",156,[[["self"],["parseinterror"]],["bool"]]],[11,"ne","","",156,[[["self"],["parseinterror"]],["bool"]]],[11,"eq","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"ne","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"eq","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"ne","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"eq","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"ne","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"eq","","",45,[[["fpcategory"],["self"]],["bool"]]],[11,"eq","sp_std::fmt","",112,[[["error"],["self"]],["bool"]]],[11,"eq","sp_std::str","",211,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",211,[[["self"],["utf8error"]],["bool"]]],[11,"eq","sp_std::alloc","",98,[[["self"],["cannotreallocinplace"]],["bool"]]],[11,"eq","sp_std::ops","",82,[[["rangetoinclusive"],["self"]],["bool"]]],[11,"ne","","",82,[[["rangetoinclusive"],["self"]],["bool"]]],[11,"eq","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"ne","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"eq","sp_std::num","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"ne","","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"eq","sp_std::ops","",80,[[["bound"],["self"]],["bool"]]],[11,"ne","","",80,[[["bound"],["self"]],["bool"]]],[11,"eq","sp_std::result","",86,[[["self"],["result"]],["bool"]]],[11,"ne","","",86,[[["self"],["result"]],["bool"]]],[11,"eq","sp_std::hash","",120,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","sp_std::marker","",151,[[["phantompinned"],["self"]],["bool"]]],[11,"eq","sp_std::mem","",152,[[["discriminant"],["self"]],["bool"]]],[11,"eq","sp_std::str::pattern","",91,[[["searchstep"],["self"]],["bool"]]],[11,"ne","","",91,[[["searchstep"],["self"]],["bool"]]],[11,"eq","sp_std::num","",46,[[["interrorkind"],["self"]],["bool"]]],[11,"eq","sp_std::prelude","",11,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",11,[[["self"],["reverse"]],["bool"]]],[11,"eq","sp_std::cell","",104,[[["cell"],["self"]],["bool"]]],[11,"eq","sp_std::num","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"ne","","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"fmt","sp_std::str","",210,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",98,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",99,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",208,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::fmt","",112,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",155,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",107,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",209,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",211,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",156,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",109,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::convert","",111,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",97,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::fmt","",113,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",157,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",207,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",106,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",108,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"sum","sp_std::num","",44,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"sum","","",44,[[["i"]],[["usize"],["wrapping",["usize"]]]]],[11,"sum","","",44,[[["i"]],[["i32"],["wrapping",["i32"]]]]],[11,"sum","","",44,[[["i"]],[["i32"],["wrapping",["i32"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"sum","","",44,[[["i"]],[["usize"],["wrapping",["usize"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u32"]],["u32"]]]],[11,"sum","","",44,[[["i"]],[["u128"],["wrapping",["u128"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"sum","","",44,[[["i"]],[["u128"],["wrapping",["u128"]]]]],[11,"sum","","",44,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"sum","","",44,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","","",44,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u32"]],["u32"]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","","",44,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"sum","","",44,[[["i"]],[["i8"],["wrapping",["i8"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"sum","","",44,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"sum","sp_std::result","Takes each element in the `Iterator`: if it is an `Err`,…",86,[[["i"]],["result"]]],[11,"sum","sp_std::num","",44,[[["i"]],[["i8"],["wrapping",["i8"]]]]],[11,"sum","","",44,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"sum","","",44,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"neg","","",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"neg","","",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"neg","","",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"neg","","",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"neg","","",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"neg","","",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"neg","","",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"neg","","",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"neg","","",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"neg","","",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"neg","","",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"neg","","",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"div","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"div","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"div","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"div","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"div","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"div","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"div","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"div","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"div","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"bitand","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"bitand","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"bitand","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"bitand","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["wrapping"]]]],[11,"bitand","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"bitand","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"bitand","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"fmt","sp_std::iter","",142,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",206,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",212,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",130,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::fmt","",21,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",222,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",201,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",220,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::convert","",111,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",144,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",85,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",131,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",216,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",129,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",203,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",140,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",179,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",82,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",139,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str::pattern","",200,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",77,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",99,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",46,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::result","",176,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",196,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",149,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",157,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::any","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::fmt","",113,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",100,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",211,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",215,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",125,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",183,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",190,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",135,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",180,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",134,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",188,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",123,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",138,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",145,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",98,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",136,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::any","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ptr","",172,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::mem","",152,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",218,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",181,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",128,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",78,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",126,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",209,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::hash","",121,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::result","",86,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",108,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",104,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",187,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",171,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",189,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",217,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::mem","",153,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str::pattern","",199,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",178,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",137,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",79,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",186,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",122,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::mem","",154,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",170,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str::pattern","",198,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",195,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",107,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",221,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",214,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",193,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",223,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::marker","",150,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",133,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",207,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::fmt","",112,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::marker","",151,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cmp","",10,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",191,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",184,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",210,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",155,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",148,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",213,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",143,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::prelude","",11,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",202,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",219,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",132,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",97,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",204,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",192,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",146,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::ops","",80,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",156,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",105,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::any","",3,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",182,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str::pattern","",197,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",205,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",109,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::hash","",120,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",124,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::result","",175,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",127,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str","",208,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",106,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",185,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",1,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::result","",177,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::cell","",110,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::num","",45,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",141,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::slice","",194,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::iter","",147,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::str::pattern","",91,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::any","",102,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"bitor_assign","sp_std::num","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitor_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitor_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitor_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitor_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitor_assign","","",44,[[["self"],["wrapping"]]]],[11,"cmp","","",164,[[["self"],["nonzerou128"]],["ordering"]]],[11,"cmp","","",168,[[["self"],["nonzerou8"]],["ordering"]]],[11,"cmp","sp_std::result","",86,[[["self"],["result"]],["ordering"]]],[11,"cmp","sp_std::marker","",151,[[["phantompinned"],["self"]],["ordering"]]],[11,"cmp","sp_std::num","",44,[[["self"],["wrapping"]],["ordering"]]],[11,"cmp","sp_std::convert","",111,[[["infallible"],["self"]],["ordering"]]],[11,"cmp","sp_std::cell","Panics",105,[[["self"],["refcell"]],["ordering"]]],[11,"cmp","sp_std::mem","",153,[[["manuallydrop"],["self"]],["ordering"]]],[11,"cmp","sp_std::num","",169,[[["nonzerousize"],["self"]],["ordering"]]],[11,"cmp","","",159,[[["self"],["nonzeroi16"]],["ordering"]]],[11,"cmp","","",163,[[["self"],["nonzeroisize"]],["ordering"]]],[11,"cmp","","",158,[[["self"],["nonzeroi128"]],["ordering"]]],[11,"cmp","sp_std::ptr","",172,[[["nonnull"],["self"]],["ordering"]]],[11,"cmp","sp_std::fmt","",112,[[["error"],["self"]],["ordering"]]],[11,"cmp","sp_std::cell","",104,[[["cell"],["self"]],["ordering"]]],[11,"cmp","sp_std::num","",166,[[["self"],["nonzerou32"]],["ordering"]]],[11,"cmp","","",160,[[["self"],["nonzeroi32"]],["ordering"]]],[11,"cmp","sp_std::any","",102,[[["typeid"],["self"]],["ordering"]]],[11,"cmp","sp_std::num","",162,[[["nonzeroi8"],["self"]],["ordering"]]],[11,"cmp","","",161,[[["nonzeroi64"],["self"]],["ordering"]]],[11,"cmp","sp_std::prelude","",11,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","sp_std::cmp","",10,[[["ordering"],["self"]],["ordering"]]],[11,"cmp","sp_std::num","",165,[[["nonzerou16"],["self"]],["ordering"]]],[11,"cmp","","",167,[[["nonzerou64"],["self"]],["ordering"]]],[11,"cmp","sp_std::marker","",150,[[["phantomdata"],["self"]],["ordering"]]],[11,"cmp","sp_std::ops","",85,[[["generatorstate"],["self"]],["ordering"]]],[11,"mul","sp_std::num","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"mul","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"mul","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"mul","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"mul","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"mul","","",44,[[["wrapping"]]]],[11,"mul","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"fmt","","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"as_ref","sp_std::slice","",185,[[["self"]]]],[11,"deref","sp_std::cell","",108,[[["self"]],["t"]]],[11,"deref","","",109,[[["self"]],["t"]]],[11,"deref","sp_std::mem","",153,[[["self"]],["t"]]],[11,"mul_assign","sp_std::num","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"mul_assign","","",44,[[["wrapping"],["self"]]]],[11,"mul_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"mul_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"mul_assign","","",44,[[["wrapping"],["self"]]]],[11,"mul_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"mul_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"mul_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["wrapping"],["self"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"mul_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"mul_assign","","",44,[[["wrapping"],["self"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"mul_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"mul_assign","","",44,[[["self"],["wrapping"]]]],[11,"from_str","","",158,[[["str"]],[["nonzeroi128"],["result",["nonzeroi128"]]]]],[11,"from_str","","",161,[[["str"]],[["result",["nonzeroi64"]],["nonzeroi64"]]]],[11,"from_str","","",164,[[["str"]],[["nonzerou128"],["result",["nonzerou128"]]]]],[11,"from_str","","",165,[[["str"]],[["result",["nonzerou16"]],["nonzerou16"]]]],[11,"from_str","","",163,[[["str"]],[["nonzeroisize"],["result",["nonzeroisize"]]]]],[11,"from_str","","",168,[[["str"]],[["result",["nonzerou8"]],["nonzerou8"]]]],[11,"from_str","","",166,[[["str"]],[["result",["nonzerou32"]],["nonzerou32"]]]],[11,"from_str","","",169,[[["str"]],[["nonzerousize"],["result",["nonzerousize"]]]]],[11,"from_str","","",160,[[["str"]],[["nonzeroi32"],["result",["nonzeroi32"]]]]],[11,"from_str","","",167,[[["str"]],[["nonzerou64"],["result",["nonzerou64"]]]]],[11,"from_str","","",159,[[["str"]],[["result",["nonzeroi16"]],["nonzeroi16"]]]],[11,"from_str","","",162,[[["str"]],[["nonzeroi8"],["result",["nonzeroi8"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"sub","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"sub","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"sub","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"sub","","",44,[[["wrapping"]]]],[11,"sub","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"sub","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"write_str","sp_std::fmt","",119,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_char","","",119,[[["self"],["char"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","",119,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"hash","sp_std::num","",166,[[["self"],["__h"]]]],[11,"hash","sp_std::ops","",171,[[["self"],["h"]]]],[11,"hash","sp_std::ptr","",172,[[["self"],["h"]]]],[11,"hash","sp_std::num","",169,[[["self"],["__h"]]]],[11,"hash","sp_std::prelude","",11,[[["self"],["__h"]]]],[11,"hash","sp_std::fmt","",112,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",158,[[["self"],["__h"]]]],[11,"hash","sp_std::marker","",150,[[["self"],["h"]]]],[11,"hash","sp_std::ops","",77,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",44,[[["self"],["__h"]]]],[11,"hash","","",160,[[["self"],["__h"]]]],[11,"hash","sp_std::cmp","",10,[[["self"],["__h"]]]],[11,"hash","sp_std::result","",86,[[["self"],["__h"]]]],[11,"hash","sp_std::mem","",152,[[["self"],["h"]]]],[11,"hash","sp_std::ops","",85,[[["self"],["__h"]]]],[11,"hash","sp_std::mem","",153,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",168,[[["self"],["__h"]]]],[11,"hash","sp_std::ops","",80,[[["self"],["__h"]]]],[11,"hash","","",78,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",161,[[["self"],["__h"]]]],[11,"hash","","",164,[[["self"],["__h"]]]],[11,"hash","sp_std::ops","",170,[[["self"],["__h"]]]],[11,"hash","","",82,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",163,[[["self"],["__h"]]]],[11,"hash","","",165,[[["self"],["__h"]]]],[11,"hash","sp_std::any","",102,[[["self"],["__h"]]]],[11,"hash","sp_std::marker","",151,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",167,[[["self"],["__h"]]]],[11,"hash","sp_std::ops","",79,[[["self"],["__h"]]]],[11,"hash","sp_std::num","",159,[[["self"],["__h"]]]],[11,"hash","","",162,[[["self"],["__h"]]]],[11,"shr","","",44,[[["usize"]],[["u16"],["wrapping",["u16"]]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["wrapping",["u32"]],["u32"]]]],[11,"shr","","",44,[[["usize"]],[["wrapping",["u64"]],["u64"]]]],[11,"shr","","",44,[[["usize"]],[["i8"],["wrapping",["i8"]]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["usize"],["wrapping",["usize"]]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["i32"],["wrapping",["i32"]]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["i64"],["wrapping",["i64"]]]]],[11,"shr","","",44,[[["usize"]],[["wrapping",["i16"]],["i16"]]]],[11,"shr","","",44,[[["usize"]],[["wrapping",["u8"]],["u8"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["isize"],["wrapping",["isize"]]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]],[["u128"],["wrapping",["u128"]]]]],[11,"shr","","",44,[[["usize"]],[["wrapping",["i128"]],["i128"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"shr","","",44,[[["usize"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"add","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"add","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"add","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"add","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["wrapping"]]]],[11,"add","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"product","","",44,[[["i"]],[["i32"],["wrapping",["i32"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u64"]],["u64"]]]],[11,"product","","",44,[[["i"]],[["u128"],["wrapping",["u128"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","","",44,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"product","","",44,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"product","","",44,[[["i"]],[["i32"],["wrapping",["i32"]]]]],[11,"product","","",44,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","sp_std::result","Takes each element in the `Iterator`: if it is an `Err`,…",86,[[["i"]],["result"]]],[11,"product","sp_std::num","",44,[[["i"]],[["usize"],["wrapping",["usize"]]]]],[11,"product","","",44,[[["i"]],[["i8"],["wrapping",["i8"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"product","","",44,[[["i"]],[["wrapping",["i16"]],["i16"]]]],[11,"product","","",44,[[["i"]],[["wrapping",["i128"]],["i128"]]]],[11,"product","","",44,[[["i"]],[["u128"],["wrapping",["u128"]]]]],[11,"product","","",44,[[["i"]],[["u16"],["wrapping",["u16"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","","",44,[[["i"]],[["usize"],["wrapping",["usize"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u8"]],["u8"]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u32"]],["u32"]]]],[11,"product","","",44,[[["i"]],[["isize"],["wrapping",["isize"]]]]],[11,"product","","",44,[[["i"]],[["wrapping",["u32"]],["u32"]]]],[11,"product","","",44,[[["i"]],[["i8"],["wrapping",["i8"]]]]],[11,"product","","",44,[[["i"]],[["i64"],["wrapping",["i64"]]]]],[11,"fmt","","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"start_bound","sp_std::ops","",79,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",79,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",82,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",82,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",78,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",78,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",78,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",78,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",170,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",170,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",171,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",171,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",79,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",79,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",171,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",171,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",77,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",77,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",82,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",82,[[["self"]],[["t"],["bound"]]]],[11,"start_bound","","",77,[[["self"]],[["t"],["bound"]]]],[11,"end_bound","","",77,[[["self"]],[["t"],["bound"]]]],[11,"from","sp_std::num","",158,[[["nonzerou64"]],["nonzeroi128"]]],[11,"from","sp_std::ptr","",172,[[["unique"]],["nonnull"]]],[11,"from","sp_std::num","",161,[[["nonzerou8"]],["nonzeroi64"]]],[11,"from","","",164,[[["nonzerou8"]],["nonzerou128"]]],[11,"from","","",163,[[["nonzeroi16"]],["nonzeroisize"]]],[11,"from","","",158,[[["nonzeroi16"]],["nonzeroi128"]]],[11,"from","","",157,[[["infallible"]],["tryfrominterror"]]],[11,"from","","",160,[[["nonzeroi16"]],["nonzeroi32"]]],[11,"from","","",161,[[["nonzeroi32"]],["nonzeroi64"]]],[11,"from","","",160,[[["nonzerou8"]],["nonzeroi32"]]],[11,"from","","",157,[[],["tryfrominterror"]]],[11,"from","sp_std::convert","",111,[[],["infallible"]]],[11,"from","sp_std::num","",166,[[["nonzerou8"]],["nonzerou32"]]],[11,"from","","",159,[[["nonzeroi8"]],["nonzeroi16"]]],[11,"from","","",161,[[["nonzeroi16"]],["nonzeroi64"]]],[11,"from","","",166,[[["nonzerou16"]],["nonzerou32"]]],[11,"from","","",160,[[["nonzeroi8"]],["nonzeroi32"]]],[11,"from","","",158,[[["nonzeroi64"]],["nonzeroi128"]]],[11,"from","sp_std::cell","",104,[[["t"]],["cell"]]],[11,"from","sp_std::num","",163,[[["nonzerou8"]],["nonzeroisize"]]],[11,"from","","",161,[[["nonzerou16"]],["nonzeroi64"]]],[11,"from","","",161,[[["nonzerou32"]],["nonzeroi64"]]],[11,"from","","",164,[[["nonzerou64"]],["nonzerou128"]]],[11,"from","","",167,[[["nonzerou16"]],["nonzerou64"]]],[11,"from","","",167,[[["nonzerou8"]],["nonzerou64"]]],[11,"from","","",169,[[["nonzerou8"]],["nonzerousize"]]],[11,"from","","",158,[[["nonzerou32"]],["nonzeroi128"]]],[11,"from","","",158,[[["nonzerou8"]],["nonzeroi128"]]],[11,"from","","",159,[[["nonzerou8"]],["nonzeroi16"]]],[11,"from","","",169,[[["nonzerou16"]],["nonzerousize"]]],[11,"from","","",158,[[["nonzeroi8"]],["nonzeroi128"]]],[11,"from","","",164,[[["nonzerou32"]],["nonzerou128"]]],[11,"from","","",158,[[["nonzeroi32"]],["nonzeroi128"]]],[11,"from","","",164,[[["nonzerou16"]],["nonzerou128"]]],[11,"from","","",161,[[["nonzeroi8"]],["nonzeroi64"]]],[11,"from","sp_std::cell","",105,[[["t"]],["refcell"]]],[11,"from","sp_std::num","",160,[[["nonzerou16"]],["nonzeroi32"]]],[11,"from","","",165,[[["nonzerou8"]],["nonzerou16"]]],[11,"from","sp_std::ptr","",172,[[["t"]],["nonnull"]]],[11,"from","","",172,[[["t"]],["nonnull"]]],[11,"from","sp_std::num","",167,[[["nonzerou32"]],["nonzerou64"]]],[11,"from","","",163,[[["nonzeroi8"]],["nonzeroisize"]]],[11,"from","","",158,[[["nonzerou16"]],["nonzeroi128"]]],[11,"from","sp_std::cell","",110,[[["t"]],["unsafecell"]]],[11,"default","sp_std::hash","",121,[[],["siphasher"]]],[11,"default","sp_std::prelude","",11,[[],["reverse"]]],[11,"default","sp_std::cell","Creates an `UnsafeCell`, with the `Default` value for T.",110,[[],["unsafecell"]]],[11,"default","sp_std::marker","",150,[[],["phantomdata"]]],[11,"default","sp_std::fmt","",112,[[],["error"]]],[11,"default","sp_std::iter","",122,[[],["empty"]]],[11,"default","sp_std::cell","Creates a `RefCell<T>`, with the `Default` value for T.",105,[[],["refcell"]]],[11,"default","","Creates a `Cell<T>`, with the `Default` value for T.",104,[[],["cell"]]],[11,"default","sp_std::hash","",120,[[],["buildhasherdefault"]]],[11,"default","sp_std::num","",44,[[],["wrapping"]]],[11,"default","sp_std::mem","",153,[[],["manuallydrop"]]],[11,"next_back","sp_std::str::pattern","",199,[[["self"]],["searchstep"]]],[11,"next_match_back","","",199,[[["self"]],["option"]]],[11,"next_reject_back","","",199,[[["self"]],["option"]]],[11,"next_back","","",198,[[["self"]],["searchstep"]]],[11,"next_match_back","","",198,[[["self"]],["option"]]],[11,"next_reject_back","","",198,[[["self"]],["option"]]],[11,"next_back","","",197,[[["self"]],["searchstep"]]],[11,"next_match_back","","",197,[[["self"]],["option"]]],[11,"next_back","","",200,[[["self"]],["searchstep"]]],[11,"next_match_back","","",200,[[["self"]],["option"]]],[11,"next","sp_std::iter","",127,[[["self"]],["option"]]],[11,"size_hint","","",127,[[["self"]]]],[11,"next","","",122,[[["self"]],["option"]]],[11,"size_hint","","",122,[[["self"]]]],[11,"next","sp_std::result","",176,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",176,[[["self"]]]],[11,"next","sp_std::str","",203,[[["self"]],[["str"],["option",["str"]]]]],[11,"size_hint","","",203,[[["self"]]]],[11,"last","","",203,[[],[["str"],["option",["str"]]]]],[11,"next","sp_std::iter","",137,[[["self"]],["option"]]],[11,"size_hint","","",137,[[["self"]]]],[11,"try_fold","","",137,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",137,[[["acc"],["fold"]],["acc"]]],[11,"next","","",130,[[["self"]],["option"]]],[11,"size_hint","","",130,[[["self"]]]],[11,"try_fold","","",130,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",130,[[["acc"],["f"]],["acc"]]],[11,"next","sp_std::str","",206,[[["self"]],[["char"],["option",["char"]]]]],[11,"count","","",206,[[],["usize"]]],[11,"size_hint","","",206,[[["self"]]]],[11,"last","","",206,[[],[["char"],["option",["char"]]]]],[11,"next","sp_std::iter","",134,[[["self"]],["option"]]],[11,"size_hint","","",134,[[["self"]]]],[11,"try_fold","","",134,[[["self"],["acc"],["f"]],["r"]]],[11,"next","sp_std::slice","",185,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",185,[[["self"]]]],[11,"count","","",185,[[],["usize"]]],[11,"nth","","",185,[[["self"],["usize"]],[["t"],["option"]]]],[11,"last","","",185,[[],[["t"],["option"]]]],[11,"position","","",185,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",185,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"is_sorted_by","","",185,[[["f"]],["bool"]]],[11,"next","sp_std::iter","",141,[[["self"]],["option"]]],[11,"size_hint","","",141,[[["self"]]]],[11,"try_fold","","",141,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",141,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::str","",202,[[["self"]],[["str"],["option",["str"]]]]],[11,"size_hint","","",202,[[["self"]]]],[11,"last","","",202,[[],[["str"],["option",["str"]]]]],[11,"next","sp_std::iter","",147,[[["self"]],["option"]]],[11,"size_hint","","",147,[[["self"]]]],[11,"try_fold","","",147,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","sp_std::str","",208,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",208,[[["self"]]]],[11,"try_fold","","",208,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",208,[[["acc"],["fold"]],["acc"]]],[11,"next","","",219,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","","",217,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","sp_std::iter","",139,[[["self"]],["option"]]],[11,"size_hint","","",139,[[["self"]]]],[11,"nth","","",139,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",139,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",139,[[["acc"],["f"]],["acc"]]],[11,"find","","",139,[[["self"],["p"]],["option"]]],[11,"next","sp_std::ops","",171,[[["self"]],["option"]]],[11,"size_hint","","",171,[[["self"]]]],[11,"nth","","",171,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",171,[[["self"],["b"],["f"]],["r"]]],[11,"last","","",171,[[],["option"]]],[11,"min","","",171,[[],["option"]]],[11,"max","","",171,[[],["option"]]],[11,"next","sp_std::str","",201,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"size_hint","","",201,[[["self"]]]],[11,"next","sp_std::result","",177,[[["self"]],["option"]]],[11,"size_hint","","",177,[[["self"]]]],[11,"next","sp_std::str","",205,[[["self"]],["option"]]],[11,"count","","",205,[[],["usize"]]],[11,"size_hint","","",205,[[["self"]]]],[11,"last","","",205,[[],["option"]]],[11,"next","sp_std::slice","",193,[[["self"]],["option"]]],[11,"size_hint","","",193,[[["self"]]]],[11,"next","","",183,[[["self"]],["option"]]],[11,"size_hint","","",183,[[["self"]]]],[11,"next","","",187,[[["self"]],["option"]]],[11,"size_hint","","",187,[[["self"]]]],[11,"count","","",187,[[],["usize"]]],[11,"nth","","",187,[[["self"],["usize"]],["option"]]],[11,"last","","",187,[[],["option"]]],[11,"next","sp_std::ops","",77,[[["self"]],["option"]]],[11,"size_hint","","",77,[[["self"]]]],[11,"nth","","",77,[[["self"],["usize"]],["option"]]],[11,"last","","",77,[[],["option"]]],[11,"min","","",77,[[],["option"]]],[11,"max","","",77,[[],["option"]]],[11,"next","sp_std::str","",209,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",209,[[["self"]]]],[11,"try_fold","","",209,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",209,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::iter","",126,[[["self"]],["option"]]],[11,"size_hint","","",126,[[["self"]]]],[11,"next","","",140,[[["self"]],["option"]]],[11,"size_hint","","",140,[[["self"]]]],[11,"nth","","",140,[[["self"],["usize"]],["option"]]],[11,"next","","",146,[[["self"]],["option"]]],[11,"nth","","",146,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",146,[[["self"]]]],[11,"try_fold","","",146,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",131,[[["self"]],["option"]]],[11,"size_hint","","",131,[[["self"]]]],[11,"try_fold","","",131,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",131,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::str","",222,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","sp_std::slice","",179,[[["self"]],["option"]]],[11,"size_hint","","",179,[[["self"]]]],[11,"count","","",179,[[],["usize"]]],[11,"nth","","",179,[[["self"],["usize"]],["option"]]],[11,"last","","",179,[[],["option"]]],[11,"next","","",192,[[["self"]],["option"]]],[11,"size_hint","","",192,[[["self"]]]],[11,"next","sp_std::iter","",148,[[["self"]],["option"]]],[11,"nth","","",148,[[["self"],["usize"]],["option"]]],[11,"last","","",148,[[],["option"]]],[11,"count","","",148,[[],["usize"]]],[11,"size_hint","","",148,[[["self"]]]],[11,"try_fold","","",148,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",148,[[["acc"],["fold"]],["acc"]]],[11,"next","","",128,[[["self"]],["option"]]],[11,"size_hint","","",128,[[["self"]]]],[11,"next","sp_std::str","",223,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","","",221,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","","",214,[[["self"]],["option"]]],[11,"next","","",213,[[["self"]],[["str"],["option",["str"]]]]],[11,"size_hint","","",213,[[["self"]]]],[11,"next","sp_std::slice","",181,[[["self"]],["option"]]],[11,"size_hint","","",181,[[["self"]]]],[11,"count","","",181,[[],["usize"]]],[11,"nth","","",181,[[["self"],["usize"]],["option"]]],[11,"last","","",181,[[],["option"]]],[11,"next","sp_std::iter","",136,[[["self"]],["option"]]],[11,"size_hint","","",136,[[["self"]]]],[11,"count","","",136,[[],["usize"]]],[11,"try_fold","","",136,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",136,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::str","",216,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","sp_std::iter","",143,[[["self"]],["option"]]],[11,"size_hint","","",143,[[["self"]]]],[11,"try_fold","","",143,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",149,[[["self"]],["option"]]],[11,"size_hint","","",149,[[["self"]]]],[11,"try_fold","","",149,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",149,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::slice","",180,[[["self"]],["option"]]],[11,"size_hint","","",180,[[["self"]]]],[11,"count","","",180,[[],["usize"]]],[11,"nth","","",180,[[["self"],["usize"]],["option"]]],[11,"last","","",180,[[],["option"]]],[11,"next","","",189,[[["self"]],["option"]]],[11,"size_hint","","",189,[[["self"]]]],[11,"count","","",189,[[],["usize"]]],[11,"nth","","",189,[[["self"],["usize"]],["option"]]],[11,"last","","",189,[[],["option"]]],[11,"next","","",194,[[["self"]],["option"]]],[11,"size_hint","","",194,[[["self"]]]],[11,"next","sp_std::iter","Overflow Behavior",135,[[["self"]],["option"]]],[11,"size_hint","","",135,[[["self"]]]],[11,"nth","","",135,[[["self"],["usize"]],["option"]]],[11,"count","","",135,[[],["usize"]]],[11,"try_fold","","",135,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",135,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::str","",204,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"size_hint","","",204,[[["self"]]]],[11,"count","","",204,[[],["usize"]]],[11,"last","","",204,[[],["option"]]],[11,"nth","","",204,[[["self"],["usize"]],["option"]]],[11,"all","","",204,[[["self"],["f"]],["bool"]]],[11,"any","","",204,[[["self"],["f"]],["bool"]]],[11,"find","","",204,[[["self"],["p"]],["option"]]],[11,"position","","",204,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",204,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","sp_std::iter","",148,[[["self"]],["option"]]],[11,"nth","","",148,[[["self"],["usize"]],["option"]]],[11,"last","","",148,[[],["option"]]],[11,"count","","",148,[[],["usize"]]],[11,"size_hint","","",148,[[["self"]]]],[11,"try_fold","","",148,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",148,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::slice","",186,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",186,[[["self"]]]],[11,"count","","",186,[[],["usize"]]],[11,"nth","","",186,[[["self"],["usize"]],[["t"],["option"]]]],[11,"last","","",186,[[],[["t"],["option"]]]],[11,"position","","",186,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"rposition","","",186,[[["self"],["p"]],[["option",["usize"]],["usize"]]]],[11,"next","sp_std::result","",175,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",175,[[["self"]]]],[11,"next","sp_std::iter","",144,[[["self"]],["option"]]],[11,"nth","","",144,[[["self"],["usize"]],["option"]]],[11,"count","","",144,[[],["usize"]]],[11,"last","","",144,[[],["option"]]],[11,"size_hint","","",144,[[["self"]]]],[11,"try_fold","","",144,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",144,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::slice","",184,[[["self"]],["option"]]],[11,"size_hint","","",184,[[["self"]]]],[11,"next","","",178,[[["self"]],["option"]]],[11,"size_hint","","",178,[[["self"]]]],[11,"count","","",178,[[],["usize"]]],[11,"nth","","",178,[[["self"],["usize"]],["option"]]],[11,"last","","",178,[[],["option"]]],[11,"next","sp_std::iter","",138,[[["self"]],["option"]]],[11,"size_hint","","",138,[[["self"]]]],[11,"try_fold","","",138,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",138,[[["acc"],["g"]],["acc"]]],[11,"next","sp_std::ops","",78,[[["self"]],["option"]]],[11,"size_hint","","",78,[[["self"]]]],[11,"nth","","",78,[[["self"],["usize"]],["option"]]],[11,"next","sp_std::iter","",132,[[["self"]],["option"]]],[11,"size_hint","","",132,[[["self"]]]],[11,"nth","","",132,[[["self"],["usize"]],["option"]]],[11,"try_fold","","",132,[[["self"],["acc"],["f"]],["r"]]],[11,"next","sp_std::str","",212,[[["self"]],[["str"],["option",["str"]]]]],[11,"size_hint","","",212,[[["self"]]]],[11,"last","","",212,[[],[["str"],["option",["str"]]]]],[11,"next","sp_std::slice","",196,[[["self"]],["option"]]],[11,"size_hint","","",196,[[["self"]]]],[11,"next","sp_std::str","",220,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","sp_std::slice","",190,[[["self"]],["option"]]],[11,"size_hint","","",190,[[["self"]]]],[11,"count","","",190,[[],["usize"]]],[11,"nth","","",190,[[["self"],["usize"]],["option"]]],[11,"last","","",190,[[],["option"]]],[11,"next","sp_std::iter","",142,[[["self"]],["option"]]],[11,"count","","",142,[[],["usize"]]],[11,"nth","","",142,[[["self"],["usize"]],["option"]]],[11,"last","","",142,[[],["option"]]],[11,"size_hint","","",142,[[["self"]]]],[11,"try_fold","","",142,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",142,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::slice","",195,[[["self"]],["option"]]],[11,"size_hint","","",195,[[["self"]]]],[11,"next","sp_std::str","",210,[[["self"]],[["char"],["option",["char"]]]]],[11,"size_hint","","",210,[[["self"]]]],[11,"try_fold","","",210,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",210,[[["acc"],["fold"]],["acc"]]],[11,"next","sp_std::slice","",182,[[["self"]],["option"]]],[11,"size_hint","","",182,[[["self"]]]],[11,"count","","",182,[[],["usize"]]],[11,"nth","","",182,[[["self"],["usize"]],["option"]]],[11,"last","","",182,[[],["option"]]],[11,"next","sp_std::str","",215,[[["self"]],["option"]]],[11,"next","sp_std::iter","",125,[[["self"]],["option"]]],[11,"size_hint","","",125,[[["self"]]]],[11,"next","sp_std::str","",218,[[["self"]],[["str"],["option",["str"]]]]],[11,"next","sp_std::iter","",145,[[["self"]],["option"]]],[11,"size_hint","","",145,[[["self"]]]],[11,"try_fold","","",145,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",145,[[["acc"],["fold"]],["acc"]]],[11,"next","","",129,[[["self"]],["option"]]],[11,"size_hint","","",129,[[["self"]]]],[11,"try_fold","","",129,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",129,[[["acc"],["f"]],["acc"]]],[11,"next","","",124,[[["self"]],["option"]]],[11,"size_hint","","",124,[[["self"]]]],[11,"next","","",123,[[["self"]],["option"]]],[11,"next","","",133,[[["self"]],["option"]]],[11,"count","","",133,[[],["usize"]]],[11,"try_fold","","",133,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",133,[[["acc"],["f"]],["acc"]]],[11,"nth","","",133,[[["self"],["usize"]],["option"]]],[11,"find","","",133,[[["self"],["p"]],["option"]]],[11,"last","","",133,[[],["option"]]],[11,"size_hint","","",133,[[["self"]]]],[11,"next","sp_std::slice","",188,[[["self"]],["option"]]],[11,"size_hint","","",188,[[["self"]]]],[11,"count","","",188,[[],["usize"]]],[11,"nth","","",188,[[["self"],["usize"]],["option"]]],[11,"last","","",188,[[],["option"]]],[11,"next","","",191,[[["self"]],["option"]]],[11,"size_hint","","",191,[[["self"]]]],[11,"bitxor_assign","sp_std::num","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"bitxor_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"bitxor_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"bitxor_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"bitxor_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"bitxor_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"bitxor_assign","","",44,[[["wrapping"],["self"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"bitxor_assign","","",44,[[["self"],["wrapping"]]]],[11,"fmt","","",159,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",165,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",168,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",161,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",167,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",169,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",162,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",164,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",158,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",163,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",160,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",166,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"div_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"div_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"div_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"div_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["self"],["wrapping"]]]],[11,"div_assign","","",44,[[["wrapping"],["self"]]]],[11,"div_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"div_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"div_assign","","",44,[[["wrapping"],["self"]]]],[11,"div_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"div_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"div_assign","","",44,[[["wrapping"],["self"]]]],[11,"div_assign","","",44,[[["wrapping"],["self"]]]],[11,"add_assign","","",44,[[["self"],["wrapping",["i128"]],["i128"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["wrapping",["u128"]],["self"],["u128"]]]],[11,"add_assign","","",44,[[["self"],["usize"],["wrapping",["usize"]]]]],[11,"add_assign","","",44,[[["self"],["wrapping",["i16"]],["i16"]]]],[11,"add_assign","","",44,[[["u16"],["self"],["wrapping",["u16"]]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["self"],["i8"],["wrapping",["i8"]]]]],[11,"add_assign","","",44,[[["wrapping",["u32"]],["self"],["u32"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["wrapping",["u64"]],["self"],["u64"]]]],[11,"add_assign","","",44,[[["self"],["wrapping",["u8"]],["u8"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["i64"],["self"],["wrapping",["i64"]]]]],[11,"add_assign","","",44,[[["wrapping"],["self"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["wrapping"],["self"]]]],[11,"add_assign","","",44,[[["wrapping"],["self"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["wrapping"],["self"]]]],[11,"add_assign","","",44,[[["isize"],["self"],["wrapping",["isize"]]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["self"],["wrapping"]]]],[11,"add_assign","","",44,[[["wrapping",["i32"]],["self"],["i32"]]]],[11,"partial_cmp","sp_std::prelude","",11,[[["self"],["reverse"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["self"],["reverse"]],["bool"]]],[11,"le","","",11,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",11,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",11,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","sp_std::marker","",150,[[["phantomdata"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::num","",168,[[["self"],["nonzerou8"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"le","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"gt","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"ge","","",168,[[["self"],["nonzerou8"]],["bool"]]],[11,"partial_cmp","","",162,[[["nonzeroi8"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"le","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"gt","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"ge","","",162,[[["nonzeroi8"],["self"]],["bool"]]],[11,"partial_cmp","","",167,[[["nonzerou64"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"le","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"gt","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"ge","","",167,[[["nonzerou64"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::result","",86,[[["self"],["result"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",86,[[["self"],["result"]],["bool"]]],[11,"le","","",86,[[["self"],["result"]],["bool"]]],[11,"gt","","",86,[[["self"],["result"]],["bool"]]],[11,"ge","","",86,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","sp_std::cmp","",10,[[["ordering"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::num","",159,[[["self"],["nonzeroi16"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"le","","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"gt","","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"ge","","",159,[[["self"],["nonzeroi16"]],["bool"]]],[11,"partial_cmp","","",166,[[["self"],["nonzerou32"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"le","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"gt","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"ge","","",166,[[["self"],["nonzerou32"]],["bool"]]],[11,"partial_cmp","sp_std::marker","",151,[[["phantompinned"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::num","",164,[[["self"],["nonzerou128"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"le","","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"gt","","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"ge","","",164,[[["self"],["nonzerou128"]],["bool"]]],[11,"partial_cmp","sp_std::ops","",85,[[["generatorstate"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"le","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"gt","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"ge","","",85,[[["generatorstate"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::num","",165,[[["nonzerou16"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"le","","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"gt","","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"ge","","",165,[[["nonzerou16"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::ptr","",172,[[["nonnull"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::num","",160,[[["self"],["nonzeroi32"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"le","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"gt","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"ge","","",160,[[["self"],["nonzeroi32"]],["bool"]]],[11,"partial_cmp","","",44,[[["self"],["wrapping"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",44,[[["self"],["wrapping"]],["bool"]]],[11,"le","","",44,[[["self"],["wrapping"]],["bool"]]],[11,"gt","","",44,[[["self"],["wrapping"]],["bool"]]],[11,"ge","","",44,[[["self"],["wrapping"]],["bool"]]],[11,"partial_cmp","sp_std::cell","Panics",105,[[["self"],["refcell"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","Panics",105,[[["self"],["refcell"]],["bool"]]],[11,"le","","Panics",105,[[["self"],["refcell"]],["bool"]]],[11,"gt","","Panics",105,[[["self"],["refcell"]],["bool"]]],[11,"ge","","Panics",105,[[["self"],["refcell"]],["bool"]]],[11,"partial_cmp","sp_std::convert","",111,[[["infallible"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::fmt","",112,[[["error"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::num","",163,[[["self"],["nonzeroisize"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"le","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"gt","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"ge","","",163,[[["self"],["nonzeroisize"]],["bool"]]],[11,"partial_cmp","","",161,[[["nonzeroi64"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"le","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"gt","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"ge","","",161,[[["nonzeroi64"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::cell","",104,[[["cell"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",104,[[["cell"],["self"]],["bool"]]],[11,"le","","",104,[[["cell"],["self"]],["bool"]]],[11,"gt","","",104,[[["cell"],["self"]],["bool"]]],[11,"ge","","",104,[[["cell"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::any","",102,[[["typeid"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",102,[[["typeid"],["self"]],["bool"]]],[11,"le","","",102,[[["typeid"],["self"]],["bool"]]],[11,"gt","","",102,[[["typeid"],["self"]],["bool"]]],[11,"ge","","",102,[[["typeid"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::mem","",153,[[["manuallydrop"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"le","","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"gt","","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"ge","","",153,[[["manuallydrop"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::num","",158,[[["self"],["nonzeroi128"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"le","","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"gt","","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"ge","","",158,[[["self"],["nonzeroi128"]],["bool"]]],[11,"partial_cmp","","",169,[[["nonzerousize"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"le","","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"gt","","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"ge","","",169,[[["nonzerousize"],["self"]],["bool"]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"rem","","",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"rem","","",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"rem","","",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"rem","","",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"rem","","",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"rem","","",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"rem","","",44,[[["wrapping"]]]],[11,"from_iter","sp_std::result","Takes each element in the `Iterator`: if it is an `Err`,…",86,[[["i"]],["result"]]],[11,"fmt","sp_std::prelude","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::rc","",173,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::borrow","",5,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"deref","sp_std::rc","",173,[[["self"]],["t"]]],[11,"deref","sp_std::prelude","",103,[[["self"]],["t"]]],[11,"deref","sp_std::borrow","",5,[[["self"]],["b"]]],[11,"deref","sp_std::prelude","",224,[[["self"]]]],[11,"cmp","sp_std::rc","Comparison for two `Rc`s.",173,[[["rc"],["self"]],["ordering"]]],[11,"cmp","sp_std::prelude","",103,[[["self"],["box"]],["ordering"]]],[11,"cmp","sp_std::collections::vec_deque","",248,[[["vecdeque"],["self"]],["ordering"]]],[11,"cmp","sp_std::collections::btree_set","",245,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","sp_std::borrow","",5,[[["cow"],["self"]],["ordering"]]],[11,"cmp","sp_std::collections::btree_map","",229,[[["self"],["btreemap"]],["ordering"]]],[11,"cmp","sp_std::prelude","",224,[[["vec"],["self"]],["ordering"]]],[11,"poll","","",103,[[["context"],["box"],["pin",["box"]]],["poll"]]],[11,"index","sp_std::collections::vec_deque","",248,[[["self"],["usize"]],["a"]]],[11,"index","sp_std::collections::btree_map","Returns a reference to the value corresponding to the…",229,[[["self"],["q"]],["v"]]],[11,"index","sp_std::prelude","",224,[[["i"],["self"]]]],[11,"default","sp_std::collections::vec_deque","Creates an empty `VecDeque<T>`.",248,[[],["vecdeque"]]],[11,"default","sp_std::rc","Constructs a new `Weak<T>`, allocating memory for `T`…",174,[[],["weak"]]],[11,"default","sp_std::collections::btree_map","Creates an empty `BTreeMap<K, V>`.",229,[[],["btreemap"]]],[11,"default","sp_std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",245,[[],["btreeset"]]],[11,"default","sp_std::rc","Creates a new `Rc<T>`, with the `Default` value for `T`.",173,[[],["rc"]]],[11,"default","sp_std::prelude","",103,[[],[["str"],["box",["str"]]]]],[11,"default","sp_std::borrow","Creates an owned Cow<'a, B> with the default value for the…",5,[[],["cow"]]],[11,"default","sp_std::prelude","",103,[[],["box"]]],[11,"default","sp_std::alloc","",101,[[],["global"]]],[11,"default","sp_std::prelude","Creates an empty `Vec<T>`.",224,[[],["vec"]]],[11,"default","","Creates a `Box<T>`, with the `Default` value for T.",103,[[],["box"]]],[11,"index_mut","","",224,[[["self"],["i"]]]],[11,"index_mut","sp_std::collections::vec_deque","",248,[[["self"],["usize"]],["a"]]],[11,"borrow","sp_std::borrow","",5,[[["self"]],["b"]]],[11,"borrow","sp_std::prelude","",103,[[["self"]],["t"]]],[11,"borrow","sp_std::rc","",173,[[["self"]],["t"]]],[11,"borrow","sp_std::prelude","",224,[[["self"]]]],[11,"from_iter","","",103,[[["t"]],["box"]]],[11,"from_iter","sp_std::rc","Takes each element in the `Iterator` and collects it into…",173,[[["i"]],["rc"]]],[11,"from_iter","sp_std::borrow","",5,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","sp_std::collections::btree_map","",229,[[["t"]],["btreemap"]]],[11,"from_iter","sp_std::prelude","",224,[[["i"]],["vec"]]],[11,"from_iter","sp_std::borrow","",5,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","sp_std::collections::btree_set","",245,[[["i"]],["btreeset"]]],[11,"from_iter","sp_std::borrow","",5,[[["i"]],[["str"],["cow",["str"]]]]],[11,"from_iter","sp_std::collections::vec_deque","",248,[[["t"]],["vecdeque"]]],[11,"from_iter","sp_std::borrow","",5,[[["i"]],["cow"]]],[11,"add","","",5,[[["str"],["cow",["str"]]]]],[11,"add","","",5,[[["str"]]]],[11,"extend","sp_std::collections::vec_deque","",248,[[["self"],["i"]]]],[11,"extend","sp_std::collections::btree_set","",245,[[["self"],["iter"]]]],[11,"extend","sp_std::prelude","",224,[[["self"],["i"]]]],[11,"extend","sp_std::collections::vec_deque","",248,[[["self"],["t"]]]],[11,"extend","sp_std::prelude","",224,[[["self"],["i"]]]],[11,"extend","sp_std::collections::btree_map","",229,[[["self"],["t"]]]],[11,"extend","sp_std::collections::btree_set","",245,[[["self"],["i"]]]],[11,"extend","sp_std::collections::btree_map","",229,[[["self"],["i"]]]],[11,"len","","",232,[[["self"]],["usize"]]],[11,"is_empty","sp_std::collections::vec_deque","",250,[[["self"]],["bool"]]],[11,"len","sp_std::collections::btree_map","",238,[[["self"]],["usize"]]],[11,"len","","",233,[[["self"]],["usize"]]],[11,"is_empty","sp_std::vec","",225,[[["self"]],["bool"]]],[11,"is_empty","sp_std::collections::vec_deque","",251,[[["self"]],["bool"]]],[11,"len","sp_std::collections::btree_set","",240,[[["self"]],["usize"]]],[11,"len","sp_std::collections::btree_map","",230,[[["self"]],["usize"]]],[11,"is_empty","sp_std::vec","",226,[[["self"]],["bool"]]],[11,"is_empty","sp_std::collections::vec_deque","",249,[[["self"]],["bool"]]],[11,"len","sp_std::prelude","",103,[[["self"]],["usize"]]],[11,"is_empty","","",103,[[["self"]],["bool"]]],[11,"len","sp_std::collections::btree_map","",231,[[["self"]],["usize"]]],[11,"len","sp_std::collections::btree_set","",246,[[["self"]],["usize"]]],[11,"len","sp_std::collections::btree_map","",239,[[["self"]],["usize"]]],[11,"deref_mut","sp_std::prelude","",224,[[["self"]]]],[11,"deref_mut","","",103,[[["self"]],["t"]]],[11,"from","sp_std::rc","",173,[[],["rc"]]],[11,"from","sp_std::prelude","",224,[[["cow"]],["vec"]]],[11,"from","","Converts the given `String` to a boxed `str` slice that is…",103,[[["string"]],[["str"],["box",["str"]]]]],[11,"from","sp_std::rc","",173,[[["t"]],["rc"]]],[11,"from","sp_std::borrow","",5,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","","",5,[[["str"]],[["str"],["cow",["str"]]]]],[11,"from","sp_std::prelude","Converts the given `String` to a vector `Vec` that holds…",224,[[["string"]],[["u8"],["vec",["u8"]]]]],[11,"from","","",224,[[],["vec"]]],[11,"from","sp_std::borrow","",5,[[],["cow"]]],[11,"from","sp_std::prelude","",224,[[["str"]],[["u8"],["vec",["u8"]]]]],[11,"from","sp_std::borrow","",5,[[["string"]],[["str"],["cow",["str"]]]]],[11,"from","sp_std::prelude","Converts a `&str` into a `Box<str>`",103,[[["str"]],[["str"],["box",["str"]]]]],[11,"from","sp_std::rc","",173,[[["string"]],[["str"],["rc",["str"]]]]],[11,"from","","",173,[[["str"]],[["str"],["rc",["str"]]]]],[11,"from","sp_std::borrow","",5,[[["vec"]],["cow"]]],[11,"from","sp_std::prelude","",103,[[["vec"]],["box"]]],[11,"from","","Converts a generic type `T` into a `Box<T>`",103,[[["t"]],["box"]]],[11,"from","sp_std::borrow","",5,[[["vec"]],["cow"]]],[11,"from","sp_std::prelude","Turn a [`VecDeque<T>`] into a [`Vec<T>`].",224,[[["vecdeque"]],["vec"]]],[11,"from","","",224,[[["binaryheap"]],["vec"]]],[11,"from","","",224,[[],["vec"]]],[11,"from","sp_std::collections::vec_deque","Turn a [`Vec<T>`] into a [`VecDeque<T>`].",248,[[["vec"]],["vecdeque"]]],[11,"from","sp_std::rc","",173,[[["vec"]],["rc"]]],[11,"from","sp_std::prelude","Converts a `&[T]` into a `Box<[T]>`",103,[[],["box"]]],[11,"from","sp_std::rc","",173,[[["box"]],["rc"]]],[11,"from","sp_std::prelude","Converts a `Box<str>>` into a `Box<[u8]>`",103,[[["str"],["box",["str"]]],["box"]]],[11,"from","","",224,[[["box"]],["vec"]]],[11,"fmt","sp_std::vec","",228,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::vec_deque","",252,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",243,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",247,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",233,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",95,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",241,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::rc","",173,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::vec","",226,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",242,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",239,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",237,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",246,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::vec_deque","",249,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",230,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::vec_deque","",251,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",236,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::vec","",227,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",231,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::prelude","",224,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::vec","",225,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",235,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",234,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::rc","",174,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_map","",238,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",232,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",229,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::alloc","",101,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::borrow","",5,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::vec_deque","",248,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",245,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",240,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::vec_deque","",250,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::collections::btree_set","",244,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"next_back","","",240,[[["self"]],[["t"],["option"]]]],[11,"next_back","sp_std::collections::vec_deque","",249,[[["self"]],[["t"],["option"]]]],[11,"rfold","","",249,[[["acc"],["f"]],["acc"]]],[11,"try_rfold","","",249,[[["self"],["b"],["f"]],["r"]]],[11,"next_back","sp_std::collections::btree_map","",235,[[["self"]],["option"]]],[11,"next_back","sp_std::vec","",227,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::btree_map","",232,[[["self"]],["option"]]],[11,"next_back","sp_std::vec","",226,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::btree_map","",234,[[["self"]],["option"]]],[11,"next_back","","",238,[[["self"]],["option"]]],[11,"next_back","sp_std::vec","",225,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::btree_set","",247,[[["self"]],[["t"],["option"]]]],[11,"next_back","sp_std::collections::vec_deque","",251,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::btree_map","",233,[[["self"]],[["option"],["v"]]]],[11,"next_back","sp_std::prelude","",103,[[["self"]],["option"]]],[11,"nth_back","","",103,[[["self"],["usize"]],["option"]]],[11,"next_back","sp_std::collections::btree_map","",230,[[["self"]],[["k"],["option"]]]],[11,"next_back","sp_std::collections::vec_deque","",252,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::btree_map","",231,[[["self"]],["option"]]],[11,"next_back","","",239,[[["self"]],[["option"],["v"]]]],[11,"next_back","sp_std::collections::btree_set","",246,[[["self"]],["option"]]],[11,"next_back","sp_std::collections::vec_deque","",250,[[["self"]],[["t"],["option"]]]],[11,"rfold","","",250,[[["acc"],["f"]],["acc"]]],[11,"as_mut","sp_std::prelude","",224,[[["self"]],["vec"]]],[11,"as_mut","","",224,[[["self"]]]],[11,"as_mut","","",103,[[["self"]],["t"]]],[11,"finish","","",103,[[["self"]],["u64"]]],[11,"write","","",103,[[["self"]]]],[11,"write_u8","","",103,[[["self"],["u8"]]]],[11,"write_u16","","",103,[[["u16"],["self"]]]],[11,"write_u32","","",103,[[["self"],["u32"]]]],[11,"write_u64","","",103,[[["self"],["u64"]]]],[11,"write_u128","","",103,[[["self"],["u128"]]]],[11,"write_usize","","",103,[[["self"],["usize"]]]],[11,"write_i8","","",103,[[["self"],["i8"]]]],[11,"write_i16","","",103,[[["self"],["i16"]]]],[11,"write_i32","","",103,[[["self"],["i32"]]]],[11,"write_i64","","",103,[[["i64"],["self"]]]],[11,"write_i128","","",103,[[["self"],["i128"]]]],[11,"write_isize","","",103,[[["isize"],["self"]]]],[11,"next","sp_std::collections::btree_set","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,[[["self"]]]],[11,"next","sp_std::vec","",225,[[["self"]],["option"]]],[11,"size_hint","","",225,[[["self"]]]],[11,"count","","",225,[[],["usize"]]],[11,"next","sp_std::collections::btree_set","",240,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",240,[[["self"]]]],[11,"last","","",240,[[],[["t"],["option"]]]],[11,"next","","",241,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",241,[[["self"]]]],[11,"next","sp_std::prelude","",103,[[["self"]],["option"]]],[11,"size_hint","","",103,[[["self"]]]],[11,"nth","","",103,[[["self"],["usize"]],["option"]]],[11,"last","","",103,[[],["option"]]],[11,"next","sp_std::vec","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,[[["self"]]]],[11,"next","sp_std::collections::vec_deque","",249,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",249,[[["self"]]]],[11,"fold","","",249,[[["acc"],["f"]],["acc"]]],[11,"try_fold","","",249,[[["self"],["b"],["f"]],["r"]]],[11,"nth","","",249,[[["self"],["usize"]],["option"]]],[11,"last","","",249,[[],[["t"],["option"]]]],[11,"next","sp_std::collections::btree_map","",233,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",233,[[["self"]]]],[11,"last","","",233,[[],[["option"],["v"]]]],[11,"next","sp_std::collections::vec_deque","",250,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",250,[[["self"]]]],[11,"fold","","",250,[[["acc"],["f"]],["acc"]]],[11,"nth","","",250,[[["self"],["usize"]],["option"]]],[11,"last","","",250,[[],[["t"],["option"]]]],[11,"next","sp_std::collections::btree_map","",231,[[["self"]],["option"]]],[11,"size_hint","","",231,[[["self"]]]],[11,"last","","",231,[[],["option"]]],[11,"next","","",235,[[["self"]],["option"]]],[11,"last","","",235,[[],["option"]]],[11,"next","","",230,[[["self"]],[["k"],["option"]]]],[11,"size_hint","","",230,[[["self"]]]],[11,"last","","",230,[[],[["k"],["option"]]]],[11,"next","sp_std::vec","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,[[["self"]]]],[11,"next","sp_std::collections::btree_map","",234,[[["self"]],["option"]]],[11,"last","","",234,[[],["option"]]],[11,"next","sp_std::vec","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,[[["self"]]]],[11,"next","sp_std::collections::btree_map","",239,[[["self"]],[["option"],["v"]]]],[11,"size_hint","","",239,[[["self"]]]],[11,"last","","",239,[[],[["option"],["v"]]]],[11,"next","sp_std::collections::vec_deque","",252,[[["self"]],["option"]]],[11,"size_hint","","",252,[[["self"]]]],[11,"next","sp_std::collections::btree_set","",244,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",244,[[["self"]]]],[11,"next","","",243,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",243,[[["self"]]]],[11,"next","","",247,[[["self"]],[["t"],["option"]]]],[11,"last","","",247,[[],[["t"],["option"]]]],[11,"next","","",242,[[["self"]],[["t"],["option"]]]],[11,"size_hint","","",242,[[["self"]]]],[11,"next","sp_std::collections::vec_deque","",251,[[["self"]],["option"]]],[11,"size_hint","","",251,[[["self"]]]],[11,"next","sp_std::collections::btree_map","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,[[["self"]]]],[11,"last","","",238,[[],["option"]]],[11,"next","","",232,[[["self"]],["option"]]],[11,"size_hint","","",232,[[["self"]]]],[11,"into_iter","sp_std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator…",248,[[],["intoiter"]]],[11,"into_iter","sp_std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",245,[[],["intoiter"]]],[11,"into_iter","sp_std::collections::btree_map","",229,[[],["intoiter"]]],[11,"into_iter","sp_std::prelude","Creates a consuming iterator, that is, one that moves each…",224,[[],["intoiter"]]],[11,"add_assign","sp_std::borrow","",5,[[["str"],["self"],["cow",["str"]]]]],[11,"add_assign","","",5,[[["self"],["str"]]]],[11,"partial_cmp","sp_std::prelude","",103,[[["self"],["box"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",103,[[["self"],["box"]],["bool"]]],[11,"le","","",103,[[["self"],["box"]],["bool"]]],[11,"ge","","",103,[[["self"],["box"]],["bool"]]],[11,"gt","","",103,[[["self"],["box"]],["bool"]]],[11,"partial_cmp","sp_std::collections::btree_map","",229,[[["self"],["btreemap"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::collections::vec_deque","",248,[[["vecdeque"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::collections::btree_set","",245,[[["self"],["btreeset"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",245,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",245,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",245,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",245,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","sp_std::borrow","",5,[[["self"],["cow"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","sp_std::rc","Partial comparison for two `Rc`s.",173,[[["rc"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","Less-than comparison for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"le","","'Less than or equal to' comparison for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"gt","","Greater-than comparison for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"ge","","'Greater than or equal to' comparison for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"partial_cmp","sp_std::prelude","",224,[[["vec"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"call","","",103,[[["a"],["self"]]]],[11,"call_once","","",103,[[["a"]]]],[11,"eq","sp_std::collections::vec_deque","",248,[[["self"]],["bool"]]],[11,"eq","sp_std::borrow","",5,[[["self"],["cow"]],["bool"]]],[11,"eq","","",5,[[["string"],["self"]],["bool"]]],[11,"ne","","",5,[[["string"],["self"]],["bool"]]],[11,"eq","sp_std::collections::btree_map","",229,[[["self"],["btreemap"]],["bool"]]],[11,"eq","sp_std::collections::vec_deque","",248,[[["self"]],["bool"]]],[11,"eq","sp_std::borrow","",5,[[["self"]],["bool"]]],[11,"ne","","",5,[[["self"]],["bool"]]],[11,"eq","sp_std::collections::vec_deque","",248,[[["vec"],["self"]],["bool"]]],[11,"eq","","",248,[[["vecdeque"],["self"]],["bool"]]],[11,"eq","sp_std::prelude","",224,[[["self"]],["bool"]]],[11,"ne","","",224,[[["self"]],["bool"]]],[11,"eq","sp_std::borrow","",5,[[["str"],["self"]],["bool"]]],[11,"ne","","",5,[[["str"],["self"]],["bool"]]],[11,"eq","","",5,[[["vec"],["self"]],["bool"]]],[11,"ne","","",5,[[["vec"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"]],["bool"]]],[11,"ne","","",5,[[["self"]],["bool"]]],[11,"eq","sp_std::rc","Equality for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"ne","","Inequality for two `Rc`s.",173,[[["rc"],["self"]],["bool"]]],[11,"eq","sp_std::collections::vec_deque","",248,[[["self"]],["bool"]]],[11,"eq","sp_std::prelude","",103,[[["self"],["box"]],["bool"]]],[11,"ne","","",103,[[["self"],["box"]],["bool"]]],[11,"eq","","",224,[[["self"]],["bool"]]],[11,"ne","","",224,[[["self"]],["bool"]]],[11,"eq","","",224,[[["vec"],["self"]],["bool"]]],[11,"ne","","",224,[[["vec"],["self"]],["bool"]]],[11,"eq","sp_std::collections::vec_deque","",248,[[["self"]],["bool"]]],[11,"eq","","",248,[[["self"]],["bool"]]],[11,"eq","sp_std::borrow","",5,[[["str"],["self"]],["bool"]]],[11,"ne","","",5,[[["str"],["self"]],["bool"]]],[11,"eq","sp_std::collections::btree_set","",245,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",245,[[["self"],["btreeset"]],["bool"]]],[11,"eq","sp_std::prelude","",224,[[["self"]],["bool"]]],[11,"ne","","",224,[[["self"]],["bool"]]],[11,"eq","","",224,[[["self"]],["bool"]]],[11,"ne","","",224,[[["self"]],["bool"]]],[11,"try_from","","",103,[[["box"]],[["result",["box"]],["box"]]]],[11,"try_from","sp_std::rc","",173,[[["rc"]],[["rc"],["result",["rc"]]]]],[11,"alloc","sp_std::alloc","",101,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"dealloc","","",101,[[["nonnull",["u8"]],["layout"],["self"],["u8"]]]],[11,"realloc","","",101,[[["nonnull",["u8"]],["layout"],["usize"],["self"],["u8"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"alloc_zeroed","","",101,[[["layout"],["self"]],[["result",["nonnull","allocerr"]],["nonnull",["u8"]],["allocerr"]]]],[11,"call_mut","sp_std::prelude","",103,[[["a"],["self"]]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]]]],[11,"to_string","sp_std::borrow","",5,[[["self"]],["string"]]],[11,"hash","sp_std::collections::vec_deque","",248,[[["self"],["h"]]]],[11,"hash","sp_std::rc","",173,[[["self"],["h"]]]],[11,"hash","sp_std::collections::btree_set","",245,[[["self"],["__h"]]]],[11,"hash","sp_std::collections::btree_map","",229,[[["self"],["h"]]]],[11,"hash","sp_std::prelude","",103,[[["self"],["h"]]]],[11,"hash","sp_std::borrow","",5,[[["self"],["h"]]]],[11,"hash","sp_std::prelude","",224,[[["self"],["h"]]]],[11,"clone","","",224,[[["self"]],["vec"]]],[11,"clone_from","","",224,[[["vec"],["self"]]]],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",103,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a…",103,[[["self"],["box"]]]],[11,"clone","sp_std::alloc","",101,[[["self"]],["global"]]],[11,"clone","sp_std::rc","Makes a clone of the `Rc` pointer.",173,[[["self"]],["rc"]]],[11,"clone","sp_std::collections::btree_set","",241,[[["self"]],["difference"]]],[11,"clone","sp_std::vec","",225,[[["self"]],["intoiter"]]],[11,"clone","sp_std::borrow","",5,[[["self"]],["cow"]]],[11,"clone_from","","",5,[[["cow"],["self"]]]],[11,"clone","sp_std::collections::vec_deque","",251,[[["self"]],["intoiter"]]],[11,"clone","sp_std::collections::btree_map","",233,[[["self"]],["values"]]],[11,"clone","sp_std::collections::btree_set","",243,[[["self"]],["intersection"]]],[11,"clone","","",242,[[["self"]],["symmetricdifference"]]],[11,"clone","","",240,[[["self"]],["iter"]]],[11,"clone","","",247,[[["self"]],["range"]]],[11,"clone","sp_std::collections::vec_deque","",248,[[["self"]],["vecdeque"]]],[11,"clone_from","","",248,[[["self"],["vecdeque"]]]],[11,"clone","sp_std::rc","Makes a clone of the `Weak` pointer that points to the…",174,[[["self"]],["weak"]]],[11,"clone","sp_std::collections::btree_map","",234,[[["self"]],["range"]]],[11,"clone","","",231,[[["self"]],["iter"]]],[11,"clone","","",229,[[["self"]],["btreemap"]]],[11,"clone","sp_std::prelude","",103,[[["self"]],[["str"],["box",["str"]]]]],[11,"clone","sp_std::collections::btree_set","",244,[[["self"]],["union"]]],[11,"clone","sp_std::collections::vec_deque","",249,[[["self"]],["iter"]]],[11,"clone","sp_std::collections::btree_set","",245,[[["self"]],["btreeset"]]],[11,"clone","sp_std::collections::btree_map","",230,[[["self"]],["keys"]]],[11,"clone","sp_std::prelude","",103,[[["self"]],["box"]]],[11,"fmt","sp_std::rc","",173,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","sp_std::prelude","",103,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"drop","","",224,[[["self"]]]],[11,"drop","sp_std::vec","",228,[[["self"]]]],[11,"drop","sp_std::prelude","",103,[[["self"]]]],[11,"drop","sp_std::collections::btree_map","",229,[[["self"]]]],[11,"drop","sp_std::collections::vec_deque","",248,[[["self"]]]],[11,"drop","sp_std::collections::btree_map","",232,[[["self"]]]],[11,"drop","sp_std::rc","Drops the `Weak` pointer.",174,[[["self"]]]],[11,"drop","sp_std::vec","",227,[[["self"]]]],[11,"drop","sp_std::collections::vec_deque","",252,[[["self"]]]],[11,"drop","sp_std::vec","",226,[[["self"]]]],[11,"drop","sp_std::rc","Drops the `Rc`.",173,[[["self"]]]],[11,"drop","sp_std::vec","",225,[[["self"]]]],[11,"resume","sp_std::prelude","",103,[[["pin",["box"]],["box"]],["generatorstate"]]],[11,"as_ref","sp_std::borrow","",5,[[["self"]],["t"]]],[11,"as_ref","sp_std::rc","",173,[[["self"]],["t"]]],[11,"as_ref","sp_std::prelude","",103,[[["self"]],["t"]]],[11,"as_ref","","",224,[[["self"]]]],[11,"as_ref","","",224,[[["self"]],["vec"]]],[11,"description","sp_std::alloc","",98,[[["self"]],["str"]]],[11,"from_size_align","","Constructs a `Layout` from a given `size` and `align`, or…",100,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"from_size_align_unchecked","","Creates a layout, bypassing all checks.",100,[[["usize"]],["layout"]]],[11,"size","","The minimum size in bytes for a memory block of this layout.",100,[[["self"]],["usize"]]],[11,"align","","The minimum byte alignment for a memory block of this…",100,[[["self"]],["usize"]]],[11,"new","","Constructs a `Layout` suitable for holding a value of type…",100,[[],["layout"]]],[11,"for_value","","Produces layout describing a record that could be used to…",100,[[["t"]],["layout"]]],[11,"align_to","","Creates a layout describing the record that can hold a…",100,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"padding_needed_for","","Returns the amount of padding we must insert after `self`…",100,[[["self"],["usize"]],["usize"]]],[11,"pad_to_align","","Creates a layout by rounding the size of this layout up to…",100,[[["self"]],["layout"]]],[11,"repeat","","Creates a layout describing the record for `n` instances…",100,[[["self"],["usize"]],[["result",["layouterr"]],["layouterr"]]]],[11,"extend","","Creates a layout describing the record for `self` followed…",100,[[["layout"],["self"]],[["result",["layouterr"]],["layouterr"]]]],[11,"repeat_packed","","Creates a layout describing the record for `n` instances…",100,[[["self"],["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"extend_packed","","Creates a layout describing the record for `self` followed…",100,[[["layout"],["self"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"array","","Creates a layout describing the record for a `[T; n]`.",100,[[["usize"]],[["result",["layout","layouterr"]],["layout"],["layouterr"]]]],[11,"is","sp_std::any","Returns `true` if the boxed type is the same as `T`.",3,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",3,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",3,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",3,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",3,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",3,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `Any`.",3,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",3,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",3,[[["self"]],[["option"],["t"]]]],[11,"of","","Returns the `TypeId` of the type this generic function has…",102,[[],["typeid"]]],[11,"is_borrowed","sp_std::borrow","Returns true if the data is borrowed, i.e. if `to_mut`…",5,[[["self"]],["bool"]]],[11,"is_owned","","Returns true if the data is owned, i.e. if `to_mut` would…",5,[[["self"]],["bool"]]],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",5,[[["self"]]]],[11,"into_owned","","Extracts the owned data.",5,[[]]],[11,"new","sp_std::prelude","Allocates memory on the heap and then places `x` into it.",103,[[["t"]],["box"]]],[11,"new_uninit","","Constructs a new box with uninitialized contents.",103,[[],[["maybeuninit"],["box",["maybeuninit"]]]]],[11,"new_zeroed","","Constructs a new `Box` with uninitialized contents, with…",103,[[],[["maybeuninit"],["box",["maybeuninit"]]]]],[11,"pin","","Constructs a new `Pin<Box<T>>`. If `T` does not implement…",103,[[["t"]],[["pin",["box"]],["box"]]]],[11,"new_uninit_slice","","Constructs a new boxed slice with uninitialized contents.",103,[[["usize"]],["box"]]],[11,"assume_init","","Converts to `Box<T>`.",103,[[],["box"]]],[11,"assume_init","","Converts to `Box<[T]>`.",103,[[],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",103,[[],["box"]]],[11,"into_raw","","Consumes the `Box`, returning a wrapped raw pointer.",103,[[["box"]]]],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as…",103,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable…",103,[[["box"]],["t"]]],[11,"into_pin","","Converts a `Box<T>` into a `Pin<Box<T>>`",103,[[["box"]],[["pin",["box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",103,[[],[["box",["any"]],["result",["box","box"]],["box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",103,[[],[["box",["any"]],["box"],["result",["box","box"]]]]],[11,"new","sp_std::cell","Creates a new `Cell` containing the given value.",104,[[["t"]],["cell"]]],[11,"set","","Sets the contained value.",104,[[["self"],["t"]]]],[11,"swap","","Swaps the values of two Cells. Difference with…",104,[[["cell"],["self"]]]],[11,"replace","","Replaces the contained value, and returns it.",104,[[["self"],["t"]],["t"]]],[11,"into_inner","","Unwraps the value.",104,[[],["t"]]],[11,"get","","Returns a copy of the contained value.",104,[[["self"]],["t"]]],[11,"update","","Updates the contained value using a function and returns…",104,[[["self"],["f"]],["t"]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",104,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",104,[[["self"]],["t"]]],[11,"from_mut","","Returns a `&Cell<T>` from a `&mut T`",104,[[["t"]],["cell"]]],[11,"take","","Takes the value of the cell, leaving `Default::default()`…",104,[[["self"]],["t"]]],[11,"as_slice_of_cells","","Returns a `&[Cell<T>]` from a `&Cell<[T]>`",104,[[["self"]]]],[11,"new","","Creates a new `RefCell` containing `value`.",105,[[["t"]],["refcell"]]],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",105,[[],["t"]]],[11,"replace","","Replaces the wrapped value with a new one, returning the…",105,[[["self"],["t"]],["t"]]],[11,"replace_with","","Replaces the wrapped value with a new one computed from…",105,[[["self"],["f"]],["t"]]],[11,"swap","","Swaps the wrapped value of `self` with the wrapped value…",105,[[["self"],["refcell"]]]],[11,"borrow","","Immutably borrows the wrapped value.",105,[[["self"]],["ref"]]],[11,"try_borrow","","Immutably borrows the wrapped value, returning an error if…",105,[[["self"]],[["result",["ref","borrowerror"]],["ref"],["borrowerror"]]]],[11,"borrow_mut","","Mutably borrows the wrapped value.",105,[[["self"]],["refmut"]]],[11,"try_borrow_mut","","Mutably borrows the wrapped value, returning an error if…",105,[[["self"]],[["refmut"],["borrowmuterror"],["result",["refmut","borrowmuterror"]]]]],[11,"as_ptr","","Returns a raw pointer to the underlying data in this cell.",105,[[["self"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",105,[[["self"]],["t"]]],[11,"try_borrow_unguarded","","Immutably borrows the wrapped value, returning an error if…",105,[[["self"]],[["result",["borrowerror"]],["t"],["borrowerror"]]]],[11,"clone","","Copies a `Ref`.",108,[[["ref"]],["ref"]]],[11,"map","","Makes a new `Ref` for a component of the borrowed data.",108,[[["ref"],["f"]],["ref"]]],[11,"map_split","","Splits a `Ref` into multiple `Ref`s for different…",108,[[["ref"],["f"]]]],[11,"map","","Makes a new `RefMut` for a component of the borrowed data,…",109,[[["refmut"],["f"]],["refmut"]]],[11,"map_split","","Splits a `RefMut` into multiple `RefMut`s for different…",109,[[["refmut"],["f"]]]],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap…",110,[[["t"]],["unsafecell"]]],[11,"into_inner","","Unwraps the value.",110,[[],["t"]]],[11,"get","","Gets a mutable pointer to the wrapped value.",110,[[["self"]]]],[11,"raw_get","","Gets a mutable pointer to the wrapped value. The…",110,[[]]],[11,"reverse","sp_std::cmp","Reverses the `Ordering`.",10,[[],["ordering"]]],[11,"then","","Chains two orderings.",10,[[["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",10,[[["f"]],["ordering"]]],[11,"entry","sp_std::fmt","Adds a new entry to the list output.",114,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list…",114,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",114,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the map output.",115,[[["self"],["debug"]],["debugmap"]]],[11,"key","","Adds the key part of a new entry to the map output.",115,[[["self"],["debug"]],["debugmap"]]],[11,"value","","Adds the value part of a new entry to the map output.",115,[[["self"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map…",115,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",115,[[["self"]],[["result",["error"]],["error"]]]],[11,"entry","","Adds a new entry to the set output.",116,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set…",116,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",116,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated struct output.",117,[[["str"],["self"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",117,[[["self"]],[["result",["error"]],["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",118,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",118,[[["self"]],[["result",["error"]],["error"]]]],[11,"pad_integral","","Performs the correct padding for an integer which has…",119,[[["str"],["self"],["bool"]],[["result",["error"]],["error"]]]],[11,"pad","","This function takes a string slice and emits it to the…",119,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within…",119,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",119,[[["self"],["arguments"]],[["result",["error"]],["error"]]]],[11,"flags","","Flags for formatting",119,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",119,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",119,[[["self"]],[["alignment"],["option",["alignment"]]]]],[11,"width","","Optionally specified integer width that the output should…",119,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",119,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",119,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",119,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",119,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",119,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with…",119,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with…",119,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with…",119,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with…",119,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with…",119,[[["self"]],["debugmap"]]],[11,"new","sp_std::hash","Creates a new `SipHasher` with the two initial keys set to…",121,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",121,[[["u64"]],["siphasher"]]],[11,"peek","sp_std::iter","Returns a reference to the next() value without advancing…",142,[[["self"]],["option"]]],[11,"new","sp_std::mem","Wrap a value to be manually dropped.",153,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extracts the value from the `ManuallyDrop` container.",153,[[["manuallydrop"]],["t"]]],[11,"take","","Takes the contained value out.",153,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",153,[[["manuallydrop"]]]],[11,"new","","Creates a new `MaybeUninit<T>` initialized with the given…",154,[[["t"]],["maybeuninit"]]],[11,"uninit","","Creates a new `MaybeUninit<T>` in an uninitialized state.",154,[[],["maybeuninit"]]],[11,"uninit_array","","Create a new array of `MaybeUninit<T>` items, in an…",154,[[]]],[18,"UNINIT","","A promotable constant, equivalent to `uninit()`.",154,null],[11,"zeroed","","Creates a new `MaybeUninit<T>` in an uninitialized state,…",154,[[],["maybeuninit"]]],[11,"write","","Sets the value of the `MaybeUninit<T>`. This overwrites…",154,[[["self"],["t"]],["t"]]],[11,"as_ptr","","Gets a pointer to the contained value. Reading from this…",154,[[["self"]]]],[11,"as_mut_ptr","","Gets a mutable pointer to the contained value. Reading…",154,[[["self"]]]],[11,"assume_init","","Extracts the value from the `MaybeUninit<T>` container.…",154,[[],["t"]]],[11,"read","","Reads the value from the `MaybeUninit<T>` container. The…",154,[[["self"]],["t"]]],[11,"get_ref","","Gets a shared reference to the contained value.",154,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable (unique) reference to the contained value.",154,[[["self"]],["t"]]],[11,"slice_get_ref","","Assuming all the elements are initialized, get a slice to…",154,[[]]],[11,"slice_get_mut","","Assuming all the elements are initialized, get a mutable…",154,[[]]],[11,"first_ptr","","Gets a pointer to the first element of the array.",154,[[]]],[11,"first_ptr_mut","","Gets a mutable pointer to the first element of the array.",154,[[]]],[11,"min_value","sp_std::num","Returns the smallest value that can be represented by this…",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["usize"],["wrapping",["usize"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["usize"],["wrapping",["usize"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["usize"],["wrapping",["usize"]]],[["usize"],["wrapping",["usize"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["usize"],["wrapping",["usize"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["u8"]],["u8"]],[["wrapping",["u8"]],["u8"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["wrapping",["u8"]],["u8"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["u16"],["wrapping",["u16"]]],[["u16"],["wrapping",["u16"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["u16"],["wrapping",["u16"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["u32"]],["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["wrapping",["u32"]],["u32"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["u64"]],["u64"]],[["wrapping",["u64"]],["u64"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["wrapping",["u64"]],["u64"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["u128"],["wrapping",["u128"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["u128"],["wrapping",["u128"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["u128"]],["u128"]],[["u128"],["wrapping",["u128"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["u128"],["wrapping",["u128"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["isize"],["wrapping",["isize"]]],[["isize"],["wrapping",["isize"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["isize"],["wrapping",["isize"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["i8"],["wrapping",["i8"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["i8"],["wrapping",["i8"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["i8"],["wrapping",["i8"]]],[["i8"],["wrapping",["i8"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["i8"],["wrapping",["i8"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["i16"]],["i16"]],[["wrapping",["i16"]],["i16"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["wrapping",["i16"]],["i16"]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["i32"],["wrapping",["i32"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["i32"],["wrapping",["i32"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["i32"]],["i32"]],[["i32"],["wrapping",["i32"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["i32"],["wrapping",["i32"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["i64"],["wrapping",["i64"]]],[["i64"],["wrapping",["i64"]]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["i64"],["wrapping",["i64"]]]]],[11,"min_value","","Returns the smallest value that can be represented by this…",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"max_value","","Returns the largest value that can be represented by this…",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"count_ones","","Returns the number of ones in the binary representation of…",44,[[],["u32"]]],[11,"count_zeros","","Returns the number of zeros in the binary representation…",44,[[],["u32"]]],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary…",44,[[],["u32"]]],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",44,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"swap_bytes","","Reverses the byte order of the integer.",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"reverse_bits","","Reverses the bit pattern of the integer.",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"from_be","","Converts an integer from big endian to the target's…",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"from_le","","Converts an integer from little endian to the target's…",44,[[["wrapping",["i128"]],["i128"]],[["wrapping",["i128"]],["i128"]]]],[11,"to_be","","Converts `self` to big endian from the target's endianness.",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"to_le","","Converts `self` to little endian from the target's…",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"pow","","Raises self to the power of `exp`, using exponentiation by…",44,[[["u32"]],[["wrapping",["i128"]],["i128"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["isize"],["wrapping",["isize"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["i8"],["wrapping",["i8"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["wrapping",["i16"]],["i16"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["i32"],["wrapping",["i32"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["i64"],["wrapping",["i64"]]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"abs","","Computes the absolute value of `self`, wrapping around at…",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"signum","","Returns a number representing sign of `self`.",44,[[],[["wrapping",["i128"]],["i128"]]]],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the…",44,[[],["bool"]]],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the…",44,[[],["bool"]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["usize"],["wrapping",["usize"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["wrapping",["u8"]],["u8"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["u16"],["wrapping",["u16"]]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["wrapping",["u32"]],["u32"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["wrapping",["u64"]],["u64"]]]],[11,"leading_zeros","","Returns the number of leading zeros in the binary…",44,[[],["u32"]]],[11,"is_power_of_two","","Returns `true` if and only if `self == 2^k` for some `k`.",44,[[],["bool"]]],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to…",44,[[],[["u128"],["wrapping",["u128"]]]]],[11,"kind","","Outputs the detailed cause of parsing an integer failing.",156,[[["self"]],["interrorkind"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",158,[[["i128"]],["nonzeroi128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",158,[[["i128"]],[["nonzeroi128"],["option",["nonzeroi128"]]]]],[11,"get","","Returns the value as a primitive type.",158,[[],["i128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",159,[[["i16"]],["nonzeroi16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",159,[[["i16"]],[["option",["nonzeroi16"]],["nonzeroi16"]]]],[11,"get","","Returns the value as a primitive type.",159,[[],["i16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",160,[[["i32"]],["nonzeroi32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",160,[[["i32"]],[["nonzeroi32"],["option",["nonzeroi32"]]]]],[11,"get","","Returns the value as a primitive type.",160,[[],["i32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",161,[[["i64"]],["nonzeroi64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",161,[[["i64"]],[["nonzeroi64"],["option",["nonzeroi64"]]]]],[11,"get","","Returns the value as a primitive type.",161,[[],["i64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",162,[[["i8"]],["nonzeroi8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",162,[[["i8"]],[["option",["nonzeroi8"]],["nonzeroi8"]]]],[11,"get","","Returns the value as a primitive type.",162,[[],["i8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",163,[[["isize"]],["nonzeroisize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",163,[[["isize"]],[["nonzeroisize"],["option",["nonzeroisize"]]]]],[11,"get","","Returns the value as a primitive type.",163,[[],["isize"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",164,[[["u128"]],["nonzerou128"]]],[11,"new","","Creates a non-zero if the given value is not zero.",164,[[["u128"]],[["nonzerou128"],["option",["nonzerou128"]]]]],[11,"get","","Returns the value as a primitive type.",164,[[],["u128"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",165,[[["u16"]],["nonzerou16"]]],[11,"new","","Creates a non-zero if the given value is not zero.",165,[[["u16"]],[["nonzerou16"],["option",["nonzerou16"]]]]],[11,"get","","Returns the value as a primitive type.",165,[[],["u16"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",166,[[["u32"]],["nonzerou32"]]],[11,"new","","Creates a non-zero if the given value is not zero.",166,[[["u32"]],[["nonzerou32"],["option",["nonzerou32"]]]]],[11,"get","","Returns the value as a primitive type.",166,[[],["u32"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",167,[[["u64"]],["nonzerou64"]]],[11,"new","","Creates a non-zero if the given value is not zero.",167,[[["u64"]],[["option",["nonzerou64"]],["nonzerou64"]]]],[11,"get","","Returns the value as a primitive type.",167,[[],["u64"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",168,[[["u8"]],["nonzerou8"]]],[11,"new","","Creates a non-zero if the given value is not zero.",168,[[["u8"]],[["option",["nonzerou8"]],["nonzerou8"]]]],[11,"get","","Returns the value as a primitive type.",168,[[],["u8"]]],[11,"new_unchecked","","Creates a non-zero without checking the value.",169,[[["usize"]],["nonzerousize"]]],[11,"new","","Creates a non-zero if the given value is not zero.",169,[[["usize"]],[["nonzerousize"],["option",["nonzerousize"]]]]],[11,"get","","Returns the value as a primitive type.",169,[[],["usize"]]],[11,"contains","sp_std::ops","Returns `true` if `item` is contained in the range.",77,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",77,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",78,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",79,[[["self"],["u"]],["bool"]]],[11,"cloned","","Map a `Bound<&T>` to a `Bound<T>` by cloning the contents…",80,[[],["bound"]]],[11,"new","","Creates a new inclusive range. Equivalent to writing…",171,[[["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",171,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",171,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper…",171,[[]]],[11,"contains","","Returns `true` if `item` is contained in the range.",171,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",171,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",82,[[["self"],["u"]],["bool"]]],[11,"dangling","sp_std::ptr","Creates a new `NonNull` that is dangling, but well-aligned.",172,[[],["nonnull"]]],[11,"new_unchecked","","Creates a new `NonNull`.",172,[[],["nonnull"]]],[11,"new","","Creates a new `NonNull` if `ptr` is non-null.",172,[[],[["nonnull"],["option",["nonnull"]]]]],[11,"as_ptr","","Acquires the underlying `*mut` pointer.",172,[[]]],[11,"as_ref","","Dereferences the content.",172,[[["self"]],["t"]]],[11,"as_mut","","Mutably dereferences the content.",172,[[["self"]],["t"]]],[11,"cast","","Casts to a pointer of another type.",172,[[],["nonnull"]]],[11,"new","sp_std::rc","Constructs a new `Rc<T>`.",173,[[["t"]],["rc"]]],[11,"new_uninit","","Constructs a new `Rc` with uninitialized contents.",173,[[],[["maybeuninit"],["rc",["maybeuninit"]]]]],[11,"new_zeroed","","Constructs a new `Rc` with uninitialized contents, with…",173,[[],[["maybeuninit"],["rc",["maybeuninit"]]]]],[11,"pin","","Constructs a new `Pin<Rc<T>>`. If `T` does not implement…",173,[[["t"]],[["rc"],["pin",["rc"]]]]],[11,"try_unwrap","","Returns the inner value, if the `Rc` has exactly one…",173,[[["rc"]],[["result",["rc"]],["rc"]]]],[11,"new_uninit_slice","","Constructs a new reference-counted slice with…",173,[[["usize"]],["rc"]]],[11,"assume_init","","Converts to `Rc<T>`.",173,[[],["rc"]]],[11,"assume_init","","Converts to `Rc<[T]>`.",173,[[],["rc"]]],[11,"into_raw","","Consumes the `Rc`, returning the wrapped pointer.",173,[[["rc"]]]],[11,"from_raw","","Constructs an `Rc` from a raw pointer.",173,[[],["rc"]]],[11,"into_raw_non_null","","Consumes the `Rc`, returning the wrapped pointer as…",173,[[["rc"]],["nonnull"]]],[11,"downgrade","","Creates a new [`Weak`][weak] pointer to this allocation.",173,[[["rc"]],["weak"]]],[11,"weak_count","","Gets the number of [`Weak`][weak] pointers to this…",173,[[["rc"]],["usize"]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers to this…",173,[[["rc"]],["usize"]]],[11,"get_mut","","Returns a mutable reference into the given `Rc`, if there…",173,[[["rc"]],[["option"],["t"]]]],[11,"get_mut_unchecked","","Returns a mutable reference into the given `Rc`, without…",173,[[["rc"]],["t"]]],[11,"ptr_eq","","Returns `true` if the two `Rc`s point to the same…",173,[[["rc"]],["bool"]]],[11,"make_mut","","Makes a mutable reference into the given `Rc`.",173,[[["rc"]],["t"]]],[11,"downcast","","Attempt to downcast the `Rc<dyn Any>` to a concrete type.",173,[[],[["rc",["any"]],["result",["rc","rc"]],["rc"]]]],[11,"new","","Constructs a new `Weak<T>`, without allocating any memory.…",174,[[],["weak"]]],[11,"as_raw","","Returns a raw pointer to the object `T` pointed to by this…",174,[[["self"]]]],[11,"into_raw","","Consumes the `Weak<T>` and turns it into a raw pointer.",174,[[]]],[11,"from_raw","","Converts a raw pointer previously created by [`into_raw`]…",174,[[],["weak"]]],[11,"upgrade","","Attempts to upgrade the `Weak` pointer to an [`Rc`],…",174,[[["self"]],[["option",["rc"]],["rc"]]]],[11,"strong_count","","Gets the number of strong (`Rc`) pointers pointing to this…",174,[[["self"]],["usize"]]],[11,"weak_count","","Gets the number of `Weak` pointers pointing to this…",174,[[["self"]],["usize"]]],[11,"ptr_eq","","Returns `true` if the two `Weak`s point to the same…",174,[[["self"],["weak"]],["bool"]]],[11,"is_ok","sp_std::result","Returns `true` if the result is [`Ok`].",86,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",86,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if the result is an [`Ok`] value containing…",86,[[["self"],["u"]],["bool"]]],[11,"contains_err","","Returns `true` if the result is an [`Err`] value…",86,[[["f"],["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",86,[[],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",86,[[],["option"]]],[11,"as_ref","","Converts from `&Result<T, E>` to `Result<&T, &E>`.",86,[[["self"]],[["result"],["t"],["e"]]]],[11,"as_mut","","Converts from `&mut Result<T, E>` to `Result<&mut T, &mut…",86,[[["self"]],[["e"],["t"],["result"]]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a…",86,[[["f"]],["result"]]],[11,"map_or","","Applies a function to the contained value (if any), or…",86,[[["u"],["f"]],["u"]]],[11,"map_or_else","","Maps a `Result<T, E>` to `U` by applying a function to a…",86,[[["d"],["f"]],["u"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a…",86,[[["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",86,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained…",86,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns…",86,[[["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the…",86,[[["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns…",86,[[["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the…",86,[[["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else,…",86,[[["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If…",86,[[["f"]],["t"]]],[11,"copied","","Maps a `Result<&T, E>` to a `Result<T, E>` by copying the…",86,[[],["result"]]],[11,"copied","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying…",86,[[],["result"]]],[11,"cloned","","Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the…",86,[[],["result"]]],[11,"cloned","","Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning…",86,[[],["result"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",86,[[],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",86,[[["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",86,[[],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",86,[[["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",86,[[],["t"]]],[11,"as_deref_ok","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",86,[[["self"]],[["e"],["result"]]]],[11,"as_deref_err","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",86,[[["self"]],[["t"],["result"]]]],[11,"as_deref","","Converts from `Result<T, E>` (or `&Result<T, E>`) to…",86,[[["self"]],["result"]]],[11,"as_deref_mut_ok","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",86,[[["self"]],[["result"],["e"]]]],[11,"as_deref_mut_err","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",86,[[["self"]],[["result"],["t"]]]],[11,"as_deref_mut","","Converts from `Result<T, E>` (or `&mut Result<T, E>`) to…",86,[[["self"]],["result"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a…",86,[[],[["result"],["option",["result"]]]]],[11,"remainder","sp_std::slice","Returns the remainder of the original slice that is not…",180,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",181,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",185,[[["self"]]]],[11,"into_slice","","Views the underlying data as a subslice of the original…",186,[[]]],[11,"as_slice","","Views the underlying data as a subslice of the original…",186,[[["self"]]]],[11,"remainder","","Returns the remainder of the original slice that is not…",188,[[["self"]]]],[11,"into_remainder","","Returns the remainder of the original slice that is not…",189,[[]]],[11,"as_str","sp_std::str","Views the underlying data as a subslice of the original…",205,[[["self"]],["str"]]],[11,"as_str","","Views the underlying data as a subslice of the original…",206,[[["self"]],["str"]]],[11,"valid_up_to","","Returns the index in the given string up to which valid…",211,[[["self"]],["usize"]]],[11,"error_len","","Provides more information about the failure:",211,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"new","sp_std::prelude","Constructs a new, empty `Vec<T>`.",224,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified…",224,[[["usize"]],["vec"]]],[11,"into_raw_parts","","Decomposes a `Vec<T>` into its raw components.",224,[[]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of…",224,[[["usize"]],["vec"]]],[11,"capacity","","Returns the number of elements the vector can hold without…",224,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",224,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",224,[[["self"],["usize"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",224,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",224,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",224,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",224,[[["self"],["usize"]]]],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",224,[[],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and…",224,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",224,[[["self"]]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",224,[[["self"]]]],[11,"as_ptr","","Returns a raw pointer to the vector's buffer.",224,[[["self"]]]],[11,"as_mut_ptr","","Returns an unsafe mutable pointer to the vector's buffer.",224,[[["self"]]]],[11,"set_len","","Forces the length of the vector to `new_len`.",224,[[["self"],["usize"]]]],[11,"swap_remove","","Removes an element from the vector and returns it.",224,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector,…",224,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within…",224,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",224,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the…",224,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the…",224,[[["self"],["f"]]]],[11,"push","","Appends an element to the back of a collection.",224,[[["self"],["t"]]]],[11,"pop","","Removes the last element from a vector and returns it, or…",224,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving…",224,[[["self"],["vec"]]]],[11,"drain","","Creates a draining iterator that removes the specified…",224,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",224,[[["self"]]]],[11,"len","","Returns the number of elements in the vector, also…",224,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",224,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",224,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to…",224,[[["self"],["usize"],["f"]]]],[11,"leak","","Consumes and leaks the `Vec`, returning a mutable…",224,[[["vec"]]]],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to…",224,[[["self"],["usize"],["t"]]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",224,[[["self"]]]],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to…",224,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the vector…",224,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the vector if…",224,[[["self"],["v"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified…",224,[[["self"],["i"],["r"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if…",224,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","sp_std::vec","Returns the remaining items of this iterator as a slice.",225,[[["self"]]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",225,[[["self"]]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",226,[[["self"]]]],[11,"new","sp_std::collections::btree_map","Makes a new empty BTreeMap with a reasonable choice for B.",229,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all elements.",229,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",229,[[["self"],["q"]],[["option"],["v"]]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied…",229,[[["self"],["q"]],["option"]]],[11,"first_key_value","","Returns the first key-value pair in the map. The key in…",229,[[["self"]],["option"]]],[11,"first_entry","","Returns the first entry in the map for in-place…",229,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"last_key_value","","Returns the last key-value pair in the map. The key in…",229,[[["self"]],["option"]]],[11,"last_entry","","Returns the last entry in the map for in-place…",229,[[["self"]],[["occupiedentry"],["option",["occupiedentry"]]]]],[11,"contains_key","","Returns `true` if the map contains a value for the…",229,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",229,[[["self"],["q"]],[["v"],["option"]]]],[11,"insert","","Inserts a key-value pair into the map.",229,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key…",229,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",229,[[["btreemap"],["self"]]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",229,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a…",229,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",229,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",229,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",229,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map,…",229,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",229,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by…",229,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in…",229,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",229,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",229,[[["self"]],["bool"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",95,[[["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",95,[[["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",95,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry…",95,[[["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default…",95,[[],["v"]]],[11,"key","","Gets a reference to the key that would be used when…",236,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",236,[[],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key,…",236,[[["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",237,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",237,[[]]],[11,"get","","Gets a reference to the value in the entry.",237,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",237,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",237,[[],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",237,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",237,[[],["v"]]],[11,"new","sp_std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",245,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of…",245,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e., the…",245,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference,…",245,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e., the…",245,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e., all the…",245,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",245,[[["self"]]]],[11,"contains","","Returns `true` if the set contains a value.",245,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that…",245,[[["self"],["q"]],[["t"],["option"]]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with…",245,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e.,…",245,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e.,…",245,[[["self"],["btreeset"]],["bool"]]],[11,"first","","Returns a reference to the first value in the set, if any.…",245,[[["self"]],[["t"],["option"]]]],[11,"last","","Returns a reference to the last value in the set, if any.…",245,[[["self"]],[["t"],["option"]]]],[11,"pop_first","","Removes the first value from the set and returns it, if…",245,[[["self"]],["option"]]],[11,"pop_last","","Removes the last value from the set and returns it, if…",245,[[["self"]],["option"]]],[11,"insert","","Adds a value to the set.",245,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if…",245,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns whether the value…",245,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is…",245,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving…",245,[[["self"],["btreeset"]]]],[11,"split_off","","Splits the collection into two at the given key. Returns…",245,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet`…",245,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",245,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",245,[[["self"]],["bool"]]],[11,"new","sp_std::collections::vec_deque","Creates an empty `VecDeque`.",248,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least…",248,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",248,[[["self"],["usize"]],[["t"],["option"]]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",248,[[["self"],["usize"]],[["option"],["t"]]]],[11,"swap","","Swaps elements at indices `i` and `j`.",248,[[["self"],["usize"]]]],[11,"capacity","","Returns the number of elements the `VecDeque` can hold…",248,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional`…",248,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",248,[[["self"],["usize"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly…",248,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more…",248,[[["self"],["usize"]],[["tryreserveerror"],["result",["tryreserveerror"]]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",248,[[["self"]]]],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",248,[[["self"],["usize"]]]],[11,"truncate","","Shortens the `VecDeque`, keeping the first `len` elements…",248,[[["self"],["usize"]]]],[11,"iter","","Returns a front-to-back iterator.",248,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable…",248,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the…",248,[[["self"]]]],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the…",248,[[["self"]]]],[11,"len","","Returns the number of elements in the `VecDeque`.",248,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",248,[[["self"]],["bool"]]],[11,"drain","","Creates a draining iterator that removes the specified…",248,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",248,[[["self"]]]],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal…",248,[[["t"],["self"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if…",248,[[["self"]],[["t"],["option"]]]],[11,"front_mut","","Provides a mutable reference to the front element, or…",248,[[["self"]],[["option"],["t"]]]],[11,"back","","Provides a reference to the back element, or `None` if the…",248,[[["self"]],[["t"],["option"]]]],[11,"back_mut","","Provides a mutable reference to the back element, or…",248,[[["self"]],[["option"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the…",248,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the `VecDeque` and returns…",248,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",248,[[["self"],["t"]]]],[11,"push_back","","Appends an element to the back of the `VecDeque`.",248,[[["self"],["t"]]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and…",248,[[["self"],["usize"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and…",248,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`,…",248,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at `index` from the…",248,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",248,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `self`, leaving…",248,[[["self"],["vecdeque"]]]],[11,"retain","","Retains only the elements specified by the predicate.",248,[[["self"],["f"]]]],[11,"resize_with","","Modifies the `VecDeque` in-place so that `len()` is equal…",248,[[["self"],["usize"]]]],[11,"rotate_left","","Rotates the double-ended queue `mid` places to the left.",248,[[["self"],["usize"]]]],[11,"rotate_right","","Rotates the double-ended queue `k` places to the right.",248,[[["self"],["usize"]]]],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal…",248,[[["self"],["usize"],["t"]]]]],"p":[[8,"GlobalAlloc"],[3,"Excess"],[8,"Alloc"],[8,"Any"],[8,"ToOwned"],[4,"Cow"],[8,"Borrow"],[8,"BorrowMut"],[8,"Clone"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Default"],[4,"Alignment"],[8,"Binary"],[8,"Octal"],[8,"Debug"],[8,"Display"],[8,"Write"],[8,"LowerExp"],[8,"UpperExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Iterator"],[8,"Step"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"FromIterator"],[8,"IntoIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[3,"Wrapping"],[4,"FpCategory"],[4,"IntErrorKind"],[8,"Add"],[8,"Div"],[8,"Mul"],[8,"Neg"],[8,"Rem"],[8,"Sub"],[8,"AddAssign"],[8,"DivAssign"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Not"],[8,"Shl"],[8,"Shr"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Deref"],[8,"DerefMut"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Index"],[8,"IndexMut"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Bound"],[8,"RangeBounds"],[3,"RangeToInclusive"],[8,"Try"],[8,"Generator"],[4,"GeneratorState"],[4,"Result"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[4,"Entry"],[3,"System"],[3,"AllocErr"],[3,"CannotReallocInPlace"],[3,"LayoutErr"],[3,"Layout"],[3,"Global"],[3,"TypeId"],[3,"Box"],[3,"Cell"],[3,"RefCell"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[4,"Infallible"],[3,"Error"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"Formatter"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Empty"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"Repeat"],[3,"RepeatWith"],[3,"Successors"],[3,"Cloned"],[3,"Copied"],[3,"Flatten"],[3,"StepBy"],[3,"Chain"],[3,"Cycle"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"Map"],[3,"Rev"],[3,"Zip"],[3,"FlatMap"],[3,"Peekable"],[3,"Scan"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"PhantomPinned"],[3,"Discriminant"],[3,"ManuallyDrop"],[19,"MaybeUninit"],[3,"ParseFloatError"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"NonZeroI128"],[3,"NonZeroI16"],[3,"NonZeroI32"],[3,"NonZeroI64"],[3,"NonZeroI8"],[3,"NonZeroIsize"],[3,"NonZeroU128"],[3,"NonZeroU16"],[3,"NonZeroU32"],[3,"NonZeroU64"],[3,"NonZeroU8"],[3,"NonZeroUsize"],[3,"RangeFull"],[3,"RangeInclusive"],[3,"NonNull"],[3,"Rc"],[3,"Weak"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Chunks"],[3,"Windows"],[3,"ChunksExact"],[3,"ChunksExactMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"IterMut"],[3,"RChunks"],[3,"RChunksExact"],[3,"RChunksExactMut"],[3,"RChunksMut"],[3,"RSplit"],[3,"RSplitMut"],[3,"RSplitN"],[3,"RSplitNMut"],[3,"SplitN"],[3,"SplitNMut"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"EncodeUtf16"],[3,"SplitAsciiWhitespace"],[3,"SplitWhitespace"],[3,"Bytes"],[3,"CharIndices"],[3,"Chars"],[3,"ParseBoolError"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Error"],[3,"Lines"],[3,"LinesAny"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"RSplit"],[3,"Split"],[3,"RSplitN"],[3,"SplitN"],[3,"RSplitTerminator"],[3,"SplitTerminator"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"Splice"],[3,"DrainFilter"],[3,"BTreeMap"],[3,"Keys"],[3,"Iter"],[3,"IntoIter"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"IterMut"],[3,"ValuesMut"],[3,"Iter"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"BTreeSet"],[3,"IntoIter"],[3,"Range"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["sp_storage"] = {"doc":"Primitive types for storage related stuff.","i":[[3,"StorageKey","sp_storage","Storage key.",null,null],[12,"0","","",0,null],[3,"StorageData","","Storage data associated to a [`StorageKey`].",null,null],[12,"0","","",1,null],[3,"StorageChild","","Child trie storage data.",null,null],[12,"data","","Child data for storage.",2,null],[12,"child_info","","Associated child info for a child trie.",2,null],[3,"Storage","","Struct containing data needed for a storage.",null,null],[12,"top","","Top trie storage data.",3,null],[12,"children","","Children trie storage data by storage key.",3,null],[3,"StorageChangeSet","","Storage change set",null,null],[12,"block","","Block hash",4,null],[12,"changes","","A list of changes",4,null],[3,"ChildStorageKey","","A wrapper around a child storage key.",null,null],[3,"ChildTrie","","A child trie of default type. Default is the same…",null,null],[3,"OwnedChildTrie","","Owned version of default child trie `ChildTrie`.",null,null],[4,"ChildInfo","","Information related to a child state.",null,null],[13,"Default","","",5,null],[4,"OwnedChildInfo","","Owned version of `ChildInfo`. To be use in persistence…",null,null],[13,"Default","","",6,null],[4,"ChildType","","Type of child. It does not strictly define different child…",null,null],[13,"CryptoUniqueId","","Default, it uses a cryptographic strong unique id as input.",7,null],[0,"well_known_keys","","List of all well known keys and prefixes in storage.",null,null],[5,"is_child_storage_key","sp_storage::well_known_keys","Whether a key is a child storage key.",null,[[],["bool"]]],[5,"is_child_trie_key_valid","","Determine whether a child trie key is valid.",null,[[],["bool"]]],[17,"CODE","","Wasm code of the runtime.",null,null],[17,"HEAP_PAGES","","Number of wasm linear memory pages required for execution…",null,null],[17,"EXTRINSIC_INDEX","","Current extrinsic index (u32) is stored under this key.",null,null],[17,"CHANGES_TRIE_CONFIG","","Changes trie configuration is stored under this key.",null,null],[17,"CHILD_STORAGE_KEY_PREFIX","","Prefix of child storage keys.",null,null],[6,"StorageMap","sp_storage","Map of data to use in a storage, it is a collection of…",null,null],[11,"from_vec","","Create a new `ChildStorageKey` from a vector.",8,[[["vec",["u8"]],["u8"]],["option"]]],[11,"from_slice","","Create a new `ChildStorageKey` from a slice.",8,[[],["option"]]],[11,"as_ref","","Get access to the byte representation of the storage key.",8,[[["self"]]]],[11,"into_owned","","Destruct this instance into an owned vector that…",8,[[],[["vec",["u8"]],["u8"]]]],[11,"new_default","","Instantiates information for a default child trie.",5,[[],["self"]]],[11,"to_owned","","Instantiates a owned version of this child info.",5,[[["self"]],["ownedchildinfo"]]],[11,"resolve_child_info","","Create child info from a linear byte packed value and a…",5,[[["u32"]],["option"]]],[11,"info","","Return a single byte vector containing packed child info…",5,[[["self"]]]],[11,"keyspace","","Return byte sequence (keyspace) that can be use by…",5,[[["self"]]]],[11,"new_default","","Instantiates info for a default child trie.",6,[[["vec",["u8"]],["u8"]],["self"]]],[11,"try_update","","Try to update with another instance, return false if both…",6,[[["childinfo"],["self"]],["bool"]]],[11,"as_ref","","Get `ChildInfo` reference to this owned child info.",6,[[["self"]],["childinfo"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["storagekey"]]],[11,"clone","","",1,[[["self"]],["storagedata"]]],[11,"clone","","",2,[[["self"]],["storagechild"]]],[11,"clone","","",3,[[["self"]],["storage"]]],[11,"clone","","",5,[[["self"]],["childinfo"]]],[11,"clone","","",6,[[["self"]],["ownedchildinfo"]]],[11,"clone","","",9,[[["self"]],["childtrie"]]],[11,"clone","","",10,[[["self"]],["ownedchildtrie"]]],[11,"default","","",3,[[],["storage"]]],[11,"cmp","","",0,[[["self"],["storagekey"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["storagedata"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["ownedchildinfo"]],["ordering"]]],[11,"cmp","","",10,[[["ownedchildtrie"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"ne","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"eq","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"ne","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"eq","","",2,[[["storagechild"],["self"]],["bool"]]],[11,"ne","","",2,[[["storagechild"],["self"]],["bool"]]],[11,"eq","","",4,[[["storagechangeset"],["self"]],["bool"]]],[11,"ne","","",4,[[["storagechangeset"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"ne","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"eq","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"ne","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["storagekey"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"le","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"gt","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"ge","","",0,[[["self"],["storagekey"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["storagedata"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"le","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"gt","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"ge","","",1,[[["self"],["storagedata"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["ownedchildinfo"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"le","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"gt","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"ge","","",6,[[["self"],["ownedchildinfo"]],["bool"]]],[11,"partial_cmp","","",10,[[["ownedchildtrie"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"le","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"gt","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"ge","","",10,[[["ownedchildtrie"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]]],"p":[[3,"StorageKey"],[3,"StorageData"],[3,"StorageChild"],[3,"Storage"],[3,"StorageChangeSet"],[4,"ChildInfo"],[4,"OwnedChildInfo"],[4,"ChildType"],[3,"ChildStorageKey"],[3,"ChildTrie"],[3,"OwnedChildTrie"]]};
searchIndex["sp_trie"] = {"doc":"Utility functions to interact with Substrate's Base-16…","i":[[8,"Trie","sp_trie","Various re-exports from the `trie-db` crate. A key-value…",null,null],[10,"root","","Return the root of the trie.",0,[[["self"]]]],[11,"is_empty","","Is the trie empty?",0,[[["self"]],["bool"]]],[11,"contains","","Does the trie contain a given key?",0,[[["self"]],[["box",["trieerror"]],["result",["bool","box"]],["bool"]]]],[11,"get","","What is the value of the given key in this trie?",0,[[["self"]],[["box",["trieerror"]],["result",["option","box"]],["option",["vec"]]]]],[10,"get_with","","Search for the key with the given query parameter. See the…",0,[[["self"],["q"]],[["option"],["result",["option","box"]],["box",["trieerror"]]]]],[10,"iter","","Returns a depth-first iterator over the elements of trie.",0,[[["self"]],[["box",["trieerror"]],["box",["trieiterator"]],["result",["box","box"]]]]],[8,"TrieMut","","Various re-exports from the `trie-db` crate. A key-value…",null,null],[10,"root","","Return the root of the trie.",1,[[["self"]]]],[10,"is_empty","","Is the trie empty?",1,[[["self"]],["bool"]]],[11,"contains","","Does the trie contain a given key?",1,[[["self"]],[["box",["trieerror"]],["result",["bool","box"]],["bool"]]]],[10,"get","","What is the value of the given key in this trie?",1,[[["self"]],[["box",["trieerror"]],["result",["option","box"]],["option",["vec"]]]]],[10,"insert","","Insert a `key`/`value` pair into the trie. An empty value…",1,[[["self"]],[["box",["trieerror"]],["result",["option","box"]],["option",["vec"]]]]],[10,"remove","","Remove a `key` from the trie. Equivalent to making it…",1,[[["self"]],[["box",["trieerror"]],["result",["option","box"]],["option",["vec"]]]]],[6,"DBValue","","Various re-exports from the `trie-db` crate. Database value",null,null],[3,"Recorder","","Various re-exports from the `trie-db` crate. Records trie…",null,null],[6,"CError","","Various re-exports from the `trie-db` crate. Alias…",null,null],[8,"Query","","Various re-exports from the `trie-db` crate. Description…",null,null],[16,"Item","","Output item.",2,null],[10,"decode","","Decode a byte-slice into the desired item.",2,[[]]],[11,"record","","Record that a node has been passed through.",2,[[["u32"],["self"]]]],[8,"TrieLayout","","Various re-exports from the `trie-db` crate. Trait with…",null,null],[18,"USE_EXTENSION","","If true, the trie will use extension nodes and no partial…",3,null],[16,"Hash","","Hasher to use for this trie.",3,null],[16,"Codec","","Codec to use (needs to match hasher and nibble ops).",3,null],[8,"TrieConfiguration","","Various re-exports from the `trie-db` crate. This trait…",null,null],[11,"trie_build","","Operation to build a trie db from its ordered iterator…",4,[[["db"],["i"]]]],[11,"trie_root","","Determines a trie root given its ordered contents, closed…",4,[[["i"]]]],[11,"trie_root_unhashed","","Determines a trie root node's data given its ordered…",4,[[["i"]],[["u8"],["vec",["u8"]]]]],[11,"encode_index","","Encoding of index as a key (when reusing general trie for…",4,[[["u32"]],[["u8"],["vec",["u8"]]]]],[11,"ordered_trie_root","","A trie root formed from the items, with keys attached…",4,[[["i"]]]],[0,"nibble_ops","","Various re-exports from the `trie-db` crate. Utility…",null,null],[17,"BIT_PER_NIBBLE","sp_trie::nibble_ops","Single nibble length in bit.",null,null],[17,"NIBBLE_PER_BYTE","","Number of nibble per byte.",null,null],[17,"NIBBLE_LENGTH","","Number of child for a branch (trie radix).",null,null],[17,"PADDING_BITMASK","","Nibble (half a byte).",null,null],[17,"CONTENT_HEADER_SIZE","","Size of header.",null,null],[5,"pad_left","","Mask a byte, keeping left nibble.",null,[[["u8"]],["u8"]]],[5,"pad_right","","Mask a byte, keeping right byte.",null,[[["u8"]],["u8"]]],[5,"at_left","","Get u8 nibble value at a given index of a byte.",null,[[["u8"]],["u8"]]],[5,"left_nibble_at","","Get u8 nibble value at a given index in a left aligned…",null,[[["usize"]],["u8"]]],[5,"at","","Get u8 nibble value at a given index in a `NibbleSlice`.",null,[[["usize"],["nibbleslice"]],["u8"]]],[5,"push_at_left","","Push u8 nibble value at a given index into an existing byte.",null,[[["u8"]],["u8"]]],[5,"number_padding","","Calculate the number of needed padding a array of nibble…",null,[[["usize"]],["usize"]]],[17,"SPLIT_SHIFTS","","The nibble shifts needed to align. We use two value, one…",null,null],[5,"biggest_depth","","Count the biggest common depth between two left aligned…",null,[[],["usize"]]],[5,"left_common","","Calculate the number of common nibble between two left…",null,[[["u8"]],["usize"]]],[5,"shift_key","","Shifts right aligned key to add a given left offset.…",null,[[["usize"]],["bool"]]],[8,"KeyFunction","sp_trie","Various re-exports from the `memory-db` crate.",null,null],[16,"Key","","",5,null],[10,"key","","",5,[[]]],[5,"prefixed_key","","Derive a database key from hash value of the node (key)…",null,[[],[["u8"],["vec",["u8"]]]]],[8,"HashDBT","","Various re-exports from the `hash-db` crate. Trait…",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",6,[[["self"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",6,[[["self"]],["bool"]]],[10,"insert","","Insert a datum item into the DB and return the datum's…",6,[[["self"]]]],[10,"emplace","","Like `insert()`, except you provide the key and the data…",6,[[["self"],["t"]]]],[10,"remove","","Remove a datum previously inserted. Insertions can be…",6,[[["self"]]]],[7,"EMPTY_PREFIX","","Various re-exports from the `hash-db` crate. An empty…",null,null],[3,"TrieStream","","Codec-flavored TrieStream.",null,null],[3,"NodeCodec","","Concrete implementation of a `NodeCodec` with Parity Codec…",null,null],[3,"Layout","","substrate trie layout",null,null],[3,"KeySpacedDB","","`HashDB` implementation that append a encoded prefix…",null,null],[3,"KeySpacedDBMut","","`HashDBMut` implementation that append a encoded prefix…",null,null],[4,"Error","","Error for trie node decoding.",null,null],[13,"BadFormat","","Bad format.",7,null],[13,"Decode","","Decoding error.",7,null],[5,"delta_trie_root","","Determine a trie root given a hash DB and delta values.",null,[[["triehash"],["trieconfiguration"],["db"],["i"]],[["result",["triehash","box"]],["triehash"],["box",["trieerror"]]]]],[5,"read_trie_value","","Read a value from the trie.",null,[[["triehash"],["db"]],[["option",["vec"]],["result",["option","box"]],["box",["trieerror"]]]]],[5,"read_trie_value_with","","Read a value from the trie with given Query.",null,[[["db"],["query"],["triehash"]],[["option",["vec"]],["result",["option","box"]],["box",["trieerror"]]]]],[5,"default_child_trie_root","","Determine the default child trie root.",null,[[]]],[5,"child_trie_root","","Determine a child trie root given its ordered contents,…",null,[[["i"]]]],[5,"child_delta_trie_root","","Determine a child trie root given a hash DB and delta…",null,[[["db"],["i"],["rd"]],[["result",["box"]],["box",["trieerror"]]]]],[5,"for_keys_in_child_trie","","Call `f` for all keys in a child trie.",null,[[["db"],["fnmut"]],[["box",["trieerror"]],["result",["box"]]]]],[5,"record_all_keys","","Record all keys for a given root.",null,[[["triehash"],["db"],["recorder"]],[["box",["trieerror"]],["result",["box"]]]]],[5,"read_child_trie_value","","Read a value from the child trie.",null,[[["db"]],[["option",["vec"]],["result",["option","box"]],["box",["trieerror"]]]]],[5,"read_child_trie_value_with","","Read a value from the child trie with given query.",null,[[["db"],["query"]],[["option",["vec"]],["result",["option","box"]],["box",["trieerror"]]]]],[11,"as_raw","","",8,[[["self"]]]],[0,"trie_types","","This module is for non generic definition of trie type.…",null,null],[6,"Layout","sp_trie::trie_types","",null,null],[6,"TrieDB","","Persistent trie database read-access interface for the a…",null,null],[6,"TrieDBMut","","Persistent trie database write-access interface for the a…",null,null],[6,"Lookup","","Querying interface, as in `trie_db` but less generic.",null,null],[6,"TrieError","","As in `trie_db`, but less generic, error type for the crate.",null,null],[6,"TrieError","sp_trie","TrieDB error over `TrieConfiguration` trait.",null,null],[6,"HashDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[6,"PlainDB","","Reexport from `hash_db`, with genericity set for key only.",null,null],[6,"PrefixedMemoryDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[6,"MemoryDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[6,"GenericMemoryDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[6,"TrieDB","","Persistent trie database read-access interface for the a…",null,null],[6,"TrieDBMut","","Persistent trie database write-access interface for the a…",null,null],[6,"Lookup","","Querying interface, as in `trie_db` but less generic.",null,null],[6,"TrieHash","","Hash type for a trie layout.",null,null],[8,"AsHashDB","","Reexport from `hash_db`, with genericity set for `Hasher`…",null,null],[11,"new","","instantiate new keyspaced db",9,[[["db"]],["self"]]],[11,"new","","instantiate new keyspaced db",10,[[["db"]],["self"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"unchecked_into","","",11,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",11,[[["outer"]],["t"]]],[11,"vzip","","",11,[[],["v"]]],[11,"clear","","",11,[[["self"]]]],[11,"initialize","","",11,[[]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"unchecked_into","","",8,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",8,[[["outer"]],["t"]]],[11,"vzip","","",8,[[],["v"]]],[11,"clear","","",8,[[["self"]]]],[11,"initialize","","",8,[[]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"unchecked_into","","",12,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",12,[[["outer"]],["t"]]],[11,"vzip","","",12,[[],["v"]]],[11,"clear","","",12,[[["self"]]]],[11,"initialize","","",12,[[]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"unchecked_into","","",13,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",13,[[["outer"]],["t"]]],[11,"vzip","","",13,[[],["v"]]],[11,"clear","","",13,[[["self"]]]],[11,"initialize","","",13,[[]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"unchecked_into","","",9,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",9,[[["outer"]],["t"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"unchecked_into","","",10,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",10,[[["outer"]],["t"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"unchecked_into","","",7,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",7,[[["outer"]],["t"]]],[11,"vzip","","",7,[[],["v"]]],[11,"as_fail","","",7,[[["self"]],["fail"]]],[11,"fmt","","",11,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"default","","",11,[[],["recorder"]]],[11,"from","","",7,[[["error"]],["self"]]],[11,"clone","","",7,[[["self"]],["error"]]],[11,"clone","","",12,[[["self"]],["nodecodec"]]],[11,"clone","","",8,[[["self"]],["triestream"]]],[11,"default","","",12,[[],["nodecodec"]]],[11,"default","","",8,[[],["triestream"]]],[11,"default","","",13,[[],["layout"]]],[11,"eq","","",7,[[["self"],["error"]],["bool"]]],[11,"ne","","",7,[[["self"],["error"]],["bool"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"description","","",7,[[["self"]],["str"]]],[11,"get","","",10,[[["prefix"],["self"]],["option"]]],[11,"contains","","",10,[[["prefix"],["self"]],["bool"]]],[11,"insert","","",10,[[["self"],["prefix"]]]],[11,"emplace","","",10,[[["t"],["self"],["prefix"]]]],[11,"remove","","",10,[[["self"],["prefix"]]]],[11,"get","","",9,[[["prefix"],["self"]],["option"]]],[11,"contains","","",9,[[["prefix"],["self"]],["bool"]]],[11,"as_hash_db","","",10,[[["self"]],["hashdb"]]],[11,"as_hash_db_mut","","",10,[[["self"]],["hashdb"]]],[11,"hashed_null_node","","",12,[[]]],[11,"decode_plan","","",12,[[],[["result",["nodeplan"]],["nodeplan"]]]],[11,"is_empty_node","","",12,[[],["bool"]]],[11,"empty_node","","",12,[[]]],[11,"leaf_node","","",12,[[["partial"]],[["vec",["u8"]],["u8"]]]],[11,"extension_node","","",12,[[["usize"],["childreference"]],[["vec",["u8"]],["u8"]]]],[11,"branch_node","","",12,[[["option"]],[["vec",["u8"]],["u8"]]]],[11,"branch_node_nibbled","","",12,[[["usize"],["option"]],[["vec",["u8"]],["u8"]]]],[11,"trie_root","","",13,[[["i"]]]],[11,"trie_root_unhashed","","",13,[[["i"]],[["vec",["u8"]],["u8"]]]],[11,"encode_index","","",13,[[["u32"]],[["vec",["u8"]],["u8"]]]],[11,"new","","",8,[[],["self"]]],[11,"append_empty_data","","",8,[[["self"]]]],[11,"append_leaf","","",8,[[["self"]]]],[11,"begin_branch","","",8,[[["self"],["option"]]]],[11,"append_extension","","",8,[[["self"]]]],[11,"append_substream","","",8,[[["self"]]]],[11,"out","","",8,[[],[["vec",["u8"]],["u8"]]]],[11,"new","","Create a new `Recorder` which records all given nodes.",11,[[],["recorder"]]],[11,"with_depth","","Create a `Recorder` which only records nodes beyond a…",11,[[["u32"]],["recorder"]]],[11,"record","","Record a visited node, given its hash, data, and depth.",11,[[["u32"],["self"],["ho"]]]],[11,"drain","","Drain all visited records.",11,[[["self"]],[["record"],["vec",["record"]]]]]],"p":[[8,"Trie"],[8,"TrieMut"],[8,"Query"],[8,"TrieLayout"],[8,"TrieConfiguration"],[8,"KeyFunction"],[8,"HashDBT"],[4,"Error"],[3,"TrieStream"],[3,"KeySpacedDB"],[3,"KeySpacedDBMut"],[3,"Recorder"],[3,"NodeCodec"],[3,"Layout"]]};
searchIndex["sp_version"] = {"doc":"Version module for the Substrate runtime; Provides a…","i":[[14,"create_runtime_str","sp_version","Create a const [`RuntimeString`].",null,null],[3,"RuntimeVersion","","Runtime version. This should not be thought of as classic…",null,null],[12,"spec_name","","Identifies the different Substrate runtimes. There'll be…",0,null],[12,"impl_name","","Name of the implementation of the spec. This is of little…",0,null],[12,"authoring_version","","`authoring_version` is the version of the authorship…",0,null],[12,"spec_version","","Version of the runtime specification. A full-node will not…",0,null],[12,"impl_version","","Version of the implementation of the specification. Nodes…",0,null],[12,"apis","","List of supported API \"features\" along with their versions.",0,null],[3,"NativeVersion","","",null,null],[12,"runtime_version","","Basic runtime version info.",1,null],[12,"can_author_with","","Authoring runtimes that this native runtime supports.",1,null],[6,"ApiId","","The identity of a particular API interface that the…",null,null],[6,"ApisVec","","A vector of pairs of `ApiId` and a `u32` for version. For…",null,null],[8,"GetRuntimeVersion","","Something that can provide the runtime version at a given…",null,null],[10,"native_version","","Returns the version of the native runtime.",2,[[["self"]],["nativeversion"]]],[10,"runtime_version","","Returns the version of runtime at the given block.",2,[[["self"],["blockid"]],[["runtimeversion"],["string"],["result",["runtimeversion","string"]]]]],[11,"can_call_with","","Check if this version matches other version for calling…",0,[[["self"],["runtimeversion"]],["bool"]]],[11,"has_api","","Check if this version supports a particular API.",0,[[["self"]],["bool"]]],[11,"has_api_with","","Check if the given api is implemented and the version…",0,[[["fn"],["self"]],["bool"]]],[11,"can_author_with","","Check if this version matches other version for authoring…",1,[[["self"],["runtimeversion"]],[["result",["string"]],["string"]]]],[14,"create_apis_vec","","Create a vector of Api declarations.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"decode","","",0,[[["i"]],[["result",["error"]],["error"]]]],[11,"size_hint","","",0,[[["self"]],["usize"]]],[11,"using_encoded","","",0,[[["self"],["f"]],["r"]]],[11,"encode","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"encode_to","","",0,[[["w"],["self"]]]],[11,"is_clear","","",0,[[["self"]],["bool"]]],[11,"clear","","",0,[[],["t"]]],[11,"to_keyed_vec","","",0,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"decode_all","","",0,[[],[["result",["error"]],["error"]]]],[11,"unchecked_into","","",0,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",0,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",0,[[],["t"]]],[11,"vzip","","",0,[[],["v"]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"unchecked_into","","",1,[[],["t"]]],[11,"from_ref","","Get a reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"from_mut","","Get a mutable reference to the inner from the outer.",1,[[["outer"]],["t"]]],[11,"unique_saturated_into","","",1,[[],["t"]]],[11,"vzip","","",1,[[],["v"]]],[11,"clone","","",0,[[["self"]],["runtimeversion"]]],[11,"default","","",0,[[],["runtimeversion"]]],[11,"eq","","",0,[[["self"],["runtimeversion"]],["bool"]]],[11,"ne","","",0,[[["self"],["runtimeversion"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"decode","","",0,[[["decin"]],[["error"],["result",["error"]]]]],[11,"encode_to","","",0,[[["self"],["encout"]]]]],"p":[[3,"RuntimeVersion"],[3,"NativeVersion"],[8,"GetRuntimeVersion"]]};
searchIndex["sp_wasm_interface"] = {"doc":"Types and traits for interfacing between the host and the…","i":[[3,"Pointer","sp_wasm_interface","Type to represent a pointer in wasm at the host.",null,null],[3,"Signature","","The Signature of a function",null,null],[12,"args","","The arguments of a function.",0,null],[12,"return_value","","The optional return value of a function.",0,null],[4,"ValueType","","Value types supported by Substrate on the boundary between…",null,null],[13,"I32","","An `i32` value type.",1,null],[13,"I64","","An `i64` value type.",1,null],[13,"F32","","An `f32` value type.",1,null],[13,"F64","","An `f64` value type.",1,null],[4,"Value","","Values supported by Substrate on the boundary between…",null,null],[13,"I32","","An `i32` value.",2,null],[13,"I64","","An `i64` value.",2,null],[13,"F32","","An nan-preserving `f32` value.",2,null],[13,"F64","","An nan-preserving `f64` value.",2,null],[6,"Result","","Result type used by traits in this crate.",null,null],[6,"WordSize","","The word size used in wasm. Normally known as `usize` in…",null,null],[6,"MemoryId","","Sandbox memory identifier.",null,null],[8,"PointerType","","Something that can be wrapped in a wasm `Pointer`.",null,null],[18,"SIZE","","The size of the type in wasm.",3,null],[8,"Function","","Something that provides a function implementation on the…",null,null],[10,"name","","Returns the name of this function.",4,[[["self"]],["str"]]],[10,"signature","","Returns the signature of this function.",4,[[["self"]],["signature"]]],[10,"execute","","Execute this function with the given arguments.",4,[[["iterator"],["self"],["functioncontext"]],[["result",["option"]],["option",["value"]]]]],[8,"FunctionContext","","Context used by `Function` to interact with the allocator…",null,null],[11,"read_memory","","Read memory from `address` into a vector.",5,[[["wordsize"],["pointer",["u8"]],["self"],["u8"]],[["vec",["u8"]],["result",["vec"]]]]],[10,"read_memory_into","","Read memory into the given `dest` buffer from `address`.",5,[[["pointer",["u8"]],["self"],["u8"]],["result"]]],[10,"write_memory","","Write the given data at `address` into the memory.",5,[[["pointer",["u8"]],["self"],["u8"]],["result"]]],[10,"allocate_memory","","Allocate a memory instance of `size` bytes.",5,[[["self"],["wordsize"]],[["pointer",["u8"]],["result",["pointer"]]]]],[10,"deallocate_memory","","Deallocate a given memory instance.",5,[[["pointer",["u8"]],["self"],["u8"]],["result"]]],[10,"sandbox","","Provides access to the sandbox.",5,[[["self"]],["sandbox"]]],[8,"Sandbox","","Something that provides access to the sandbox.",null,null],[10,"memory_get","","Get sandbox memory from the `memory_id` instance at…",6,[[["memoryid"],["pointer",["u8"]],["self"],["wordsize"],["u8"]],[["result",["u32"]],["u32"]]]],[10,"memory_set","","Set sandbox memory from the given value.",6,[[["memoryid"],["pointer",["u8"]],["self"],["wordsize"],["u8"]],[["result",["u32"]],["u32"]]]],[10,"memory_teardown","","Delete a memory instance.",6,[[["self"],["memoryid"]],["result"]]],[10,"memory_new","","Create a new memory instance with the given `initial` size…",6,[[["self"],["u32"]],[["result",["memoryid"]],["memoryid"]]]],[10,"invoke","","Invoke an exported function by a name.",6,[[["u32"],["wordsize"],["str"],["pointer",["u8"]],["self"],["u8"]],[["result",["u32"]],["u32"]]]],[10,"instance_teardown","","Delete a sandbox instance.",6,[[["self"],["u32"]],["result"]]],[10,"instance_new","","Create a new sandbox instance.",6,[[["u32"],["self"]],[["result",["u32"]],["u32"]]]],[8,"HostFunctions","","Something that provides implementations for host functions.",null,null],[10,"host_functions","","Returns the host functions `Self` provides.",7,[[],[["vec",["function"]],["function"]]]],[8,"IntoValue","","Something that can be converted into a wasm compatible…",null,null],[18,"VALUE_TYPE","","The type of the value in wasm.",8,null],[10,"into_value","","Convert `self` into a wasm `Value`.",8,[[],["value"]]],[8,"TryFromValue","","Something that can may be created from a wasm `Value`.",null,null],[10,"try_from_value","","Try to convert the given `Value` into `Self`.",9,[[["value"]],["option"]]],[8,"WritePrimitive","","Something that can write a primitive to wasm memory…",null,null],[10,"write_primitive","","Write the given value `t` to the given memory location…",10,[[["pointer"],["self"],["t"]],["result"]]],[8,"ReadPrimitive","","Something that can read a primitive from a wasm memory…",null,null],[10,"read_primitive","","Read a primitive from the given memory location `ptr`.",11,[[["pointer"],["self"]],["result"]]],[11,"value_type","","Returns the type of this value.",2,[[["self"]],["valuetype"]]],[11,"new","","Create a new instance of `Self`.",12,[[["u32"]],["self"]]],[11,"offset","","Calculate the offset from this pointer.",12,[[["u32"]],["option"]]],[11,"null","","Create a null pointer.",12,[[],["self"]]],[11,"cast","","Cast this pointer of type `T` to a pointer of type `R`.",12,[[],[["pointertype"],["pointer"]]]],[11,"new","","Create a new instance of `Signature`.",0,[[["into",["cow"]],["cow"],["valuetype"],["option",["valuetype"]]],["self"]]],[11,"new_with_args","","Create a new instance of `Signature` with the given `args`…",0,[[["into",["cow"]],["cow"]],["self"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_value","","",12,[[],["value"]]],[11,"try_from_value","","",12,[[["value"]],["option"]]],[11,"from","","",2,[[["runtimevalue"]],["self"]]],[11,"from","","",1,[[["valuetype"]],["self"]]],[11,"from","","",0,[[["signature"]],["self"]]],[11,"clone","","",1,[[["self"]],["valuetype"]]],[11,"clone","","",2,[[["self"]],["value"]]],[11,"clone","","",12,[[["self"]],["pointer"]]],[11,"clone","","",0,[[["self"]],["signature"]]],[11,"eq","","",1,[[["valuetype"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["value"]],["bool"]]],[11,"ne","","",2,[[["self"],["value"]],["bool"]]],[11,"eq","","",12,[[["self"],["pointer"]],["bool"]]],[11,"ne","","",12,[[["self"],["pointer"]],["bool"]]],[11,"eq","","",0,[[["signature"],["self"]],["bool"]]],[11,"ne","","",0,[[["signature"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Signature"],[4,"ValueType"],[4,"Value"],[8,"PointerType"],[8,"Function"],[8,"FunctionContext"],[8,"Sandbox"],[8,"HostFunctions"],[8,"IntoValue"],[8,"TryFromValue"],[8,"WritePrimitive"],[8,"ReadPrimitive"],[3,"Pointer"]]};
searchIndex["static_assertions"] = {"doc":"Banner","i":[[14,"assert_cfg","static_assertions","Asserts that a given configuration is set.",null,null],[14,"assert_eq_align","","Asserts that types are equal in alignment.",null,null],[14,"assert_eq_size","","Asserts that types are equal in size.",null,null],[14,"assert_eq_size_ptr","","Asserts that values pointed to are equal in size.",null,null],[14,"assert_eq_size_val","","Asserts that values are equal in size.",null,null],[14,"assert_fields","","Asserts that the type has the given fields.",null,null],[14,"assert_impl_one","","Asserts that the type implements exactly one in a set of…",null,null],[14,"assert_impl_all","","Asserts that the type implements all of the given traits.",null,null],[14,"assert_impl_any","","Asserts that the type implements any of the given traits.",null,null],[14,"assert_not_impl_all","","Asserts that the type does not implement all of the given…",null,null],[14,"assert_not_impl_any","","Asserts that the type does not implement any of the given…",null,null],[14,"assert_obj_safe","","Asserts that the traits support dynamic dispatch…",null,null],[14,"assert_trait_sub_all","","Asserts that the trait is a child of all of the other…",null,null],[14,"assert_trait_super_all","","Asserts that the trait is a parent of all of the other…",null,null],[14,"assert_type_eq_all","","Asserts that all types in a list are equal to each other.",null,null],[14,"assert_type_ne_all","","Asserts that all types are not equal to each other.",null,null],[14,"const_assert","","Asserts that constant expressions evaluate to `true`.",null,null],[14,"const_assert_eq","","Asserts that constants are equal in value.",null,null],[14,"const_assert_ne","","Asserts that constants are not equal in value.",null,null]],"p":[]};
searchIndex["substrate_bip39"] = {"doc":"","i":[[4,"Error","substrate_bip39","",null,null],[13,"InvalidEntropy","","",0,null],[5,"mini_secret_from_entropy","","`entropy` should be a byte array from a correctly…",null,[[["str"]],[["error"],["result",["minisecretkey","error"]],["minisecretkey"]]]],[5,"seed_from_entropy","","Similar to `mini_secret_from_entropy`, except that it…",null,[[["str"]],[["error"],["result",["error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"eq","","",0,[[["error"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"Error"]]};
searchIndex["subtle"] = {"doc":"Note that docs will only build on nightly Rust until RFC…","i":[[3,"Choice","subtle","The `Choice` struct represents a choice for use in…",null,null],[3,"CtOption","","The `CtOption<T>` type represents an optional value…",null,null],[8,"ConstantTimeEq","","An `Eq`-like trait that produces a `Choice` instead of a…",null,null],[10,"ct_eq","","Determine if two items are equal.",0,[[["self"]],["choice"]]],[8,"ConditionallySelectable","","A type which can be conditionally selected in constant time.",null,null],[10,"conditional_select","","Select `a` or `b` according to `choice`.",1,[[["choice"],["self"]],["self"]]],[11,"conditional_assign","","Conditionally assign `other` to `self`, according to…",1,[[["self"],["self"],["choice"]]]],[11,"conditional_swap","","Conditionally swap `self` and `other` if `choice == 1`;…",1,[[["self"],["choice"]]]],[8,"ConditionallyNegatable","","A type which can be conditionally negated in constant time.",null,null],[10,"conditional_negate","","Negate `self` if `choice == Choice(1)`; otherwise, leave…",2,[[["self"],["choice"]]]],[11,"unwrap_u8","","Unwrap the `Choice` wrapper to reveal the underlying `u8`.",3,[[["self"]],["u8"]]],[11,"new","","This method is used to construct a new `CtOption<T>` and…",4,[[["choice"],["t"]],["ctoption"]]],[11,"unwrap","","This returns the underlying value but panics if it is not…",4,[[],["t"]]],[11,"unwrap_or","","This returns the underlying value if it is `Some` or the…",4,[[["t"]],["t"]]],[11,"unwrap_or_else","","This returns the underlying value if it is `Some` or the…",4,[[["f"]],["t"]]],[11,"is_some","","Returns a true `Choice` if this value is `Some`.",4,[[["self"]],["choice"]]],[11,"is_none","","Returns a true `Choice` if this value is `None`.",4,[[["self"]],["choice"]]],[11,"map","","Returns a `None` value if the option is `None`, otherwise…",4,[[["f"]],["ctoption"]]],[11,"and_then","","Returns a `None` value if the option is `None`, otherwise…",4,[[["f"]],["ctoption"]]],[11,"or_else","","Returns `self` if it contains a value, and otherwise…",4,[[["f"]],["ctoption"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"ct_eq","","Two `CtOption<T>`s are equal if they are both `Some` and…",4,[[["ctoption"],["self"]],["choice"]]],[11,"conditional_select","","",3,[[["choice"],["self"]],["self"]]],[11,"conditional_select","","",4,[[["choice"],["self"]],["self"]]],[11,"from","","",3,[[["u8"]],["choice"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"not","","",3,[[],["choice"]]],[11,"bitand","","",3,[[["choice"]],["choice"]]],[11,"bitor","","",3,[[["choice"]],["choice"]]],[11,"bitxor","","",3,[[["choice"]],["choice"]]],[11,"bitand_assign","","",3,[[["self"],["choice"]]]],[11,"bitor_assign","","",3,[[["self"],["choice"]]]],[11,"bitxor_assign","","",3,[[["self"],["choice"]]]],[11,"clone","","",3,[[["self"]],["choice"]]],[11,"clone","","",4,[[["self"]],["ctoption"]]]],"p":[[8,"ConstantTimeEq"],[8,"ConditionallySelectable"],[8,"ConditionallyNegatable"],[3,"Choice"],[3,"CtOption"]]};
searchIndex["syn"] = {"doc":"Syn is a parsing library for parsing a stream of Rust…","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tokens","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy,…",null,null],[12,"path","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature =…",null,null],[12,"path","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point…",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as…",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or…",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"Arm","","One arm of a `match` expression: `0...10 => { return true;…",null,null],[12,"attrs","","",10,null],[12,"pat","","",10,null],[12,"guard","","",10,null],[12,"fat_arrow_token","","",10,null],[12,"body","","",10,null],[12,"comma","","",10,null],[3,"FieldValue","","A field-value pair in a struct literal.",null,null],[12,"attrs","","Attributes tagged on the field.",11,null],[12,"member","","Name or index of the field.",11,null],[12,"colon_token","","The colon in `Struct { x: x }`. If written in shorthand…",11,null],[12,"expr","","Value of the field.",11,null],[3,"Label","","A lifetime labeling a `for`, `while`, or `loop`.",null,null],[12,"name","","",12,null],[12,"colon_token","","",12,null],[3,"MethodTurbofish","","The `::<>` explicit type parameters passed to a method…",null,null],[12,"colon2_token","","",13,null],[12,"lt_token","","",13,null],[12,"args","","",13,null],[12,"gt_token","","",13,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[12,"attrs","","",14,null],[12,"bracket_token","","",14,null],[12,"elems","","",14,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[12,"attrs","","",15,null],[12,"left","","",15,null],[12,"eq_token","","",15,null],[12,"right","","",15,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[12,"attrs","","",16,null],[12,"left","","",16,null],[12,"op","","",16,null],[12,"right","","",16,null],[3,"ExprAsync","","An async block: `async { ... }`.",null,null],[12,"attrs","","",17,null],[12,"async_token","","",17,null],[12,"capture","","",17,null],[12,"block","","",17,null],[3,"ExprAwait","","An await expression: `fut.await`.",null,null],[12,"attrs","","",18,null],[12,"base","","",18,null],[12,"dot_token","","",18,null],[12,"await_token","","",18,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",19,null],[12,"left","","",19,null],[12,"op","","",19,null],[12,"right","","",19,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[12,"attrs","","",20,null],[12,"label","","",20,null],[12,"block","","",20,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[12,"attrs","","",21,null],[12,"box_token","","",21,null],[12,"expr","","",21,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional…",null,null],[12,"attrs","","",22,null],[12,"break_token","","",22,null],[12,"label","","",22,null],[12,"expr","","",22,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",23,null],[12,"func","","",23,null],[12,"paren_token","","",23,null],[12,"args","","",23,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",24,null],[12,"expr","","",24,null],[12,"as_token","","",24,null],[12,"ty","","",24,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[12,"attrs","","",25,null],[12,"asyncness","","",25,null],[12,"movability","","",25,null],[12,"capture","","",25,null],[12,"or1_token","","",25,null],[12,"inputs","","",25,null],[12,"or2_token","","",25,null],[12,"output","","",25,null],[12,"body","","",25,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[12,"attrs","","",26,null],[12,"continue_token","","",26,null],[12,"label","","",26,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple…",null,null],[12,"attrs","","",27,null],[12,"base","","",27,null],[12,"dot_token","","",27,null],[12,"member","","",27,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[12,"attrs","","",28,null],[12,"label","","",28,null],[12,"for_token","","",28,null],[12,"pat","","",28,null],[12,"in_token","","",28,null],[12,"expr","","",28,null],[12,"body","","",28,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[12,"attrs","","",29,null],[12,"group_token","","",29,null],[12,"expr","","",29,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr…",null,null],[12,"attrs","","",30,null],[12,"if_token","","",30,null],[12,"cond","","",30,null],[12,"then_branch","","",30,null],[12,"else_branch","","",30,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",31,null],[12,"expr","","",31,null],[12,"bracket_token","","",31,null],[12,"index","","",31,null],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",null,null],[12,"attrs","","",32,null],[12,"let_token","","",32,null],[12,"pat","","",32,null],[12,"eq_token","","",32,null],[12,"expr","","",32,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\"foo\"`.",null,null],[12,"attrs","","",33,null],[12,"lit","","",33,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[12,"attrs","","",34,null],[12,"label","","",34,null],[12,"loop_token","","",34,null],[12,"body","","",34,null],[3,"ExprMacro","","A macro invocation expression: `format!(\"{}\", q)`.",null,null],[12,"attrs","","",35,null],[12,"mac","","",35,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {}…",null,null],[12,"attrs","","",36,null],[12,"match_token","","",36,null],[12,"expr","","",36,null],[12,"brace_token","","",36,null],[12,"arms","","",36,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[12,"attrs","","",37,null],[12,"receiver","","",37,null],[12,"dot_token","","",37,null],[12,"method","","",37,null],[12,"turbofish","","",37,null],[12,"paren_token","","",37,null],[12,"args","","",37,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",38,null],[12,"paren_token","","",38,null],[12,"expr","","",38,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing…",null,null],[12,"attrs","","",39,null],[12,"qself","","",39,null],[12,"path","","",39,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[12,"attrs","","",40,null],[12,"from","","",40,null],[12,"limits","","",40,null],[12,"to","","",40,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[12,"attrs","","",41,null],[12,"and_token","","",41,null],[12,"raw","","",41,null],[12,"mutability","","",41,null],[12,"expr","","",41,null],[3,"ExprRepeat","","An array literal constructed from one repeated element:…",null,null],[12,"attrs","","",42,null],[12,"bracket_token","","",42,null],[12,"expr","","",42,null],[12,"semi_token","","",42,null],[12,"len","","",42,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[12,"attrs","","",43,null],[12,"return_token","","",43,null],[12,"expr","","",43,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[12,"attrs","","",44,null],[12,"path","","",44,null],[12,"brace_token","","",44,null],[12,"fields","","",44,null],[12,"dot2_token","","",44,null],[12,"rest","","",44,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[12,"attrs","","",45,null],[12,"expr","","",45,null],[12,"question_token","","",45,null],[3,"ExprTryBlock","","A try block: `try { ... }`.",null,null],[12,"attrs","","",46,null],[12,"try_token","","",46,null],[12,"block","","",46,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[12,"attrs","","",47,null],[12,"paren_token","","",47,null],[12,"elems","","",47,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[12,"attrs","","",48,null],[12,"expr","","",48,null],[12,"colon_token","","",48,null],[12,"ty","","",48,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",49,null],[12,"op","","",49,null],[12,"expr","","",49,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[12,"attrs","","",50,null],[12,"unsafe_token","","",50,null],[12,"block","","",50,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[12,"attrs","","",51,null],[12,"label","","",51,null],[12,"while_token","","",51,null],[12,"cond","","",51,null],[12,"body","","",51,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[12,"attrs","","",52,null],[12,"yield_token","","",52,null],[12,"expr","","",52,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",53,null],[12,"span","","",53,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<'a, 'b, 'c>`.",null,null],[12,"for_token","","",54,null],[12,"lt_token","","",54,null],[12,"lifetimes","","",54,null],[12,"gt_token","","",54,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",55,null],[12,"const_token","","",55,null],[12,"ident","","",55,null],[12,"colon_token","","",55,null],[12,"ty","","",55,null],[12,"eq_token","","",55,null],[12,"default","","",55,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of…",null,null],[12,"lt_token","","",56,null],[12,"params","","",56,null],[12,"gt_token","","",56,null],[12,"where_clause","","",56,null],[3,"LifetimeDef","","A lifetime definition: `'a: 'b + 'c + 'd`.",null,null],[12,"attrs","","",57,null],[12,"lifetime","","",57,null],[12,"colon_token","","",57,null],[12,"bounds","","",57,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",58,null],[12,"eq_token","","",58,null],[12,"rhs_ty","","",58,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",null,null],[12,"lifetime","","",59,null],[12,"colon_token","","",59,null],[12,"bounds","","",59,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",60,null],[12,"bounded_ty","","The type being bounded",60,null],[12,"colon_token","","",60,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",60,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",61,null],[12,"modifier","","",61,null],[12,"lifetimes","","The `for<'a>` in `for<'a> Foo<&'a T>`",61,null],[12,"path","","The `Foo<&'a T>` in `for<'a> Foo<&'a T>`",61,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",62,null],[12,"ident","","",62,null],[12,"colon_token","","",62,null],[12,"bounds","","",62,null],[12,"eq_token","","",62,null],[12,"default","","",62,null],[3,"WhereClause","","A `where` clause in a definition: `where T:…",null,null],[12,"where_token","","",63,null],[12,"predicates","","",63,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"ForeignItemFn","","A foreign function in an `extern` block.",null,null],[12,"attrs","","",64,null],[12,"vis","","",64,null],[12,"sig","","",64,null],[12,"semi_token","","",64,null],[3,"ForeignItemMacro","","A macro invocation within an extern block.",null,null],[12,"attrs","","",65,null],[12,"mac","","",65,null],[12,"semi_token","","",65,null],[3,"ForeignItemStatic","","A foreign static item in an `extern` block: `static ext:…",null,null],[12,"attrs","","",66,null],[12,"vis","","",66,null],[12,"static_token","","",66,null],[12,"mutability","","",66,null],[12,"ident","","",66,null],[12,"colon_token","","",66,null],[12,"ty","","",66,null],[12,"semi_token","","",66,null],[3,"ForeignItemType","","A foreign type in an `extern` block: `type void`.",null,null],[12,"attrs","","",67,null],[12,"vis","","",67,null],[12,"type_token","","",67,null],[12,"ident","","",67,null],[12,"semi_token","","",67,null],[3,"ImplItemConst","","An associated constant within an impl block.",null,null],[12,"attrs","","",68,null],[12,"vis","","",68,null],[12,"defaultness","","",68,null],[12,"const_token","","",68,null],[12,"ident","","",68,null],[12,"colon_token","","",68,null],[12,"ty","","",68,null],[12,"eq_token","","",68,null],[12,"expr","","",68,null],[12,"semi_token","","",68,null],[3,"ImplItemMacro","","A macro invocation within an impl block.",null,null],[12,"attrs","","",69,null],[12,"mac","","",69,null],[12,"semi_token","","",69,null],[3,"ImplItemMethod","","A method within an impl block.",null,null],[12,"attrs","","",70,null],[12,"vis","","",70,null],[12,"defaultness","","",70,null],[12,"sig","","",70,null],[12,"block","","",70,null],[3,"ImplItemType","","An associated type within an impl block.",null,null],[12,"attrs","","",71,null],[12,"vis","","",71,null],[12,"defaultness","","",71,null],[12,"type_token","","",71,null],[12,"ident","","",71,null],[12,"generics","","",71,null],[12,"eq_token","","",71,null],[12,"ty","","",71,null],[12,"semi_token","","",71,null],[3,"ItemConst","","A constant item: `const MAX: u16 = 65535`.",null,null],[12,"attrs","","",72,null],[12,"vis","","",72,null],[12,"const_token","","",72,null],[12,"ident","","",72,null],[12,"colon_token","","",72,null],[12,"ty","","",72,null],[12,"eq_token","","",72,null],[12,"expr","","",72,null],[12,"semi_token","","",72,null],[3,"ItemEnum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",null,null],[12,"attrs","","",73,null],[12,"vis","","",73,null],[12,"enum_token","","",73,null],[12,"ident","","",73,null],[12,"generics","","",73,null],[12,"brace_token","","",73,null],[12,"variants","","",73,null],[3,"ItemExternCrate","","An `extern crate` item: `extern crate serde`.",null,null],[12,"attrs","","",74,null],[12,"vis","","",74,null],[12,"extern_token","","",74,null],[12,"crate_token","","",74,null],[12,"ident","","",74,null],[12,"rename","","",74,null],[12,"semi_token","","",74,null],[3,"ItemFn","","A free-standing function: `fn process(n: usize) ->…",null,null],[12,"attrs","","",75,null],[12,"vis","","",75,null],[12,"sig","","",75,null],[12,"block","","",75,null],[3,"ItemForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",null,null],[12,"attrs","","",76,null],[12,"abi","","",76,null],[12,"brace_token","","",76,null],[12,"items","","",76,null],[3,"ItemImpl","","An impl block providing trait or associated items:…",null,null],[12,"attrs","","",77,null],[12,"defaultness","","",77,null],[12,"unsafety","","",77,null],[12,"impl_token","","",77,null],[12,"generics","","",77,null],[12,"trait_","","Trait this impl implements.",77,null],[12,"self_ty","","The Self type of the impl.",77,null],[12,"brace_token","","",77,null],[12,"items","","",77,null],[3,"ItemMacro","","A macro invocation, which includes `macro_rules!`…",null,null],[12,"attrs","","",78,null],[12,"ident","","The `example` in `macro_rules! example { ... }`.",78,null],[12,"mac","","",78,null],[12,"semi_token","","",78,null],[3,"ItemMacro2","","A 2.0-style declarative macro introduced by the `macro`…",null,null],[12,"attrs","","",79,null],[12,"vis","","",79,null],[12,"macro_token","","",79,null],[12,"ident","","",79,null],[12,"rules","","",79,null],[3,"ItemMod","","A module or module declaration: `mod m` or `mod m { ... }`.",null,null],[12,"attrs","","",80,null],[12,"vis","","",80,null],[12,"mod_token","","",80,null],[12,"ident","","",80,null],[12,"content","","",80,null],[12,"semi","","",80,null],[3,"ItemStatic","","A static item: `static BIKE: Shed = Shed(42)`.",null,null],[12,"attrs","","",81,null],[12,"vis","","",81,null],[12,"static_token","","",81,null],[12,"mutability","","",81,null],[12,"ident","","",81,null],[12,"colon_token","","",81,null],[12,"ty","","",81,null],[12,"eq_token","","",81,null],[12,"expr","","",81,null],[12,"semi_token","","",81,null],[3,"ItemStruct","","A struct definition: `struct Foo<A> { x: A }`.",null,null],[12,"attrs","","",82,null],[12,"vis","","",82,null],[12,"struct_token","","",82,null],[12,"ident","","",82,null],[12,"generics","","",82,null],[12,"fields","","",82,null],[12,"semi_token","","",82,null],[3,"ItemTrait","","A trait definition: `pub trait Iterator { ... }`.",null,null],[12,"attrs","","",83,null],[12,"vis","","",83,null],[12,"unsafety","","",83,null],[12,"auto_token","","",83,null],[12,"trait_token","","",83,null],[12,"ident","","",83,null],[12,"generics","","",83,null],[12,"colon_token","","",83,null],[12,"supertraits","","",83,null],[12,"brace_token","","",83,null],[12,"items","","",83,null],[3,"ItemTraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",null,null],[12,"attrs","","",84,null],[12,"vis","","",84,null],[12,"trait_token","","",84,null],[12,"ident","","",84,null],[12,"generics","","",84,null],[12,"eq_token","","",84,null],[12,"bounds","","",84,null],[12,"semi_token","","",84,null],[3,"ItemType","","A type alias: `type Result<T> = std::result::Result<T,…",null,null],[12,"attrs","","",85,null],[12,"vis","","",85,null],[12,"type_token","","",85,null],[12,"ident","","",85,null],[12,"generics","","",85,null],[12,"eq_token","","",85,null],[12,"ty","","",85,null],[12,"semi_token","","",85,null],[3,"ItemUnion","","A union definition: `union Foo<A, B> { x: A, y: B }`.",null,null],[12,"attrs","","",86,null],[12,"vis","","",86,null],[12,"union_token","","",86,null],[12,"ident","","",86,null],[12,"generics","","",86,null],[12,"fields","","",86,null],[3,"ItemUse","","A use declaration: `use std::collections::HashMap`.",null,null],[12,"attrs","","",87,null],[12,"vis","","",87,null],[12,"use_token","","",87,null],[12,"leading_colon","","",87,null],[12,"tree","","",87,null],[12,"semi_token","","",87,null],[3,"Receiver","","The `self` argument of an associated method, whether taken…",null,null],[12,"attrs","","",88,null],[12,"reference","","",88,null],[12,"mutability","","",88,null],[12,"self_token","","",88,null],[3,"Signature","","A function signature in a trait or implementation: `unsafe…",null,null],[12,"constness","","",89,null],[12,"asyncness","","",89,null],[12,"unsafety","","",89,null],[12,"abi","","",89,null],[12,"fn_token","","",89,null],[12,"ident","","",89,null],[12,"generics","","",89,null],[12,"paren_token","","",89,null],[12,"inputs","","",89,null],[12,"variadic","","",89,null],[12,"output","","",89,null],[3,"TraitItemConst","","An associated constant within the definition of a trait.",null,null],[12,"attrs","","",90,null],[12,"const_token","","",90,null],[12,"ident","","",90,null],[12,"colon_token","","",90,null],[12,"ty","","",90,null],[12,"default","","",90,null],[12,"semi_token","","",90,null],[3,"TraitItemMacro","","A macro invocation within the definition of a trait.",null,null],[12,"attrs","","",91,null],[12,"mac","","",91,null],[12,"semi_token","","",91,null],[3,"TraitItemMethod","","A trait method within the definition of a trait.",null,null],[12,"attrs","","",92,null],[12,"sig","","",92,null],[12,"default","","",92,null],[12,"semi_token","","",92,null],[3,"TraitItemType","","An associated type within the definition of a trait.",null,null],[12,"attrs","","",93,null],[12,"type_token","","",93,null],[12,"ident","","",93,null],[12,"generics","","",93,null],[12,"colon_token","","",93,null],[12,"bounds","","",93,null],[12,"default","","",93,null],[12,"semi_token","","",93,null],[3,"UseGlob","","A glob import in a `use` item: `*`.",null,null],[12,"star_token","","",94,null],[3,"UseGroup","","A braced group of imports in a `use` item: `{A, B, C}`.",null,null],[12,"brace_token","","",95,null],[12,"items","","",95,null],[3,"UseName","","An identifier imported by a `use` item: `HashMap`.",null,null],[12,"ident","","",96,null],[3,"UsePath","","A path prefix of imports in a `use` item: `std::...`.",null,null],[12,"ident","","",97,null],[12,"colon2_token","","",97,null],[12,"tree","","",97,null],[3,"UseRename","","An renamed identifier imported by a `use` item: `HashMap…",null,null],[12,"ident","","",98,null],[12,"as_token","","",98,null],[12,"rename","","",98,null],[3,"File","","A complete file of Rust source code.",null,null],[12,"shebang","","",99,null],[12,"attrs","","",99,null],[12,"items","","",99,null],[3,"Lifetime","","A Rust lifetime: `'a`.",null,null],[12,"apostrophe","","",100,null],[12,"ident","","",100,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",101,null],[12,"span","","",101,null],[3,"LitByte","","A byte literal: `b'f'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\"foo\"`.",null,null],[3,"LitChar","","A character literal: `'a'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\"foo\"`.",null,null],[3,"Macro","","A macro invocation: `println!(\"{}\", mac)`.",null,null],[12,"path","","",102,null],[12,"bang_token","","",102,null],[12,"delimiter","","",102,null],[12,"tokens","","",102,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",103,null],[12,"brace_token","","",103,null],[12,"variants","","",103,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",104,null],[12,"fields","","",104,null],[12,"semi_token","","",104,null],[3,"DataUnion","","An untagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",105,null],[12,"fields","","",105,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",106,null],[12,"vis","","Visibility of the struct or enum.",106,null],[12,"ident","","Name of the struct or enum.",106,null],[12,"generics","","Generics required to complete the definition.",106,null],[12,"data","","Data within the struct or enum.",106,null],[3,"Block","","A braced block containing Rust statements.",null,null],[12,"brace_token","","",107,null],[12,"stmts","","Statements in a block",107,null],[3,"Local","","A local `let` binding: `let x: u64 = s.parse()?`.",null,null],[12,"attrs","","",108,null],[12,"let_token","","",108,null],[12,"pat","","",108,null],[12,"init","","",108,null],[12,"semi_token","","",108,null],[3,"Abi","","The binary interface of a function: `extern \"C\"`.",null,null],[12,"extern_token","","",109,null],[12,"name","","",109,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize)…",null,null],[12,"attrs","","",110,null],[12,"name","","",110,null],[12,"ty","","",110,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",111,null],[12,"elem","","",111,null],[12,"semi_token","","",111,null],[12,"len","","",111,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"lifetimes","","",112,null],[12,"unsafety","","",112,null],[12,"abi","","",112,null],[12,"fn_token","","",112,null],[12,"paren_token","","",112,null],[12,"inputs","","",112,null],[12,"variadic","","",112,null],[12,"output","","",112,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",113,null],[12,"elem","","",113,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",null,null],[12,"impl_token","","",114,null],[12,"bounds","","",114,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler:…",null,null],[12,"underscore_token","","",115,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",116,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",117,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",118,null],[12,"elem","","",118,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with…",null,null],[12,"qself","","",119,null],[12,"path","","",119,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",120,null],[12,"const_token","","",120,null],[12,"mutability","","",120,null],[12,"elem","","",120,null],[3,"TypeReference","","A reference type: `&'a T` or `&'a mut T`.",null,null],[12,"and_token","","",121,null],[12,"lifetime","","",121,null],[12,"mutability","","",121,null],[12,"elem","","",121,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",122,null],[12,"elem","","",122,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",null,null],[12,"dyn_token","","",123,null],[12,"bounds","","",123,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",124,null],[12,"elems","","",124,null],[3,"Variadic","","The variadic argument of a foreign function.",null,null],[12,"attrs","","",125,null],[12,"dots","","",125,null],[3,"FieldPat","","A single field in a struct pattern.",null,null],[12,"attrs","","",126,null],[12,"member","","",126,null],[12,"colon_token","","",126,null],[12,"pat","","",126,null],[3,"PatBox","","A box pattern: `box v`.",null,null],[12,"attrs","","",127,null],[12,"box_token","","",127,null],[12,"pat","","",127,null],[3,"PatIdent","","A pattern that binds a new variable: `ref mut binding @…",null,null],[12,"attrs","","",128,null],[12,"by_ref","","",128,null],[12,"mutability","","",128,null],[12,"ident","","",128,null],[12,"subpat","","",128,null],[3,"PatLit","","A literal pattern: `0`.",null,null],[12,"attrs","","",129,null],[12,"expr","","",129,null],[3,"PatMacro","","A macro in pattern position.",null,null],[12,"attrs","","",130,null],[12,"mac","","",130,null],[3,"PatOr","","A pattern that matches any one of a set of cases.",null,null],[12,"attrs","","",131,null],[12,"leading_vert","","",131,null],[12,"cases","","",131,null],[3,"PatPath","","A path pattern like `Color::Red`, optionally qualified…",null,null],[12,"attrs","","",132,null],[12,"qself","","",132,null],[12,"path","","",132,null],[3,"PatRange","","A range pattern: `1..=2`.",null,null],[12,"attrs","","",133,null],[12,"lo","","",133,null],[12,"limits","","",133,null],[12,"hi","","",133,null],[3,"PatReference","","A reference pattern: `&mut var`.",null,null],[12,"attrs","","",134,null],[12,"and_token","","",134,null],[12,"mutability","","",134,null],[12,"pat","","",134,null],[3,"PatRest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",null,null],[12,"attrs","","",135,null],[12,"dot2_token","","",135,null],[3,"PatSlice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",null,null],[12,"attrs","","",136,null],[12,"bracket_token","","",136,null],[12,"elems","","",136,null],[3,"PatStruct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",null,null],[12,"attrs","","",137,null],[12,"path","","",137,null],[12,"brace_token","","",137,null],[12,"fields","","",137,null],[12,"dot2_token","","",137,null],[3,"PatTuple","","A tuple pattern: `(a, b)`.",null,null],[12,"attrs","","",138,null],[12,"paren_token","","",138,null],[12,"elems","","",138,null],[3,"PatTupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",null,null],[12,"attrs","","",139,null],[12,"path","","",139,null],[12,"pat","","",139,null],[3,"PatType","","A type ascription pattern: `foo: f64`.",null,null],[12,"attrs","","",140,null],[12,"pat","","",140,null],[12,"colon_token","","",140,null],[12,"ty","","",140,null],[3,"PatWild","","A pattern that matches any value: `_`.",null,null],[12,"attrs","","",141,null],[12,"underscore_token","","",141,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>`…",null,null],[12,"colon2_token","","",142,null],[12,"lt_token","","",142,null],[12,"args","","",142,null],[12,"gt_token","","",142,null],[3,"Binding","","A binding (equality constraint) on an associated type:…",null,null],[12,"ident","","",143,null],[12,"eq_token","","",143,null],[12,"ty","","",143,null],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",null,null],[12,"ident","","",144,null],[12,"colon_token","","",144,null],[12,"bounds","","",144,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in…",null,null],[12,"paren_token","","",145,null],[12,"inputs","","`(A, B)`",145,null],[12,"output","","`C`",145,null],[3,"Path","","A path at which a named item is exported:…",null,null],[12,"leading_colon","","",146,null],[12,"segments","","",146,null],[3,"PathSegment","","A segment of a path together with any path arguments on…",null,null],[12,"ident","","",147,null],[12,"arguments","","",147,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T…",null,null],[12,"lt_token","","",148,null],[12,"ty","","",148,null],[12,"position","","",148,null],[12,"as_token","","",148,null],[12,"gt_token","","",148,null],[3,"Error","","Error returned when a Syn parser cannot parse the input…",null,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and…",null,null],[13,"Outer","","",149,null],[13,"Inner","","",149,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Path","","",150,null],[13,"List","","A structured list within an attribute, like `derive(Copy,…",150,null],[13,"NameValue","","A name-value pair within an attribute, like `feature =…",150,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in…",151,null],[13,"Lit","","A Rust literal, like the `\"new_name\"` in…",151,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point…",152,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as…",152,null],[13,"Unit","","Unit struct or unit variant such as `None`.",152,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or…",null,null],[13,"Public","","A public visibility level: `pub`.",153,null],[13,"Crate","","A crate-level visibility: `crate`.",153,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or…",153,null],[13,"Inherited","","An inherited visibility, which usually means private.",153,null],[4,"GenericMethodArgument","","An individual generic argument to a method, like `T`.",null,null],[13,"Type","","A type argument.",154,null],[13,"Const","","A const expression. Must be inside of a block.",154,null],[4,"RangeLimits","","Limit types of a range, inclusive or exclusive.",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end.",155,null],[13,"Closed","","Inclusive at the beginning and end.",155,null],[4,"Expr","","A Rust expression.",null,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",156,null],[13,"Assign","","An assignment expression: `a = compute()`.",156,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",156,null],[13,"Async","","An async block: `async { ... }`.",156,null],[13,"Await","","An await expression: `fut.await`.",156,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",156,null],[13,"Block","","A blocked scope: `{ ... }`.",156,null],[13,"Box","","A box expression: `box f`.",156,null],[13,"Break","","A `break`, with an optional label to break and an optional…",156,null],[13,"Call","","A function call expression: `invoke(a, b)`.",156,null],[13,"Cast","","A cast expression: `foo as f64`.",156,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",156,null],[13,"Continue","","A `continue`, with an optional label.",156,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple…",156,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",156,null],[13,"Group","","An expression contained within invisible delimiters.",156,null],[13,"If","","An `if` expression with an optional `else` block: `if expr…",156,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",156,null],[13,"Let","","A `let` guard: `let Some(x) = opt`.",156,null],[13,"Lit","","A literal in place of an expression: `1`, `\"foo\"`.",156,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",156,null],[13,"Macro","","A macro invocation expression: `format!(\"{}\", q)`.",156,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {}…",156,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",156,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",156,null],[13,"Path","","A path like `std::mem::replace` possibly containing…",156,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",156,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",156,null],[13,"Repeat","","An array literal constructed from one repeated element:…",156,null],[13,"Return","","A `return`, with an optional value to be returned.",156,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",156,null],[13,"Try","","A try-expression: `expr?`.",156,null],[13,"TryBlock","","A try block: `try { ... }`.",156,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",156,null],[13,"Type","","A type ascription expression: `foo: f64`.",156,null],[13,"Unary","","A unary operation: `!x`, `*x`.",156,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",156,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",156,null],[13,"While","","A while loop: `while expr { ... }`.",156,null],[13,"Yield","","A yield expression: `yield expr`.",156,null],[4,"Member","","A struct or tuple struct field accessed in a struct…",null,null],[13,"Named","","A named field like `self.x`.",157,null],[13,"Unnamed","","An unnamed field like `self.0`.",157,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T:…",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",158,null],[13,"Lifetime","","A lifetime definition: `'a: 'b + 'c + 'd`.",158,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",158,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the…",null,null],[13,"None","","",159,null],[13,"Maybe","","",159,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",160,null],[13,"Lifetime","","",160,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T:…",null,null],[13,"Type","","A type predicate in a `where` clause: `for<'c> Foo<'c>:…",161,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `'a: 'b + 'c`.",161,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",161,null],[4,"FnArg","","An argument in a function signature: the `n: usize` in `fn…",null,null],[13,"Receiver","","The `self` argument of an associated method, whether taken…",162,null],[13,"Typed","","A function argument accepted by pattern and type.",162,null],[4,"ForeignItem","","An item within an `extern` block.",null,null],[13,"Fn","","A foreign function in an `extern` block.",163,null],[13,"Static","","A foreign static item in an `extern` block: `static ext:…",163,null],[13,"Type","","A foreign type in an `extern` block: `type void`.",163,null],[13,"Macro","","A macro invocation within an extern block.",163,null],[13,"Verbatim","","Tokens in an `extern` block not interpreted by Syn.",163,null],[4,"ImplItem","","An item within an impl block.",null,null],[13,"Const","","An associated constant within an impl block.",164,null],[13,"Method","","A method within an impl block.",164,null],[13,"Type","","An associated type within an impl block.",164,null],[13,"Macro","","A macro invocation within an impl block.",164,null],[13,"Verbatim","","Tokens within an impl block not interpreted by Syn.",164,null],[4,"Item","","Things that can appear directly inside of a module or scope.",null,null],[13,"Const","","A constant item: `const MAX: u16 = 65535`.",165,null],[13,"Enum","","An enum definition: `enum Foo<A, B> { A(A), B(B) }`.",165,null],[13,"ExternCrate","","An `extern crate` item: `extern crate serde`.",165,null],[13,"Fn","","A free-standing function: `fn process(n: usize) ->…",165,null],[13,"ForeignMod","","A block of foreign items: `extern \"C\" { ... }`.",165,null],[13,"Impl","","An impl block providing trait or associated items:…",165,null],[13,"Macro","","A macro invocation, which includes `macro_rules!`…",165,null],[13,"Macro2","","A 2.0-style declarative macro introduced by the `macro`…",165,null],[13,"Mod","","A module or module declaration: `mod m` or `mod m { ... }`.",165,null],[13,"Static","","A static item: `static BIKE: Shed = Shed(42)`.",165,null],[13,"Struct","","A struct definition: `struct Foo<A> { x: A }`.",165,null],[13,"Trait","","A trait definition: `pub trait Iterator { ... }`.",165,null],[13,"TraitAlias","","A trait alias: `pub trait SharableIterator = Iterator +…",165,null],[13,"Type","","A type alias: `type Result<T> = std::result::Result<T,…",165,null],[13,"Union","","A union definition: `union Foo<A, B> { x: A, y: B }`.",165,null],[13,"Use","","A use declaration: `use std::collections::HashMap`.",165,null],[13,"Verbatim","","Tokens forming an item not interpreted by Syn.",165,null],[4,"TraitItem","","An item declaration within the definition of a trait.",null,null],[13,"Const","","An associated constant within the definition of a trait.",166,null],[13,"Method","","A trait method within the definition of a trait.",166,null],[13,"Type","","An associated type within the definition of a trait.",166,null],[13,"Macro","","A macro invocation within the definition of a trait.",166,null],[13,"Verbatim","","Tokens within the definition of a trait not interpreted by…",166,null],[4,"UseTree","","A suffix of an import tree in a `use` item: `Type as…",null,null],[13,"Path","","A path prefix of imports in a `use` item: `std::...`.",167,null],[13,"Name","","An identifier imported by a `use` item: `HashMap`.",167,null],[13,"Rename","","An renamed identifier imported by a `use` item: `HashMap…",167,null],[13,"Glob","","A glob import in a `use` item: `*`.",167,null],[13,"Group","","A braced group of imports in a `use` item: `{A, B, C}`.",167,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\"foo\"`.",168,null],[13,"ByteStr","","A byte string literal: `b\"foo\"`.",168,null],[13,"Byte","","A byte literal: `b'f'`.",168,null],[13,"Char","","A character literal: `'a'`.",168,null],[13,"Int","","An integer literal: `1` or `1u16`.",168,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",168,null],[13,"Bool","","A boolean literal: `true` or `false`.",168,null],[13,"Verbatim","","A raw token literal not interpreted by Syn.",168,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a…",null,null],[13,"Cooked","","An ordinary string like `\"data\"`.",169,null],[13,"Raw","","A raw string like `r##\"data\"##`.",169,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or…",null,null],[13,"Paren","","",170,null],[13,"Brace","","",170,null],[13,"Bracket","","",170,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",171,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",171,null],[13,"Union","","An untagged union input to a `proc_macro_derive` macro.",171,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",172,null],[13,"Sub","","The `-` operator (subtraction)",172,null],[13,"Mul","","The `*` operator (multiplication)",172,null],[13,"Div","","The `/` operator (division)",172,null],[13,"Rem","","The `%` operator (modulus)",172,null],[13,"And","","The `&&` operator (logical and)",172,null],[13,"Or","","The `||` operator (logical or)",172,null],[13,"BitXor","","The `^` operator (bitwise xor)",172,null],[13,"BitAnd","","The `&` operator (bitwise and)",172,null],[13,"BitOr","","The `|` operator (bitwise or)",172,null],[13,"Shl","","The `<<` operator (shift left)",172,null],[13,"Shr","","The `>>` operator (shift right)",172,null],[13,"Eq","","The `==` operator (equality)",172,null],[13,"Lt","","The `<` operator (less than)",172,null],[13,"Le","","The `<=` operator (less than or equal to)",172,null],[13,"Ne","","The `!=` operator (not equal to)",172,null],[13,"Ge","","The `>=` operator (greater than or equal to)",172,null],[13,"Gt","","The `>` operator (greater than)",172,null],[13,"AddEq","","The `+=` operator",172,null],[13,"SubEq","","The `-=` operator",172,null],[13,"MulEq","","The `*=` operator",172,null],[13,"DivEq","","The `/=` operator",172,null],[13,"RemEq","","The `%=` operator",172,null],[13,"BitXorEq","","The `^=` operator",172,null],[13,"BitAndEq","","The `&=` operator",172,null],[13,"BitOrEq","","The `|=` operator",172,null],[13,"ShlEq","","The `<<=` operator",172,null],[13,"ShrEq","","The `>>=` operator",172,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",173,null],[13,"Not","","The `!` operator for logical inversion",173,null],[13,"Neg","","The `-` operator for negation",173,null],[4,"Stmt","","A statement, usually ending in a semicolon.",null,null],[13,"Local","","A local (let) binding.",174,null],[13,"Item","","An item definition.",174,null],[13,"Expr","","Expr without trailing semicolon.",174,null],[13,"Semi","","Expression with trailing semicolon.",174,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",175,null],[13,"Type","","A particular type is returned.",175,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Array","","A fixed size array type: `[T; n]`.",176,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",176,null],[13,"Group","","A type contained within invisible delimiters.",176,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",176,null],[13,"Infer","","Indication that a type should be inferred by the compiler:…",176,null],[13,"Macro","","A macro in the type position.",176,null],[13,"Never","","The never type: `!`.",176,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",176,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with…",176,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",176,null],[13,"Reference","","A reference type: `&'a T` or `&'a mut T`.",176,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",176,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",176,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",176,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",176,null],[4,"Pat","","A pattern in a local binding, function signature, match…",null,null],[13,"Box","","A box pattern: `box v`.",177,null],[13,"Ident","","A pattern that binds a new variable: `ref mut binding @…",177,null],[13,"Lit","","A literal pattern: `0`.",177,null],[13,"Macro","","A macro in pattern position.",177,null],[13,"Or","","A pattern that matches any one of a set of cases.",177,null],[13,"Path","","A path pattern like `Color::Red`, optionally qualified…",177,null],[13,"Range","","A range pattern: `1..=2`.",177,null],[13,"Reference","","A reference pattern: `&mut var`.",177,null],[13,"Rest","","The dots in a tuple or slice pattern: `[0, 1, ..]`",177,null],[13,"Slice","","A dynamically sized slice pattern: `[a, b, ref i @ .., y,…",177,null],[13,"Struct","","A struct or struct variant pattern: `Variant { x, y, .. }`.",177,null],[13,"Tuple","","A tuple pattern: `(a, b)`.",177,null],[13,"TupleStruct","","A tuple struct or tuple variant pattern: `Variant(x, y,…",177,null],[13,"Type","","A type ascription pattern: `foo: f64`.",177,null],[13,"Verbatim","","Tokens in pattern position not interpreted by Syn.",177,null],[13,"Wild","","A pattern that matches any value: `_`.",177,null],[4,"GenericArgument","","An individual generic argument, like `'a`, `T`, or `Item =…",null,null],[13,"Lifetime","","A lifetime argument.",178,null],[13,"Type","","A type argument.",178,null],[13,"Binding","","A binding (equality constraint) on an associated type: the…",178,null],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",178,null],[13,"Const","","A const expression. Must be inside of a block.",178,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path…",null,null],[13,"None","","",179,null],[13,"AngleBracketed","","The `<'a, T>` in `std::slice::iter<'a, T>`.",179,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",179,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree…",null,[[["tokenstream"]],[["result"],["parse"]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",null,[[["tokenstream"]],[["result"],["parse"]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",null,[[["str"]],[["result"],["parse"]]]],[5,"parse_file","","Parse the content of a file of Rust code.",null,[[["str"]],[["file"],["result",["file"]]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and…",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"spans","","",180,null],[3,"Abstract","","`abstract`",null,null],[12,"span","","",181,null],[3,"As","","`as`",null,null],[12,"span","","",182,null],[3,"Async","","`async`",null,null],[12,"span","","",183,null],[3,"Auto","","`auto`",null,null],[12,"span","","",184,null],[3,"Await","","`await`",null,null],[12,"span","","",185,null],[3,"Become","","`become`",null,null],[12,"span","","",186,null],[3,"Box","","`box`",null,null],[12,"span","","",187,null],[3,"Break","","`break`",null,null],[12,"span","","",188,null],[3,"Const","","`const`",null,null],[12,"span","","",189,null],[3,"Continue","","`continue`",null,null],[12,"span","","",190,null],[3,"Crate","","`crate`",null,null],[12,"span","","",191,null],[3,"Default","","`default`",null,null],[12,"span","","",192,null],[3,"Do","","`do`",null,null],[12,"span","","",193,null],[3,"Dyn","","`dyn`",null,null],[12,"span","","",194,null],[3,"Else","","`else`",null,null],[12,"span","","",195,null],[3,"Enum","","`enum`",null,null],[12,"span","","",196,null],[3,"Extern","","`extern`",null,null],[12,"span","","",197,null],[3,"Final","","`final`",null,null],[12,"span","","",198,null],[3,"Fn","","`fn`",null,null],[12,"span","","",199,null],[3,"For","","`for`",null,null],[12,"span","","",200,null],[3,"If","","`if`",null,null],[12,"span","","",201,null],[3,"Impl","","`impl`",null,null],[12,"span","","",202,null],[3,"In","","`in`",null,null],[12,"span","","",203,null],[3,"Let","","`let`",null,null],[12,"span","","",204,null],[3,"Loop","","`loop`",null,null],[12,"span","","",205,null],[3,"Macro","","`macro`",null,null],[12,"span","","",206,null],[3,"Match","","`match`",null,null],[12,"span","","",207,null],[3,"Mod","","`mod`",null,null],[12,"span","","",208,null],[3,"Move","","`move`",null,null],[12,"span","","",209,null],[3,"Mut","","`mut`",null,null],[12,"span","","",210,null],[3,"Override","","`override`",null,null],[12,"span","","",211,null],[3,"Priv","","`priv`",null,null],[12,"span","","",212,null],[3,"Pub","","`pub`",null,null],[12,"span","","",213,null],[3,"Ref","","`ref`",null,null],[12,"span","","",214,null],[3,"Return","","`return`",null,null],[12,"span","","",215,null],[3,"SelfType","","`Self`",null,null],[12,"span","","",216,null],[3,"SelfValue","","`self`",null,null],[12,"span","","",217,null],[3,"Static","","`static`",null,null],[12,"span","","",218,null],[3,"Struct","","`struct`",null,null],[12,"span","","",219,null],[3,"Super","","`super`",null,null],[12,"span","","",220,null],[3,"Trait","","`trait`",null,null],[12,"span","","",221,null],[3,"Try","","`try`",null,null],[12,"span","","",222,null],[3,"Type","","`type`",null,null],[12,"span","","",223,null],[3,"Typeof","","`typeof`",null,null],[12,"span","","",224,null],[3,"Union","","`union`",null,null],[12,"span","","",225,null],[3,"Unsafe","","`unsafe`",null,null],[12,"span","","",226,null],[3,"Unsized","","`unsized`",null,null],[12,"span","","",227,null],[3,"Use","","`use`",null,null],[12,"span","","",228,null],[3,"Virtual","","`virtual`",null,null],[12,"span","","",229,null],[3,"Where","","`where`",null,null],[12,"span","","",230,null],[3,"While","","`while`",null,null],[12,"span","","",231,null],[3,"Yield","","`yield`",null,null],[12,"span","","",232,null],[3,"Add","","`+`",null,null],[12,"spans","","",233,null],[3,"AddEq","","`+=`",null,null],[12,"spans","","",234,null],[3,"And","","`&`",null,null],[12,"spans","","",235,null],[3,"AndAnd","","`&&`",null,null],[12,"spans","","",236,null],[3,"AndEq","","`&=`",null,null],[12,"spans","","",237,null],[3,"At","","`@`",null,null],[12,"spans","","",238,null],[3,"Bang","","`!`",null,null],[12,"spans","","",239,null],[3,"Caret","","`^`",null,null],[12,"spans","","",240,null],[3,"CaretEq","","`^=`",null,null],[12,"spans","","",241,null],[3,"Colon","","`:`",null,null],[12,"spans","","",242,null],[3,"Colon2","","`::`",null,null],[12,"spans","","",243,null],[3,"Comma","","`,`",null,null],[12,"spans","","",244,null],[3,"Div","","`/`",null,null],[12,"spans","","",245,null],[3,"DivEq","","`/=`",null,null],[12,"spans","","",246,null],[3,"Dollar","","`$`",null,null],[12,"spans","","",247,null],[3,"Dot","","`.`",null,null],[12,"spans","","",248,null],[3,"Dot2","","`..`",null,null],[12,"spans","","",249,null],[3,"Dot3","","`...`",null,null],[12,"spans","","",250,null],[3,"DotDotEq","","`..=`",null,null],[12,"spans","","",251,null],[3,"Eq","","`=`",null,null],[12,"spans","","",252,null],[3,"EqEq","","`==`",null,null],[12,"spans","","",253,null],[3,"Ge","","`>=`",null,null],[12,"spans","","",254,null],[3,"Gt","","`>`",null,null],[12,"spans","","",255,null],[3,"Le","","`<=`",null,null],[12,"spans","","",256,null],[3,"Lt","","`<`",null,null],[12,"spans","","",257,null],[3,"MulEq","","`*=`",null,null],[12,"spans","","",258,null],[3,"Ne","","`!=`",null,null],[12,"spans","","",259,null],[3,"Or","","`|`",null,null],[12,"spans","","",260,null],[3,"OrEq","","`|=`",null,null],[12,"spans","","",261,null],[3,"OrOr","","`||`",null,null],[12,"spans","","",262,null],[3,"Pound","","`#`",null,null],[12,"spans","","",263,null],[3,"Question","","`?`",null,null],[12,"spans","","",264,null],[3,"RArrow","","`->`",null,null],[12,"spans","","",265,null],[3,"LArrow","","`<-`",null,null],[12,"spans","","",266,null],[3,"Rem","","`%`",null,null],[12,"spans","","",267,null],[3,"RemEq","","`%=`",null,null],[12,"spans","","",268,null],[3,"FatArrow","","`=>`",null,null],[12,"spans","","",269,null],[3,"Semi","","`;`",null,null],[12,"spans","","",270,null],[3,"Shl","","`<<`",null,null],[12,"spans","","",271,null],[3,"ShlEq","","`<<=`",null,null],[12,"spans","","",272,null],[3,"Shr","","`>>`",null,null],[12,"spans","","",273,null],[3,"ShrEq","","`>>=`",null,null],[12,"spans","","",274,null],[3,"Star","","`*`",null,null],[12,"spans","","",275,null],[3,"Sub","","`-`",null,null],[12,"spans","","",276,null],[3,"SubEq","","`-=`",null,null],[12,"spans","","",277,null],[3,"Tilde","","`~`",null,null],[12,"spans","","",278,null],[3,"Brace","","`{...}`",null,null],[12,"span","","",279,null],[3,"Bracket","","`[...]`",null,null],[12,"span","","",280,null],[3,"Paren","","`(...)`",null,null],[12,"span","","",281,null],[3,"Group","","None-delimited group",null,null],[12,"span","","",282,null],[8,"Token","","Marker trait for types that represent single tokens.",null,null],[11,"surround","","",279,[[["f"],["self"],["tokenstream"]]]],[11,"surround","","",280,[[["f"],["self"],["tokenstream"]]]],[11,"surround","","",281,[[["f"],["self"],["tokenstream"]]]],[11,"surround","","",282,[[["f"],["self"],["tokenstream"]]]],[11,"parse_meta","syn","Parses the content of the attribute, consisting of the…",0,[[["self"]],[["result",["meta"]],["meta"]]]],[11,"parse_args","","Parse the arguments to the attribute as a syntax tree.",0,[[["self"]],[["result"],["parse"]]]],[11,"parse_args_with","","Parse the arguments to the attribute using the given parser.",0,[[["self"],["parser"]],["result"]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream"]],[["result",["vec"]],["vec"]]]],[11,"path","","Returns the identifier that begins this structured meta…",150,[[["self"]],["path"]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream"]],["result"]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream"]],["result"]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this…",152,[[["self"]],[["iter",["field"]],["field"]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items…",152,[[["self"]],[["itermut",["field"]],["field"]]]],[11,"len","","Returns the number of fields.",152,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if there are zero fields.",152,[[["self"]],["bool"]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type…",56,[[["self"]],["typeparams"]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type…",56,[[["self"]],["typeparamsmut"]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime…",56,[[["self"]],["lifetimes"]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the…",56,[[["self"]],["lifetimesmut"]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant…",56,[[["self"]],["constparams"]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the…",56,[[["self"]],["constparamsmut"]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one…",56,[[["self"]],["whereclause"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for…",56,[[["self"]]]],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like…",283,[[["self"]],["turbofish"]]],[11,"new","","",57,[[["lifetime"]],["self"]]],[11,"receiver","","A method's `self` receiver, such as `&self` or `self:…",89,[[["self"]],[["option",["fnarg"]],["fnarg"]]]],[11,"lifetime","","",88,[[["self"]],[["lifetime"],["option",["lifetime"]]]]],[11,"new","","Panics",100,[[["str"],["span"]],["self"]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",168,[[["literal"]],["self"]]],[11,"new","","",284,[[["str"],["span"]],["self"]]],[11,"value","","",284,[[["self"]],["string"]]],[11,"parse","","Parse a syntax tree node from the content of this string…",284,[[["self"]],[["result"],["parse"]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",284,[[["self"],["parser"]],["result"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"set_span","","",284,[[["self"],["span"]]]],[11,"suffix","","",284,[[["self"]],["str"]]],[11,"new","","",285,[[["span"]],["self"]]],[11,"value","","",285,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"set_span","","",285,[[["self"],["span"]]]],[11,"new","","",286,[[["span"],["u8"]],["self"]]],[11,"value","","",286,[[["self"]],["u8"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"set_span","","",286,[[["self"],["span"]]]],[11,"new","","",287,[[["char"],["span"]],["self"]]],[11,"value","","",287,[[["self"]],["char"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"set_span","","",287,[[["self"],["span"]]]],[11,"new","","",288,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",288,[[["self"]],["str"]]],[11,"base10_parse","","Parses the literal into a selected number type.",288,[[["self"]],["result"]]],[11,"suffix","","",288,[[["self"]],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"set_span","","",288,[[["self"],["span"]]]],[11,"new","","",289,[[["str"],["span"]],["self"]]],[11,"base10_digits","","",289,[[["self"]],["str"]]],[11,"base10_parse","","",289,[[["self"]],["result"]]],[11,"suffix","","",289,[[["self"]],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"set_span","","",289,[[["self"],["span"]]]],[11,"parse_body","","Parse the tokens within the macro invocation's delimiters…",102,[[["self"]],[["result"],["parse"]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation's delimiters…",102,[[["self"],["parser"]],["result"]]],[11,"parse_within","","Parse the body of a block as zero or more statements,…",107,[[["parsestream"]],[["result",["vec"]],["vec",["stmt"]]]]],[11,"without_plus","","In some positions, types may not contain the `+`…",176,[[["parsestream"]],["result"]]],[11,"without_plus","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"],["bool"]],["result"]]],[11,"without_plus","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["parsestream"],["bool"]],["result"]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its…",146,[[["parsestream"]],["result"]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to the…",146,[[["i"],["self"]],["bool"]]],[11,"get_ident","","If this path consists of a single ident, returns the ident.",146,[[["self"]],[["option",["ident"]],["ident"]]]],[11,"is_empty","","",179,[[["self"]],["bool"]]],[0,"buffer","","A stably addressed token buffer supporting efficient…",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times,…",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the…",290,[[["tokenstream"]],["tokenbuffer"]]],[11,"begin","","Creates a cursor referencing the first token in the buffer…",290,[[["self"]],["cursor"]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",291,[[],["self"]]],[11,"eof","","Checks whether the cursor is currently pointing at the end…",291,[[],["bool"]]],[11,"group","","If the cursor is pointing at a `Group` with the given…",291,[[["delimiter"]],["option"]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along…",291,[[],["option"]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along…",291,[[],["option"]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along…",291,[[],["option"]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it…",291,[[],["option"]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into…",291,[[],["tokenstream"]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it…",291,[[],["option"]]],[11,"span","","Returns the `Span` of the current token, or…",291,[[],["span"]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign…",null,null],[8,"IdentExt","syn::ext","Additional methods for `Ident` not provided by proc-macro2…",null,null],[10,"parse_any","","Parses any identifier including keywords.",292,[[["parsestream"]],["result"]]],[18,"peek_any","","Peeks any identifier including keywords. Usage:…",292,null],[10,"unraw","","Strips the raw marker `r#`, if any, from the beginning of…",292,[[["self"]],["ident"]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by…",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T`…",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut…",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its…",null,null],[13,"Punctuated","","",293,null],[13,"End","","",293,null],[11,"new","","Creates an empty punctuated sequence.",294,[[],["punctuated"]]],[11,"is_empty","","Determines whether this punctuated sequence is empty,…",294,[[["self"]],["bool"]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated…",294,[[["self"]],["usize"]]],[11,"first","","Borrows the first element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"last","","Borrows the last element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"last_mut","","Mutably borrows the last element in this sequence.",294,[[["self"]],[["option"],["t"]]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of…",294,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree…",294,[[["self"]],["itermut"]]],[11,"pairs","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairs"]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as…",294,[[["self"]],["pairsmut"]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as…",294,[[],["intopairs"]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this…",294,[[["self"],["p"]]]],[11,"pop","","Removes the last punctuated pair from this sequence, or…",294,[[["self"]],[["option",["pair"]],["pair"]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a…",294,[[["self"]],["bool"]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it…",294,[[["self"]],["bool"]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated…",294,[[["self"],["t"]]]],[11,"insert","","Inserts an element at position `index`.",294,[[["self"],["usize"],["t"]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by…",294,[[["parsestream"]],["result"]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given…",294,[[["parsestream"]],["result"]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair,…",293,[[],["t"]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",293,[[["self"]],["t"]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated…",293,[[["self"]],["t"]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless…",293,[[["self"]],[["option"],["p"]]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an…",293,[[["option"],["t"]],["self"]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree…",293,[[]]],[0,"spanned","syn","A trait that can provide the `Span` of the complete…",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete…",null,null],[10,"span","","Returns a `Span` covering the complete contents of this…",295,[[["self"]],["span"]]],[0,"visit","syn","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[5,"visit_abi","syn::visit","",null,[[["abi"],["v"]]]],[5,"visit_angle_bracketed_generic_arguments","","",null,[[["v"],["anglebracketedgenericarguments"]]]],[5,"visit_arm","","",null,[[["arm"],["v"]]]],[5,"visit_attr_style","","",null,[[["v"],["attrstyle"]]]],[5,"visit_attribute","","",null,[[["attribute"],["v"]]]],[5,"visit_bare_fn_arg","","",null,[[["v"],["barefnarg"]]]],[5,"visit_bin_op","","",null,[[["v"],["binop"]]]],[5,"visit_binding","","",null,[[["v"],["binding"]]]],[5,"visit_block","","",null,[[["v"],["block"]]]],[5,"visit_bound_lifetimes","","",null,[[["v"],["boundlifetimes"]]]],[5,"visit_const_param","","",null,[[["constparam"],["v"]]]],[5,"visit_constraint","","",null,[[["constraint"],["v"]]]],[5,"visit_data","","",null,[[["data"],["v"]]]],[5,"visit_data_enum","","",null,[[["v"],["dataenum"]]]],[5,"visit_data_struct","","",null,[[["datastruct"],["v"]]]],[5,"visit_data_union","","",null,[[["v"],["dataunion"]]]],[5,"visit_derive_input","","",null,[[["v"],["deriveinput"]]]],[5,"visit_expr","","",null,[[["v"],["expr"]]]],[5,"visit_expr_array","","",null,[[["v"],["exprarray"]]]],[5,"visit_expr_assign","","",null,[[["exprassign"],["v"]]]],[5,"visit_expr_assign_op","","",null,[[["v"],["exprassignop"]]]],[5,"visit_expr_async","","",null,[[["v"],["exprasync"]]]],[5,"visit_expr_await","","",null,[[["v"],["exprawait"]]]],[5,"visit_expr_binary","","",null,[[["exprbinary"],["v"]]]],[5,"visit_expr_block","","",null,[[["v"],["exprblock"]]]],[5,"visit_expr_box","","",null,[[["exprbox"],["v"]]]],[5,"visit_expr_break","","",null,[[["exprbreak"],["v"]]]],[5,"visit_expr_call","","",null,[[["v"],["exprcall"]]]],[5,"visit_expr_cast","","",null,[[["v"],["exprcast"]]]],[5,"visit_expr_closure","","",null,[[["v"],["exprclosure"]]]],[5,"visit_expr_continue","","",null,[[["exprcontinue"],["v"]]]],[5,"visit_expr_field","","",null,[[["exprfield"],["v"]]]],[5,"visit_expr_for_loop","","",null,[[["v"],["exprforloop"]]]],[5,"visit_expr_group","","",null,[[["v"],["exprgroup"]]]],[5,"visit_expr_if","","",null,[[["exprif"],["v"]]]],[5,"visit_expr_index","","",null,[[["exprindex"],["v"]]]],[5,"visit_expr_let","","",null,[[["exprlet"],["v"]]]],[5,"visit_expr_lit","","",null,[[["exprlit"],["v"]]]],[5,"visit_expr_loop","","",null,[[["v"],["exprloop"]]]],[5,"visit_expr_macro","","",null,[[["exprmacro"],["v"]]]],[5,"visit_expr_match","","",null,[[["exprmatch"],["v"]]]],[5,"visit_expr_method_call","","",null,[[["exprmethodcall"],["v"]]]],[5,"visit_expr_paren","","",null,[[["exprparen"],["v"]]]],[5,"visit_expr_path","","",null,[[["v"],["exprpath"]]]],[5,"visit_expr_range","","",null,[[["v"],["exprrange"]]]],[5,"visit_expr_reference","","",null,[[["exprreference"],["v"]]]],[5,"visit_expr_repeat","","",null,[[["exprrepeat"],["v"]]]],[5,"visit_expr_return","","",null,[[["v"],["exprreturn"]]]],[5,"visit_expr_struct","","",null,[[["exprstruct"],["v"]]]],[5,"visit_expr_try","","",null,[[["exprtry"],["v"]]]],[5,"visit_expr_try_block","","",null,[[["exprtryblock"],["v"]]]],[5,"visit_expr_tuple","","",null,[[["exprtuple"],["v"]]]],[5,"visit_expr_type","","",null,[[["exprtype"],["v"]]]],[5,"visit_expr_unary","","",null,[[["v"],["exprunary"]]]],[5,"visit_expr_unsafe","","",null,[[["v"],["exprunsafe"]]]],[5,"visit_expr_while","","",null,[[["v"],["exprwhile"]]]],[5,"visit_expr_yield","","",null,[[["v"],["expryield"]]]],[5,"visit_field","","",null,[[["v"],["field"]]]],[5,"visit_field_pat","","",null,[[["fieldpat"],["v"]]]],[5,"visit_field_value","","",null,[[["fieldvalue"],["v"]]]],[5,"visit_fields","","",null,[[["v"],["fields"]]]],[5,"visit_fields_named","","",null,[[["fieldsnamed"],["v"]]]],[5,"visit_fields_unnamed","","",null,[[["v"],["fieldsunnamed"]]]],[5,"visit_file","","",null,[[["file"],["v"]]]],[5,"visit_fn_arg","","",null,[[["fnarg"],["v"]]]],[5,"visit_foreign_item","","",null,[[["v"],["foreignitem"]]]],[5,"visit_foreign_item_fn","","",null,[[["foreignitemfn"],["v"]]]],[5,"visit_foreign_item_macro","","",null,[[["foreignitemmacro"],["v"]]]],[5,"visit_foreign_item_static","","",null,[[["v"],["foreignitemstatic"]]]],[5,"visit_foreign_item_type","","",null,[[["v"],["foreignitemtype"]]]],[5,"visit_generic_argument","","",null,[[["genericargument"],["v"]]]],[5,"visit_generic_method_argument","","",null,[[["v"],["genericmethodargument"]]]],[5,"visit_generic_param","","",null,[[["v"],["genericparam"]]]],[5,"visit_generics","","",null,[[["v"],["generics"]]]],[5,"visit_ident","","",null,[[["v"],["ident"]]]],[5,"visit_impl_item","","",null,[[["v"],["implitem"]]]],[5,"visit_impl_item_const","","",null,[[["v"],["implitemconst"]]]],[5,"visit_impl_item_macro","","",null,[[["implitemmacro"],["v"]]]],[5,"visit_impl_item_method","","",null,[[["v"],["implitemmethod"]]]],[5,"visit_impl_item_type","","",null,[[["implitemtype"],["v"]]]],[5,"visit_index","","",null,[[["index"],["v"]]]],[5,"visit_item","","",null,[[["v"],["item"]]]],[5,"visit_item_const","","",null,[[["v"],["itemconst"]]]],[5,"visit_item_enum","","",null,[[["itemenum"],["v"]]]],[5,"visit_item_extern_crate","","",null,[[["itemexterncrate"],["v"]]]],[5,"visit_item_fn","","",null,[[["itemfn"],["v"]]]],[5,"visit_item_foreign_mod","","",null,[[["v"],["itemforeignmod"]]]],[5,"visit_item_impl","","",null,[[["v"],["itemimpl"]]]],[5,"visit_item_macro","","",null,[[["itemmacro"],["v"]]]],[5,"visit_item_macro2","","",null,[[["v"],["itemmacro2"]]]],[5,"visit_item_mod","","",null,[[["itemmod"],["v"]]]],[5,"visit_item_static","","",null,[[["itemstatic"],["v"]]]],[5,"visit_item_struct","","",null,[[["v"],["itemstruct"]]]],[5,"visit_item_trait","","",null,[[["itemtrait"],["v"]]]],[5,"visit_item_trait_alias","","",null,[[["itemtraitalias"],["v"]]]],[5,"visit_item_type","","",null,[[["itemtype"],["v"]]]],[5,"visit_item_union","","",null,[[["v"],["itemunion"]]]],[5,"visit_item_use","","",null,[[["itemuse"],["v"]]]],[5,"visit_label","","",null,[[["label"],["v"]]]],[5,"visit_lifetime","","",null,[[["lifetime"],["v"]]]],[5,"visit_lifetime_def","","",null,[[["v"],["lifetimedef"]]]],[5,"visit_lit","","",null,[[["lit"],["v"]]]],[5,"visit_lit_bool","","",null,[[["litbool"],["v"]]]],[5,"visit_lit_byte","","",null,[[["litbyte"],["v"]]]],[5,"visit_lit_byte_str","","",null,[[["v"],["litbytestr"]]]],[5,"visit_lit_char","","",null,[[["litchar"],["v"]]]],[5,"visit_lit_float","","",null,[[["litfloat"],["v"]]]],[5,"visit_lit_int","","",null,[[["v"],["litint"]]]],[5,"visit_lit_str","","",null,[[["v"],["litstr"]]]],[5,"visit_local","","",null,[[["v"],["local"]]]],[5,"visit_macro","","",null,[[["macro"],["v"]]]],[5,"visit_macro_delimiter","","",null,[[["macrodelimiter"],["v"]]]],[5,"visit_member","","",null,[[["member"],["v"]]]],[5,"visit_meta","","",null,[[["v"],["meta"]]]],[5,"visit_meta_list","","",null,[[["v"],["metalist"]]]],[5,"visit_meta_name_value","","",null,[[["metanamevalue"],["v"]]]],[5,"visit_method_turbofish","","",null,[[["methodturbofish"],["v"]]]],[5,"visit_nested_meta","","",null,[[["nestedmeta"],["v"]]]],[5,"visit_parenthesized_generic_arguments","","",null,[[["v"],["parenthesizedgenericarguments"]]]],[5,"visit_pat","","",null,[[["v"],["pat"]]]],[5,"visit_pat_box","","",null,[[["patbox"],["v"]]]],[5,"visit_pat_ident","","",null,[[["patident"],["v"]]]],[5,"visit_pat_lit","","",null,[[["patlit"],["v"]]]],[5,"visit_pat_macro","","",null,[[["patmacro"],["v"]]]],[5,"visit_pat_or","","",null,[[["pator"],["v"]]]],[5,"visit_pat_path","","",null,[[["patpath"],["v"]]]],[5,"visit_pat_range","","",null,[[["patrange"],["v"]]]],[5,"visit_pat_reference","","",null,[[["patreference"],["v"]]]],[5,"visit_pat_rest","","",null,[[["v"],["patrest"]]]],[5,"visit_pat_slice","","",null,[[["patslice"],["v"]]]],[5,"visit_pat_struct","","",null,[[["v"],["patstruct"]]]],[5,"visit_pat_tuple","","",null,[[["v"],["pattuple"]]]],[5,"visit_pat_tuple_struct","","",null,[[["pattuplestruct"],["v"]]]],[5,"visit_pat_type","","",null,[[["pattype"],["v"]]]],[5,"visit_pat_wild","","",null,[[["v"],["patwild"]]]],[5,"visit_path","","",null,[[["path"],["v"]]]],[5,"visit_path_arguments","","",null,[[["patharguments"],["v"]]]],[5,"visit_path_segment","","",null,[[["pathsegment"],["v"]]]],[5,"visit_predicate_eq","","",null,[[["v"],["predicateeq"]]]],[5,"visit_predicate_lifetime","","",null,[[["v"],["predicatelifetime"]]]],[5,"visit_predicate_type","","",null,[[["v"],["predicatetype"]]]],[5,"visit_qself","","",null,[[["qself"],["v"]]]],[5,"visit_range_limits","","",null,[[["v"],["rangelimits"]]]],[5,"visit_receiver","","",null,[[["v"],["receiver"]]]],[5,"visit_return_type","","",null,[[["returntype"],["v"]]]],[5,"visit_signature","","",null,[[["v"],["signature"]]]],[5,"visit_span","","",null,[[["v"],["span"]]]],[5,"visit_stmt","","",null,[[["stmt"],["v"]]]],[5,"visit_trait_bound","","",null,[[["v"],["traitbound"]]]],[5,"visit_trait_bound_modifier","","",null,[[["v"],["traitboundmodifier"]]]],[5,"visit_trait_item","","",null,[[["traititem"],["v"]]]],[5,"visit_trait_item_const","","",null,[[["v"],["traititemconst"]]]],[5,"visit_trait_item_macro","","",null,[[["traititemmacro"],["v"]]]],[5,"visit_trait_item_method","","",null,[[["traititemmethod"],["v"]]]],[5,"visit_trait_item_type","","",null,[[["traititemtype"],["v"]]]],[5,"visit_type","","",null,[[["type"],["v"]]]],[5,"visit_type_array","","",null,[[["v"],["typearray"]]]],[5,"visit_type_bare_fn","","",null,[[["typebarefn"],["v"]]]],[5,"visit_type_group","","",null,[[["v"],["typegroup"]]]],[5,"visit_type_impl_trait","","",null,[[["v"],["typeimpltrait"]]]],[5,"visit_type_infer","","",null,[[["typeinfer"],["v"]]]],[5,"visit_type_macro","","",null,[[["typemacro"],["v"]]]],[5,"visit_type_never","","",null,[[["v"],["typenever"]]]],[5,"visit_type_param","","",null,[[["v"],["typeparam"]]]],[5,"visit_type_param_bound","","",null,[[["v"],["typeparambound"]]]],[5,"visit_type_paren","","",null,[[["v"],["typeparen"]]]],[5,"visit_type_path","","",null,[[["v"],["typepath"]]]],[5,"visit_type_ptr","","",null,[[["v"],["typeptr"]]]],[5,"visit_type_reference","","",null,[[["v"],["typereference"]]]],[5,"visit_type_slice","","",null,[[["v"],["typeslice"]]]],[5,"visit_type_trait_object","","",null,[[["typetraitobject"],["v"]]]],[5,"visit_type_tuple","","",null,[[["v"],["typetuple"]]]],[5,"visit_un_op","","",null,[[["unop"],["v"]]]],[5,"visit_use_glob","","",null,[[["v"],["useglob"]]]],[5,"visit_use_group","","",null,[[["usegroup"],["v"]]]],[5,"visit_use_name","","",null,[[["v"],["usename"]]]],[5,"visit_use_path","","",null,[[["usepath"],["v"]]]],[5,"visit_use_rename","","",null,[[["v"],["userename"]]]],[5,"visit_use_tree","","",null,[[["usetree"],["v"]]]],[5,"visit_variadic","","",null,[[["variadic"],["v"]]]],[5,"visit_variant","","",null,[[["variant"],["v"]]]],[5,"visit_vis_crate","","",null,[[["v"],["viscrate"]]]],[5,"visit_vis_public","","",null,[[["vispublic"],["v"]]]],[5,"visit_vis_restricted","","",null,[[["visrestricted"],["v"]]]],[5,"visit_visibility","","",null,[[["visibility"],["v"]]]],[5,"visit_where_clause","","",null,[[["whereclause"],["v"]]]],[5,"visit_where_predicate","","",null,[[["v"],["wherepredicate"]]]],[8,"Visit","","Syntax tree traversal to walk a shared borrow of a syntax…",null,null],[11,"visit_abi","","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["attribute"],["self"]]]],[11,"visit_bare_fn_arg","","",296,[[["self"],["barefnarg"]]]],[11,"visit_bin_op","","",296,[[["self"],["binop"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",296,[[["self"],["constparam"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["data"],["self"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",296,[[["self"],["exprasync"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["exprbinary"],["self"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["exprbox"],["self"]]]],[11,"visit_expr_break","","",296,[[["exprbreak"],["self"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",296,[[["exprcontinue"],["self"]]]],[11,"visit_expr_field","","",296,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",296,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",296,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",296,[[["self"],["exprif"]]]],[11,"visit_expr_index","","",296,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",296,[[["exprlet"],["self"]]]],[11,"visit_expr_lit","","",296,[[["exprlit"],["self"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["exprmacro"],["self"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["exprmethodcall"],["self"]]]],[11,"visit_expr_paren","","",296,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",296,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",296,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["exprstruct"],["self"]]]],[11,"visit_expr_try","","",296,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block","","",296,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple","","",296,[[["exprtuple"],["self"]]]],[11,"visit_expr_type","","",296,[[["exprtype"],["self"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",296,[[["self"],["expryield"]]]],[11,"visit_field","","",296,[[["self"],["field"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["fieldsnamed"],["self"]]]],[11,"visit_fields_unnamed","","",296,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",296,[[["file"],["self"]]]],[11,"visit_fn_arg","","",296,[[["fnarg"],["self"]]]],[11,"visit_foreign_item","","",296,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["foreignitemmacro"],["self"]]]],[11,"visit_foreign_item_static","","",296,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",296,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument","","",296,[[["genericargument"],["self"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["self"],["generics"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["self"],["item"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["itemenum"],["self"]]]],[11,"visit_item_extern_crate","","",296,[[["itemexterncrate"],["self"]]]],[11,"visit_item_fn","","",296,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["itemmacro"],["self"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",296,[[["itemstatic"],["self"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["itemtype"],["self"]]]],[11,"visit_item_union","","",296,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",296,[[["itemuse"],["self"]]]],[11,"visit_label","","",296,[[["self"],["label"]]]],[11,"visit_lifetime","","",296,[[["lifetime"],["self"]]]],[11,"visit_lifetime_def","","",296,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["litbool"],["self"]]]],[11,"visit_lit_byte","","",296,[[["litbyte"],["self"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["litchar"],["self"]]]],[11,"visit_lit_float","","",296,[[["litfloat"],["self"]]]],[11,"visit_lit_int","","",296,[[["self"],["litint"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["self"],["member"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["metanamevalue"],["self"]]]],[11,"visit_method_turbofish","","",296,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",296,[[["nestedmeta"],["self"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["patbox"],["self"]]]],[11,"visit_pat_ident","","",296,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",296,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",296,[[["self"],["patmacro"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["self"],["patreference"]]]],[11,"visit_pat_rest","","",296,[[["self"],["patrest"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type","","",296,[[["self"],["pattype"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["self"],["path"]]]],[11,"visit_path_arguments","","",296,[[["patharguments"],["self"]]]],[11,"visit_path_segment","","",296,[[["pathsegment"],["self"]]]],[11,"visit_predicate_eq","","",296,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["self"],["qself"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",296,[[["traititemmethod"],["self"]]]],[11,"visit_trait_item_type","","",296,[[["self"],["traititemtype"]]]],[11,"visit_type","","",296,[[["self"],["type"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["typebarefn"],["self"]]]],[11,"visit_type_group","","",296,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",296,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",296,[[["typeinfer"],["self"]]]],[11,"visit_type_macro","","",296,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",296,[[["self"],["typenever"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",296,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["typetraitobject"],["self"]]]],[11,"visit_type_tuple","","",296,[[["self"],["typetuple"]]]],[11,"visit_un_op","","",296,[[["unop"],["self"]]]],[11,"visit_use_glob","","",296,[[["self"],["useglob"]]]],[11,"visit_use_group","","",296,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["self"],["userename"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["variant"],["self"]]]],[11,"visit_vis_crate","","",296,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["whereclause"],["self"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[0,"fold","syn","Syntax tree traversal to transform the nodes of an owned…",null,null],[5,"fold_abi","syn::fold","",null,[[["f"],["abi"]],["abi"]]],[5,"fold_angle_bracketed_generic_arguments","","",null,[[["anglebracketedgenericarguments"],["f"]],["anglebracketedgenericarguments"]]],[5,"fold_arm","","",null,[[["f"],["arm"]],["arm"]]],[5,"fold_attr_style","","",null,[[["f"],["attrstyle"]],["attrstyle"]]],[5,"fold_attribute","","",null,[[["attribute"],["f"]],["attribute"]]],[5,"fold_bare_fn_arg","","",null,[[["f"],["barefnarg"]],["barefnarg"]]],[5,"fold_bin_op","","",null,[[["binop"],["f"]],["binop"]]],[5,"fold_binding","","",null,[[["f"],["binding"]],["binding"]]],[5,"fold_block","","",null,[[["block"],["f"]],["block"]]],[5,"fold_bound_lifetimes","","",null,[[["f"],["boundlifetimes"]],["boundlifetimes"]]],[5,"fold_const_param","","",null,[[["constparam"],["f"]],["constparam"]]],[5,"fold_constraint","","",null,[[["constraint"],["f"]],["constraint"]]],[5,"fold_data","","",null,[[["f"],["data"]],["data"]]],[5,"fold_data_enum","","",null,[[["f"],["dataenum"]],["dataenum"]]],[5,"fold_data_struct","","",null,[[["f"],["datastruct"]],["datastruct"]]],[5,"fold_data_union","","",null,[[["dataunion"],["f"]],["dataunion"]]],[5,"fold_derive_input","","",null,[[["f"],["deriveinput"]],["deriveinput"]]],[5,"fold_expr","","",null,[[["f"],["expr"]],["expr"]]],[5,"fold_expr_array","","",null,[[["f"],["exprarray"]],["exprarray"]]],[5,"fold_expr_assign","","",null,[[["exprassign"],["f"]],["exprassign"]]],[5,"fold_expr_assign_op","","",null,[[["f"],["exprassignop"]],["exprassignop"]]],[5,"fold_expr_async","","",null,[[["f"],["exprasync"]],["exprasync"]]],[5,"fold_expr_await","","",null,[[["f"],["exprawait"]],["exprawait"]]],[5,"fold_expr_binary","","",null,[[["exprbinary"],["f"]],["exprbinary"]]],[5,"fold_expr_block","","",null,[[["f"],["exprblock"]],["exprblock"]]],[5,"fold_expr_box","","",null,[[["f"],["exprbox"]],["exprbox"]]],[5,"fold_expr_break","","",null,[[["exprbreak"],["f"]],["exprbreak"]]],[5,"fold_expr_call","","",null,[[["f"],["exprcall"]],["exprcall"]]],[5,"fold_expr_cast","","",null,[[["f"],["exprcast"]],["exprcast"]]],[5,"fold_expr_closure","","",null,[[["f"],["exprclosure"]],["exprclosure"]]],[5,"fold_expr_continue","","",null,[[["f"],["exprcontinue"]],["exprcontinue"]]],[5,"fold_expr_field","","",null,[[["exprfield"],["f"]],["exprfield"]]],[5,"fold_expr_for_loop","","",null,[[["f"],["exprforloop"]],["exprforloop"]]],[5,"fold_expr_group","","",null,[[["f"],["exprgroup"]],["exprgroup"]]],[5,"fold_expr_if","","",null,[[["exprif"],["f"]],["exprif"]]],[5,"fold_expr_index","","",null,[[["f"],["exprindex"]],["exprindex"]]],[5,"fold_expr_let","","",null,[[["exprlet"],["f"]],["exprlet"]]],[5,"fold_expr_lit","","",null,[[["f"],["exprlit"]],["exprlit"]]],[5,"fold_expr_loop","","",null,[[["f"],["exprloop"]],["exprloop"]]],[5,"fold_expr_macro","","",null,[[["exprmacro"],["f"]],["exprmacro"]]],[5,"fold_expr_match","","",null,[[["f"],["exprmatch"]],["exprmatch"]]],[5,"fold_expr_method_call","","",null,[[["f"],["exprmethodcall"]],["exprmethodcall"]]],[5,"fold_expr_paren","","",null,[[["exprparen"],["f"]],["exprparen"]]],[5,"fold_expr_path","","",null,[[["f"],["exprpath"]],["exprpath"]]],[5,"fold_expr_range","","",null,[[["f"],["exprrange"]],["exprrange"]]],[5,"fold_expr_reference","","",null,[[["f"],["exprreference"]],["exprreference"]]],[5,"fold_expr_repeat","","",null,[[["f"],["exprrepeat"]],["exprrepeat"]]],[5,"fold_expr_return","","",null,[[["f"],["exprreturn"]],["exprreturn"]]],[5,"fold_expr_struct","","",null,[[["f"],["exprstruct"]],["exprstruct"]]],[5,"fold_expr_try","","",null,[[["exprtry"],["f"]],["exprtry"]]],[5,"fold_expr_try_block","","",null,[[["exprtryblock"],["f"]],["exprtryblock"]]],[5,"fold_expr_tuple","","",null,[[["f"],["exprtuple"]],["exprtuple"]]],[5,"fold_expr_type","","",null,[[["exprtype"],["f"]],["exprtype"]]],[5,"fold_expr_unary","","",null,[[["exprunary"],["f"]],["exprunary"]]],[5,"fold_expr_unsafe","","",null,[[["f"],["exprunsafe"]],["exprunsafe"]]],[5,"fold_expr_while","","",null,[[["exprwhile"],["f"]],["exprwhile"]]],[5,"fold_expr_yield","","",null,[[["f"],["expryield"]],["expryield"]]],[5,"fold_field","","",null,[[["f"],["field"]],["field"]]],[5,"fold_field_pat","","",null,[[["f"],["fieldpat"]],["fieldpat"]]],[5,"fold_field_value","","",null,[[["f"],["fieldvalue"]],["fieldvalue"]]],[5,"fold_fields","","",null,[[["f"],["fields"]],["fields"]]],[5,"fold_fields_named","","",null,[[["fieldsnamed"],["f"]],["fieldsnamed"]]],[5,"fold_fields_unnamed","","",null,[[["f"],["fieldsunnamed"]],["fieldsunnamed"]]],[5,"fold_file","","",null,[[["f"],["file"]],["file"]]],[5,"fold_fn_arg","","",null,[[["f"],["fnarg"]],["fnarg"]]],[5,"fold_foreign_item","","",null,[[["f"],["foreignitem"]],["foreignitem"]]],[5,"fold_foreign_item_fn","","",null,[[["f"],["foreignitemfn"]],["foreignitemfn"]]],[5,"fold_foreign_item_macro","","",null,[[["f"],["foreignitemmacro"]],["foreignitemmacro"]]],[5,"fold_foreign_item_static","","",null,[[["f"],["foreignitemstatic"]],["foreignitemstatic"]]],[5,"fold_foreign_item_type","","",null,[[["f"],["foreignitemtype"]],["foreignitemtype"]]],[5,"fold_generic_argument","","",null,[[["genericargument"],["f"]],["genericargument"]]],[5,"fold_generic_method_argument","","",null,[[["genericmethodargument"],["f"]],["genericmethodargument"]]],[5,"fold_generic_param","","",null,[[["f"],["genericparam"]],["genericparam"]]],[5,"fold_generics","","",null,[[["f"],["generics"]],["generics"]]],[5,"fold_ident","","",null,[[["f"],["ident"]],["ident"]]],[5,"fold_impl_item","","",null,[[["f"],["implitem"]],["implitem"]]],[5,"fold_impl_item_const","","",null,[[["f"],["implitemconst"]],["implitemconst"]]],[5,"fold_impl_item_macro","","",null,[[["implitemmacro"],["f"]],["implitemmacro"]]],[5,"fold_impl_item_method","","",null,[[["f"],["implitemmethod"]],["implitemmethod"]]],[5,"fold_impl_item_type","","",null,[[["implitemtype"],["f"]],["implitemtype"]]],[5,"fold_index","","",null,[[["index"],["f"]],["index"]]],[5,"fold_item","","",null,[[["item"],["f"]],["item"]]],[5,"fold_item_const","","",null,[[["f"],["itemconst"]],["itemconst"]]],[5,"fold_item_enum","","",null,[[["f"],["itemenum"]],["itemenum"]]],[5,"fold_item_extern_crate","","",null,[[["f"],["itemexterncrate"]],["itemexterncrate"]]],[5,"fold_item_fn","","",null,[[["f"],["itemfn"]],["itemfn"]]],[5,"fold_item_foreign_mod","","",null,[[["itemforeignmod"],["f"]],["itemforeignmod"]]],[5,"fold_item_impl","","",null,[[["f"],["itemimpl"]],["itemimpl"]]],[5,"fold_item_macro","","",null,[[["itemmacro"],["f"]],["itemmacro"]]],[5,"fold_item_macro2","","",null,[[["itemmacro2"],["f"]],["itemmacro2"]]],[5,"fold_item_mod","","",null,[[["f"],["itemmod"]],["itemmod"]]],[5,"fold_item_static","","",null,[[["f"],["itemstatic"]],["itemstatic"]]],[5,"fold_item_struct","","",null,[[["f"],["itemstruct"]],["itemstruct"]]],[5,"fold_item_trait","","",null,[[["itemtrait"],["f"]],["itemtrait"]]],[5,"fold_item_trait_alias","","",null,[[["f"],["itemtraitalias"]],["itemtraitalias"]]],[5,"fold_item_type","","",null,[[["f"],["itemtype"]],["itemtype"]]],[5,"fold_item_union","","",null,[[["f"],["itemunion"]],["itemunion"]]],[5,"fold_item_use","","",null,[[["f"],["itemuse"]],["itemuse"]]],[5,"fold_label","","",null,[[["f"],["label"]],["label"]]],[5,"fold_lifetime","","",null,[[["lifetime"],["f"]],["lifetime"]]],[5,"fold_lifetime_def","","",null,[[["f"],["lifetimedef"]],["lifetimedef"]]],[5,"fold_lit","","",null,[[["f"],["lit"]],["lit"]]],[5,"fold_lit_bool","","",null,[[["f"],["litbool"]],["litbool"]]],[5,"fold_lit_byte","","",null,[[["f"],["litbyte"]],["litbyte"]]],[5,"fold_lit_byte_str","","",null,[[["f"],["litbytestr"]],["litbytestr"]]],[5,"fold_lit_char","","",null,[[["f"],["litchar"]],["litchar"]]],[5,"fold_lit_float","","",null,[[["f"],["litfloat"]],["litfloat"]]],[5,"fold_lit_int","","",null,[[["f"],["litint"]],["litint"]]],[5,"fold_lit_str","","",null,[[["f"],["litstr"]],["litstr"]]],[5,"fold_local","","",null,[[["f"],["local"]],["local"]]],[5,"fold_macro","","",null,[[["f"],["macro"]],["macro"]]],[5,"fold_macro_delimiter","","",null,[[["f"],["macrodelimiter"]],["macrodelimiter"]]],[5,"fold_member","","",null,[[["member"],["f"]],["member"]]],[5,"fold_meta","","",null,[[["f"],["meta"]],["meta"]]],[5,"fold_meta_list","","",null,[[["f"],["metalist"]],["metalist"]]],[5,"fold_meta_name_value","","",null,[[["f"],["metanamevalue"]],["metanamevalue"]]],[5,"fold_method_turbofish","","",null,[[["f"],["methodturbofish"]],["methodturbofish"]]],[5,"fold_nested_meta","","",null,[[["f"],["nestedmeta"]],["nestedmeta"]]],[5,"fold_parenthesized_generic_arguments","","",null,[[["f"],["parenthesizedgenericarguments"]],["parenthesizedgenericarguments"]]],[5,"fold_pat","","",null,[[["f"],["pat"]],["pat"]]],[5,"fold_pat_box","","",null,[[["f"],["patbox"]],["patbox"]]],[5,"fold_pat_ident","","",null,[[["f"],["patident"]],["patident"]]],[5,"fold_pat_lit","","",null,[[["f"],["patlit"]],["patlit"]]],[5,"fold_pat_macro","","",null,[[["f"],["patmacro"]],["patmacro"]]],[5,"fold_pat_or","","",null,[[["f"],["pator"]],["pator"]]],[5,"fold_pat_path","","",null,[[["f"],["patpath"]],["patpath"]]],[5,"fold_pat_range","","",null,[[["f"],["patrange"]],["patrange"]]],[5,"fold_pat_reference","","",null,[[["f"],["patreference"]],["patreference"]]],[5,"fold_pat_rest","","",null,[[["f"],["patrest"]],["patrest"]]],[5,"fold_pat_slice","","",null,[[["f"],["patslice"]],["patslice"]]],[5,"fold_pat_struct","","",null,[[["f"],["patstruct"]],["patstruct"]]],[5,"fold_pat_tuple","","",null,[[["pattuple"],["f"]],["pattuple"]]],[5,"fold_pat_tuple_struct","","",null,[[["f"],["pattuplestruct"]],["pattuplestruct"]]],[5,"fold_pat_type","","",null,[[["pattype"],["f"]],["pattype"]]],[5,"fold_pat_wild","","",null,[[["f"],["patwild"]],["patwild"]]],[5,"fold_path","","",null,[[["f"],["path"]],["path"]]],[5,"fold_path_arguments","","",null,[[["f"],["patharguments"]],["patharguments"]]],[5,"fold_path_segment","","",null,[[["pathsegment"],["f"]],["pathsegment"]]],[5,"fold_predicate_eq","","",null,[[["f"],["predicateeq"]],["predicateeq"]]],[5,"fold_predicate_lifetime","","",null,[[["f"],["predicatelifetime"]],["predicatelifetime"]]],[5,"fold_predicate_type","","",null,[[["f"],["predicatetype"]],["predicatetype"]]],[5,"fold_qself","","",null,[[["f"],["qself"]],["qself"]]],[5,"fold_range_limits","","",null,[[["f"],["rangelimits"]],["rangelimits"]]],[5,"fold_receiver","","",null,[[["f"],["receiver"]],["receiver"]]],[5,"fold_return_type","","",null,[[["returntype"],["f"]],["returntype"]]],[5,"fold_signature","","",null,[[["signature"],["f"]],["signature"]]],[5,"fold_span","","",null,[[["f"],["span"]],["span"]]],[5,"fold_stmt","","",null,[[["f"],["stmt"]],["stmt"]]],[5,"fold_trait_bound","","",null,[[["traitbound"],["f"]],["traitbound"]]],[5,"fold_trait_bound_modifier","","",null,[[["f"],["traitboundmodifier"]],["traitboundmodifier"]]],[5,"fold_trait_item","","",null,[[["f"],["traititem"]],["traititem"]]],[5,"fold_trait_item_const","","",null,[[["f"],["traititemconst"]],["traititemconst"]]],[5,"fold_trait_item_macro","","",null,[[["traititemmacro"],["f"]],["traititemmacro"]]],[5,"fold_trait_item_method","","",null,[[["traititemmethod"],["f"]],["traititemmethod"]]],[5,"fold_trait_item_type","","",null,[[["f"],["traititemtype"]],["traititemtype"]]],[5,"fold_type","","",null,[[["type"],["f"]],["type"]]],[5,"fold_type_array","","",null,[[["typearray"],["f"]],["typearray"]]],[5,"fold_type_bare_fn","","",null,[[["f"],["typebarefn"]],["typebarefn"]]],[5,"fold_type_group","","",null,[[["f"],["typegroup"]],["typegroup"]]],[5,"fold_type_impl_trait","","",null,[[["f"],["typeimpltrait"]],["typeimpltrait"]]],[5,"fold_type_infer","","",null,[[["f"],["typeinfer"]],["typeinfer"]]],[5,"fold_type_macro","","",null,[[["f"],["typemacro"]],["typemacro"]]],[5,"fold_type_never","","",null,[[["typenever"],["f"]],["typenever"]]],[5,"fold_type_param","","",null,[[["typeparam"],["f"]],["typeparam"]]],[5,"fold_type_param_bound","","",null,[[["f"],["typeparambound"]],["typeparambound"]]],[5,"fold_type_paren","","",null,[[["typeparen"],["f"]],["typeparen"]]],[5,"fold_type_path","","",null,[[["f"],["typepath"]],["typepath"]]],[5,"fold_type_ptr","","",null,[[["f"],["typeptr"]],["typeptr"]]],[5,"fold_type_reference","","",null,[[["typereference"],["f"]],["typereference"]]],[5,"fold_type_slice","","",null,[[["f"],["typeslice"]],["typeslice"]]],[5,"fold_type_trait_object","","",null,[[["f"],["typetraitobject"]],["typetraitobject"]]],[5,"fold_type_tuple","","",null,[[["f"],["typetuple"]],["typetuple"]]],[5,"fold_un_op","","",null,[[["f"],["unop"]],["unop"]]],[5,"fold_use_glob","","",null,[[["f"],["useglob"]],["useglob"]]],[5,"fold_use_group","","",null,[[["f"],["usegroup"]],["usegroup"]]],[5,"fold_use_name","","",null,[[["f"],["usename"]],["usename"]]],[5,"fold_use_path","","",null,[[["f"],["usepath"]],["usepath"]]],[5,"fold_use_rename","","",null,[[["userename"],["f"]],["userename"]]],[5,"fold_use_tree","","",null,[[["f"],["usetree"]],["usetree"]]],[5,"fold_variadic","","",null,[[["f"],["variadic"]],["variadic"]]],[5,"fold_variant","","",null,[[["variant"],["f"]],["variant"]]],[5,"fold_vis_crate","","",null,[[["f"],["viscrate"]],["viscrate"]]],[5,"fold_vis_public","","",null,[[["f"],["vispublic"]],["vispublic"]]],[5,"fold_vis_restricted","","",null,[[["f"],["visrestricted"]],["visrestricted"]]],[5,"fold_visibility","","",null,[[["visibility"],["f"]],["visibility"]]],[5,"fold_where_clause","","",null,[[["f"],["whereclause"]],["whereclause"]]],[5,"fold_where_predicate","","",null,[[["wherepredicate"],["f"]],["wherepredicate"]]],[8,"Fold","","Syntax tree traversal to transform the nodes of an owned…",null,null],[11,"fold_abi","","",297,[[["self"],["abi"]],["abi"]]],[11,"fold_angle_bracketed_generic_arguments","","",297,[[["anglebracketedgenericarguments"],["self"]],["anglebracketedgenericarguments"]]],[11,"fold_arm","","",297,[[["self"],["arm"]],["arm"]]],[11,"fold_attr_style","","",297,[[["self"],["attrstyle"]],["attrstyle"]]],[11,"fold_attribute","","",297,[[["attribute"],["self"]],["attribute"]]],[11,"fold_bare_fn_arg","","",297,[[["self"],["barefnarg"]],["barefnarg"]]],[11,"fold_bin_op","","",297,[[["binop"],["self"]],["binop"]]],[11,"fold_binding","","",297,[[["self"],["binding"]],["binding"]]],[11,"fold_block","","",297,[[["block"],["self"]],["block"]]],[11,"fold_bound_lifetimes","","",297,[[["self"],["boundlifetimes"]],["boundlifetimes"]]],[11,"fold_const_param","","",297,[[["constparam"],["self"]],["constparam"]]],[11,"fold_constraint","","",297,[[["constraint"],["self"]],["constraint"]]],[11,"fold_data","","",297,[[["self"],["data"]],["data"]]],[11,"fold_data_enum","","",297,[[["self"],["dataenum"]],["dataenum"]]],[11,"fold_data_struct","","",297,[[["self"],["datastruct"]],["datastruct"]]],[11,"fold_data_union","","",297,[[["dataunion"],["self"]],["dataunion"]]],[11,"fold_derive_input","","",297,[[["self"],["deriveinput"]],["deriveinput"]]],[11,"fold_expr","","",297,[[["self"],["expr"]],["expr"]]],[11,"fold_expr_array","","",297,[[["self"],["exprarray"]],["exprarray"]]],[11,"fold_expr_assign","","",297,[[["exprassign"],["self"]],["exprassign"]]],[11,"fold_expr_assign_op","","",297,[[["self"],["exprassignop"]],["exprassignop"]]],[11,"fold_expr_async","","",297,[[["self"],["exprasync"]],["exprasync"]]],[11,"fold_expr_await","","",297,[[["self"],["exprawait"]],["exprawait"]]],[11,"fold_expr_binary","","",297,[[["exprbinary"],["self"]],["exprbinary"]]],[11,"fold_expr_block","","",297,[[["self"],["exprblock"]],["exprblock"]]],[11,"fold_expr_box","","",297,[[["self"],["exprbox"]],["exprbox"]]],[11,"fold_expr_break","","",297,[[["exprbreak"],["self"]],["exprbreak"]]],[11,"fold_expr_call","","",297,[[["self"],["exprcall"]],["exprcall"]]],[11,"fold_expr_cast","","",297,[[["self"],["exprcast"]],["exprcast"]]],[11,"fold_expr_closure","","",297,[[["self"],["exprclosure"]],["exprclosure"]]],[11,"fold_expr_continue","","",297,[[["self"],["exprcontinue"]],["exprcontinue"]]],[11,"fold_expr_field","","",297,[[["exprfield"],["self"]],["exprfield"]]],[11,"fold_expr_for_loop","","",297,[[["self"],["exprforloop"]],["exprforloop"]]],[11,"fold_expr_group","","",297,[[["self"],["exprgroup"]],["exprgroup"]]],[11,"fold_expr_if","","",297,[[["exprif"],["self"]],["exprif"]]],[11,"fold_expr_index","","",297,[[["self"],["exprindex"]],["exprindex"]]],[11,"fold_expr_let","","",297,[[["exprlet"],["self"]],["exprlet"]]],[11,"fold_expr_lit","","",297,[[["self"],["exprlit"]],["exprlit"]]],[11,"fold_expr_loop","","",297,[[["self"],["exprloop"]],["exprloop"]]],[11,"fold_expr_macro","","",297,[[["exprmacro"],["self"]],["exprmacro"]]],[11,"fold_expr_match","","",297,[[["self"],["exprmatch"]],["exprmatch"]]],[11,"fold_expr_method_call","","",297,[[["self"],["exprmethodcall"]],["exprmethodcall"]]],[11,"fold_expr_paren","","",297,[[["exprparen"],["self"]],["exprparen"]]],[11,"fold_expr_path","","",297,[[["self"],["exprpath"]],["exprpath"]]],[11,"fold_expr_range","","",297,[[["self"],["exprrange"]],["exprrange"]]],[11,"fold_expr_reference","","",297,[[["self"],["exprreference"]],["exprreference"]]],[11,"fold_expr_repeat","","",297,[[["self"],["exprrepeat"]],["exprrepeat"]]],[11,"fold_expr_return","","",297,[[["self"],["exprreturn"]],["exprreturn"]]],[11,"fold_expr_struct","","",297,[[["self"],["exprstruct"]],["exprstruct"]]],[11,"fold_expr_try","","",297,[[["exprtry"],["self"]],["exprtry"]]],[11,"fold_expr_try_block","","",297,[[["exprtryblock"],["self"]],["exprtryblock"]]],[11,"fold_expr_tuple","","",297,[[["self"],["exprtuple"]],["exprtuple"]]],[11,"fold_expr_type","","",297,[[["exprtype"],["self"]],["exprtype"]]],[11,"fold_expr_unary","","",297,[[["exprunary"],["self"]],["exprunary"]]],[11,"fold_expr_unsafe","","",297,[[["self"],["exprunsafe"]],["exprunsafe"]]],[11,"fold_expr_while","","",297,[[["exprwhile"],["self"]],["exprwhile"]]],[11,"fold_expr_yield","","",297,[[["self"],["expryield"]],["expryield"]]],[11,"fold_field","","",297,[[["self"],["field"]],["field"]]],[11,"fold_field_pat","","",297,[[["self"],["fieldpat"]],["fieldpat"]]],[11,"fold_field_value","","",297,[[["self"],["fieldvalue"]],["fieldvalue"]]],[11,"fold_fields","","",297,[[["self"],["fields"]],["fields"]]],[11,"fold_fields_named","","",297,[[["fieldsnamed"],["self"]],["fieldsnamed"]]],[11,"fold_fields_unnamed","","",297,[[["self"],["fieldsunnamed"]],["fieldsunnamed"]]],[11,"fold_file","","",297,[[["self"],["file"]],["file"]]],[11,"fold_fn_arg","","",297,[[["self"],["fnarg"]],["fnarg"]]],[11,"fold_foreign_item","","",297,[[["self"],["foreignitem"]],["foreignitem"]]],[11,"fold_foreign_item_fn","","",297,[[["self"],["foreignitemfn"]],["foreignitemfn"]]],[11,"fold_foreign_item_macro","","",297,[[["self"],["foreignitemmacro"]],["foreignitemmacro"]]],[11,"fold_foreign_item_static","","",297,[[["self"],["foreignitemstatic"]],["foreignitemstatic"]]],[11,"fold_foreign_item_type","","",297,[[["self"],["foreignitemtype"]],["foreignitemtype"]]],[11,"fold_generic_argument","","",297,[[["genericargument"],["self"]],["genericargument"]]],[11,"fold_generic_method_argument","","",297,[[["genericmethodargument"],["self"]],["genericmethodargument"]]],[11,"fold_generic_param","","",297,[[["self"],["genericparam"]],["genericparam"]]],[11,"fold_generics","","",297,[[["self"],["generics"]],["generics"]]],[11,"fold_ident","","",297,[[["self"],["ident"]],["ident"]]],[11,"fold_impl_item","","",297,[[["self"],["implitem"]],["implitem"]]],[11,"fold_impl_item_const","","",297,[[["self"],["implitemconst"]],["implitemconst"]]],[11,"fold_impl_item_macro","","",297,[[["implitemmacro"],["self"]],["implitemmacro"]]],[11,"fold_impl_item_method","","",297,[[["self"],["implitemmethod"]],["implitemmethod"]]],[11,"fold_impl_item_type","","",297,[[["implitemtype"],["self"]],["implitemtype"]]],[11,"fold_index","","",297,[[["index"],["self"]],["index"]]],[11,"fold_item","","",297,[[["item"],["self"]],["item"]]],[11,"fold_item_const","","",297,[[["self"],["itemconst"]],["itemconst"]]],[11,"fold_item_enum","","",297,[[["self"],["itemenum"]],["itemenum"]]],[11,"fold_item_extern_crate","","",297,[[["self"],["itemexterncrate"]],["itemexterncrate"]]],[11,"fold_item_fn","","",297,[[["self"],["itemfn"]],["itemfn"]]],[11,"fold_item_foreign_mod","","",297,[[["itemforeignmod"],["self"]],["itemforeignmod"]]],[11,"fold_item_impl","","",297,[[["self"],["itemimpl"]],["itemimpl"]]],[11,"fold_item_macro","","",297,[[["itemmacro"],["self"]],["itemmacro"]]],[11,"fold_item_macro2","","",297,[[["itemmacro2"],["self"]],["itemmacro2"]]],[11,"fold_item_mod","","",297,[[["self"],["itemmod"]],["itemmod"]]],[11,"fold_item_static","","",297,[[["self"],["itemstatic"]],["itemstatic"]]],[11,"fold_item_struct","","",297,[[["self"],["itemstruct"]],["itemstruct"]]],[11,"fold_item_trait","","",297,[[["itemtrait"],["self"]],["itemtrait"]]],[11,"fold_item_trait_alias","","",297,[[["self"],["itemtraitalias"]],["itemtraitalias"]]],[11,"fold_item_type","","",297,[[["self"],["itemtype"]],["itemtype"]]],[11,"fold_item_union","","",297,[[["self"],["itemunion"]],["itemunion"]]],[11,"fold_item_use","","",297,[[["self"],["itemuse"]],["itemuse"]]],[11,"fold_label","","",297,[[["self"],["label"]],["label"]]],[11,"fold_lifetime","","",297,[[["lifetime"],["self"]],["lifetime"]]],[11,"fold_lifetime_def","","",297,[[["self"],["lifetimedef"]],["lifetimedef"]]],[11,"fold_lit","","",297,[[["self"],["lit"]],["lit"]]],[11,"fold_lit_bool","","",297,[[["self"],["litbool"]],["litbool"]]],[11,"fold_lit_byte","","",297,[[["self"],["litbyte"]],["litbyte"]]],[11,"fold_lit_byte_str","","",297,[[["self"],["litbytestr"]],["litbytestr"]]],[11,"fold_lit_char","","",297,[[["self"],["litchar"]],["litchar"]]],[11,"fold_lit_float","","",297,[[["self"],["litfloat"]],["litfloat"]]],[11,"fold_lit_int","","",297,[[["self"],["litint"]],["litint"]]],[11,"fold_lit_str","","",297,[[["self"],["litstr"]],["litstr"]]],[11,"fold_local","","",297,[[["self"],["local"]],["local"]]],[11,"fold_macro","","",297,[[["self"],["macro"]],["macro"]]],[11,"fold_macro_delimiter","","",297,[[["self"],["macrodelimiter"]],["macrodelimiter"]]],[11,"fold_member","","",297,[[["member"],["self"]],["member"]]],[11,"fold_meta","","",297,[[["self"],["meta"]],["meta"]]],[11,"fold_meta_list","","",297,[[["self"],["metalist"]],["metalist"]]],[11,"fold_meta_name_value","","",297,[[["self"],["metanamevalue"]],["metanamevalue"]]],[11,"fold_method_turbofish","","",297,[[["self"],["methodturbofish"]],["methodturbofish"]]],[11,"fold_nested_meta","","",297,[[["self"],["nestedmeta"]],["nestedmeta"]]],[11,"fold_parenthesized_generic_arguments","","",297,[[["self"],["parenthesizedgenericarguments"]],["parenthesizedgenericarguments"]]],[11,"fold_pat","","",297,[[["self"],["pat"]],["pat"]]],[11,"fold_pat_box","","",297,[[["self"],["patbox"]],["patbox"]]],[11,"fold_pat_ident","","",297,[[["self"],["patident"]],["patident"]]],[11,"fold_pat_lit","","",297,[[["self"],["patlit"]],["patlit"]]],[11,"fold_pat_macro","","",297,[[["self"],["patmacro"]],["patmacro"]]],[11,"fold_pat_or","","",297,[[["self"],["pator"]],["pator"]]],[11,"fold_pat_path","","",297,[[["self"],["patpath"]],["patpath"]]],[11,"fold_pat_range","","",297,[[["self"],["patrange"]],["patrange"]]],[11,"fold_pat_reference","","",297,[[["self"],["patreference"]],["patreference"]]],[11,"fold_pat_rest","","",297,[[["self"],["patrest"]],["patrest"]]],[11,"fold_pat_slice","","",297,[[["self"],["patslice"]],["patslice"]]],[11,"fold_pat_struct","","",297,[[["self"],["patstruct"]],["patstruct"]]],[11,"fold_pat_tuple","","",297,[[["pattuple"],["self"]],["pattuple"]]],[11,"fold_pat_tuple_struct","","",297,[[["self"],["pattuplestruct"]],["pattuplestruct"]]],[11,"fold_pat_type","","",297,[[["pattype"],["self"]],["pattype"]]],[11,"fold_pat_wild","","",297,[[["self"],["patwild"]],["patwild"]]],[11,"fold_path","","",297,[[["self"],["path"]],["path"]]],[11,"fold_path_arguments","","",297,[[["self"],["patharguments"]],["patharguments"]]],[11,"fold_path_segment","","",297,[[["pathsegment"],["self"]],["pathsegment"]]],[11,"fold_predicate_eq","","",297,[[["self"],["predicateeq"]],["predicateeq"]]],[11,"fold_predicate_lifetime","","",297,[[["self"],["predicatelifetime"]],["predicatelifetime"]]],[11,"fold_predicate_type","","",297,[[["self"],["predicatetype"]],["predicatetype"]]],[11,"fold_qself","","",297,[[["self"],["qself"]],["qself"]]],[11,"fold_range_limits","","",297,[[["self"],["rangelimits"]],["rangelimits"]]],[11,"fold_receiver","","",297,[[["self"],["receiver"]],["receiver"]]],[11,"fold_return_type","","",297,[[["returntype"],["self"]],["returntype"]]],[11,"fold_signature","","",297,[[["signature"],["self"]],["signature"]]],[11,"fold_span","","",297,[[["self"],["span"]],["span"]]],[11,"fold_stmt","","",297,[[["self"],["stmt"]],["stmt"]]],[11,"fold_trait_bound","","",297,[[["traitbound"],["self"]],["traitbound"]]],[11,"fold_trait_bound_modifier","","",297,[[["self"],["traitboundmodifier"]],["traitboundmodifier"]]],[11,"fold_trait_item","","",297,[[["self"],["traititem"]],["traititem"]]],[11,"fold_trait_item_const","","",297,[[["self"],["traititemconst"]],["traititemconst"]]],[11,"fold_trait_item_macro","","",297,[[["traititemmacro"],["self"]],["traititemmacro"]]],[11,"fold_trait_item_method","","",297,[[["traititemmethod"],["self"]],["traititemmethod"]]],[11,"fold_trait_item_type","","",297,[[["self"],["traititemtype"]],["traititemtype"]]],[11,"fold_type","","",297,[[["type"],["self"]],["type"]]],[11,"fold_type_array","","",297,[[["typearray"],["self"]],["typearray"]]],[11,"fold_type_bare_fn","","",297,[[["self"],["typebarefn"]],["typebarefn"]]],[11,"fold_type_group","","",297,[[["self"],["typegroup"]],["typegroup"]]],[11,"fold_type_impl_trait","","",297,[[["self"],["typeimpltrait"]],["typeimpltrait"]]],[11,"fold_type_infer","","",297,[[["self"],["typeinfer"]],["typeinfer"]]],[11,"fold_type_macro","","",297,[[["self"],["typemacro"]],["typemacro"]]],[11,"fold_type_never","","",297,[[["typenever"],["self"]],["typenever"]]],[11,"fold_type_param","","",297,[[["typeparam"],["self"]],["typeparam"]]],[11,"fold_type_param_bound","","",297,[[["self"],["typeparambound"]],["typeparambound"]]],[11,"fold_type_paren","","",297,[[["typeparen"],["self"]],["typeparen"]]],[11,"fold_type_path","","",297,[[["self"],["typepath"]],["typepath"]]],[11,"fold_type_ptr","","",297,[[["self"],["typeptr"]],["typeptr"]]],[11,"fold_type_reference","","",297,[[["typereference"],["self"]],["typereference"]]],[11,"fold_type_slice","","",297,[[["self"],["typeslice"]],["typeslice"]]],[11,"fold_type_trait_object","","",297,[[["self"],["typetraitobject"]],["typetraitobject"]]],[11,"fold_type_tuple","","",297,[[["self"],["typetuple"]],["typetuple"]]],[11,"fold_un_op","","",297,[[["self"],["unop"]],["unop"]]],[11,"fold_use_glob","","",297,[[["self"],["useglob"]],["useglob"]]],[11,"fold_use_group","","",297,[[["self"],["usegroup"]],["usegroup"]]],[11,"fold_use_name","","",297,[[["self"],["usename"]],["usename"]]],[11,"fold_use_path","","",297,[[["self"],["usepath"]],["usepath"]]],[11,"fold_use_rename","","",297,[[["userename"],["self"]],["userename"]]],[11,"fold_use_tree","","",297,[[["self"],["usetree"]],["usetree"]]],[11,"fold_variadic","","",297,[[["self"],["variadic"]],["variadic"]]],[11,"fold_variant","","",297,[[["variant"],["self"]],["variant"]]],[11,"fold_vis_crate","","",297,[[["self"],["viscrate"]],["viscrate"]]],[11,"fold_vis_public","","",297,[[["self"],["vispublic"]],["vispublic"]]],[11,"fold_vis_restricted","","",297,[[["self"],["visrestricted"]],["visrestricted"]]],[11,"fold_visibility","","",297,[[["visibility"],["self"]],["visibility"]]],[11,"fold_where_clause","","",297,[[["self"],["whereclause"]],["whereclause"]]],[11,"fold_where_predicate","","",297,[[["wherepredicate"],["self"]],["wherepredicate"]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax…",null,null],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input…",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide…",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[3,"Nothing","","An empty syntax tree node that consumes no tokens when…",null,null],[0,"discouraged","","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the `ParseStream` API to support speculative…",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked…",298,[[["self"]]]],[6,"Result","syn::parse","The result of a Syn parser.",null,null],[6,"ParseStream","","Input to a Syn parser function.",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be…",null,null],[10,"parse","","",299,[[["parsestream"]],["result"]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax…",null,null],[16,"Output","","",300,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",300,[[["tokenstream"]],["result"]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree…",300,[[["tokenstream"]],["result"]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",300,[[["str"]],["result"]]],[11,"error","","Triggers an error at the current position of the parse…",301,[[["display"]],["error"]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the…",302,[[["self"]],[["result"],["parse"]]]],[11,"call","","Calls the given parser function to parse a syntax tree…",302,[[["self"]],["result"]]],[11,"peek","","Looks at the next token in the parse stream to determine…",302,[[["peek"],["self"]],["bool"]]],[11,"peek2","","Looks at the second-next token in the parse stream.",302,[[["peek"],["self"]],["bool"]]],[11,"peek3","","Looks at the third-next token in the parse stream.",302,[[["peek"],["self"]],["bool"]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",302,[[["self"]],[["result",["punctuated"]],["punctuated"]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",302,[[["self"]],["bool"]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this…",302,[[["self"]],["lookahead1"]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either…",302,[[["self"]],["self"]]],[11,"error","","Triggers an error at the current position of the parse…",302,[[["self"],["display"]],["error"]]],[11,"step","","Speculatively parses tokens from this parse stream,…",302,[[["self"],["f"]],["result"]]],[11,"span","","Returns the `Span` of the next token in the parse stream,…",302,[[["self"]],["span"]]],[11,"cursor","","Provides low-level access to the token representation…",302,[[["self"]],["cursor"]]],[11,"new","syn","Usually the [`ParseStream::error`] method will be used…",303,[[["span"],["display"]],["self"]]],[11,"new_spanned","","Creates an error with the specified message spanning the…",303,[[["totokens"],["display"]],["self"]]],[11,"span","","The source location of the error.",303,[[["self"]],["span"]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",303,[[["self"]],["tokenstream"]]],[11,"combine","","Add another error message to self such that when…",303,[[["self"],["error"]]]],[6,"AttributeArgs","","Conventional argument type associated with an invocation…",null,null],[6,"Result","","The result of a Syn parser.",null,null],[14,"parenthesized","","Parse a set of parentheses and expose their content to…",null,null],[14,"braced","","Parse a set of curly braces and expose their content to…",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content to…",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type…",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the…",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a…",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given…",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a…",null,null],[11,"peek","","",304,[[["cursor"]],["bool"]]],[11,"display","","",304,[[],["str"]]],[11,"span","","",304,[[["self"]],["span"]]],[11,"from","","",304,[[["t"]],["t"]]],[11,"into","","",304,[[],["u"]]],[11,"to_owned","","",304,[[["self"]],["t"]]],[11,"clone_into","","",304,[[["self"],["t"]]]],[11,"to_string","","",304,[[["self"]],["string"]]],[11,"try_from","","",304,[[["u"]],["result"]]],[11,"try_into","","",304,[[],["result"]]],[11,"borrow","","",304,[[["self"]],["t"]]],[11,"borrow_mut","","",304,[[["self"]],["t"]]],[11,"type_id","","",304,[[["self"]],["typeid"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"span","","",1,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"span","","",2,[[["self"]],["span"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"span","","",3,[[["self"]],["span"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"span","","",5,[[["self"]],["span"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"span","","",6,[[["self"]],["span"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"span","","",7,[[["self"]],["span"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"span","","",8,[[["self"]],["span"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"span","","",9,[[["self"]],["span"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"span","","",10,[[["self"]],["span"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"span","","",11,[[["self"]],["span"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"span","","",12,[[["self"]],["span"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"span","","",13,[[["self"]],["span"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"span","","",14,[[["self"]],["span"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"span","","",15,[[["self"]],["span"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"span","","",16,[[["self"]],["span"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"span","","",17,[[["self"]],["span"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"span","","",18,[[["self"]],["span"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"span","","",19,[[["self"]],["span"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"span","","",20,[[["self"]],["span"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"span","","",21,[[["self"]],["span"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"span","","",22,[[["self"]],["span"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"span","","",23,[[["self"]],["span"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"span","","",24,[[["self"]],["span"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"span","","",25,[[["self"]],["span"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"span","","",26,[[["self"]],["span"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"span","","",27,[[["self"]],["span"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"span","","",28,[[["self"]],["span"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"span","","",29,[[["self"]],["span"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"span","","",30,[[["self"]],["span"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"span","","",31,[[["self"]],["span"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"span","","",32,[[["self"]],["span"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"span","","",33,[[["self"]],["span"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"span","","",34,[[["self"]],["span"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"span","","",35,[[["self"]],["span"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"span","","",36,[[["self"]],["span"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"span","","",37,[[["self"]],["span"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"span","","",38,[[["self"]],["span"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"span","","",39,[[["self"]],["span"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"span","","",40,[[["self"]],["span"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"span","","",41,[[["self"]],["span"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"span","","",42,[[["self"]],["span"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"span","","",43,[[["self"]],["span"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"span","","",44,[[["self"]],["span"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"span","","",45,[[["self"]],["span"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"span","","",46,[[["self"]],["span"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"span","","",47,[[["self"]],["span"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"span","","",48,[[["self"]],["span"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"span","","",49,[[["self"]],["span"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"span","","",50,[[["self"]],["span"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"span","","",51,[[["self"]],["span"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"span","","",52,[[["self"]],["span"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"span","","",53,[[["self"]],["span"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"span","","",54,[[["self"]],["span"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"span","","",55,[[["self"]],["span"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"span","","",56,[[["self"]],["span"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,[[["self"],["t"]]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"span","","",57,[[["self"]],["span"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"span","","",58,[[["self"]],["span"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"span","","",59,[[["self"]],["span"]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"span","","",60,[[["self"]],["span"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"span","","",61,[[["self"]],["span"]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"span","","",62,[[["self"]],["span"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"span","","",63,[[["self"]],["span"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"span","","",305,[[["self"]],["span"]]],[11,"from","","",305,[[["t"]],["t"]]],[11,"into","","",305,[[],["u"]]],[11,"to_owned","","",305,[[["self"]],["t"]]],[11,"clone_into","","",305,[[["self"],["t"]]]],[11,"try_from","","",305,[[["u"]],["result"]]],[11,"try_into","","",305,[[],["result"]]],[11,"borrow","","",305,[[["self"]],["t"]]],[11,"borrow_mut","","",305,[[["self"]],["t"]]],[11,"type_id","","",305,[[["self"]],["typeid"]]],[11,"span","","",306,[[["self"]],["span"]]],[11,"from","","",306,[[["t"]],["t"]]],[11,"into","","",306,[[],["u"]]],[11,"to_owned","","",306,[[["self"]],["t"]]],[11,"clone_into","","",306,[[["self"],["t"]]]],[11,"try_from","","",306,[[["u"]],["result"]]],[11,"try_into","","",306,[[],["result"]]],[11,"borrow","","",306,[[["self"]],["t"]]],[11,"borrow_mut","","",306,[[["self"]],["t"]]],[11,"type_id","","",306,[[["self"]],["typeid"]]],[11,"span","","",283,[[["self"]],["span"]]],[11,"from","","",283,[[["t"]],["t"]]],[11,"into","","",283,[[],["u"]]],[11,"to_owned","","",283,[[["self"]],["t"]]],[11,"clone_into","","",283,[[["self"],["t"]]]],[11,"try_from","","",283,[[["u"]],["result"]]],[11,"try_into","","",283,[[],["result"]]],[11,"borrow","","",283,[[["self"]],["t"]]],[11,"borrow_mut","","",283,[[["self"]],["t"]]],[11,"type_id","","",283,[[["self"]],["typeid"]]],[11,"span","","",64,[[["self"]],["span"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"span","","",65,[[["self"]],["span"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"span","","",66,[[["self"]],["span"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"span","","",67,[[["self"]],["span"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"span","","",68,[[["self"]],["span"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"span","","",69,[[["self"]],["span"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"span","","",70,[[["self"]],["span"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"span","","",71,[[["self"]],["span"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"span","","",72,[[["self"]],["span"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"span","","",73,[[["self"]],["span"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"span","","",74,[[["self"]],["span"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"span","","",75,[[["self"]],["span"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"span","","",76,[[["self"]],["span"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"span","","",77,[[["self"]],["span"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"span","","",78,[[["self"]],["span"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"span","","",79,[[["self"]],["span"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"span","","",80,[[["self"]],["span"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"span","","",81,[[["self"]],["span"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"span","","",82,[[["self"]],["span"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"span","","",83,[[["self"]],["span"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"span","","",84,[[["self"]],["span"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"span","","",85,[[["self"]],["span"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"span","","",86,[[["self"]],["span"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"span","","",87,[[["self"]],["span"]]],[11,"from","","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"span","","",88,[[["self"]],["span"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"span","","",89,[[["self"]],["span"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,[[["self"],["t"]]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"span","","",90,[[["self"]],["span"]]],[11,"from","","",90,[[["t"]],["t"]]],[11,"into","","",90,[[],["u"]]],[11,"to_owned","","",90,[[["self"]],["t"]]],[11,"clone_into","","",90,[[["self"],["t"]]]],[11,"try_from","","",90,[[["u"]],["result"]]],[11,"try_into","","",90,[[],["result"]]],[11,"borrow","","",90,[[["self"]],["t"]]],[11,"borrow_mut","","",90,[[["self"]],["t"]]],[11,"type_id","","",90,[[["self"]],["typeid"]]],[11,"span","","",91,[[["self"]],["span"]]],[11,"from","","",91,[[["t"]],["t"]]],[11,"into","","",91,[[],["u"]]],[11,"to_owned","","",91,[[["self"]],["t"]]],[11,"clone_into","","",91,[[["self"],["t"]]]],[11,"try_from","","",91,[[["u"]],["result"]]],[11,"try_into","","",91,[[],["result"]]],[11,"borrow","","",91,[[["self"]],["t"]]],[11,"borrow_mut","","",91,[[["self"]],["t"]]],[11,"type_id","","",91,[[["self"]],["typeid"]]],[11,"span","","",92,[[["self"]],["span"]]],[11,"from","","",92,[[["t"]],["t"]]],[11,"into","","",92,[[],["u"]]],[11,"to_owned","","",92,[[["self"]],["t"]]],[11,"clone_into","","",92,[[["self"],["t"]]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"span","","",93,[[["self"]],["span"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"into","","",93,[[],["u"]]],[11,"to_owned","","",93,[[["self"]],["t"]]],[11,"clone_into","","",93,[[["self"],["t"]]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"span","","",94,[[["self"]],["span"]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"into","","",94,[[],["u"]]],[11,"to_owned","","",94,[[["self"]],["t"]]],[11,"clone_into","","",94,[[["self"],["t"]]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"span","","",95,[[["self"]],["span"]]],[11,"from","","",95,[[["t"]],["t"]]],[11,"into","","",95,[[],["u"]]],[11,"to_owned","","",95,[[["self"]],["t"]]],[11,"clone_into","","",95,[[["self"],["t"]]]],[11,"try_from","","",95,[[["u"]],["result"]]],[11,"try_into","","",95,[[],["result"]]],[11,"borrow","","",95,[[["self"]],["t"]]],[11,"borrow_mut","","",95,[[["self"]],["t"]]],[11,"type_id","","",95,[[["self"]],["typeid"]]],[11,"span","","",96,[[["self"]],["span"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"into","","",96,[[],["u"]]],[11,"to_owned","","",96,[[["self"]],["t"]]],[11,"clone_into","","",96,[[["self"],["t"]]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"span","","",97,[[["self"]],["span"]]],[11,"from","","",97,[[["t"]],["t"]]],[11,"into","","",97,[[],["u"]]],[11,"to_owned","","",97,[[["self"]],["t"]]],[11,"clone_into","","",97,[[["self"],["t"]]]],[11,"try_from","","",97,[[["u"]],["result"]]],[11,"try_into","","",97,[[],["result"]]],[11,"borrow","","",97,[[["self"]],["t"]]],[11,"borrow_mut","","",97,[[["self"]],["t"]]],[11,"type_id","","",97,[[["self"]],["typeid"]]],[11,"span","","",98,[[["self"]],["span"]]],[11,"from","","",98,[[["t"]],["t"]]],[11,"into","","",98,[[],["u"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"span","","",99,[[["self"]],["span"]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"into","","",99,[[],["u"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"span","","",100,[[["self"]],["span"]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"into","","",100,[[],["u"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"to_string","","",100,[[["self"]],["string"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"span","","",101,[[["self"]],["span"]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"into","","",101,[[],["u"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"span","","",286,[[["self"]],["span"]]],[11,"from","","",286,[[["t"]],["t"]]],[11,"into","","",286,[[],["u"]]],[11,"to_owned","","",286,[[["self"]],["t"]]],[11,"clone_into","","",286,[[["self"],["t"]]]],[11,"try_from","","",286,[[["u"]],["result"]]],[11,"try_into","","",286,[[],["result"]]],[11,"borrow","","",286,[[["self"]],["t"]]],[11,"borrow_mut","","",286,[[["self"]],["t"]]],[11,"type_id","","",286,[[["self"]],["typeid"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"span","","",285,[[["self"]],["span"]]],[11,"from","","",285,[[["t"]],["t"]]],[11,"into","","",285,[[],["u"]]],[11,"to_owned","","",285,[[["self"]],["t"]]],[11,"clone_into","","",285,[[["self"],["t"]]]],[11,"try_from","","",285,[[["u"]],["result"]]],[11,"try_into","","",285,[[],["result"]]],[11,"borrow","","",285,[[["self"]],["t"]]],[11,"borrow_mut","","",285,[[["self"]],["t"]]],[11,"type_id","","",285,[[["self"]],["typeid"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"span","","",287,[[["self"]],["span"]]],[11,"from","","",287,[[["t"]],["t"]]],[11,"into","","",287,[[],["u"]]],[11,"to_owned","","",287,[[["self"]],["t"]]],[11,"clone_into","","",287,[[["self"],["t"]]]],[11,"try_from","","",287,[[["u"]],["result"]]],[11,"try_into","","",287,[[],["result"]]],[11,"borrow","","",287,[[["self"]],["t"]]],[11,"borrow_mut","","",287,[[["self"]],["t"]]],[11,"type_id","","",287,[[["self"]],["typeid"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"span","","",289,[[["self"]],["span"]]],[11,"from","","",289,[[["t"]],["t"]]],[11,"into","","",289,[[],["u"]]],[11,"to_owned","","",289,[[["self"]],["t"]]],[11,"clone_into","","",289,[[["self"],["t"]]]],[11,"to_string","","",289,[[["self"]],["string"]]],[11,"try_from","","",289,[[["u"]],["result"]]],[11,"try_into","","",289,[[],["result"]]],[11,"borrow","","",289,[[["self"]],["t"]]],[11,"borrow_mut","","",289,[[["self"]],["t"]]],[11,"type_id","","",289,[[["self"]],["typeid"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"span","","",288,[[["self"]],["span"]]],[11,"from","","",288,[[["t"]],["t"]]],[11,"into","","",288,[[],["u"]]],[11,"to_owned","","",288,[[["self"]],["t"]]],[11,"clone_into","","",288,[[["self"],["t"]]]],[11,"to_string","","",288,[[["self"]],["string"]]],[11,"try_from","","",288,[[["u"]],["result"]]],[11,"try_into","","",288,[[],["result"]]],[11,"borrow","","",288,[[["self"]],["t"]]],[11,"borrow_mut","","",288,[[["self"]],["t"]]],[11,"type_id","","",288,[[["self"]],["typeid"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"span","","",284,[[["self"]],["span"]]],[11,"from","","",284,[[["t"]],["t"]]],[11,"into","","",284,[[],["u"]]],[11,"to_owned","","",284,[[["self"]],["t"]]],[11,"clone_into","","",284,[[["self"],["t"]]]],[11,"try_from","","",284,[[["u"]],["result"]]],[11,"try_into","","",284,[[],["result"]]],[11,"borrow","","",284,[[["self"]],["t"]]],[11,"borrow_mut","","",284,[[["self"]],["t"]]],[11,"type_id","","",284,[[["self"]],["typeid"]]],[11,"span","","",102,[[["self"]],["span"]]],[11,"from","","",102,[[["t"]],["t"]]],[11,"into","","",102,[[],["u"]]],[11,"to_owned","","",102,[[["self"]],["t"]]],[11,"clone_into","","",102,[[["self"],["t"]]]],[11,"try_from","","",102,[[["u"]],["result"]]],[11,"try_into","","",102,[[],["result"]]],[11,"borrow","","",102,[[["self"]],["t"]]],[11,"borrow_mut","","",102,[[["self"]],["t"]]],[11,"type_id","","",102,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"into","","",103,[[],["u"]]],[11,"to_owned","","",103,[[["self"]],["t"]]],[11,"clone_into","","",103,[[["self"],["t"]]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"into","","",104,[[],["u"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[],["u"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"span","","",106,[[["self"]],["span"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[],["u"]]],[11,"to_owned","","",106,[[["self"]],["t"]]],[11,"clone_into","","",106,[[["self"],["t"]]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"try_into","","",106,[[],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"type_id","","",106,[[["self"]],["typeid"]]],[11,"span","","",107,[[["self"]],["span"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[],["u"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"span","","",108,[[["self"]],["span"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[],["u"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"span","","",109,[[["self"]],["span"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[],["u"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"span","","",110,[[["self"]],["span"]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"into","","",110,[[],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"span","","",111,[[["self"]],["span"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"span","","",112,[[["self"]],["span"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,[[["self"],["t"]]]],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"try_into","","",112,[[],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"type_id","","",112,[[["self"]],["typeid"]]],[11,"span","","",113,[[["self"]],["span"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,[[["self"],["t"]]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"span","","",114,[[["self"]],["span"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"into","","",114,[[],["u"]]],[11,"to_owned","","",114,[[["self"]],["t"]]],[11,"clone_into","","",114,[[["self"],["t"]]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"span","","",115,[[["self"]],["span"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[],["u"]]],[11,"to_owned","","",115,[[["self"]],["t"]]],[11,"clone_into","","",115,[[["self"],["t"]]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"span","","",116,[[["self"]],["span"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into","","",116,[[],["u"]]],[11,"to_owned","","",116,[[["self"]],["t"]]],[11,"clone_into","","",116,[[["self"],["t"]]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"span","","",117,[[["self"]],["span"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[],["u"]]],[11,"to_owned","","",117,[[["self"]],["t"]]],[11,"clone_into","","",117,[[["self"],["t"]]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"span","","",118,[[["self"]],["span"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[],["u"]]],[11,"to_owned","","",118,[[["self"]],["t"]]],[11,"clone_into","","",118,[[["self"],["t"]]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"span","","",119,[[["self"]],["span"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[],["u"]]],[11,"to_owned","","",119,[[["self"]],["t"]]],[11,"clone_into","","",119,[[["self"],["t"]]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"span","","",120,[[["self"]],["span"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[],["u"]]],[11,"to_owned","","",120,[[["self"]],["t"]]],[11,"clone_into","","",120,[[["self"],["t"]]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"span","","",121,[[["self"]],["span"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[],["u"]]],[11,"to_owned","","",121,[[["self"]],["t"]]],[11,"clone_into","","",121,[[["self"],["t"]]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"span","","",122,[[["self"]],["span"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"span","","",123,[[["self"]],["span"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[],["u"]]],[11,"to_owned","","",123,[[["self"]],["t"]]],[11,"clone_into","","",123,[[["self"],["t"]]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"try_into","","",123,[[],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"type_id","","",123,[[["self"]],["typeid"]]],[11,"span","","",124,[[["self"]],["span"]]],[11,"from","","",124,[[["t"]],["t"]]],[11,"into","","",124,[[],["u"]]],[11,"to_owned","","",124,[[["self"]],["t"]]],[11,"clone_into","","",124,[[["self"],["t"]]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"try_into","","",124,[[],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"type_id","","",124,[[["self"]],["typeid"]]],[11,"span","","",125,[[["self"]],["span"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[],["u"]]],[11,"to_owned","","",125,[[["self"]],["t"]]],[11,"clone_into","","",125,[[["self"],["t"]]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"try_into","","",125,[[],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"type_id","","",125,[[["self"]],["typeid"]]],[11,"span","","",126,[[["self"]],["span"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[],["u"]]],[11,"to_owned","","",126,[[["self"]],["t"]]],[11,"clone_into","","",126,[[["self"],["t"]]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"try_into","","",126,[[],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"type_id","","",126,[[["self"]],["typeid"]]],[11,"span","","",127,[[["self"]],["span"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[],["u"]]],[11,"to_owned","","",127,[[["self"]],["t"]]],[11,"clone_into","","",127,[[["self"],["t"]]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"try_into","","",127,[[],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"type_id","","",127,[[["self"]],["typeid"]]],[11,"span","","",128,[[["self"]],["span"]]],[11,"from","","",128,[[["t"]],["t"]]],[11,"into","","",128,[[],["u"]]],[11,"to_owned","","",128,[[["self"]],["t"]]],[11,"clone_into","","",128,[[["self"],["t"]]]],[11,"try_from","","",128,[[["u"]],["result"]]],[11,"try_into","","",128,[[],["result"]]],[11,"borrow","","",128,[[["self"]],["t"]]],[11,"borrow_mut","","",128,[[["self"]],["t"]]],[11,"type_id","","",128,[[["self"]],["typeid"]]],[11,"span","","",129,[[["self"]],["span"]]],[11,"from","","",129,[[["t"]],["t"]]],[11,"into","","",129,[[],["u"]]],[11,"to_owned","","",129,[[["self"]],["t"]]],[11,"clone_into","","",129,[[["self"],["t"]]]],[11,"try_from","","",129,[[["u"]],["result"]]],[11,"try_into","","",129,[[],["result"]]],[11,"borrow","","",129,[[["self"]],["t"]]],[11,"borrow_mut","","",129,[[["self"]],["t"]]],[11,"type_id","","",129,[[["self"]],["typeid"]]],[11,"span","","",130,[[["self"]],["span"]]],[11,"from","","",130,[[["t"]],["t"]]],[11,"into","","",130,[[],["u"]]],[11,"to_owned","","",130,[[["self"]],["t"]]],[11,"clone_into","","",130,[[["self"],["t"]]]],[11,"try_from","","",130,[[["u"]],["result"]]],[11,"try_into","","",130,[[],["result"]]],[11,"borrow","","",130,[[["self"]],["t"]]],[11,"borrow_mut","","",130,[[["self"]],["t"]]],[11,"type_id","","",130,[[["self"]],["typeid"]]],[11,"span","","",131,[[["self"]],["span"]]],[11,"from","","",131,[[["t"]],["t"]]],[11,"into","","",131,[[],["u"]]],[11,"to_owned","","",131,[[["self"]],["t"]]],[11,"clone_into","","",131,[[["self"],["t"]]]],[11,"try_from","","",131,[[["u"]],["result"]]],[11,"try_into","","",131,[[],["result"]]],[11,"borrow","","",131,[[["self"]],["t"]]],[11,"borrow_mut","","",131,[[["self"]],["t"]]],[11,"type_id","","",131,[[["self"]],["typeid"]]],[11,"span","","",132,[[["self"]],["span"]]],[11,"from","","",132,[[["t"]],["t"]]],[11,"into","","",132,[[],["u"]]],[11,"to_owned","","",132,[[["self"]],["t"]]],[11,"clone_into","","",132,[[["self"],["t"]]]],[11,"try_from","","",132,[[["u"]],["result"]]],[11,"try_into","","",132,[[],["result"]]],[11,"borrow","","",132,[[["self"]],["t"]]],[11,"borrow_mut","","",132,[[["self"]],["t"]]],[11,"type_id","","",132,[[["self"]],["typeid"]]],[11,"span","","",133,[[["self"]],["span"]]],[11,"from","","",133,[[["t"]],["t"]]],[11,"into","","",133,[[],["u"]]],[11,"to_owned","","",133,[[["self"]],["t"]]],[11,"clone_into","","",133,[[["self"],["t"]]]],[11,"try_from","","",133,[[["u"]],["result"]]],[11,"try_into","","",133,[[],["result"]]],[11,"borrow","","",133,[[["self"]],["t"]]],[11,"borrow_mut","","",133,[[["self"]],["t"]]],[11,"type_id","","",133,[[["self"]],["typeid"]]],[11,"span","","",134,[[["self"]],["span"]]],[11,"from","","",134,[[["t"]],["t"]]],[11,"into","","",134,[[],["u"]]],[11,"to_owned","","",134,[[["self"]],["t"]]],[11,"clone_into","","",134,[[["self"],["t"]]]],[11,"try_from","","",134,[[["u"]],["result"]]],[11,"try_into","","",134,[[],["result"]]],[11,"borrow","","",134,[[["self"]],["t"]]],[11,"borrow_mut","","",134,[[["self"]],["t"]]],[11,"type_id","","",134,[[["self"]],["typeid"]]],[11,"span","","",135,[[["self"]],["span"]]],[11,"from","","",135,[[["t"]],["t"]]],[11,"into","","",135,[[],["u"]]],[11,"to_owned","","",135,[[["self"]],["t"]]],[11,"clone_into","","",135,[[["self"],["t"]]]],[11,"try_from","","",135,[[["u"]],["result"]]],[11,"try_into","","",135,[[],["result"]]],[11,"borrow","","",135,[[["self"]],["t"]]],[11,"borrow_mut","","",135,[[["self"]],["t"]]],[11,"type_id","","",135,[[["self"]],["typeid"]]],[11,"span","","",136,[[["self"]],["span"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[],["u"]]],[11,"to_owned","","",136,[[["self"]],["t"]]],[11,"clone_into","","",136,[[["self"],["t"]]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"try_into","","",136,[[],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"type_id","","",136,[[["self"]],["typeid"]]],[11,"span","","",137,[[["self"]],["span"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[],["u"]]],[11,"to_owned","","",137,[[["self"]],["t"]]],[11,"clone_into","","",137,[[["self"],["t"]]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"try_into","","",137,[[],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"type_id","","",137,[[["self"]],["typeid"]]],[11,"span","","",138,[[["self"]],["span"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[],["u"]]],[11,"to_owned","","",138,[[["self"]],["t"]]],[11,"clone_into","","",138,[[["self"],["t"]]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"try_into","","",138,[[],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"type_id","","",138,[[["self"]],["typeid"]]],[11,"span","","",139,[[["self"]],["span"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[],["u"]]],[11,"to_owned","","",139,[[["self"]],["t"]]],[11,"clone_into","","",139,[[["self"],["t"]]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"try_into","","",139,[[],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"type_id","","",139,[[["self"]],["typeid"]]],[11,"span","","",140,[[["self"]],["span"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,[[["self"],["t"]]]],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"try_into","","",140,[[],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"type_id","","",140,[[["self"]],["typeid"]]],[11,"span","","",141,[[["self"]],["span"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[],["u"]]],[11,"to_owned","","",141,[[["self"]],["t"]]],[11,"clone_into","","",141,[[["self"],["t"]]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"try_into","","",141,[[],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"type_id","","",141,[[["self"]],["typeid"]]],[11,"span","","",142,[[["self"]],["span"]]],[11,"from","","",142,[[["t"]],["t"]]],[11,"into","","",142,[[],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,[[["self"],["t"]]]],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"try_into","","",142,[[],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"type_id","","",142,[[["self"]],["typeid"]]],[11,"span","","",143,[[["self"]],["span"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,[[["self"],["t"]]]],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"try_into","","",143,[[],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"type_id","","",143,[[["self"]],["typeid"]]],[11,"span","","",144,[[["self"]],["span"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,[[["self"],["t"]]]],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"try_into","","",144,[[],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"type_id","","",144,[[["self"]],["typeid"]]],[11,"span","","",145,[[["self"]],["span"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,[[["self"],["t"]]]],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"try_into","","",145,[[],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"type_id","","",145,[[["self"]],["typeid"]]],[11,"span","","",146,[[["self"]],["span"]]],[11,"from","","",146,[[["t"]],["t"]]],[11,"into","","",146,[[],["u"]]],[11,"to_owned","","",146,[[["self"]],["t"]]],[11,"clone_into","","",146,[[["self"],["t"]]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"try_into","","",146,[[],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"type_id","","",146,[[["self"]],["typeid"]]],[11,"span","","",147,[[["self"]],["span"]]],[11,"from","","",147,[[["t"]],["t"]]],[11,"into","","",147,[[],["u"]]],[11,"to_owned","","",147,[[["self"]],["t"]]],[11,"clone_into","","",147,[[["self"],["t"]]]],[11,"try_from","","",147,[[["u"]],["result"]]],[11,"try_into","","",147,[[],["result"]]],[11,"borrow","","",147,[[["self"]],["t"]]],[11,"borrow_mut","","",147,[[["self"]],["t"]]],[11,"type_id","","",147,[[["self"]],["typeid"]]],[11,"from","","",148,[[["t"]],["t"]]],[11,"into","","",148,[[],["u"]]],[11,"to_owned","","",148,[[["self"]],["t"]]],[11,"clone_into","","",148,[[["self"],["t"]]]],[11,"try_from","","",148,[[["u"]],["result"]]],[11,"try_into","","",148,[[],["result"]]],[11,"borrow","","",148,[[["self"]],["t"]]],[11,"borrow_mut","","",148,[[["self"]],["t"]]],[11,"type_id","","",148,[[["self"]],["typeid"]]],[11,"from","","",303,[[["t"]],["t"]]],[11,"into","","",303,[[],["u"]]],[11,"into_iter","","",303,[[],["i"]]],[11,"to_owned","","",303,[[["self"]],["t"]]],[11,"clone_into","","",303,[[["self"],["t"]]]],[11,"to_string","","",303,[[["self"]],["string"]]],[11,"try_from","","",303,[[["u"]],["result"]]],[11,"try_into","","",303,[[],["result"]]],[11,"borrow","","",303,[[["self"]],["t"]]],[11,"borrow_mut","","",303,[[["self"]],["t"]]],[11,"type_id","","",303,[[["self"]],["typeid"]]],[11,"from","","",149,[[["t"]],["t"]]],[11,"into","","",149,[[],["u"]]],[11,"to_owned","","",149,[[["self"]],["t"]]],[11,"clone_into","","",149,[[["self"],["t"]]]],[11,"try_from","","",149,[[["u"]],["result"]]],[11,"try_into","","",149,[[],["result"]]],[11,"borrow","","",149,[[["self"]],["t"]]],[11,"borrow_mut","","",149,[[["self"]],["t"]]],[11,"type_id","","",149,[[["self"]],["typeid"]]],[11,"span","","",150,[[["self"]],["span"]]],[11,"from","","",150,[[["t"]],["t"]]],[11,"into","","",150,[[],["u"]]],[11,"to_owned","","",150,[[["self"]],["t"]]],[11,"clone_into","","",150,[[["self"],["t"]]]],[11,"try_from","","",150,[[["u"]],["result"]]],[11,"try_into","","",150,[[],["result"]]],[11,"borrow","","",150,[[["self"]],["t"]]],[11,"borrow_mut","","",150,[[["self"]],["t"]]],[11,"type_id","","",150,[[["self"]],["typeid"]]],[11,"span","","",151,[[["self"]],["span"]]],[11,"from","","",151,[[["t"]],["t"]]],[11,"into","","",151,[[],["u"]]],[11,"to_owned","","",151,[[["self"]],["t"]]],[11,"clone_into","","",151,[[["self"],["t"]]]],[11,"try_from","","",151,[[["u"]],["result"]]],[11,"try_into","","",151,[[],["result"]]],[11,"borrow","","",151,[[["self"]],["t"]]],[11,"borrow_mut","","",151,[[["self"]],["t"]]],[11,"type_id","","",151,[[["self"]],["typeid"]]],[11,"span","","",152,[[["self"]],["span"]]],[11,"from","","",152,[[["t"]],["t"]]],[11,"into","","",152,[[],["u"]]],[11,"into_iter","","",152,[[],["i"]]],[11,"to_owned","","",152,[[["self"]],["t"]]],[11,"clone_into","","",152,[[["self"],["t"]]]],[11,"try_from","","",152,[[["u"]],["result"]]],[11,"try_into","","",152,[[],["result"]]],[11,"borrow","","",152,[[["self"]],["t"]]],[11,"borrow_mut","","",152,[[["self"]],["t"]]],[11,"type_id","","",152,[[["self"]],["typeid"]]],[11,"span","","",153,[[["self"]],["span"]]],[11,"from","","",153,[[["t"]],["t"]]],[11,"into","","",153,[[],["u"]]],[11,"to_owned","","",153,[[["self"]],["t"]]],[11,"clone_into","","",153,[[["self"],["t"]]]],[11,"try_from","","",153,[[["u"]],["result"]]],[11,"try_into","","",153,[[],["result"]]],[11,"borrow","","",153,[[["self"]],["t"]]],[11,"borrow_mut","","",153,[[["self"]],["t"]]],[11,"type_id","","",153,[[["self"]],["typeid"]]],[11,"span","","",154,[[["self"]],["span"]]],[11,"from","","",154,[[["t"]],["t"]]],[11,"into","","",154,[[],["u"]]],[11,"to_owned","","",154,[[["self"]],["t"]]],[11,"clone_into","","",154,[[["self"],["t"]]]],[11,"try_from","","",154,[[["u"]],["result"]]],[11,"try_into","","",154,[[],["result"]]],[11,"borrow","","",154,[[["self"]],["t"]]],[11,"borrow_mut","","",154,[[["self"]],["t"]]],[11,"type_id","","",154,[[["self"]],["typeid"]]],[11,"from","","",155,[[["t"]],["t"]]],[11,"into","","",155,[[],["u"]]],[11,"to_owned","","",155,[[["self"]],["t"]]],[11,"clone_into","","",155,[[["self"],["t"]]]],[11,"try_from","","",155,[[["u"]],["result"]]],[11,"try_into","","",155,[[],["result"]]],[11,"borrow","","",155,[[["self"]],["t"]]],[11,"borrow_mut","","",155,[[["self"]],["t"]]],[11,"type_id","","",155,[[["self"]],["typeid"]]],[11,"span","","",156,[[["self"]],["span"]]],[11,"from","","",156,[[["t"]],["t"]]],[11,"into","","",156,[[],["u"]]],[11,"to_owned","","",156,[[["self"]],["t"]]],[11,"clone_into","","",156,[[["self"],["t"]]]],[11,"try_from","","",156,[[["u"]],["result"]]],[11,"try_into","","",156,[[],["result"]]],[11,"borrow","","",156,[[["self"]],["t"]]],[11,"borrow_mut","","",156,[[["self"]],["t"]]],[11,"type_id","","",156,[[["self"]],["typeid"]]],[11,"span","","",157,[[["self"]],["span"]]],[11,"from","","",157,[[["t"]],["t"]]],[11,"into","","",157,[[],["u"]]],[11,"to_owned","","",157,[[["self"]],["t"]]],[11,"clone_into","","",157,[[["self"],["t"]]]],[11,"try_from","","",157,[[["u"]],["result"]]],[11,"try_into","","",157,[[],["result"]]],[11,"borrow","","",157,[[["self"]],["t"]]],[11,"borrow_mut","","",157,[[["self"]],["t"]]],[11,"type_id","","",157,[[["self"]],["typeid"]]],[11,"span","","",158,[[["self"]],["span"]]],[11,"from","","",158,[[["t"]],["t"]]],[11,"into","","",158,[[],["u"]]],[11,"to_owned","","",158,[[["self"]],["t"]]],[11,"clone_into","","",158,[[["self"],["t"]]]],[11,"try_from","","",158,[[["u"]],["result"]]],[11,"try_into","","",158,[[],["result"]]],[11,"borrow","","",158,[[["self"]],["t"]]],[11,"borrow_mut","","",158,[[["self"]],["t"]]],[11,"type_id","","",158,[[["self"]],["typeid"]]],[11,"span","","",159,[[["self"]],["span"]]],[11,"from","","",159,[[["t"]],["t"]]],[11,"into","","",159,[[],["u"]]],[11,"to_owned","","",159,[[["self"]],["t"]]],[11,"clone_into","","",159,[[["self"],["t"]]]],[11,"try_from","","",159,[[["u"]],["result"]]],[11,"try_into","","",159,[[],["result"]]],[11,"borrow","","",159,[[["self"]],["t"]]],[11,"borrow_mut","","",159,[[["self"]],["t"]]],[11,"type_id","","",159,[[["self"]],["typeid"]]],[11,"span","","",160,[[["self"]],["span"]]],[11,"from","","",160,[[["t"]],["t"]]],[11,"into","","",160,[[],["u"]]],[11,"to_owned","","",160,[[["self"]],["t"]]],[11,"clone_into","","",160,[[["self"],["t"]]]],[11,"try_from","","",160,[[["u"]],["result"]]],[11,"try_into","","",160,[[],["result"]]],[11,"borrow","","",160,[[["self"]],["t"]]],[11,"borrow_mut","","",160,[[["self"]],["t"]]],[11,"type_id","","",160,[[["self"]],["typeid"]]],[11,"span","","",161,[[["self"]],["span"]]],[11,"from","","",161,[[["t"]],["t"]]],[11,"into","","",161,[[],["u"]]],[11,"to_owned","","",161,[[["self"]],["t"]]],[11,"clone_into","","",161,[[["self"],["t"]]]],[11,"try_from","","",161,[[["u"]],["result"]]],[11,"try_into","","",161,[[],["result"]]],[11,"borrow","","",161,[[["self"]],["t"]]],[11,"borrow_mut","","",161,[[["self"]],["t"]]],[11,"type_id","","",161,[[["self"]],["typeid"]]],[11,"span","","",162,[[["self"]],["span"]]],[11,"from","","",162,[[["t"]],["t"]]],[11,"into","","",162,[[],["u"]]],[11,"to_owned","","",162,[[["self"]],["t"]]],[11,"clone_into","","",162,[[["self"],["t"]]]],[11,"try_from","","",162,[[["u"]],["result"]]],[11,"try_into","","",162,[[],["result"]]],[11,"borrow","","",162,[[["self"]],["t"]]],[11,"borrow_mut","","",162,[[["self"]],["t"]]],[11,"type_id","","",162,[[["self"]],["typeid"]]],[11,"span","","",163,[[["self"]],["span"]]],[11,"from","","",163,[[["t"]],["t"]]],[11,"into","","",163,[[],["u"]]],[11,"to_owned","","",163,[[["self"]],["t"]]],[11,"clone_into","","",163,[[["self"],["t"]]]],[11,"try_from","","",163,[[["u"]],["result"]]],[11,"try_into","","",163,[[],["result"]]],[11,"borrow","","",163,[[["self"]],["t"]]],[11,"borrow_mut","","",163,[[["self"]],["t"]]],[11,"type_id","","",163,[[["self"]],["typeid"]]],[11,"span","","",164,[[["self"]],["span"]]],[11,"from","","",164,[[["t"]],["t"]]],[11,"into","","",164,[[],["u"]]],[11,"to_owned","","",164,[[["self"]],["t"]]],[11,"clone_into","","",164,[[["self"],["t"]]]],[11,"try_from","","",164,[[["u"]],["result"]]],[11,"try_into","","",164,[[],["result"]]],[11,"borrow","","",164,[[["self"]],["t"]]],[11,"borrow_mut","","",164,[[["self"]],["t"]]],[11,"type_id","","",164,[[["self"]],["typeid"]]],[11,"span","","",165,[[["self"]],["span"]]],[11,"from","","",165,[[["t"]],["t"]]],[11,"into","","",165,[[],["u"]]],[11,"to_owned","","",165,[[["self"]],["t"]]],[11,"clone_into","","",165,[[["self"],["t"]]]],[11,"try_from","","",165,[[["u"]],["result"]]],[11,"try_into","","",165,[[],["result"]]],[11,"borrow","","",165,[[["self"]],["t"]]],[11,"borrow_mut","","",165,[[["self"]],["t"]]],[11,"type_id","","",165,[[["self"]],["typeid"]]],[11,"span","","",166,[[["self"]],["span"]]],[11,"from","","",166,[[["t"]],["t"]]],[11,"into","","",166,[[],["u"]]],[11,"to_owned","","",166,[[["self"]],["t"]]],[11,"clone_into","","",166,[[["self"],["t"]]]],[11,"try_from","","",166,[[["u"]],["result"]]],[11,"try_into","","",166,[[],["result"]]],[11,"borrow","","",166,[[["self"]],["t"]]],[11,"borrow_mut","","",166,[[["self"]],["t"]]],[11,"type_id","","",166,[[["self"]],["typeid"]]],[11,"span","","",167,[[["self"]],["span"]]],[11,"from","","",167,[[["t"]],["t"]]],[11,"into","","",167,[[],["u"]]],[11,"to_owned","","",167,[[["self"]],["t"]]],[11,"clone_into","","",167,[[["self"],["t"]]]],[11,"try_from","","",167,[[["u"]],["result"]]],[11,"try_into","","",167,[[],["result"]]],[11,"borrow","","",167,[[["self"]],["t"]]],[11,"borrow_mut","","",167,[[["self"]],["t"]]],[11,"type_id","","",167,[[["self"]],["typeid"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"span","","",168,[[["self"]],["span"]]],[11,"from","","",168,[[["t"]],["t"]]],[11,"into","","",168,[[],["u"]]],[11,"to_owned","","",168,[[["self"]],["t"]]],[11,"clone_into","","",168,[[["self"],["t"]]]],[11,"try_from","","",168,[[["u"]],["result"]]],[11,"try_into","","",168,[[],["result"]]],[11,"borrow","","",168,[[["self"]],["t"]]],[11,"borrow_mut","","",168,[[["self"]],["t"]]],[11,"type_id","","",168,[[["self"]],["typeid"]]],[11,"from","","",169,[[["t"]],["t"]]],[11,"into","","",169,[[],["u"]]],[11,"to_owned","","",169,[[["self"]],["t"]]],[11,"clone_into","","",169,[[["self"],["t"]]]],[11,"try_from","","",169,[[["u"]],["result"]]],[11,"try_into","","",169,[[],["result"]]],[11,"borrow","","",169,[[["self"]],["t"]]],[11,"borrow_mut","","",169,[[["self"]],["t"]]],[11,"type_id","","",169,[[["self"]],["typeid"]]],[11,"from","","",170,[[["t"]],["t"]]],[11,"into","","",170,[[],["u"]]],[11,"to_owned","","",170,[[["self"]],["t"]]],[11,"clone_into","","",170,[[["self"],["t"]]]],[11,"try_from","","",170,[[["u"]],["result"]]],[11,"try_into","","",170,[[],["result"]]],[11,"borrow","","",170,[[["self"]],["t"]]],[11,"borrow_mut","","",170,[[["self"]],["t"]]],[11,"type_id","","",170,[[["self"]],["typeid"]]],[11,"from","","",171,[[["t"]],["t"]]],[11,"into","","",171,[[],["u"]]],[11,"to_owned","","",171,[[["self"]],["t"]]],[11,"clone_into","","",171,[[["self"],["t"]]]],[11,"try_from","","",171,[[["u"]],["result"]]],[11,"try_into","","",171,[[],["result"]]],[11,"borrow","","",171,[[["self"]],["t"]]],[11,"borrow_mut","","",171,[[["self"]],["t"]]],[11,"type_id","","",171,[[["self"]],["typeid"]]],[11,"span","","",172,[[["self"]],["span"]]],[11,"from","","",172,[[["t"]],["t"]]],[11,"into","","",172,[[],["u"]]],[11,"to_owned","","",172,[[["self"]],["t"]]],[11,"clone_into","","",172,[[["self"],["t"]]]],[11,"try_from","","",172,[[["u"]],["result"]]],[11,"try_into","","",172,[[],["result"]]],[11,"borrow","","",172,[[["self"]],["t"]]],[11,"borrow_mut","","",172,[[["self"]],["t"]]],[11,"type_id","","",172,[[["self"]],["typeid"]]],[11,"span","","",173,[[["self"]],["span"]]],[11,"from","","",173,[[["t"]],["t"]]],[11,"into","","",173,[[],["u"]]],[11,"to_owned","","",173,[[["self"]],["t"]]],[11,"clone_into","","",173,[[["self"],["t"]]]],[11,"try_from","","",173,[[["u"]],["result"]]],[11,"try_into","","",173,[[],["result"]]],[11,"borrow","","",173,[[["self"]],["t"]]],[11,"borrow_mut","","",173,[[["self"]],["t"]]],[11,"type_id","","",173,[[["self"]],["typeid"]]],[11,"span","","",174,[[["self"]],["span"]]],[11,"from","","",174,[[["t"]],["t"]]],[11,"into","","",174,[[],["u"]]],[11,"to_owned","","",174,[[["self"]],["t"]]],[11,"clone_into","","",174,[[["self"],["t"]]]],[11,"try_from","","",174,[[["u"]],["result"]]],[11,"try_into","","",174,[[],["result"]]],[11,"borrow","","",174,[[["self"]],["t"]]],[11,"borrow_mut","","",174,[[["self"]],["t"]]],[11,"type_id","","",174,[[["self"]],["typeid"]]],[11,"span","","",175,[[["self"]],["span"]]],[11,"from","","",175,[[["t"]],["t"]]],[11,"into","","",175,[[],["u"]]],[11,"to_owned","","",175,[[["self"]],["t"]]],[11,"clone_into","","",175,[[["self"],["t"]]]],[11,"try_from","","",175,[[["u"]],["result"]]],[11,"try_into","","",175,[[],["result"]]],[11,"borrow","","",175,[[["self"]],["t"]]],[11,"borrow_mut","","",175,[[["self"]],["t"]]],[11,"type_id","","",175,[[["self"]],["typeid"]]],[11,"span","","",176,[[["self"]],["span"]]],[11,"from","","",176,[[["t"]],["t"]]],[11,"into","","",176,[[],["u"]]],[11,"to_owned","","",176,[[["self"]],["t"]]],[11,"clone_into","","",176,[[["self"],["t"]]]],[11,"try_from","","",176,[[["u"]],["result"]]],[11,"try_into","","",176,[[],["result"]]],[11,"borrow","","",176,[[["self"]],["t"]]],[11,"borrow_mut","","",176,[[["self"]],["t"]]],[11,"type_id","","",176,[[["self"]],["typeid"]]],[11,"span","","",177,[[["self"]],["span"]]],[11,"from","","",177,[[["t"]],["t"]]],[11,"into","","",177,[[],["u"]]],[11,"to_owned","","",177,[[["self"]],["t"]]],[11,"clone_into","","",177,[[["self"],["t"]]]],[11,"try_from","","",177,[[["u"]],["result"]]],[11,"try_into","","",177,[[],["result"]]],[11,"borrow","","",177,[[["self"]],["t"]]],[11,"borrow_mut","","",177,[[["self"]],["t"]]],[11,"type_id","","",177,[[["self"]],["typeid"]]],[11,"span","","",178,[[["self"]],["span"]]],[11,"from","","",178,[[["t"]],["t"]]],[11,"into","","",178,[[],["u"]]],[11,"to_owned","","",178,[[["self"]],["t"]]],[11,"clone_into","","",178,[[["self"],["t"]]]],[11,"try_from","","",178,[[["u"]],["result"]]],[11,"try_into","","",178,[[],["result"]]],[11,"borrow","","",178,[[["self"]],["t"]]],[11,"borrow_mut","","",178,[[["self"]],["t"]]],[11,"type_id","","",178,[[["self"]],["typeid"]]],[11,"span","","",179,[[["self"]],["span"]]],[11,"from","","",179,[[["t"]],["t"]]],[11,"into","","",179,[[],["u"]]],[11,"to_owned","","",179,[[["self"]],["t"]]],[11,"clone_into","","",179,[[["self"],["t"]]]],[11,"try_from","","",179,[[["u"]],["result"]]],[11,"try_into","","",179,[[],["result"]]],[11,"borrow","","",179,[[["self"]],["t"]]],[11,"borrow_mut","","",179,[[["self"]],["t"]]],[11,"type_id","","",179,[[["self"]],["typeid"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"span","","",180,[[["self"]],["span"]]],[11,"from","","",180,[[["t"]],["t"]]],[11,"into","","",180,[[],["u"]]],[11,"to_owned","","",180,[[["self"]],["t"]]],[11,"clone_into","","",180,[[["self"],["t"]]]],[11,"try_from","","",180,[[["u"]],["result"]]],[11,"try_into","","",180,[[],["result"]]],[11,"borrow","","",180,[[["self"]],["t"]]],[11,"borrow_mut","","",180,[[["self"]],["t"]]],[11,"type_id","","",180,[[["self"]],["typeid"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"span","","",181,[[["self"]],["span"]]],[11,"from","","",181,[[["t"]],["t"]]],[11,"into","","",181,[[],["u"]]],[11,"to_owned","","",181,[[["self"]],["t"]]],[11,"clone_into","","",181,[[["self"],["t"]]]],[11,"try_from","","",181,[[["u"]],["result"]]],[11,"try_into","","",181,[[],["result"]]],[11,"borrow","","",181,[[["self"]],["t"]]],[11,"borrow_mut","","",181,[[["self"]],["t"]]],[11,"type_id","","",181,[[["self"]],["typeid"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"span","","",182,[[["self"]],["span"]]],[11,"from","","",182,[[["t"]],["t"]]],[11,"into","","",182,[[],["u"]]],[11,"to_owned","","",182,[[["self"]],["t"]]],[11,"clone_into","","",182,[[["self"],["t"]]]],[11,"try_from","","",182,[[["u"]],["result"]]],[11,"try_into","","",182,[[],["result"]]],[11,"borrow","","",182,[[["self"]],["t"]]],[11,"borrow_mut","","",182,[[["self"]],["t"]]],[11,"type_id","","",182,[[["self"]],["typeid"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"span","","",183,[[["self"]],["span"]]],[11,"from","","",183,[[["t"]],["t"]]],[11,"into","","",183,[[],["u"]]],[11,"to_owned","","",183,[[["self"]],["t"]]],[11,"clone_into","","",183,[[["self"],["t"]]]],[11,"try_from","","",183,[[["u"]],["result"]]],[11,"try_into","","",183,[[],["result"]]],[11,"borrow","","",183,[[["self"]],["t"]]],[11,"borrow_mut","","",183,[[["self"]],["t"]]],[11,"type_id","","",183,[[["self"]],["typeid"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"span","","",184,[[["self"]],["span"]]],[11,"from","","",184,[[["t"]],["t"]]],[11,"into","","",184,[[],["u"]]],[11,"to_owned","","",184,[[["self"]],["t"]]],[11,"clone_into","","",184,[[["self"],["t"]]]],[11,"try_from","","",184,[[["u"]],["result"]]],[11,"try_into","","",184,[[],["result"]]],[11,"borrow","","",184,[[["self"]],["t"]]],[11,"borrow_mut","","",184,[[["self"]],["t"]]],[11,"type_id","","",184,[[["self"]],["typeid"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"span","","",185,[[["self"]],["span"]]],[11,"from","","",185,[[["t"]],["t"]]],[11,"into","","",185,[[],["u"]]],[11,"to_owned","","",185,[[["self"]],["t"]]],[11,"clone_into","","",185,[[["self"],["t"]]]],[11,"try_from","","",185,[[["u"]],["result"]]],[11,"try_into","","",185,[[],["result"]]],[11,"borrow","","",185,[[["self"]],["t"]]],[11,"borrow_mut","","",185,[[["self"]],["t"]]],[11,"type_id","","",185,[[["self"]],["typeid"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"span","","",186,[[["self"]],["span"]]],[11,"from","","",186,[[["t"]],["t"]]],[11,"into","","",186,[[],["u"]]],[11,"to_owned","","",186,[[["self"]],["t"]]],[11,"clone_into","","",186,[[["self"],["t"]]]],[11,"try_from","","",186,[[["u"]],["result"]]],[11,"try_into","","",186,[[],["result"]]],[11,"borrow","","",186,[[["self"]],["t"]]],[11,"borrow_mut","","",186,[[["self"]],["t"]]],[11,"type_id","","",186,[[["self"]],["typeid"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"span","","",187,[[["self"]],["span"]]],[11,"from","","",187,[[["t"]],["t"]]],[11,"into","","",187,[[],["u"]]],[11,"to_owned","","",187,[[["self"]],["t"]]],[11,"clone_into","","",187,[[["self"],["t"]]]],[11,"try_from","","",187,[[["u"]],["result"]]],[11,"try_into","","",187,[[],["result"]]],[11,"borrow","","",187,[[["self"]],["t"]]],[11,"borrow_mut","","",187,[[["self"]],["t"]]],[11,"type_id","","",187,[[["self"]],["typeid"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"span","","",188,[[["self"]],["span"]]],[11,"from","","",188,[[["t"]],["t"]]],[11,"into","","",188,[[],["u"]]],[11,"to_owned","","",188,[[["self"]],["t"]]],[11,"clone_into","","",188,[[["self"],["t"]]]],[11,"try_from","","",188,[[["u"]],["result"]]],[11,"try_into","","",188,[[],["result"]]],[11,"borrow","","",188,[[["self"]],["t"]]],[11,"borrow_mut","","",188,[[["self"]],["t"]]],[11,"type_id","","",188,[[["self"]],["typeid"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"span","","",189,[[["self"]],["span"]]],[11,"from","","",189,[[["t"]],["t"]]],[11,"into","","",189,[[],["u"]]],[11,"to_owned","","",189,[[["self"]],["t"]]],[11,"clone_into","","",189,[[["self"],["t"]]]],[11,"try_from","","",189,[[["u"]],["result"]]],[11,"try_into","","",189,[[],["result"]]],[11,"borrow","","",189,[[["self"]],["t"]]],[11,"borrow_mut","","",189,[[["self"]],["t"]]],[11,"type_id","","",189,[[["self"]],["typeid"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"span","","",190,[[["self"]],["span"]]],[11,"from","","",190,[[["t"]],["t"]]],[11,"into","","",190,[[],["u"]]],[11,"to_owned","","",190,[[["self"]],["t"]]],[11,"clone_into","","",190,[[["self"],["t"]]]],[11,"try_from","","",190,[[["u"]],["result"]]],[11,"try_into","","",190,[[],["result"]]],[11,"borrow","","",190,[[["self"]],["t"]]],[11,"borrow_mut","","",190,[[["self"]],["t"]]],[11,"type_id","","",190,[[["self"]],["typeid"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"span","","",191,[[["self"]],["span"]]],[11,"from","","",191,[[["t"]],["t"]]],[11,"into","","",191,[[],["u"]]],[11,"to_owned","","",191,[[["self"]],["t"]]],[11,"clone_into","","",191,[[["self"],["t"]]]],[11,"try_from","","",191,[[["u"]],["result"]]],[11,"try_into","","",191,[[],["result"]]],[11,"borrow","","",191,[[["self"]],["t"]]],[11,"borrow_mut","","",191,[[["self"]],["t"]]],[11,"type_id","","",191,[[["self"]],["typeid"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"span","","",192,[[["self"]],["span"]]],[11,"from","","",192,[[["t"]],["t"]]],[11,"into","","",192,[[],["u"]]],[11,"to_owned","","",192,[[["self"]],["t"]]],[11,"clone_into","","",192,[[["self"],["t"]]]],[11,"try_from","","",192,[[["u"]],["result"]]],[11,"try_into","","",192,[[],["result"]]],[11,"borrow","","",192,[[["self"]],["t"]]],[11,"borrow_mut","","",192,[[["self"]],["t"]]],[11,"type_id","","",192,[[["self"]],["typeid"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"span","","",193,[[["self"]],["span"]]],[11,"from","","",193,[[["t"]],["t"]]],[11,"into","","",193,[[],["u"]]],[11,"to_owned","","",193,[[["self"]],["t"]]],[11,"clone_into","","",193,[[["self"],["t"]]]],[11,"try_from","","",193,[[["u"]],["result"]]],[11,"try_into","","",193,[[],["result"]]],[11,"borrow","","",193,[[["self"]],["t"]]],[11,"borrow_mut","","",193,[[["self"]],["t"]]],[11,"type_id","","",193,[[["self"]],["typeid"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"span","","",194,[[["self"]],["span"]]],[11,"from","","",194,[[["t"]],["t"]]],[11,"into","","",194,[[],["u"]]],[11,"to_owned","","",194,[[["self"]],["t"]]],[11,"clone_into","","",194,[[["self"],["t"]]]],[11,"try_from","","",194,[[["u"]],["result"]]],[11,"try_into","","",194,[[],["result"]]],[11,"borrow","","",194,[[["self"]],["t"]]],[11,"borrow_mut","","",194,[[["self"]],["t"]]],[11,"type_id","","",194,[[["self"]],["typeid"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"span","","",195,[[["self"]],["span"]]],[11,"from","","",195,[[["t"]],["t"]]],[11,"into","","",195,[[],["u"]]],[11,"to_owned","","",195,[[["self"]],["t"]]],[11,"clone_into","","",195,[[["self"],["t"]]]],[11,"try_from","","",195,[[["u"]],["result"]]],[11,"try_into","","",195,[[],["result"]]],[11,"borrow","","",195,[[["self"]],["t"]]],[11,"borrow_mut","","",195,[[["self"]],["t"]]],[11,"type_id","","",195,[[["self"]],["typeid"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"span","","",196,[[["self"]],["span"]]],[11,"from","","",196,[[["t"]],["t"]]],[11,"into","","",196,[[],["u"]]],[11,"to_owned","","",196,[[["self"]],["t"]]],[11,"clone_into","","",196,[[["self"],["t"]]]],[11,"try_from","","",196,[[["u"]],["result"]]],[11,"try_into","","",196,[[],["result"]]],[11,"borrow","","",196,[[["self"]],["t"]]],[11,"borrow_mut","","",196,[[["self"]],["t"]]],[11,"type_id","","",196,[[["self"]],["typeid"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"span","","",197,[[["self"]],["span"]]],[11,"from","","",197,[[["t"]],["t"]]],[11,"into","","",197,[[],["u"]]],[11,"to_owned","","",197,[[["self"]],["t"]]],[11,"clone_into","","",197,[[["self"],["t"]]]],[11,"try_from","","",197,[[["u"]],["result"]]],[11,"try_into","","",197,[[],["result"]]],[11,"borrow","","",197,[[["self"]],["t"]]],[11,"borrow_mut","","",197,[[["self"]],["t"]]],[11,"type_id","","",197,[[["self"]],["typeid"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"span","","",198,[[["self"]],["span"]]],[11,"from","","",198,[[["t"]],["t"]]],[11,"into","","",198,[[],["u"]]],[11,"to_owned","","",198,[[["self"]],["t"]]],[11,"clone_into","","",198,[[["self"],["t"]]]],[11,"try_from","","",198,[[["u"]],["result"]]],[11,"try_into","","",198,[[],["result"]]],[11,"borrow","","",198,[[["self"]],["t"]]],[11,"borrow_mut","","",198,[[["self"]],["t"]]],[11,"type_id","","",198,[[["self"]],["typeid"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"span","","",199,[[["self"]],["span"]]],[11,"from","","",199,[[["t"]],["t"]]],[11,"into","","",199,[[],["u"]]],[11,"to_owned","","",199,[[["self"]],["t"]]],[11,"clone_into","","",199,[[["self"],["t"]]]],[11,"try_from","","",199,[[["u"]],["result"]]],[11,"try_into","","",199,[[],["result"]]],[11,"borrow","","",199,[[["self"]],["t"]]],[11,"borrow_mut","","",199,[[["self"]],["t"]]],[11,"type_id","","",199,[[["self"]],["typeid"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"span","","",200,[[["self"]],["span"]]],[11,"from","","",200,[[["t"]],["t"]]],[11,"into","","",200,[[],["u"]]],[11,"to_owned","","",200,[[["self"]],["t"]]],[11,"clone_into","","",200,[[["self"],["t"]]]],[11,"try_from","","",200,[[["u"]],["result"]]],[11,"try_into","","",200,[[],["result"]]],[11,"borrow","","",200,[[["self"]],["t"]]],[11,"borrow_mut","","",200,[[["self"]],["t"]]],[11,"type_id","","",200,[[["self"]],["typeid"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"span","","",201,[[["self"]],["span"]]],[11,"from","","",201,[[["t"]],["t"]]],[11,"into","","",201,[[],["u"]]],[11,"to_owned","","",201,[[["self"]],["t"]]],[11,"clone_into","","",201,[[["self"],["t"]]]],[11,"try_from","","",201,[[["u"]],["result"]]],[11,"try_into","","",201,[[],["result"]]],[11,"borrow","","",201,[[["self"]],["t"]]],[11,"borrow_mut","","",201,[[["self"]],["t"]]],[11,"type_id","","",201,[[["self"]],["typeid"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"span","","",202,[[["self"]],["span"]]],[11,"from","","",202,[[["t"]],["t"]]],[11,"into","","",202,[[],["u"]]],[11,"to_owned","","",202,[[["self"]],["t"]]],[11,"clone_into","","",202,[[["self"],["t"]]]],[11,"try_from","","",202,[[["u"]],["result"]]],[11,"try_into","","",202,[[],["result"]]],[11,"borrow","","",202,[[["self"]],["t"]]],[11,"borrow_mut","","",202,[[["self"]],["t"]]],[11,"type_id","","",202,[[["self"]],["typeid"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"span","","",203,[[["self"]],["span"]]],[11,"from","","",203,[[["t"]],["t"]]],[11,"into","","",203,[[],["u"]]],[11,"to_owned","","",203,[[["self"]],["t"]]],[11,"clone_into","","",203,[[["self"],["t"]]]],[11,"try_from","","",203,[[["u"]],["result"]]],[11,"try_into","","",203,[[],["result"]]],[11,"borrow","","",203,[[["self"]],["t"]]],[11,"borrow_mut","","",203,[[["self"]],["t"]]],[11,"type_id","","",203,[[["self"]],["typeid"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"span","","",204,[[["self"]],["span"]]],[11,"from","","",204,[[["t"]],["t"]]],[11,"into","","",204,[[],["u"]]],[11,"to_owned","","",204,[[["self"]],["t"]]],[11,"clone_into","","",204,[[["self"],["t"]]]],[11,"try_from","","",204,[[["u"]],["result"]]],[11,"try_into","","",204,[[],["result"]]],[11,"borrow","","",204,[[["self"]],["t"]]],[11,"borrow_mut","","",204,[[["self"]],["t"]]],[11,"type_id","","",204,[[["self"]],["typeid"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"span","","",205,[[["self"]],["span"]]],[11,"from","","",205,[[["t"]],["t"]]],[11,"into","","",205,[[],["u"]]],[11,"to_owned","","",205,[[["self"]],["t"]]],[11,"clone_into","","",205,[[["self"],["t"]]]],[11,"try_from","","",205,[[["u"]],["result"]]],[11,"try_into","","",205,[[],["result"]]],[11,"borrow","","",205,[[["self"]],["t"]]],[11,"borrow_mut","","",205,[[["self"]],["t"]]],[11,"type_id","","",205,[[["self"]],["typeid"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"span","","",206,[[["self"]],["span"]]],[11,"from","","",206,[[["t"]],["t"]]],[11,"into","","",206,[[],["u"]]],[11,"to_owned","","",206,[[["self"]],["t"]]],[11,"clone_into","","",206,[[["self"],["t"]]]],[11,"try_from","","",206,[[["u"]],["result"]]],[11,"try_into","","",206,[[],["result"]]],[11,"borrow","","",206,[[["self"]],["t"]]],[11,"borrow_mut","","",206,[[["self"]],["t"]]],[11,"type_id","","",206,[[["self"]],["typeid"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"span","","",207,[[["self"]],["span"]]],[11,"from","","",207,[[["t"]],["t"]]],[11,"into","","",207,[[],["u"]]],[11,"to_owned","","",207,[[["self"]],["t"]]],[11,"clone_into","","",207,[[["self"],["t"]]]],[11,"try_from","","",207,[[["u"]],["result"]]],[11,"try_into","","",207,[[],["result"]]],[11,"borrow","","",207,[[["self"]],["t"]]],[11,"borrow_mut","","",207,[[["self"]],["t"]]],[11,"type_id","","",207,[[["self"]],["typeid"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"span","","",208,[[["self"]],["span"]]],[11,"from","","",208,[[["t"]],["t"]]],[11,"into","","",208,[[],["u"]]],[11,"to_owned","","",208,[[["self"]],["t"]]],[11,"clone_into","","",208,[[["self"],["t"]]]],[11,"try_from","","",208,[[["u"]],["result"]]],[11,"try_into","","",208,[[],["result"]]],[11,"borrow","","",208,[[["self"]],["t"]]],[11,"borrow_mut","","",208,[[["self"]],["t"]]],[11,"type_id","","",208,[[["self"]],["typeid"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"span","","",209,[[["self"]],["span"]]],[11,"from","","",209,[[["t"]],["t"]]],[11,"into","","",209,[[],["u"]]],[11,"to_owned","","",209,[[["self"]],["t"]]],[11,"clone_into","","",209,[[["self"],["t"]]]],[11,"try_from","","",209,[[["u"]],["result"]]],[11,"try_into","","",209,[[],["result"]]],[11,"borrow","","",209,[[["self"]],["t"]]],[11,"borrow_mut","","",209,[[["self"]],["t"]]],[11,"type_id","","",209,[[["self"]],["typeid"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"span","","",210,[[["self"]],["span"]]],[11,"from","","",210,[[["t"]],["t"]]],[11,"into","","",210,[[],["u"]]],[11,"to_owned","","",210,[[["self"]],["t"]]],[11,"clone_into","","",210,[[["self"],["t"]]]],[11,"try_from","","",210,[[["u"]],["result"]]],[11,"try_into","","",210,[[],["result"]]],[11,"borrow","","",210,[[["self"]],["t"]]],[11,"borrow_mut","","",210,[[["self"]],["t"]]],[11,"type_id","","",210,[[["self"]],["typeid"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"span","","",211,[[["self"]],["span"]]],[11,"from","","",211,[[["t"]],["t"]]],[11,"into","","",211,[[],["u"]]],[11,"to_owned","","",211,[[["self"]],["t"]]],[11,"clone_into","","",211,[[["self"],["t"]]]],[11,"try_from","","",211,[[["u"]],["result"]]],[11,"try_into","","",211,[[],["result"]]],[11,"borrow","","",211,[[["self"]],["t"]]],[11,"borrow_mut","","",211,[[["self"]],["t"]]],[11,"type_id","","",211,[[["self"]],["typeid"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"span","","",212,[[["self"]],["span"]]],[11,"from","","",212,[[["t"]],["t"]]],[11,"into","","",212,[[],["u"]]],[11,"to_owned","","",212,[[["self"]],["t"]]],[11,"clone_into","","",212,[[["self"],["t"]]]],[11,"try_from","","",212,[[["u"]],["result"]]],[11,"try_into","","",212,[[],["result"]]],[11,"borrow","","",212,[[["self"]],["t"]]],[11,"borrow_mut","","",212,[[["self"]],["t"]]],[11,"type_id","","",212,[[["self"]],["typeid"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"span","","",213,[[["self"]],["span"]]],[11,"from","","",213,[[["t"]],["t"]]],[11,"into","","",213,[[],["u"]]],[11,"to_owned","","",213,[[["self"]],["t"]]],[11,"clone_into","","",213,[[["self"],["t"]]]],[11,"try_from","","",213,[[["u"]],["result"]]],[11,"try_into","","",213,[[],["result"]]],[11,"borrow","","",213,[[["self"]],["t"]]],[11,"borrow_mut","","",213,[[["self"]],["t"]]],[11,"type_id","","",213,[[["self"]],["typeid"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"span","","",214,[[["self"]],["span"]]],[11,"from","","",214,[[["t"]],["t"]]],[11,"into","","",214,[[],["u"]]],[11,"to_owned","","",214,[[["self"]],["t"]]],[11,"clone_into","","",214,[[["self"],["t"]]]],[11,"try_from","","",214,[[["u"]],["result"]]],[11,"try_into","","",214,[[],["result"]]],[11,"borrow","","",214,[[["self"]],["t"]]],[11,"borrow_mut","","",214,[[["self"]],["t"]]],[11,"type_id","","",214,[[["self"]],["typeid"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"span","","",215,[[["self"]],["span"]]],[11,"from","","",215,[[["t"]],["t"]]],[11,"into","","",215,[[],["u"]]],[11,"to_owned","","",215,[[["self"]],["t"]]],[11,"clone_into","","",215,[[["self"],["t"]]]],[11,"try_from","","",215,[[["u"]],["result"]]],[11,"try_into","","",215,[[],["result"]]],[11,"borrow","","",215,[[["self"]],["t"]]],[11,"borrow_mut","","",215,[[["self"]],["t"]]],[11,"type_id","","",215,[[["self"]],["typeid"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"span","","",216,[[["self"]],["span"]]],[11,"from","","",216,[[["t"]],["t"]]],[11,"into","","",216,[[],["u"]]],[11,"to_owned","","",216,[[["self"]],["t"]]],[11,"clone_into","","",216,[[["self"],["t"]]]],[11,"try_from","","",216,[[["u"]],["result"]]],[11,"try_into","","",216,[[],["result"]]],[11,"borrow","","",216,[[["self"]],["t"]]],[11,"borrow_mut","","",216,[[["self"]],["t"]]],[11,"type_id","","",216,[[["self"]],["typeid"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"span","","",217,[[["self"]],["span"]]],[11,"from","","",217,[[["t"]],["t"]]],[11,"into","","",217,[[],["u"]]],[11,"to_owned","","",217,[[["self"]],["t"]]],[11,"clone_into","","",217,[[["self"],["t"]]]],[11,"try_from","","",217,[[["u"]],["result"]]],[11,"try_into","","",217,[[],["result"]]],[11,"borrow","","",217,[[["self"]],["t"]]],[11,"borrow_mut","","",217,[[["self"]],["t"]]],[11,"type_id","","",217,[[["self"]],["typeid"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"span","","",218,[[["self"]],["span"]]],[11,"from","","",218,[[["t"]],["t"]]],[11,"into","","",218,[[],["u"]]],[11,"to_owned","","",218,[[["self"]],["t"]]],[11,"clone_into","","",218,[[["self"],["t"]]]],[11,"try_from","","",218,[[["u"]],["result"]]],[11,"try_into","","",218,[[],["result"]]],[11,"borrow","","",218,[[["self"]],["t"]]],[11,"borrow_mut","","",218,[[["self"]],["t"]]],[11,"type_id","","",218,[[["self"]],["typeid"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"span","","",219,[[["self"]],["span"]]],[11,"from","","",219,[[["t"]],["t"]]],[11,"into","","",219,[[],["u"]]],[11,"to_owned","","",219,[[["self"]],["t"]]],[11,"clone_into","","",219,[[["self"],["t"]]]],[11,"try_from","","",219,[[["u"]],["result"]]],[11,"try_into","","",219,[[],["result"]]],[11,"borrow","","",219,[[["self"]],["t"]]],[11,"borrow_mut","","",219,[[["self"]],["t"]]],[11,"type_id","","",219,[[["self"]],["typeid"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"span","","",220,[[["self"]],["span"]]],[11,"from","","",220,[[["t"]],["t"]]],[11,"into","","",220,[[],["u"]]],[11,"to_owned","","",220,[[["self"]],["t"]]],[11,"clone_into","","",220,[[["self"],["t"]]]],[11,"try_from","","",220,[[["u"]],["result"]]],[11,"try_into","","",220,[[],["result"]]],[11,"borrow","","",220,[[["self"]],["t"]]],[11,"borrow_mut","","",220,[[["self"]],["t"]]],[11,"type_id","","",220,[[["self"]],["typeid"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"span","","",221,[[["self"]],["span"]]],[11,"from","","",221,[[["t"]],["t"]]],[11,"into","","",221,[[],["u"]]],[11,"to_owned","","",221,[[["self"]],["t"]]],[11,"clone_into","","",221,[[["self"],["t"]]]],[11,"try_from","","",221,[[["u"]],["result"]]],[11,"try_into","","",221,[[],["result"]]],[11,"borrow","","",221,[[["self"]],["t"]]],[11,"borrow_mut","","",221,[[["self"]],["t"]]],[11,"type_id","","",221,[[["self"]],["typeid"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"span","","",222,[[["self"]],["span"]]],[11,"from","","",222,[[["t"]],["t"]]],[11,"into","","",222,[[],["u"]]],[11,"to_owned","","",222,[[["self"]],["t"]]],[11,"clone_into","","",222,[[["self"],["t"]]]],[11,"try_from","","",222,[[["u"]],["result"]]],[11,"try_into","","",222,[[],["result"]]],[11,"borrow","","",222,[[["self"]],["t"]]],[11,"borrow_mut","","",222,[[["self"]],["t"]]],[11,"type_id","","",222,[[["self"]],["typeid"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"span","","",223,[[["self"]],["span"]]],[11,"from","","",223,[[["t"]],["t"]]],[11,"into","","",223,[[],["u"]]],[11,"to_owned","","",223,[[["self"]],["t"]]],[11,"clone_into","","",223,[[["self"],["t"]]]],[11,"try_from","","",223,[[["u"]],["result"]]],[11,"try_into","","",223,[[],["result"]]],[11,"borrow","","",223,[[["self"]],["t"]]],[11,"borrow_mut","","",223,[[["self"]],["t"]]],[11,"type_id","","",223,[[["self"]],["typeid"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"span","","",224,[[["self"]],["span"]]],[11,"from","","",224,[[["t"]],["t"]]],[11,"into","","",224,[[],["u"]]],[11,"to_owned","","",224,[[["self"]],["t"]]],[11,"clone_into","","",224,[[["self"],["t"]]]],[11,"try_from","","",224,[[["u"]],["result"]]],[11,"try_into","","",224,[[],["result"]]],[11,"borrow","","",224,[[["self"]],["t"]]],[11,"borrow_mut","","",224,[[["self"]],["t"]]],[11,"type_id","","",224,[[["self"]],["typeid"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"span","","",225,[[["self"]],["span"]]],[11,"from","","",225,[[["t"]],["t"]]],[11,"into","","",225,[[],["u"]]],[11,"to_owned","","",225,[[["self"]],["t"]]],[11,"clone_into","","",225,[[["self"],["t"]]]],[11,"try_from","","",225,[[["u"]],["result"]]],[11,"try_into","","",225,[[],["result"]]],[11,"borrow","","",225,[[["self"]],["t"]]],[11,"borrow_mut","","",225,[[["self"]],["t"]]],[11,"type_id","","",225,[[["self"]],["typeid"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"span","","",226,[[["self"]],["span"]]],[11,"from","","",226,[[["t"]],["t"]]],[11,"into","","",226,[[],["u"]]],[11,"to_owned","","",226,[[["self"]],["t"]]],[11,"clone_into","","",226,[[["self"],["t"]]]],[11,"try_from","","",226,[[["u"]],["result"]]],[11,"try_into","","",226,[[],["result"]]],[11,"borrow","","",226,[[["self"]],["t"]]],[11,"borrow_mut","","",226,[[["self"]],["t"]]],[11,"type_id","","",226,[[["self"]],["typeid"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"span","","",227,[[["self"]],["span"]]],[11,"from","","",227,[[["t"]],["t"]]],[11,"into","","",227,[[],["u"]]],[11,"to_owned","","",227,[[["self"]],["t"]]],[11,"clone_into","","",227,[[["self"],["t"]]]],[11,"try_from","","",227,[[["u"]],["result"]]],[11,"try_into","","",227,[[],["result"]]],[11,"borrow","","",227,[[["self"]],["t"]]],[11,"borrow_mut","","",227,[[["self"]],["t"]]],[11,"type_id","","",227,[[["self"]],["typeid"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"span","","",228,[[["self"]],["span"]]],[11,"from","","",228,[[["t"]],["t"]]],[11,"into","","",228,[[],["u"]]],[11,"to_owned","","",228,[[["self"]],["t"]]],[11,"clone_into","","",228,[[["self"],["t"]]]],[11,"try_from","","",228,[[["u"]],["result"]]],[11,"try_into","","",228,[[],["result"]]],[11,"borrow","","",228,[[["self"]],["t"]]],[11,"borrow_mut","","",228,[[["self"]],["t"]]],[11,"type_id","","",228,[[["self"]],["typeid"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"span","","",229,[[["self"]],["span"]]],[11,"from","","",229,[[["t"]],["t"]]],[11,"into","","",229,[[],["u"]]],[11,"to_owned","","",229,[[["self"]],["t"]]],[11,"clone_into","","",229,[[["self"],["t"]]]],[11,"try_from","","",229,[[["u"]],["result"]]],[11,"try_into","","",229,[[],["result"]]],[11,"borrow","","",229,[[["self"]],["t"]]],[11,"borrow_mut","","",229,[[["self"]],["t"]]],[11,"type_id","","",229,[[["self"]],["typeid"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"span","","",230,[[["self"]],["span"]]],[11,"from","","",230,[[["t"]],["t"]]],[11,"into","","",230,[[],["u"]]],[11,"to_owned","","",230,[[["self"]],["t"]]],[11,"clone_into","","",230,[[["self"],["t"]]]],[11,"try_from","","",230,[[["u"]],["result"]]],[11,"try_into","","",230,[[],["result"]]],[11,"borrow","","",230,[[["self"]],["t"]]],[11,"borrow_mut","","",230,[[["self"]],["t"]]],[11,"type_id","","",230,[[["self"]],["typeid"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"span","","",231,[[["self"]],["span"]]],[11,"from","","",231,[[["t"]],["t"]]],[11,"into","","",231,[[],["u"]]],[11,"to_owned","","",231,[[["self"]],["t"]]],[11,"clone_into","","",231,[[["self"],["t"]]]],[11,"try_from","","",231,[[["u"]],["result"]]],[11,"try_into","","",231,[[],["result"]]],[11,"borrow","","",231,[[["self"]],["t"]]],[11,"borrow_mut","","",231,[[["self"]],["t"]]],[11,"type_id","","",231,[[["self"]],["typeid"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"span","","",232,[[["self"]],["span"]]],[11,"from","","",232,[[["t"]],["t"]]],[11,"into","","",232,[[],["u"]]],[11,"to_owned","","",232,[[["self"]],["t"]]],[11,"clone_into","","",232,[[["self"],["t"]]]],[11,"try_from","","",232,[[["u"]],["result"]]],[11,"try_into","","",232,[[],["result"]]],[11,"borrow","","",232,[[["self"]],["t"]]],[11,"borrow_mut","","",232,[[["self"]],["t"]]],[11,"type_id","","",232,[[["self"]],["typeid"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"span","","",233,[[["self"]],["span"]]],[11,"from","","",233,[[["t"]],["t"]]],[11,"into","","",233,[[],["u"]]],[11,"to_owned","","",233,[[["self"]],["t"]]],[11,"clone_into","","",233,[[["self"],["t"]]]],[11,"try_from","","",233,[[["u"]],["result"]]],[11,"try_into","","",233,[[],["result"]]],[11,"borrow","","",233,[[["self"]],["t"]]],[11,"borrow_mut","","",233,[[["self"]],["t"]]],[11,"type_id","","",233,[[["self"]],["typeid"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"span","","",234,[[["self"]],["span"]]],[11,"from","","",234,[[["t"]],["t"]]],[11,"into","","",234,[[],["u"]]],[11,"to_owned","","",234,[[["self"]],["t"]]],[11,"clone_into","","",234,[[["self"],["t"]]]],[11,"try_from","","",234,[[["u"]],["result"]]],[11,"try_into","","",234,[[],["result"]]],[11,"borrow","","",234,[[["self"]],["t"]]],[11,"borrow_mut","","",234,[[["self"]],["t"]]],[11,"type_id","","",234,[[["self"]],["typeid"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"span","","",235,[[["self"]],["span"]]],[11,"from","","",235,[[["t"]],["t"]]],[11,"into","","",235,[[],["u"]]],[11,"to_owned","","",235,[[["self"]],["t"]]],[11,"clone_into","","",235,[[["self"],["t"]]]],[11,"try_from","","",235,[[["u"]],["result"]]],[11,"try_into","","",235,[[],["result"]]],[11,"borrow","","",235,[[["self"]],["t"]]],[11,"borrow_mut","","",235,[[["self"]],["t"]]],[11,"type_id","","",235,[[["self"]],["typeid"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"span","","",236,[[["self"]],["span"]]],[11,"from","","",236,[[["t"]],["t"]]],[11,"into","","",236,[[],["u"]]],[11,"to_owned","","",236,[[["self"]],["t"]]],[11,"clone_into","","",236,[[["self"],["t"]]]],[11,"try_from","","",236,[[["u"]],["result"]]],[11,"try_into","","",236,[[],["result"]]],[11,"borrow","","",236,[[["self"]],["t"]]],[11,"borrow_mut","","",236,[[["self"]],["t"]]],[11,"type_id","","",236,[[["self"]],["typeid"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"span","","",237,[[["self"]],["span"]]],[11,"from","","",237,[[["t"]],["t"]]],[11,"into","","",237,[[],["u"]]],[11,"to_owned","","",237,[[["self"]],["t"]]],[11,"clone_into","","",237,[[["self"],["t"]]]],[11,"try_from","","",237,[[["u"]],["result"]]],[11,"try_into","","",237,[[],["result"]]],[11,"borrow","","",237,[[["self"]],["t"]]],[11,"borrow_mut","","",237,[[["self"]],["t"]]],[11,"type_id","","",237,[[["self"]],["typeid"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"span","","",238,[[["self"]],["span"]]],[11,"from","","",238,[[["t"]],["t"]]],[11,"into","","",238,[[],["u"]]],[11,"to_owned","","",238,[[["self"]],["t"]]],[11,"clone_into","","",238,[[["self"],["t"]]]],[11,"try_from","","",238,[[["u"]],["result"]]],[11,"try_into","","",238,[[],["result"]]],[11,"borrow","","",238,[[["self"]],["t"]]],[11,"borrow_mut","","",238,[[["self"]],["t"]]],[11,"type_id","","",238,[[["self"]],["typeid"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"span","","",239,[[["self"]],["span"]]],[11,"from","","",239,[[["t"]],["t"]]],[11,"into","","",239,[[],["u"]]],[11,"to_owned","","",239,[[["self"]],["t"]]],[11,"clone_into","","",239,[[["self"],["t"]]]],[11,"try_from","","",239,[[["u"]],["result"]]],[11,"try_into","","",239,[[],["result"]]],[11,"borrow","","",239,[[["self"]],["t"]]],[11,"borrow_mut","","",239,[[["self"]],["t"]]],[11,"type_id","","",239,[[["self"]],["typeid"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"span","","",240,[[["self"]],["span"]]],[11,"from","","",240,[[["t"]],["t"]]],[11,"into","","",240,[[],["u"]]],[11,"to_owned","","",240,[[["self"]],["t"]]],[11,"clone_into","","",240,[[["self"],["t"]]]],[11,"try_from","","",240,[[["u"]],["result"]]],[11,"try_into","","",240,[[],["result"]]],[11,"borrow","","",240,[[["self"]],["t"]]],[11,"borrow_mut","","",240,[[["self"]],["t"]]],[11,"type_id","","",240,[[["self"]],["typeid"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"span","","",241,[[["self"]],["span"]]],[11,"from","","",241,[[["t"]],["t"]]],[11,"into","","",241,[[],["u"]]],[11,"to_owned","","",241,[[["self"]],["t"]]],[11,"clone_into","","",241,[[["self"],["t"]]]],[11,"try_from","","",241,[[["u"]],["result"]]],[11,"try_into","","",241,[[],["result"]]],[11,"borrow","","",241,[[["self"]],["t"]]],[11,"borrow_mut","","",241,[[["self"]],["t"]]],[11,"type_id","","",241,[[["self"]],["typeid"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"span","","",242,[[["self"]],["span"]]],[11,"from","","",242,[[["t"]],["t"]]],[11,"into","","",242,[[],["u"]]],[11,"to_owned","","",242,[[["self"]],["t"]]],[11,"clone_into","","",242,[[["self"],["t"]]]],[11,"try_from","","",242,[[["u"]],["result"]]],[11,"try_into","","",242,[[],["result"]]],[11,"borrow","","",242,[[["self"]],["t"]]],[11,"borrow_mut","","",242,[[["self"]],["t"]]],[11,"type_id","","",242,[[["self"]],["typeid"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"span","","",243,[[["self"]],["span"]]],[11,"from","","",243,[[["t"]],["t"]]],[11,"into","","",243,[[],["u"]]],[11,"to_owned","","",243,[[["self"]],["t"]]],[11,"clone_into","","",243,[[["self"],["t"]]]],[11,"try_from","","",243,[[["u"]],["result"]]],[11,"try_into","","",243,[[],["result"]]],[11,"borrow","","",243,[[["self"]],["t"]]],[11,"borrow_mut","","",243,[[["self"]],["t"]]],[11,"type_id","","",243,[[["self"]],["typeid"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"span","","",244,[[["self"]],["span"]]],[11,"from","","",244,[[["t"]],["t"]]],[11,"into","","",244,[[],["u"]]],[11,"to_owned","","",244,[[["self"]],["t"]]],[11,"clone_into","","",244,[[["self"],["t"]]]],[11,"try_from","","",244,[[["u"]],["result"]]],[11,"try_into","","",244,[[],["result"]]],[11,"borrow","","",244,[[["self"]],["t"]]],[11,"borrow_mut","","",244,[[["self"]],["t"]]],[11,"type_id","","",244,[[["self"]],["typeid"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"span","","",245,[[["self"]],["span"]]],[11,"from","","",245,[[["t"]],["t"]]],[11,"into","","",245,[[],["u"]]],[11,"to_owned","","",245,[[["self"]],["t"]]],[11,"clone_into","","",245,[[["self"],["t"]]]],[11,"try_from","","",245,[[["u"]],["result"]]],[11,"try_into","","",245,[[],["result"]]],[11,"borrow","","",245,[[["self"]],["t"]]],[11,"borrow_mut","","",245,[[["self"]],["t"]]],[11,"type_id","","",245,[[["self"]],["typeid"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"span","","",246,[[["self"]],["span"]]],[11,"from","","",246,[[["t"]],["t"]]],[11,"into","","",246,[[],["u"]]],[11,"to_owned","","",246,[[["self"]],["t"]]],[11,"clone_into","","",246,[[["self"],["t"]]]],[11,"try_from","","",246,[[["u"]],["result"]]],[11,"try_into","","",246,[[],["result"]]],[11,"borrow","","",246,[[["self"]],["t"]]],[11,"borrow_mut","","",246,[[["self"]],["t"]]],[11,"type_id","","",246,[[["self"]],["typeid"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"span","","",247,[[["self"]],["span"]]],[11,"from","","",247,[[["t"]],["t"]]],[11,"into","","",247,[[],["u"]]],[11,"to_owned","","",247,[[["self"]],["t"]]],[11,"clone_into","","",247,[[["self"],["t"]]]],[11,"try_from","","",247,[[["u"]],["result"]]],[11,"try_into","","",247,[[],["result"]]],[11,"borrow","","",247,[[["self"]],["t"]]],[11,"borrow_mut","","",247,[[["self"]],["t"]]],[11,"type_id","","",247,[[["self"]],["typeid"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"span","","",248,[[["self"]],["span"]]],[11,"from","","",248,[[["t"]],["t"]]],[11,"into","","",248,[[],["u"]]],[11,"to_owned","","",248,[[["self"]],["t"]]],[11,"clone_into","","",248,[[["self"],["t"]]]],[11,"try_from","","",248,[[["u"]],["result"]]],[11,"try_into","","",248,[[],["result"]]],[11,"borrow","","",248,[[["self"]],["t"]]],[11,"borrow_mut","","",248,[[["self"]],["t"]]],[11,"type_id","","",248,[[["self"]],["typeid"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"span","","",249,[[["self"]],["span"]]],[11,"from","","",249,[[["t"]],["t"]]],[11,"into","","",249,[[],["u"]]],[11,"to_owned","","",249,[[["self"]],["t"]]],[11,"clone_into","","",249,[[["self"],["t"]]]],[11,"try_from","","",249,[[["u"]],["result"]]],[11,"try_into","","",249,[[],["result"]]],[11,"borrow","","",249,[[["self"]],["t"]]],[11,"borrow_mut","","",249,[[["self"]],["t"]]],[11,"type_id","","",249,[[["self"]],["typeid"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"span","","",250,[[["self"]],["span"]]],[11,"from","","",250,[[["t"]],["t"]]],[11,"into","","",250,[[],["u"]]],[11,"to_owned","","",250,[[["self"]],["t"]]],[11,"clone_into","","",250,[[["self"],["t"]]]],[11,"try_from","","",250,[[["u"]],["result"]]],[11,"try_into","","",250,[[],["result"]]],[11,"borrow","","",250,[[["self"]],["t"]]],[11,"borrow_mut","","",250,[[["self"]],["t"]]],[11,"type_id","","",250,[[["self"]],["typeid"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"span","","",251,[[["self"]],["span"]]],[11,"from","","",251,[[["t"]],["t"]]],[11,"into","","",251,[[],["u"]]],[11,"to_owned","","",251,[[["self"]],["t"]]],[11,"clone_into","","",251,[[["self"],["t"]]]],[11,"try_from","","",251,[[["u"]],["result"]]],[11,"try_into","","",251,[[],["result"]]],[11,"borrow","","",251,[[["self"]],["t"]]],[11,"borrow_mut","","",251,[[["self"]],["t"]]],[11,"type_id","","",251,[[["self"]],["typeid"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"span","","",252,[[["self"]],["span"]]],[11,"from","","",252,[[["t"]],["t"]]],[11,"into","","",252,[[],["u"]]],[11,"to_owned","","",252,[[["self"]],["t"]]],[11,"clone_into","","",252,[[["self"],["t"]]]],[11,"try_from","","",252,[[["u"]],["result"]]],[11,"try_into","","",252,[[],["result"]]],[11,"borrow","","",252,[[["self"]],["t"]]],[11,"borrow_mut","","",252,[[["self"]],["t"]]],[11,"type_id","","",252,[[["self"]],["typeid"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"span","","",253,[[["self"]],["span"]]],[11,"from","","",253,[[["t"]],["t"]]],[11,"into","","",253,[[],["u"]]],[11,"to_owned","","",253,[[["self"]],["t"]]],[11,"clone_into","","",253,[[["self"],["t"]]]],[11,"try_from","","",253,[[["u"]],["result"]]],[11,"try_into","","",253,[[],["result"]]],[11,"borrow","","",253,[[["self"]],["t"]]],[11,"borrow_mut","","",253,[[["self"]],["t"]]],[11,"type_id","","",253,[[["self"]],["typeid"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"span","","",254,[[["self"]],["span"]]],[11,"from","","",254,[[["t"]],["t"]]],[11,"into","","",254,[[],["u"]]],[11,"to_owned","","",254,[[["self"]],["t"]]],[11,"clone_into","","",254,[[["self"],["t"]]]],[11,"try_from","","",254,[[["u"]],["result"]]],[11,"try_into","","",254,[[],["result"]]],[11,"borrow","","",254,[[["self"]],["t"]]],[11,"borrow_mut","","",254,[[["self"]],["t"]]],[11,"type_id","","",254,[[["self"]],["typeid"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"span","","",255,[[["self"]],["span"]]],[11,"from","","",255,[[["t"]],["t"]]],[11,"into","","",255,[[],["u"]]],[11,"to_owned","","",255,[[["self"]],["t"]]],[11,"clone_into","","",255,[[["self"],["t"]]]],[11,"try_from","","",255,[[["u"]],["result"]]],[11,"try_into","","",255,[[],["result"]]],[11,"borrow","","",255,[[["self"]],["t"]]],[11,"borrow_mut","","",255,[[["self"]],["t"]]],[11,"type_id","","",255,[[["self"]],["typeid"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"span","","",256,[[["self"]],["span"]]],[11,"from","","",256,[[["t"]],["t"]]],[11,"into","","",256,[[],["u"]]],[11,"to_owned","","",256,[[["self"]],["t"]]],[11,"clone_into","","",256,[[["self"],["t"]]]],[11,"try_from","","",256,[[["u"]],["result"]]],[11,"try_into","","",256,[[],["result"]]],[11,"borrow","","",256,[[["self"]],["t"]]],[11,"borrow_mut","","",256,[[["self"]],["t"]]],[11,"type_id","","",256,[[["self"]],["typeid"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"span","","",257,[[["self"]],["span"]]],[11,"from","","",257,[[["t"]],["t"]]],[11,"into","","",257,[[],["u"]]],[11,"to_owned","","",257,[[["self"]],["t"]]],[11,"clone_into","","",257,[[["self"],["t"]]]],[11,"try_from","","",257,[[["u"]],["result"]]],[11,"try_into","","",257,[[],["result"]]],[11,"borrow","","",257,[[["self"]],["t"]]],[11,"borrow_mut","","",257,[[["self"]],["t"]]],[11,"type_id","","",257,[[["self"]],["typeid"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"span","","",258,[[["self"]],["span"]]],[11,"from","","",258,[[["t"]],["t"]]],[11,"into","","",258,[[],["u"]]],[11,"to_owned","","",258,[[["self"]],["t"]]],[11,"clone_into","","",258,[[["self"],["t"]]]],[11,"try_from","","",258,[[["u"]],["result"]]],[11,"try_into","","",258,[[],["result"]]],[11,"borrow","","",258,[[["self"]],["t"]]],[11,"borrow_mut","","",258,[[["self"]],["t"]]],[11,"type_id","","",258,[[["self"]],["typeid"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"span","","",259,[[["self"]],["span"]]],[11,"from","","",259,[[["t"]],["t"]]],[11,"into","","",259,[[],["u"]]],[11,"to_owned","","",259,[[["self"]],["t"]]],[11,"clone_into","","",259,[[["self"],["t"]]]],[11,"try_from","","",259,[[["u"]],["result"]]],[11,"try_into","","",259,[[],["result"]]],[11,"borrow","","",259,[[["self"]],["t"]]],[11,"borrow_mut","","",259,[[["self"]],["t"]]],[11,"type_id","","",259,[[["self"]],["typeid"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"span","","",260,[[["self"]],["span"]]],[11,"from","","",260,[[["t"]],["t"]]],[11,"into","","",260,[[],["u"]]],[11,"to_owned","","",260,[[["self"]],["t"]]],[11,"clone_into","","",260,[[["self"],["t"]]]],[11,"try_from","","",260,[[["u"]],["result"]]],[11,"try_into","","",260,[[],["result"]]],[11,"borrow","","",260,[[["self"]],["t"]]],[11,"borrow_mut","","",260,[[["self"]],["t"]]],[11,"type_id","","",260,[[["self"]],["typeid"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"span","","",261,[[["self"]],["span"]]],[11,"from","","",261,[[["t"]],["t"]]],[11,"into","","",261,[[],["u"]]],[11,"to_owned","","",261,[[["self"]],["t"]]],[11,"clone_into","","",261,[[["self"],["t"]]]],[11,"try_from","","",261,[[["u"]],["result"]]],[11,"try_into","","",261,[[],["result"]]],[11,"borrow","","",261,[[["self"]],["t"]]],[11,"borrow_mut","","",261,[[["self"]],["t"]]],[11,"type_id","","",261,[[["self"]],["typeid"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"span","","",262,[[["self"]],["span"]]],[11,"from","","",262,[[["t"]],["t"]]],[11,"into","","",262,[[],["u"]]],[11,"to_owned","","",262,[[["self"]],["t"]]],[11,"clone_into","","",262,[[["self"],["t"]]]],[11,"try_from","","",262,[[["u"]],["result"]]],[11,"try_into","","",262,[[],["result"]]],[11,"borrow","","",262,[[["self"]],["t"]]],[11,"borrow_mut","","",262,[[["self"]],["t"]]],[11,"type_id","","",262,[[["self"]],["typeid"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"span","","",263,[[["self"]],["span"]]],[11,"from","","",263,[[["t"]],["t"]]],[11,"into","","",263,[[],["u"]]],[11,"to_owned","","",263,[[["self"]],["t"]]],[11,"clone_into","","",263,[[["self"],["t"]]]],[11,"try_from","","",263,[[["u"]],["result"]]],[11,"try_into","","",263,[[],["result"]]],[11,"borrow","","",263,[[["self"]],["t"]]],[11,"borrow_mut","","",263,[[["self"]],["t"]]],[11,"type_id","","",263,[[["self"]],["typeid"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"span","","",264,[[["self"]],["span"]]],[11,"from","","",264,[[["t"]],["t"]]],[11,"into","","",264,[[],["u"]]],[11,"to_owned","","",264,[[["self"]],["t"]]],[11,"clone_into","","",264,[[["self"],["t"]]]],[11,"try_from","","",264,[[["u"]],["result"]]],[11,"try_into","","",264,[[],["result"]]],[11,"borrow","","",264,[[["self"]],["t"]]],[11,"borrow_mut","","",264,[[["self"]],["t"]]],[11,"type_id","","",264,[[["self"]],["typeid"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"span","","",265,[[["self"]],["span"]]],[11,"from","","",265,[[["t"]],["t"]]],[11,"into","","",265,[[],["u"]]],[11,"to_owned","","",265,[[["self"]],["t"]]],[11,"clone_into","","",265,[[["self"],["t"]]]],[11,"try_from","","",265,[[["u"]],["result"]]],[11,"try_into","","",265,[[],["result"]]],[11,"borrow","","",265,[[["self"]],["t"]]],[11,"borrow_mut","","",265,[[["self"]],["t"]]],[11,"type_id","","",265,[[["self"]],["typeid"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"span","","",266,[[["self"]],["span"]]],[11,"from","","",266,[[["t"]],["t"]]],[11,"into","","",266,[[],["u"]]],[11,"to_owned","","",266,[[["self"]],["t"]]],[11,"clone_into","","",266,[[["self"],["t"]]]],[11,"try_from","","",266,[[["u"]],["result"]]],[11,"try_into","","",266,[[],["result"]]],[11,"borrow","","",266,[[["self"]],["t"]]],[11,"borrow_mut","","",266,[[["self"]],["t"]]],[11,"type_id","","",266,[[["self"]],["typeid"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"span","","",267,[[["self"]],["span"]]],[11,"from","","",267,[[["t"]],["t"]]],[11,"into","","",267,[[],["u"]]],[11,"to_owned","","",267,[[["self"]],["t"]]],[11,"clone_into","","",267,[[["self"],["t"]]]],[11,"try_from","","",267,[[["u"]],["result"]]],[11,"try_into","","",267,[[],["result"]]],[11,"borrow","","",267,[[["self"]],["t"]]],[11,"borrow_mut","","",267,[[["self"]],["t"]]],[11,"type_id","","",267,[[["self"]],["typeid"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"span","","",268,[[["self"]],["span"]]],[11,"from","","",268,[[["t"]],["t"]]],[11,"into","","",268,[[],["u"]]],[11,"to_owned","","",268,[[["self"]],["t"]]],[11,"clone_into","","",268,[[["self"],["t"]]]],[11,"try_from","","",268,[[["u"]],["result"]]],[11,"try_into","","",268,[[],["result"]]],[11,"borrow","","",268,[[["self"]],["t"]]],[11,"borrow_mut","","",268,[[["self"]],["t"]]],[11,"type_id","","",268,[[["self"]],["typeid"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"span","","",269,[[["self"]],["span"]]],[11,"from","","",269,[[["t"]],["t"]]],[11,"into","","",269,[[],["u"]]],[11,"to_owned","","",269,[[["self"]],["t"]]],[11,"clone_into","","",269,[[["self"],["t"]]]],[11,"try_from","","",269,[[["u"]],["result"]]],[11,"try_into","","",269,[[],["result"]]],[11,"borrow","","",269,[[["self"]],["t"]]],[11,"borrow_mut","","",269,[[["self"]],["t"]]],[11,"type_id","","",269,[[["self"]],["typeid"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"span","","",270,[[["self"]],["span"]]],[11,"from","","",270,[[["t"]],["t"]]],[11,"into","","",270,[[],["u"]]],[11,"to_owned","","",270,[[["self"]],["t"]]],[11,"clone_into","","",270,[[["self"],["t"]]]],[11,"try_from","","",270,[[["u"]],["result"]]],[11,"try_into","","",270,[[],["result"]]],[11,"borrow","","",270,[[["self"]],["t"]]],[11,"borrow_mut","","",270,[[["self"]],["t"]]],[11,"type_id","","",270,[[["self"]],["typeid"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"span","","",271,[[["self"]],["span"]]],[11,"from","","",271,[[["t"]],["t"]]],[11,"into","","",271,[[],["u"]]],[11,"to_owned","","",271,[[["self"]],["t"]]],[11,"clone_into","","",271,[[["self"],["t"]]]],[11,"try_from","","",271,[[["u"]],["result"]]],[11,"try_into","","",271,[[],["result"]]],[11,"borrow","","",271,[[["self"]],["t"]]],[11,"borrow_mut","","",271,[[["self"]],["t"]]],[11,"type_id","","",271,[[["self"]],["typeid"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"span","","",272,[[["self"]],["span"]]],[11,"from","","",272,[[["t"]],["t"]]],[11,"into","","",272,[[],["u"]]],[11,"to_owned","","",272,[[["self"]],["t"]]],[11,"clone_into","","",272,[[["self"],["t"]]]],[11,"try_from","","",272,[[["u"]],["result"]]],[11,"try_into","","",272,[[],["result"]]],[11,"borrow","","",272,[[["self"]],["t"]]],[11,"borrow_mut","","",272,[[["self"]],["t"]]],[11,"type_id","","",272,[[["self"]],["typeid"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"span","","",273,[[["self"]],["span"]]],[11,"from","","",273,[[["t"]],["t"]]],[11,"into","","",273,[[],["u"]]],[11,"to_owned","","",273,[[["self"]],["t"]]],[11,"clone_into","","",273,[[["self"],["t"]]]],[11,"try_from","","",273,[[["u"]],["result"]]],[11,"try_into","","",273,[[],["result"]]],[11,"borrow","","",273,[[["self"]],["t"]]],[11,"borrow_mut","","",273,[[["self"]],["t"]]],[11,"type_id","","",273,[[["self"]],["typeid"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"span","","",274,[[["self"]],["span"]]],[11,"from","","",274,[[["t"]],["t"]]],[11,"into","","",274,[[],["u"]]],[11,"to_owned","","",274,[[["self"]],["t"]]],[11,"clone_into","","",274,[[["self"],["t"]]]],[11,"try_from","","",274,[[["u"]],["result"]]],[11,"try_into","","",274,[[],["result"]]],[11,"borrow","","",274,[[["self"]],["t"]]],[11,"borrow_mut","","",274,[[["self"]],["t"]]],[11,"type_id","","",274,[[["self"]],["typeid"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"span","","",275,[[["self"]],["span"]]],[11,"from","","",275,[[["t"]],["t"]]],[11,"into","","",275,[[],["u"]]],[11,"to_owned","","",275,[[["self"]],["t"]]],[11,"clone_into","","",275,[[["self"],["t"]]]],[11,"try_from","","",275,[[["u"]],["result"]]],[11,"try_into","","",275,[[],["result"]]],[11,"borrow","","",275,[[["self"]],["t"]]],[11,"borrow_mut","","",275,[[["self"]],["t"]]],[11,"type_id","","",275,[[["self"]],["typeid"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"span","","",276,[[["self"]],["span"]]],[11,"from","","",276,[[["t"]],["t"]]],[11,"into","","",276,[[],["u"]]],[11,"to_owned","","",276,[[["self"]],["t"]]],[11,"clone_into","","",276,[[["self"],["t"]]]],[11,"try_from","","",276,[[["u"]],["result"]]],[11,"try_into","","",276,[[],["result"]]],[11,"borrow","","",276,[[["self"]],["t"]]],[11,"borrow_mut","","",276,[[["self"]],["t"]]],[11,"type_id","","",276,[[["self"]],["typeid"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"span","","",277,[[["self"]],["span"]]],[11,"from","","",277,[[["t"]],["t"]]],[11,"into","","",277,[[],["u"]]],[11,"to_owned","","",277,[[["self"]],["t"]]],[11,"clone_into","","",277,[[["self"],["t"]]]],[11,"try_from","","",277,[[["u"]],["result"]]],[11,"try_into","","",277,[[],["result"]]],[11,"borrow","","",277,[[["self"]],["t"]]],[11,"borrow_mut","","",277,[[["self"]],["t"]]],[11,"type_id","","",277,[[["self"]],["typeid"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"span","","",278,[[["self"]],["span"]]],[11,"from","","",278,[[["t"]],["t"]]],[11,"into","","",278,[[],["u"]]],[11,"to_owned","","",278,[[["self"]],["t"]]],[11,"clone_into","","",278,[[["self"],["t"]]]],[11,"try_from","","",278,[[["u"]],["result"]]],[11,"try_into","","",278,[[],["result"]]],[11,"borrow","","",278,[[["self"]],["t"]]],[11,"borrow_mut","","",278,[[["self"]],["t"]]],[11,"type_id","","",278,[[["self"]],["typeid"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"from","","",279,[[["t"]],["t"]]],[11,"into","","",279,[[],["u"]]],[11,"to_owned","","",279,[[["self"]],["t"]]],[11,"clone_into","","",279,[[["self"],["t"]]]],[11,"try_from","","",279,[[["u"]],["result"]]],[11,"try_into","","",279,[[],["result"]]],[11,"borrow","","",279,[[["self"]],["t"]]],[11,"borrow_mut","","",279,[[["self"]],["t"]]],[11,"type_id","","",279,[[["self"]],["typeid"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"from","","",280,[[["t"]],["t"]]],[11,"into","","",280,[[],["u"]]],[11,"to_owned","","",280,[[["self"]],["t"]]],[11,"clone_into","","",280,[[["self"],["t"]]]],[11,"try_from","","",280,[[["u"]],["result"]]],[11,"try_into","","",280,[[],["result"]]],[11,"borrow","","",280,[[["self"]],["t"]]],[11,"borrow_mut","","",280,[[["self"]],["t"]]],[11,"type_id","","",280,[[["self"]],["typeid"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"from","","",281,[[["t"]],["t"]]],[11,"into","","",281,[[],["u"]]],[11,"to_owned","","",281,[[["self"]],["t"]]],[11,"clone_into","","",281,[[["self"],["t"]]]],[11,"try_from","","",281,[[["u"]],["result"]]],[11,"try_into","","",281,[[],["result"]]],[11,"borrow","","",281,[[["self"]],["t"]]],[11,"borrow_mut","","",281,[[["self"]],["t"]]],[11,"type_id","","",281,[[["self"]],["typeid"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"from","","",282,[[["t"]],["t"]]],[11,"into","","",282,[[],["u"]]],[11,"to_owned","","",282,[[["self"]],["t"]]],[11,"clone_into","","",282,[[["self"],["t"]]]],[11,"try_from","","",282,[[["u"]],["result"]]],[11,"try_into","","",282,[[],["result"]]],[11,"borrow","","",282,[[["self"]],["t"]]],[11,"borrow_mut","","",282,[[["self"]],["t"]]],[11,"type_id","","",282,[[["self"]],["typeid"]]],[11,"from","syn::buffer","",290,[[["t"]],["t"]]],[11,"into","","",290,[[],["u"]]],[11,"try_from","","",290,[[["u"]],["result"]]],[11,"try_into","","",290,[[],["result"]]],[11,"borrow","","",290,[[["self"]],["t"]]],[11,"borrow_mut","","",290,[[["self"]],["t"]]],[11,"type_id","","",290,[[["self"]],["typeid"]]],[11,"from","","",291,[[["t"]],["t"]]],[11,"into","","",291,[[],["u"]]],[11,"to_owned","","",291,[[["self"]],["t"]]],[11,"clone_into","","",291,[[["self"],["t"]]]],[11,"try_from","","",291,[[["u"]],["result"]]],[11,"try_into","","",291,[[],["result"]]],[11,"borrow","","",291,[[["self"]],["t"]]],[11,"borrow_mut","","",291,[[["self"]],["t"]]],[11,"type_id","","",291,[[["self"]],["typeid"]]],[11,"span","syn::punctuated","",294,[[["self"]],["span"]]],[11,"from","","",294,[[["t"]],["t"]]],[11,"into","","",294,[[],["u"]]],[11,"into_iter","","",294,[[],["i"]]],[11,"to_owned","","",294,[[["self"]],["t"]]],[11,"clone_into","","",294,[[["self"],["t"]]]],[11,"try_from","","",294,[[["u"]],["result"]]],[11,"try_into","","",294,[[],["result"]]],[11,"borrow","","",294,[[["self"]],["t"]]],[11,"borrow_mut","","",294,[[["self"]],["t"]]],[11,"type_id","","",294,[[["self"]],["typeid"]]],[11,"from","","",307,[[["t"]],["t"]]],[11,"into","","",307,[[],["u"]]],[11,"into_iter","","",307,[[],["i"]]],[11,"to_owned","","",307,[[["self"]],["t"]]],[11,"clone_into","","",307,[[["self"],["t"]]]],[11,"try_from","","",307,[[["u"]],["result"]]],[11,"try_into","","",307,[[],["result"]]],[11,"borrow","","",307,[[["self"]],["t"]]],[11,"borrow_mut","","",307,[[["self"]],["t"]]],[11,"type_id","","",307,[[["self"]],["typeid"]]],[11,"from","","",308,[[["t"]],["t"]]],[11,"into","","",308,[[],["u"]]],[11,"into_iter","","",308,[[],["i"]]],[11,"try_from","","",308,[[["u"]],["result"]]],[11,"try_into","","",308,[[],["result"]]],[11,"borrow","","",308,[[["self"]],["t"]]],[11,"borrow_mut","","",308,[[["self"]],["t"]]],[11,"type_id","","",308,[[["self"]],["typeid"]]],[11,"from","","",309,[[["t"]],["t"]]],[11,"into","","",309,[[],["u"]]],[11,"into_iter","","",309,[[],["i"]]],[11,"to_owned","","",309,[[["self"]],["t"]]],[11,"clone_into","","",309,[[["self"],["t"]]]],[11,"try_from","","",309,[[["u"]],["result"]]],[11,"try_into","","",309,[[],["result"]]],[11,"borrow","","",309,[[["self"]],["t"]]],[11,"borrow_mut","","",309,[[["self"]],["t"]]],[11,"type_id","","",309,[[["self"]],["typeid"]]],[11,"from","","",310,[[["t"]],["t"]]],[11,"into","","",310,[[],["u"]]],[11,"into_iter","","",310,[[],["i"]]],[11,"to_owned","","",310,[[["self"]],["t"]]],[11,"clone_into","","",310,[[["self"],["t"]]]],[11,"try_from","","",310,[[["u"]],["result"]]],[11,"try_into","","",310,[[],["result"]]],[11,"borrow","","",310,[[["self"]],["t"]]],[11,"borrow_mut","","",310,[[["self"]],["t"]]],[11,"type_id","","",310,[[["self"]],["typeid"]]],[11,"from","","",311,[[["t"]],["t"]]],[11,"into","","",311,[[],["u"]]],[11,"into_iter","","",311,[[],["i"]]],[11,"to_owned","","",311,[[["self"]],["t"]]],[11,"clone_into","","",311,[[["self"],["t"]]]],[11,"try_from","","",311,[[["u"]],["result"]]],[11,"try_into","","",311,[[],["result"]]],[11,"borrow","","",311,[[["self"]],["t"]]],[11,"borrow_mut","","",311,[[["self"]],["t"]]],[11,"type_id","","",311,[[["self"]],["typeid"]]],[11,"from","","",312,[[["t"]],["t"]]],[11,"into","","",312,[[],["u"]]],[11,"into_iter","","",312,[[],["i"]]],[11,"try_from","","",312,[[["u"]],["result"]]],[11,"try_into","","",312,[[],["result"]]],[11,"borrow","","",312,[[["self"]],["t"]]],[11,"borrow_mut","","",312,[[["self"]],["t"]]],[11,"type_id","","",312,[[["self"]],["typeid"]]],[11,"span","","",293,[[["self"]],["span"]]],[11,"from","","",293,[[["t"]],["t"]]],[11,"into","","",293,[[],["u"]]],[11,"to_owned","","",293,[[["self"]],["t"]]],[11,"clone_into","","",293,[[["self"],["t"]]]],[11,"try_from","","",293,[[["u"]],["result"]]],[11,"try_into","","",293,[[],["result"]]],[11,"borrow","","",293,[[["self"]],["t"]]],[11,"borrow_mut","","",293,[[["self"]],["t"]]],[11,"type_id","","",293,[[["self"]],["typeid"]]],[11,"from","syn::parse","",313,[[["t"]],["t"]]],[11,"into","","",313,[[],["u"]]],[11,"try_from","","",313,[[["u"]],["result"]]],[11,"try_into","","",313,[[],["result"]]],[11,"borrow","","",313,[[["self"]],["t"]]],[11,"borrow_mut","","",313,[[["self"]],["t"]]],[11,"type_id","","",313,[[["self"]],["typeid"]]],[11,"from","","",302,[[["t"]],["t"]]],[11,"into","","",302,[[],["u"]]],[11,"to_string","","",302,[[["self"]],["string"]]],[11,"try_from","","",302,[[["u"]],["result"]]],[11,"try_into","","",302,[[],["result"]]],[11,"borrow","","",302,[[["self"]],["t"]]],[11,"borrow_mut","","",302,[[["self"]],["t"]]],[11,"type_id","","",302,[[["self"]],["typeid"]]],[11,"from","","",301,[[["t"]],["t"]]],[11,"into","","",301,[[],["u"]]],[11,"to_owned","","",301,[[["self"]],["t"]]],[11,"clone_into","","",301,[[["self"],["t"]]]],[11,"try_from","","",301,[[["u"]],["result"]]],[11,"try_into","","",301,[[],["result"]]],[11,"borrow","","",301,[[["self"]],["t"]]],[11,"borrow_mut","","",301,[[["self"]],["t"]]],[11,"type_id","","",301,[[["self"]],["typeid"]]],[11,"from","","",314,[[["t"]],["t"]]],[11,"into","","",314,[[],["u"]]],[11,"try_from","","",314,[[["u"]],["result"]]],[11,"try_into","","",314,[[],["result"]]],[11,"borrow","","",314,[[["self"]],["t"]]],[11,"borrow_mut","","",314,[[["self"]],["t"]]],[11,"type_id","","",314,[[["self"]],["typeid"]]],[11,"fmt","syn","",304,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"clone","","",304,[[["self"]],["ident"]]],[11,"eq","","",304,[[["self"],["ident"]],["bool"]]],[11,"eq","","",304,[[["t"],["self"]],["bool"]]],[11,"hash","","",304,[[["self"],["h"]]]],[11,"fmt","","",304,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"cmp","","",304,[[["self"],["ident"]],["ordering"]]],[11,"partial_cmp","","",304,[[["self"],["ident"]],[["ordering"],["option",["ordering"]]]]],[11,"to_tokens","","",304,[[["self"],["tokenstream"]]]],[11,"span","","",304,[[["self"]],[["span"],["option",["span"]]]]],[11,"fmt","","",304,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"peek","","",100,[[["cursor"]],["bool"]]],[11,"display","","",100,[[],["str"]]],[11,"peek","","",168,[[["cursor"]],["bool"]]],[11,"display","","",168,[[],["str"]]],[11,"peek","","",284,[[["cursor"]],["bool"]]],[11,"display","","",284,[[],["str"]]],[11,"peek","","",285,[[["cursor"]],["bool"]]],[11,"display","","",285,[[],["str"]]],[11,"peek","","",286,[[["cursor"]],["bool"]]],[11,"display","","",286,[[],["str"]]],[11,"peek","","",287,[[["cursor"]],["bool"]]],[11,"display","","",287,[[],["str"]]],[11,"peek","","",288,[[["cursor"]],["bool"]]],[11,"display","","",288,[[],["str"]]],[11,"peek","","",289,[[["cursor"]],["bool"]]],[11,"display","","",289,[[],["str"]]],[11,"peek","","",101,[[["cursor"]],["bool"]]],[11,"display","","",101,[[],["str"]]],[11,"peek","syn::token","",180,[[["cursor"]],["bool"]]],[11,"display","","",180,[[],["str"]]],[11,"peek","","",281,[[["cursor"]],["bool"]]],[11,"display","","",281,[[],["str"]]],[11,"peek","","",279,[[["cursor"]],["bool"]]],[11,"display","","",279,[[],["str"]]],[11,"peek","","",280,[[["cursor"]],["bool"]]],[11,"display","","",280,[[],["str"]]],[11,"peek","","",282,[[["cursor"]],["bool"]]],[11,"display","","",282,[[],["str"]]],[11,"peek","","",181,[[["cursor"]],["bool"]]],[11,"display","","",181,[[],["str"]]],[11,"peek","","",182,[[["cursor"]],["bool"]]],[11,"display","","",182,[[],["str"]]],[11,"peek","","",183,[[["cursor"]],["bool"]]],[11,"display","","",183,[[],["str"]]],[11,"peek","","",184,[[["cursor"]],["bool"]]],[11,"display","","",184,[[],["str"]]],[11,"peek","","",185,[[["cursor"]],["bool"]]],[11,"display","","",185,[[],["str"]]],[11,"peek","","",186,[[["cursor"]],["bool"]]],[11,"display","","",186,[[],["str"]]],[11,"peek","","",187,[[["cursor"]],["bool"]]],[11,"display","","",187,[[],["str"]]],[11,"peek","","",188,[[["cursor"]],["bool"]]],[11,"display","","",188,[[],["str"]]],[11,"peek","","",189,[[["cursor"]],["bool"]]],[11,"display","","",189,[[],["str"]]],[11,"peek","","",190,[[["cursor"]],["bool"]]],[11,"display","","",190,[[],["str"]]],[11,"peek","","",191,[[["cursor"]],["bool"]]],[11,"display","","",191,[[],["str"]]],[11,"peek","","",192,[[["cursor"]],["bool"]]],[11,"display","","",192,[[],["str"]]],[11,"peek","","",193,[[["cursor"]],["bool"]]],[11,"display","","",193,[[],["str"]]],[11,"peek","","",194,[[["cursor"]],["bool"]]],[11,"display","","",194,[[],["str"]]],[11,"peek","","",195,[[["cursor"]],["bool"]]],[11,"display","","",195,[[],["str"]]],[11,"peek","","",196,[[["cursor"]],["bool"]]],[11,"display","","",196,[[],["str"]]],[11,"peek","","",197,[[["cursor"]],["bool"]]],[11,"display","","",197,[[],["str"]]],[11,"peek","","",198,[[["cursor"]],["bool"]]],[11,"display","","",198,[[],["str"]]],[11,"peek","","",199,[[["cursor"]],["bool"]]],[11,"display","","",199,[[],["str"]]],[11,"peek","","",200,[[["cursor"]],["bool"]]],[11,"display","","",200,[[],["str"]]],[11,"peek","","",201,[[["cursor"]],["bool"]]],[11,"display","","",201,[[],["str"]]],[11,"peek","","",202,[[["cursor"]],["bool"]]],[11,"display","","",202,[[],["str"]]],[11,"peek","","",203,[[["cursor"]],["bool"]]],[11,"display","","",203,[[],["str"]]],[11,"peek","","",204,[[["cursor"]],["bool"]]],[11,"display","","",204,[[],["str"]]],[11,"peek","","",205,[[["cursor"]],["bool"]]],[11,"display","","",205,[[],["str"]]],[11,"peek","","",206,[[["cursor"]],["bool"]]],[11,"display","","",206,[[],["str"]]],[11,"peek","","",207,[[["cursor"]],["bool"]]],[11,"display","","",207,[[],["str"]]],[11,"peek","","",208,[[["cursor"]],["bool"]]],[11,"display","","",208,[[],["str"]]],[11,"peek","","",209,[[["cursor"]],["bool"]]],[11,"display","","",209,[[],["str"]]],[11,"peek","","",210,[[["cursor"]],["bool"]]],[11,"display","","",210,[[],["str"]]],[11,"peek","","",211,[[["cursor"]],["bool"]]],[11,"display","","",211,[[],["str"]]],[11,"peek","","",212,[[["cursor"]],["bool"]]],[11,"display","","",212,[[],["str"]]],[11,"peek","","",213,[[["cursor"]],["bool"]]],[11,"display","","",213,[[],["str"]]],[11,"peek","","",214,[[["cursor"]],["bool"]]],[11,"display","","",214,[[],["str"]]],[11,"peek","","",215,[[["cursor"]],["bool"]]],[11,"display","","",215,[[],["str"]]],[11,"peek","","",216,[[["cursor"]],["bool"]]],[11,"display","","",216,[[],["str"]]],[11,"peek","","",217,[[["cursor"]],["bool"]]],[11,"display","","",217,[[],["str"]]],[11,"peek","","",218,[[["cursor"]],["bool"]]],[11,"display","","",218,[[],["str"]]],[11,"peek","","",219,[[["cursor"]],["bool"]]],[11,"display","","",219,[[],["str"]]],[11,"peek","","",220,[[["cursor"]],["bool"]]],[11,"display","","",220,[[],["str"]]],[11,"peek","","",221,[[["cursor"]],["bool"]]],[11,"display","","",221,[[],["str"]]],[11,"peek","","",222,[[["cursor"]],["bool"]]],[11,"display","","",222,[[],["str"]]],[11,"peek","","",223,[[["cursor"]],["bool"]]],[11,"display","","",223,[[],["str"]]],[11,"peek","","",224,[[["cursor"]],["bool"]]],[11,"display","","",224,[[],["str"]]],[11,"peek","","",225,[[["cursor"]],["bool"]]],[11,"display","","",225,[[],["str"]]],[11,"peek","","",226,[[["cursor"]],["bool"]]],[11,"display","","",226,[[],["str"]]],[11,"peek","","",227,[[["cursor"]],["bool"]]],[11,"display","","",227,[[],["str"]]],[11,"peek","","",228,[[["cursor"]],["bool"]]],[11,"display","","",228,[[],["str"]]],[11,"peek","","",229,[[["cursor"]],["bool"]]],[11,"display","","",229,[[],["str"]]],[11,"peek","","",230,[[["cursor"]],["bool"]]],[11,"display","","",230,[[],["str"]]],[11,"peek","","",231,[[["cursor"]],["bool"]]],[11,"display","","",231,[[],["str"]]],[11,"peek","","",232,[[["cursor"]],["bool"]]],[11,"display","","",232,[[],["str"]]],[11,"peek","","",233,[[["cursor"]],["bool"]]],[11,"display","","",233,[[],["str"]]],[11,"peek","","",234,[[["cursor"]],["bool"]]],[11,"display","","",234,[[],["str"]]],[11,"peek","","",235,[[["cursor"]],["bool"]]],[11,"display","","",235,[[],["str"]]],[11,"peek","","",236,[[["cursor"]],["bool"]]],[11,"display","","",236,[[],["str"]]],[11,"peek","","",237,[[["cursor"]],["bool"]]],[11,"display","","",237,[[],["str"]]],[11,"peek","","",238,[[["cursor"]],["bool"]]],[11,"display","","",238,[[],["str"]]],[11,"peek","","",239,[[["cursor"]],["bool"]]],[11,"display","","",239,[[],["str"]]],[11,"peek","","",240,[[["cursor"]],["bool"]]],[11,"display","","",240,[[],["str"]]],[11,"peek","","",241,[[["cursor"]],["bool"]]],[11,"display","","",241,[[],["str"]]],[11,"peek","","",242,[[["cursor"]],["bool"]]],[11,"display","","",242,[[],["str"]]],[11,"peek","","",243,[[["cursor"]],["bool"]]],[11,"display","","",243,[[],["str"]]],[11,"peek","","",244,[[["cursor"]],["bool"]]],[11,"display","","",244,[[],["str"]]],[11,"peek","","",245,[[["cursor"]],["bool"]]],[11,"display","","",245,[[],["str"]]],[11,"peek","","",246,[[["cursor"]],["bool"]]],[11,"display","","",246,[[],["str"]]],[11,"peek","","",247,[[["cursor"]],["bool"]]],[11,"display","","",247,[[],["str"]]],[11,"peek","","",248,[[["cursor"]],["bool"]]],[11,"display","","",248,[[],["str"]]],[11,"peek","","",249,[[["cursor"]],["bool"]]],[11,"display","","",249,[[],["str"]]],[11,"peek","","",250,[[["cursor"]],["bool"]]],[11,"display","","",250,[[],["str"]]],[11,"peek","","",251,[[["cursor"]],["bool"]]],[11,"display","","",251,[[],["str"]]],[11,"peek","","",252,[[["cursor"]],["bool"]]],[11,"display","","",252,[[],["str"]]],[11,"peek","","",253,[[["cursor"]],["bool"]]],[11,"display","","",253,[[],["str"]]],[11,"peek","","",254,[[["cursor"]],["bool"]]],[11,"display","","",254,[[],["str"]]],[11,"peek","","",255,[[["cursor"]],["bool"]]],[11,"display","","",255,[[],["str"]]],[11,"peek","","",256,[[["cursor"]],["bool"]]],[11,"display","","",256,[[],["str"]]],[11,"peek","","",257,[[["cursor"]],["bool"]]],[11,"display","","",257,[[],["str"]]],[11,"peek","","",258,[[["cursor"]],["bool"]]],[11,"display","","",258,[[],["str"]]],[11,"peek","","",259,[[["cursor"]],["bool"]]],[11,"display","","",259,[[],["str"]]],[11,"peek","","",260,[[["cursor"]],["bool"]]],[11,"display","","",260,[[],["str"]]],[11,"peek","","",261,[[["cursor"]],["bool"]]],[11,"display","","",261,[[],["str"]]],[11,"peek","","",262,[[["cursor"]],["bool"]]],[11,"display","","",262,[[],["str"]]],[11,"peek","","",263,[[["cursor"]],["bool"]]],[11,"display","","",263,[[],["str"]]],[11,"peek","","",264,[[["cursor"]],["bool"]]],[11,"display","","",264,[[],["str"]]],[11,"peek","","",265,[[["cursor"]],["bool"]]],[11,"display","","",265,[[],["str"]]],[11,"peek","","",266,[[["cursor"]],["bool"]]],[11,"display","","",266,[[],["str"]]],[11,"peek","","",267,[[["cursor"]],["bool"]]],[11,"display","","",267,[[],["str"]]],[11,"peek","","",268,[[["cursor"]],["bool"]]],[11,"display","","",268,[[],["str"]]],[11,"peek","","",269,[[["cursor"]],["bool"]]],[11,"display","","",269,[[],["str"]]],[11,"peek","","",270,[[["cursor"]],["bool"]]],[11,"display","","",270,[[],["str"]]],[11,"peek","","",271,[[["cursor"]],["bool"]]],[11,"display","","",271,[[],["str"]]],[11,"peek","","",272,[[["cursor"]],["bool"]]],[11,"display","","",272,[[],["str"]]],[11,"peek","","",273,[[["cursor"]],["bool"]]],[11,"display","","",273,[[],["str"]]],[11,"peek","","",274,[[["cursor"]],["bool"]]],[11,"display","","",274,[[],["str"]]],[11,"peek","","",275,[[["cursor"]],["bool"]]],[11,"display","","",275,[[],["str"]]],[11,"peek","","",276,[[["cursor"]],["bool"]]],[11,"display","","",276,[[],["str"]]],[11,"peek","","",277,[[["cursor"]],["bool"]]],[11,"display","","",277,[[],["str"]]],[11,"peek","","",278,[[["cursor"]],["bool"]]],[11,"display","","",278,[[],["str"]]],[11,"peek","syn","",304,[[["cursor"]],["bool"]]],[11,"display","","",304,[[],["str"]]],[11,"parse_any","","",304,[[["parsestream"]],["result"]]],[11,"unraw","","",304,[[["self"]],["ident"]]],[11,"advance_to","syn::parse","",302,[[["self"]]]],[11,"parse","syn::token","",180,[[["parsestream"]],["result"]]],[11,"parse","","",181,[[["parsestream"]],["result"]]],[11,"parse","","",182,[[["parsestream"]],["result"]]],[11,"parse","","",183,[[["parsestream"]],["result"]]],[11,"parse","","",184,[[["parsestream"]],["result"]]],[11,"parse","","",185,[[["parsestream"]],["result"]]],[11,"parse","","",186,[[["parsestream"]],["result"]]],[11,"parse","","",187,[[["parsestream"]],["result"]]],[11,"parse","","",188,[[["parsestream"]],["result"]]],[11,"parse","","",189,[[["parsestream"]],["result"]]],[11,"parse","","",190,[[["parsestream"]],["result"]]],[11,"parse","","",191,[[["parsestream"]],["result"]]],[11,"parse","","",192,[[["parsestream"]],["result"]]],[11,"parse","","",193,[[["parsestream"]],["result"]]],[11,"parse","","",194,[[["parsestream"]],["result"]]],[11,"parse","","",195,[[["parsestream"]],["result"]]],[11,"parse","","",196,[[["parsestream"]],["result"]]],[11,"parse","","",197,[[["parsestream"]],["result"]]],[11,"parse","","",198,[[["parsestream"]],["result"]]],[11,"parse","","",199,[[["parsestream"]],["result"]]],[11,"parse","","",200,[[["parsestream"]],["result"]]],[11,"parse","","",201,[[["parsestream"]],["result"]]],[11,"parse","","",202,[[["parsestream"]],["result"]]],[11,"parse","","",203,[[["parsestream"]],["result"]]],[11,"parse","","",204,[[["parsestream"]],["result"]]],[11,"parse","","",205,[[["parsestream"]],["result"]]],[11,"parse","","",206,[[["parsestream"]],["result"]]],[11,"parse","","",207,[[["parsestream"]],["result"]]],[11,"parse","","",208,[[["parsestream"]],["result"]]],[11,"parse","","",209,[[["parsestream"]],["result"]]],[11,"parse","","",210,[[["parsestream"]],["result"]]],[11,"parse","","",211,[[["parsestream"]],["result"]]],[11,"parse","","",212,[[["parsestream"]],["result"]]],[11,"parse","","",213,[[["parsestream"]],["result"]]],[11,"parse","","",214,[[["parsestream"]],["result"]]],[11,"parse","","",215,[[["parsestream"]],["result"]]],[11,"parse","","",216,[[["parsestream"]],["result"]]],[11,"parse","","",217,[[["parsestream"]],["result"]]],[11,"parse","","",218,[[["parsestream"]],["result"]]],[11,"parse","","",219,[[["parsestream"]],["result"]]],[11,"parse","","",220,[[["parsestream"]],["result"]]],[11,"parse","","",221,[[["parsestream"]],["result"]]],[11,"parse","","",222,[[["parsestream"]],["result"]]],[11,"parse","","",223,[[["parsestream"]],["result"]]],[11,"parse","","",224,[[["parsestream"]],["result"]]],[11,"parse","","",225,[[["parsestream"]],["result"]]],[11,"parse","","",226,[[["parsestream"]],["result"]]],[11,"parse","","",227,[[["parsestream"]],["result"]]],[11,"parse","","",228,[[["parsestream"]],["result"]]],[11,"parse","","",229,[[["parsestream"]],["result"]]],[11,"parse","","",230,[[["parsestream"]],["result"]]],[11,"parse","","",231,[[["parsestream"]],["result"]]],[11,"parse","","",232,[[["parsestream"]],["result"]]],[11,"parse","","",233,[[["parsestream"]],["result"]]],[11,"parse","","",234,[[["parsestream"]],["result"]]],[11,"parse","","",235,[[["parsestream"]],["result"]]],[11,"parse","","",236,[[["parsestream"]],["result"]]],[11,"parse","","",237,[[["parsestream"]],["result"]]],[11,"parse","","",238,[[["parsestream"]],["result"]]],[11,"parse","","",239,[[["parsestream"]],["result"]]],[11,"parse","","",240,[[["parsestream"]],["result"]]],[11,"parse","","",241,[[["parsestream"]],["result"]]],[11,"parse","","",242,[[["parsestream"]],["result"]]],[11,"parse","","",243,[[["parsestream"]],["result"]]],[11,"parse","","",244,[[["parsestream"]],["result"]]],[11,"parse","","",245,[[["parsestream"]],["result"]]],[11,"parse","","",246,[[["parsestream"]],["result"]]],[11,"parse","","",247,[[["parsestream"]],["result"]]],[11,"parse","","",248,[[["parsestream"]],["result"]]],[11,"parse","","",249,[[["parsestream"]],["result"]]],[11,"parse","","",250,[[["parsestream"]],["result"]]],[11,"parse","","",251,[[["parsestream"]],["result"]]],[11,"parse","","",252,[[["parsestream"]],["result"]]],[11,"parse","","",253,[[["parsestream"]],["result"]]],[11,"parse","","",254,[[["parsestream"]],["result"]]],[11,"parse","","",255,[[["parsestream"]],["result"]]],[11,"parse","","",256,[[["parsestream"]],["result"]]],[11,"parse","","",257,[[["parsestream"]],["result"]]],[11,"parse","","",258,[[["parsestream"]],["result"]]],[11,"parse","","",259,[[["parsestream"]],["result"]]],[11,"parse","","",260,[[["parsestream"]],["result"]]],[11,"parse","","",261,[[["parsestream"]],["result"]]],[11,"parse","","",262,[[["parsestream"]],["result"]]],[11,"parse","","",263,[[["parsestream"]],["result"]]],[11,"parse","","",264,[[["parsestream"]],["result"]]],[11,"parse","","",265,[[["parsestream"]],["result"]]],[11,"parse","","",266,[[["parsestream"]],["result"]]],[11,"parse","","",267,[[["parsestream"]],["result"]]],[11,"parse","","",268,[[["parsestream"]],["result"]]],[11,"parse","","",269,[[["parsestream"]],["result"]]],[11,"parse","","",270,[[["parsestream"]],["result"]]],[11,"parse","","",271,[[["parsestream"]],["result"]]],[11,"parse","","",272,[[["parsestream"]],["result"]]],[11,"parse","","",273,[[["parsestream"]],["result"]]],[11,"parse","","",274,[[["parsestream"]],["result"]]],[11,"parse","","",275,[[["parsestream"]],["result"]]],[11,"parse","","",276,[[["parsestream"]],["result"]]],[11,"parse","","",277,[[["parsestream"]],["result"]]],[11,"parse","","",278,[[["parsestream"]],["result"]]],[11,"parse","syn","",304,[[["parsestream"]],["result"]]],[11,"parse","","",150,[[["parsestream"]],["result"]]],[11,"parse","","",1,[[["parsestream"]],["result"]]],[11,"parse","","",2,[[["parsestream"]],["result"]]],[11,"parse","","",151,[[["parsestream"]],["result"]]],[11,"parse","","",6,[[["parsestream"]],["result"]]],[11,"parse","","",4,[[["parsestream"]],["result"]]],[11,"parse","","",5,[[["parsestream"]],["result"]]],[11,"parse","","",153,[[["parsestream"]],["result"]]],[11,"parse","","",156,[[["parsestream"]],["result"]]],[11,"parse","","",33,[[["parsestream"]],["result"]]],[11,"parse","","",30,[[["parsestream"]],["result"]]],[11,"parse","","",28,[[["parsestream"]],["result"]]],[11,"parse","","",34,[[["parsestream"]],["result"]]],[11,"parse","","",36,[[["parsestream"]],["result"]]],[11,"parse","","",21,[[["parsestream"]],["result"]]],[11,"parse","","",14,[[["parsestream"]],["result"]]],[11,"parse","","",23,[[["parsestream"]],["result"]]],[11,"parse","","",37,[[["parsestream"]],["result"]]],[11,"parse","","",47,[[["parsestream"]],["result"]]],[11,"parse","","",19,[[["parsestream"]],["result"]]],[11,"parse","","",49,[[["parsestream"]],["result"]]],[11,"parse","","",24,[[["parsestream"]],["result"]]],[11,"parse","","",48,[[["parsestream"]],["result"]]],[11,"parse","","",32,[[["parsestream"]],["result"]]],[11,"parse","","",25,[[["parsestream"]],["result"]]],[11,"parse","","",50,[[["parsestream"]],["result"]]],[11,"parse","","",20,[[["parsestream"]],["result"]]],[11,"parse","","",15,[[["parsestream"]],["result"]]],[11,"parse","","",16,[[["parsestream"]],["result"]]],[11,"parse","","",27,[[["parsestream"]],["result"]]],[11,"parse","","",31,[[["parsestream"]],["result"]]],[11,"parse","","",40,[[["parsestream"]],["result"]]],[11,"parse","","",41,[[["parsestream"]],["result"]]],[11,"parse","","",22,[[["parsestream"]],["result"]]],[11,"parse","","",26,[[["parsestream"]],["result"]]],[11,"parse","","",43,[[["parsestream"]],["result"]]],[11,"parse","","",35,[[["parsestream"]],["result"]]],[11,"parse","","",44,[[["parsestream"]],["result"]]],[11,"parse","","",42,[[["parsestream"]],["result"]]],[11,"parse","","",38,[[["parsestream"]],["result"]]],[11,"parse","","",45,[[["parsestream"]],["result"]]],[11,"parse","","",17,[[["parsestream"]],["result"]]],[11,"parse","","",46,[[["parsestream"]],["result"]]],[11,"parse","","",52,[[["parsestream"]],["result"]]],[11,"parse","","",51,[[["parsestream"]],["result"]]],[11,"parse","","",12,[[["parsestream"]],["result"]]],[11,"parse","","",11,[[["parsestream"]],["result"]]],[11,"parse","","",155,[[["parsestream"]],["result"]]],[11,"parse","","",39,[[["parsestream"]],["result"]]],[11,"parse","","",157,[[["parsestream"]],["result"]]],[11,"parse","","",10,[[["parsestream"]],[["result",["arm"]],["arm"]]]],[11,"parse","","",53,[[["parsestream"]],["result"]]],[11,"parse","","",56,[[["parsestream"]],["result"]]],[11,"parse","","",158,[[["parsestream"]],["result"]]],[11,"parse","","",57,[[["parsestream"]],["result"]]],[11,"parse","","",54,[[["parsestream"]],["result"]]],[11,"parse","","",62,[[["parsestream"]],["result"]]],[11,"parse","","",160,[[["parsestream"]],["result"]]],[11,"parse","","",61,[[["parsestream"]],["result"]]],[11,"parse","","",159,[[["parsestream"]],["result"]]],[11,"parse","","",55,[[["parsestream"]],["result"]]],[11,"parse","","",63,[[["parsestream"]],["result"]]],[11,"parse","","",161,[[["parsestream"]],["result"]]],[11,"parse","","",165,[[["parsestream"]],["result"]]],[11,"parse","","",78,[[["parsestream"]],["result"]]],[11,"parse","","",79,[[["parsestream"]],["result"]]],[11,"parse","","",74,[[["parsestream"]],["result"]]],[11,"parse","","",87,[[["parsestream"]],["result"]]],[11,"parse","","",167,[[["parsestream"]],[["usetree"],["result",["usetree"]]]]],[11,"parse","","",81,[[["parsestream"]],["result"]]],[11,"parse","","",72,[[["parsestream"]],["result"]]],[11,"parse","","",75,[[["parsestream"]],["result"]]],[11,"parse","","",162,[[["parsestream"]],["result"]]],[11,"parse","","",88,[[["parsestream"]],["result"]]],[11,"parse","","",80,[[["parsestream"]],["result"]]],[11,"parse","","",76,[[["parsestream"]],["result"]]],[11,"parse","","",163,[[["parsestream"]],["result"]]],[11,"parse","","",64,[[["parsestream"]],["result"]]],[11,"parse","","",66,[[["parsestream"]],["result"]]],[11,"parse","","",67,[[["parsestream"]],["result"]]],[11,"parse","","",65,[[["parsestream"]],["result"]]],[11,"parse","","",85,[[["parsestream"]],["result"]]],[11,"parse","","",82,[[["parsestream"]],["result"]]],[11,"parse","","",73,[[["parsestream"]],["result"]]],[11,"parse","","",86,[[["parsestream"]],["result"]]],[11,"parse","","",83,[[["parsestream"]],["result"]]],[11,"parse","","",84,[[["parsestream"]],["result"]]],[11,"parse","","",166,[[["parsestream"]],["result"]]],[11,"parse","","",90,[[["parsestream"]],["result"]]],[11,"parse","","",92,[[["parsestream"]],["result"]]],[11,"parse","","",93,[[["parsestream"]],["result"]]],[11,"parse","","",91,[[["parsestream"]],["result"]]],[11,"parse","","",77,[[["parsestream"]],["result"]]],[11,"parse","","",164,[[["parsestream"]],["result"]]],[11,"parse","","",68,[[["parsestream"]],["result"]]],[11,"parse","","",70,[[["parsestream"]],["result"]]],[11,"parse","","",71,[[["parsestream"]],["result"]]],[11,"parse","","",69,[[["parsestream"]],["result"]]],[11,"parse","","",99,[[["parsestream"]],["result"]]],[11,"parse","","",100,[[["parsestream"]],["result"]]],[11,"parse","","",168,[[["parsestream"]],["result"]]],[11,"parse","","",284,[[["parsestream"]],["result"]]],[11,"parse","","",285,[[["parsestream"]],["result"]]],[11,"parse","","",286,[[["parsestream"]],["result"]]],[11,"parse","","",287,[[["parsestream"]],["result"]]],[11,"parse","","",288,[[["parsestream"]],["result"]]],[11,"parse","","",289,[[["parsestream"]],["result"]]],[11,"parse","","",101,[[["parsestream"]],["result"]]],[11,"parse","","",102,[[["parsestream"]],["result"]]],[11,"parse","","",106,[[["parsestream"]],["result"]]],[11,"parse","","",172,[[["parsestream"]],["result"]]],[11,"parse","","",173,[[["parsestream"]],["result"]]],[11,"parse","","",107,[[["parsestream"]],["result"]]],[11,"parse","","",174,[[["parsestream"]],["result"]]],[11,"parse","","",176,[[["parsestream"]],["result"]]],[11,"parse","","",122,[[["parsestream"]],["result"]]],[11,"parse","","",111,[[["parsestream"]],["result"]]],[11,"parse","","",120,[[["parsestream"]],["result"]]],[11,"parse","","",121,[[["parsestream"]],["result"]]],[11,"parse","","",112,[[["parsestream"]],["result"]]],[11,"parse","","",117,[[["parsestream"]],["result"]]],[11,"parse","","",115,[[["parsestream"]],["result"]]],[11,"parse","","",124,[[["parsestream"]],["result"]]],[11,"parse","","",116,[[["parsestream"]],["result"]]],[11,"parse","","",119,[[["parsestream"]],["result"]]],[11,"parse","","",175,[[["parsestream"]],["result"]]],[11,"parse","","",123,[[["parsestream"]],["result"]]],[11,"parse","","",114,[[["parsestream"]],["result"]]],[11,"parse","","",113,[[["parsestream"]],["result"]]],[11,"parse","","",118,[[["parsestream"]],["result"]]],[11,"parse","","",110,[[["parsestream"]],["result"]]],[11,"parse","","",109,[[["parsestream"]],["result"]]],[11,"parse","","",177,[[["parsestream"]],["result"]]],[11,"parse","","",146,[[["parsestream"]],["result"]]],[11,"parse","","",178,[[["parsestream"]],["result"]]],[11,"parse","","",142,[[["parsestream"]],["result"]]],[11,"parse","","",145,[[["parsestream"]],["result"]]],[11,"parse","","",147,[[["parsestream"]],["result"]]],[11,"parse","","",143,[[["parsestream"]],["result"]]],[11,"parse","","",144,[[["parsestream"]],["result"]]],[11,"parse","syn::parse","",314,[[["parsestream"]],["result"]]],[11,"drop","","",302,[[["self"]]]],[11,"from","syn","",304,[[["selfvalue"]],["ident"]]],[11,"from","","",304,[[["selftype"]],["ident"]]],[11,"from","","",304,[[["super"]],["ident"]]],[11,"from","","",304,[[["crate"]],["ident"]]],[11,"from","","",304,[[["extern"]],["ident"]]],[11,"from","","",304,[[["underscore"]],["ident"]]],[11,"from","","",150,[[["path"]],["meta"]]],[11,"from","","",150,[[["metalist"]],["meta"]]],[11,"from","","",150,[[["metanamevalue"]],["meta"]]],[11,"from","","",151,[[["meta"]],["nestedmeta"]]],[11,"from","","",151,[[["lit"]],["nestedmeta"]]],[11,"from","","",152,[[["fieldsnamed"]],["fields"]]],[11,"from","","",152,[[["fieldsunnamed"]],["fields"]]],[11,"from","","",153,[[["vispublic"]],["visibility"]]],[11,"from","","",153,[[["viscrate"]],["visibility"]]],[11,"from","","",153,[[["visrestricted"]],["visibility"]]],[11,"from","","",156,[[["exprarray"]],["expr"]]],[11,"from","","",156,[[["exprassign"]],["expr"]]],[11,"from","","",156,[[["exprassignop"]],["expr"]]],[11,"from","","",156,[[["exprasync"]],["expr"]]],[11,"from","","",156,[[["exprawait"]],["expr"]]],[11,"from","","",156,[[["exprbinary"]],["expr"]]],[11,"from","","",156,[[["exprblock"]],["expr"]]],[11,"from","","",156,[[["exprbox"]],["expr"]]],[11,"from","","",156,[[["exprbreak"]],["expr"]]],[11,"from","","",156,[[["exprcall"]],["expr"]]],[11,"from","","",156,[[["exprcast"]],["expr"]]],[11,"from","","",156,[[["exprclosure"]],["expr"]]],[11,"from","","",156,[[["exprcontinue"]],["expr"]]],[11,"from","","",156,[[["exprfield"]],["expr"]]],[11,"from","","",156,[[["exprforloop"]],["expr"]]],[11,"from","","",156,[[["exprgroup"]],["expr"]]],[11,"from","","",156,[[["exprif"]],["expr"]]],[11,"from","","",156,[[["exprindex"]],["expr"]]],[11,"from","","",156,[[["exprlet"]],["expr"]]],[11,"from","","",156,[[["exprlit"]],["expr"]]],[11,"from","","",156,[[["exprloop"]],["expr"]]],[11,"from","","",156,[[["exprmacro"]],["expr"]]],[11,"from","","",156,[[["exprmatch"]],["expr"]]],[11,"from","","",156,[[["exprmethodcall"]],["expr"]]],[11,"from","","",156,[[["exprparen"]],["expr"]]],[11,"from","","",156,[[["exprpath"]],["expr"]]],[11,"from","","",156,[[["exprrange"]],["expr"]]],[11,"from","","",156,[[["exprreference"]],["expr"]]],[11,"from","","",156,[[["exprrepeat"]],["expr"]]],[11,"from","","",156,[[["exprreturn"]],["expr"]]],[11,"from","","",156,[[["exprstruct"]],["expr"]]],[11,"from","","",156,[[["exprtry"]],["expr"]]],[11,"from","","",156,[[["exprtryblock"]],["expr"]]],[11,"from","","",156,[[["exprtuple"]],["expr"]]],[11,"from","","",156,[[["exprtype"]],["expr"]]],[11,"from","","",156,[[["exprunary"]],["expr"]]],[11,"from","","",156,[[["exprunsafe"]],["expr"]]],[11,"from","","",156,[[["exprwhile"]],["expr"]]],[11,"from","","",156,[[["expryield"]],["expr"]]],[11,"from","","",53,[[["usize"]],["index"]]],[11,"from","","",158,[[["typeparam"]],["genericparam"]]],[11,"from","","",158,[[["lifetimedef"]],["genericparam"]]],[11,"from","","",158,[[["constparam"]],["genericparam"]]],[11,"from","","",62,[[["ident"]],["self"]]],[11,"from","","",160,[[["traitbound"]],["typeparambound"]]],[11,"from","","",160,[[["lifetime"]],["typeparambound"]]],[11,"from","","",161,[[["predicatetype"]],["wherepredicate"]]],[11,"from","","",161,[[["predicatelifetime"]],["wherepredicate"]]],[11,"from","","",161,[[["predicateeq"]],["wherepredicate"]]],[11,"from","","",165,[[["itemconst"]],["item"]]],[11,"from","","",165,[[["itemenum"]],["item"]]],[11,"from","","",165,[[["itemexterncrate"]],["item"]]],[11,"from","","",165,[[["itemfn"]],["item"]]],[11,"from","","",165,[[["itemforeignmod"]],["item"]]],[11,"from","","",165,[[["itemimpl"]],["item"]]],[11,"from","","",165,[[["itemmacro"]],["item"]]],[11,"from","","",165,[[["itemmacro2"]],["item"]]],[11,"from","","",165,[[["itemmod"]],["item"]]],[11,"from","","",165,[[["itemstatic"]],["item"]]],[11,"from","","",165,[[["itemstruct"]],["item"]]],[11,"from","","",165,[[["itemtrait"]],["item"]]],[11,"from","","",165,[[["itemtraitalias"]],["item"]]],[11,"from","","",165,[[["itemtype"]],["item"]]],[11,"from","","",165,[[["itemunion"]],["item"]]],[11,"from","","",165,[[["itemuse"]],["item"]]],[11,"from","","",165,[[["deriveinput"]],["item"]]],[11,"from","","",106,[[["itemstruct"]],["deriveinput"]]],[11,"from","","",106,[[["itemenum"]],["deriveinput"]]],[11,"from","","",106,[[["itemunion"]],["deriveinput"]]],[11,"from","","",167,[[["usepath"]],["usetree"]]],[11,"from","","",167,[[["usename"]],["usetree"]]],[11,"from","","",167,[[["userename"]],["usetree"]]],[11,"from","","",167,[[["useglob"]],["usetree"]]],[11,"from","","",167,[[["usegroup"]],["usetree"]]],[11,"from","","",163,[[["foreignitemfn"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemstatic"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemtype"]],["foreignitem"]]],[11,"from","","",163,[[["foreignitemmacro"]],["foreignitem"]]],[11,"from","","",166,[[["traititemconst"]],["traititem"]]],[11,"from","","",166,[[["traititemmethod"]],["traititem"]]],[11,"from","","",166,[[["traititemtype"]],["traititem"]]],[11,"from","","",166,[[["traititemmacro"]],["traititem"]]],[11,"from","","",164,[[["implitemconst"]],["implitem"]]],[11,"from","","",164,[[["implitemmethod"]],["implitem"]]],[11,"from","","",164,[[["implitemtype"]],["implitem"]]],[11,"from","","",164,[[["implitemmacro"]],["implitem"]]],[11,"from","","",162,[[["receiver"]],["fnarg"]]],[11,"from","","",162,[[["pattype"]],["fnarg"]]],[11,"from","","",168,[[["litstr"]],["lit"]]],[11,"from","","",168,[[["litbytestr"]],["lit"]]],[11,"from","","",168,[[["litbyte"]],["lit"]]],[11,"from","","",168,[[["litchar"]],["lit"]]],[11,"from","","",168,[[["litint"]],["lit"]]],[11,"from","","",168,[[["litfloat"]],["lit"]]],[11,"from","","",168,[[["litbool"]],["lit"]]],[11,"from","","",288,[[["literal"]],["self"]]],[11,"from","","",289,[[["literal"]],["self"]]],[11,"from","","",171,[[["datastruct"]],["data"]]],[11,"from","","",171,[[["dataenum"]],["data"]]],[11,"from","","",171,[[["dataunion"]],["data"]]],[11,"from","","",176,[[["typearray"]],["type"]]],[11,"from","","",176,[[["typebarefn"]],["type"]]],[11,"from","","",176,[[["typegroup"]],["type"]]],[11,"from","","",176,[[["typeimpltrait"]],["type"]]],[11,"from","","",176,[[["typeinfer"]],["type"]]],[11,"from","","",176,[[["typemacro"]],["type"]]],[11,"from","","",176,[[["typenever"]],["type"]]],[11,"from","","",176,[[["typeparen"]],["type"]]],[11,"from","","",176,[[["typepath"]],["type"]]],[11,"from","","",176,[[["typeptr"]],["type"]]],[11,"from","","",176,[[["typereference"]],["type"]]],[11,"from","","",176,[[["typeslice"]],["type"]]],[11,"from","","",176,[[["typetraitobject"]],["type"]]],[11,"from","","",176,[[["typetuple"]],["type"]]],[11,"from","","",177,[[["patbox"]],["pat"]]],[11,"from","","",177,[[["patident"]],["pat"]]],[11,"from","","",177,[[["patlit"]],["pat"]]],[11,"from","","",177,[[["patmacro"]],["pat"]]],[11,"from","","",177,[[["pator"]],["pat"]]],[11,"from","","",177,[[["patpath"]],["pat"]]],[11,"from","","",177,[[["patrange"]],["pat"]]],[11,"from","","",177,[[["patreference"]],["pat"]]],[11,"from","","",177,[[["patrest"]],["pat"]]],[11,"from","","",177,[[["patslice"]],["pat"]]],[11,"from","","",177,[[["patstruct"]],["pat"]]],[11,"from","","",177,[[["pattuple"]],["pat"]]],[11,"from","","",177,[[["pattuplestruct"]],["pat"]]],[11,"from","","",177,[[["pattype"]],["pat"]]],[11,"from","","",177,[[["patwild"]],["pat"]]],[11,"from","","",146,[[["t"]],["self"]]],[11,"from","","",147,[[["t"]],["self"]]],[11,"from","","",303,[[["lexerror"]],["self"]]],[11,"next_back","syn::punctuated","",307,[[["self"]],["option"]]],[11,"next_back","","",308,[[["self"]],["option"]]],[11,"next_back","","",309,[[["self"]],["option"]]],[11,"next_back","","",310,[[["self"]],["option"]]],[11,"next_back","","",311,[[["self"]],["option"]]],[11,"next_back","","",312,[[["self"]],["option"]]],[11,"len","","",307,[[["self"]],["usize"]]],[11,"len","","",308,[[["self"]],["usize"]]],[11,"len","","",309,[[["self"]],["usize"]]],[11,"len","","",310,[[["self"]],["usize"]]],[11,"len","","",311,[[["self"]],["usize"]]],[11,"len","","",312,[[["self"]],["usize"]]],[11,"extend","","",294,[[["self"],["intoiterator"]]]],[11,"extend","","",294,[[["self"],["intoiterator"]]]],[11,"into_iter","syn","",152,[[]]],[11,"into_iter","syn::punctuated","",294,[[]]],[11,"into_iter","syn","",303,[[]]],[11,"next","syn::punctuated","",307,[[["self"]],["option"]]],[11,"size_hint","","",307,[[["self"]]]],[11,"next","","",308,[[["self"]],["option"]]],[11,"size_hint","","",308,[[["self"]]]],[11,"next","","",309,[[["self"]],["option"]]],[11,"size_hint","","",309,[[["self"]]]],[11,"next","","",310,[[["self"]],["option"]]],[11,"size_hint","","",310,[[["self"]]]],[11,"next","","",311,[[["self"]],["option"]]],[11,"size_hint","","",311,[[["self"]]]],[11,"next","","",312,[[["self"]],["option"]]],[11,"size_hint","","",312,[[["self"]]]],[11,"clone","syn::token","",180,[[["self"]],["underscore"]]],[11,"clone","","",181,[[["self"]],["abstract"]]],[11,"clone","","",182,[[["self"]],["as"]]],[11,"clone","","",183,[[["self"]],["async"]]],[11,"clone","","",184,[[["self"]],["auto"]]],[11,"clone","","",185,[[["self"]],["await"]]],[11,"clone","","",186,[[["self"]],["become"]]],[11,"clone","","",187,[[["self"]],["box"]]],[11,"clone","","",188,[[["self"]],["break"]]],[11,"clone","","",189,[[["self"]],["const"]]],[11,"clone","","",190,[[["self"]],["continue"]]],[11,"clone","","",191,[[["self"]],["crate"]]],[11,"clone","","",192,[[["self"]],["default"]]],[11,"clone","","",193,[[["self"]],["do"]]],[11,"clone","","",194,[[["self"]],["dyn"]]],[11,"clone","","",195,[[["self"]],["else"]]],[11,"clone","","",196,[[["self"]],["enum"]]],[11,"clone","","",197,[[["self"]],["extern"]]],[11,"clone","","",198,[[["self"]],["final"]]],[11,"clone","","",199,[[["self"]],["fn"]]],[11,"clone","","",200,[[["self"]],["for"]]],[11,"clone","","",201,[[["self"]],["if"]]],[11,"clone","","",202,[[["self"]],["impl"]]],[11,"clone","","",203,[[["self"]],["in"]]],[11,"clone","","",204,[[["self"]],["let"]]],[11,"clone","","",205,[[["self"]],["loop"]]],[11,"clone","","",206,[[["self"]],["macro"]]],[11,"clone","","",207,[[["self"]],["match"]]],[11,"clone","","",208,[[["self"]],["mod"]]],[11,"clone","","",209,[[["self"]],["move"]]],[11,"clone","","",210,[[["self"]],["mut"]]],[11,"clone","","",211,[[["self"]],["override"]]],[11,"clone","","",212,[[["self"]],["priv"]]],[11,"clone","","",213,[[["self"]],["pub"]]],[11,"clone","","",214,[[["self"]],["ref"]]],[11,"clone","","",215,[[["self"]],["return"]]],[11,"clone","","",216,[[["self"]],["selftype"]]],[11,"clone","","",217,[[["self"]],["selfvalue"]]],[11,"clone","","",218,[[["self"]],["static"]]],[11,"clone","","",219,[[["self"]],["struct"]]],[11,"clone","","",220,[[["self"]],["super"]]],[11,"clone","","",221,[[["self"]],["trait"]]],[11,"clone","","",222,[[["self"]],["try"]]],[11,"clone","","",223,[[["self"]],["type"]]],[11,"clone","","",224,[[["self"]],["typeof"]]],[11,"clone","","",225,[[["self"]],["union"]]],[11,"clone","","",226,[[["self"]],["unsafe"]]],[11,"clone","","",227,[[["self"]],["unsized"]]],[11,"clone","","",228,[[["self"]],["use"]]],[11,"clone","","",229,[[["self"]],["virtual"]]],[11,"clone","","",230,[[["self"]],["where"]]],[11,"clone","","",231,[[["self"]],["while"]]],[11,"clone","","",232,[[["self"]],["yield"]]],[11,"clone","","",233,[[["self"]],["add"]]],[11,"clone","","",234,[[["self"]],["addeq"]]],[11,"clone","","",235,[[["self"]],["and"]]],[11,"clone","","",236,[[["self"]],["andand"]]],[11,"clone","","",237,[[["self"]],["andeq"]]],[11,"clone","","",238,[[["self"]],["at"]]],[11,"clone","","",239,[[["self"]],["bang"]]],[11,"clone","","",240,[[["self"]],["caret"]]],[11,"clone","","",241,[[["self"]],["careteq"]]],[11,"clone","","",242,[[["self"]],["colon"]]],[11,"clone","","",243,[[["self"]],["colon2"]]],[11,"clone","","",244,[[["self"]],["comma"]]],[11,"clone","","",245,[[["self"]],["div"]]],[11,"clone","","",246,[[["self"]],["diveq"]]],[11,"clone","","",247,[[["self"]],["dollar"]]],[11,"clone","","",248,[[["self"]],["dot"]]],[11,"clone","","",249,[[["self"]],["dot2"]]],[11,"clone","","",250,[[["self"]],["dot3"]]],[11,"clone","","",251,[[["self"]],["dotdoteq"]]],[11,"clone","","",252,[[["self"]],["eq"]]],[11,"clone","","",253,[[["self"]],["eqeq"]]],[11,"clone","","",254,[[["self"]],["ge"]]],[11,"clone","","",255,[[["self"]],["gt"]]],[11,"clone","","",256,[[["self"]],["le"]]],[11,"clone","","",257,[[["self"]],["lt"]]],[11,"clone","","",258,[[["self"]],["muleq"]]],[11,"clone","","",259,[[["self"]],["ne"]]],[11,"clone","","",260,[[["self"]],["or"]]],[11,"clone","","",261,[[["self"]],["oreq"]]],[11,"clone","","",262,[[["self"]],["oror"]]],[11,"clone","","",263,[[["self"]],["pound"]]],[11,"clone","","",264,[[["self"]],["question"]]],[11,"clone","","",265,[[["self"]],["rarrow"]]],[11,"clone","","",266,[[["self"]],["larrow"]]],[11,"clone","","",267,[[["self"]],["rem"]]],[11,"clone","","",268,[[["self"]],["remeq"]]],[11,"clone","","",269,[[["self"]],["fatarrow"]]],[11,"clone","","",270,[[["self"]],["semi"]]],[11,"clone","","",271,[[["self"]],["shl"]]],[11,"clone","","",272,[[["self"]],["shleq"]]],[11,"clone","","",273,[[["self"]],["shr"]]],[11,"clone","","",274,[[["self"]],["shreq"]]],[11,"clone","","",275,[[["self"]],["star"]]],[11,"clone","","",276,[[["self"]],["sub"]]],[11,"clone","","",277,[[["self"]],["subeq"]]],[11,"clone","","",278,[[["self"]],["tilde"]]],[11,"clone","","",279,[[["self"]],["brace"]]],[11,"clone","","",280,[[["self"]],["bracket"]]],[11,"clone","","",281,[[["self"]],["paren"]]],[11,"clone","","",282,[[["self"]],["group"]]],[11,"clone","syn","",0,[[["self"]],["attribute"]]],[11,"clone","","",149,[[["self"]],["attrstyle"]]],[11,"clone","","",150,[[["self"]],["meta"]]],[11,"clone","","",1,[[["self"]],["metalist"]]],[11,"clone","","",2,[[["self"]],["metanamevalue"]]],[11,"clone","","",151,[[["self"]],["nestedmeta"]]],[11,"clone","","",6,[[["self"]],["variant"]]],[11,"clone","","",152,[[["self"]],["fields"]]],[11,"clone","","",4,[[["self"]],["fieldsnamed"]]],[11,"clone","","",5,[[["self"]],["fieldsunnamed"]]],[11,"clone","","",3,[[["self"]],["field"]]],[11,"clone","","",153,[[["self"]],["visibility"]]],[11,"clone","","",8,[[["self"]],["vispublic"]]],[11,"clone","","",7,[[["self"]],["viscrate"]]],[11,"clone","","",9,[[["self"]],["visrestricted"]]],[11,"clone","","",156,[[["self"]],["expr"]]],[11,"clone","","",14,[[["self"]],["exprarray"]]],[11,"clone","","",15,[[["self"]],["exprassign"]]],[11,"clone","","",16,[[["self"]],["exprassignop"]]],[11,"clone","","",17,[[["self"]],["exprasync"]]],[11,"clone","","",18,[[["self"]],["exprawait"]]],[11,"clone","","",19,[[["self"]],["exprbinary"]]],[11,"clone","","",20,[[["self"]],["exprblock"]]],[11,"clone","","",21,[[["self"]],["exprbox"]]],[11,"clone","","",22,[[["self"]],["exprbreak"]]],[11,"clone","","",23,[[["self"]],["exprcall"]]],[11,"clone","","",24,[[["self"]],["exprcast"]]],[11,"clone","","",25,[[["self"]],["exprclosure"]]],[11,"clone","","",26,[[["self"]],["exprcontinue"]]],[11,"clone","","",27,[[["self"]],["exprfield"]]],[11,"clone","","",28,[[["self"]],["exprforloop"]]],[11,"clone","","",29,[[["self"]],["exprgroup"]]],[11,"clone","","",30,[[["self"]],["exprif"]]],[11,"clone","","",31,[[["self"]],["exprindex"]]],[11,"clone","","",32,[[["self"]],["exprlet"]]],[11,"clone","","",33,[[["self"]],["exprlit"]]],[11,"clone","","",34,[[["self"]],["exprloop"]]],[11,"clone","","",35,[[["self"]],["exprmacro"]]],[11,"clone","","",36,[[["self"]],["exprmatch"]]],[11,"clone","","",37,[[["self"]],["exprmethodcall"]]],[11,"clone","","",38,[[["self"]],["exprparen"]]],[11,"clone","","",39,[[["self"]],["exprpath"]]],[11,"clone","","",40,[[["self"]],["exprrange"]]],[11,"clone","","",41,[[["self"]],["exprreference"]]],[11,"clone","","",42,[[["self"]],["exprrepeat"]]],[11,"clone","","",43,[[["self"]],["exprreturn"]]],[11,"clone","","",44,[[["self"]],["exprstruct"]]],[11,"clone","","",45,[[["self"]],["exprtry"]]],[11,"clone","","",46,[[["self"]],["exprtryblock"]]],[11,"clone","","",47,[[["self"]],["exprtuple"]]],[11,"clone","","",48,[[["self"]],["exprtype"]]],[11,"clone","","",49,[[["self"]],["exprunary"]]],[11,"clone","","",50,[[["self"]],["exprunsafe"]]],[11,"clone","","",51,[[["self"]],["exprwhile"]]],[11,"clone","","",52,[[["self"]],["expryield"]]],[11,"clone","","",157,[[["self"]],["member"]]],[11,"clone","","",53,[[["self"]],["index"]]],[11,"clone","","",13,[[["self"]],["methodturbofish"]]],[11,"clone","","",154,[[["self"]],["genericmethodargument"]]],[11,"clone","","",11,[[["self"]],["fieldvalue"]]],[11,"clone","","",12,[[["self"]],["label"]]],[11,"clone","","",10,[[["self"]],["arm"]]],[11,"clone","","",155,[[["self"]],["rangelimits"]]],[11,"clone","","",56,[[["self"]],["generics"]]],[11,"clone","","",158,[[["self"]],["genericparam"]]],[11,"clone","","",62,[[["self"]],["typeparam"]]],[11,"clone","","",57,[[["self"]],["lifetimedef"]]],[11,"clone","","",55,[[["self"]],["constparam"]]],[11,"clone","","",305,[[["self"]],["implgenerics"]]],[11,"clone","","",283,[[["self"]],["typegenerics"]]],[11,"clone","","",306,[[["self"]],["turbofish"]]],[11,"clone","","",54,[[["self"]],["boundlifetimes"]]],[11,"clone","","",160,[[["self"]],["typeparambound"]]],[11,"clone","","",61,[[["self"]],["traitbound"]]],[11,"clone","","",159,[[["self"]],["traitboundmodifier"]]],[11,"clone","","",63,[[["self"]],["whereclause"]]],[11,"clone","","",161,[[["self"]],["wherepredicate"]]],[11,"clone","","",60,[[["self"]],["predicatetype"]]],[11,"clone","","",59,[[["self"]],["predicatelifetime"]]],[11,"clone","","",58,[[["self"]],["predicateeq"]]],[11,"clone","","",165,[[["self"]],["item"]]],[11,"clone","","",72,[[["self"]],["itemconst"]]],[11,"clone","","",73,[[["self"]],["itemenum"]]],[11,"clone","","",74,[[["self"]],["itemexterncrate"]]],[11,"clone","","",75,[[["self"]],["itemfn"]]],[11,"clone","","",76,[[["self"]],["itemforeignmod"]]],[11,"clone","","",77,[[["self"]],["itemimpl"]]],[11,"clone","","",78,[[["self"]],["itemmacro"]]],[11,"clone","","",79,[[["self"]],["itemmacro2"]]],[11,"clone","","",80,[[["self"]],["itemmod"]]],[11,"clone","","",81,[[["self"]],["itemstatic"]]],[11,"clone","","",82,[[["self"]],["itemstruct"]]],[11,"clone","","",83,[[["self"]],["itemtrait"]]],[11,"clone","","",84,[[["self"]],["itemtraitalias"]]],[11,"clone","","",85,[[["self"]],["itemtype"]]],[11,"clone","","",86,[[["self"]],["itemunion"]]],[11,"clone","","",87,[[["self"]],["itemuse"]]],[11,"clone","","",167,[[["self"]],["usetree"]]],[11,"clone","","",97,[[["self"]],["usepath"]]],[11,"clone","","",96,[[["self"]],["usename"]]],[11,"clone","","",98,[[["self"]],["userename"]]],[11,"clone","","",94,[[["self"]],["useglob"]]],[11,"clone","","",95,[[["self"]],["usegroup"]]],[11,"clone","","",163,[[["self"]],["foreignitem"]]],[11,"clone","","",64,[[["self"]],["foreignitemfn"]]],[11,"clone","","",66,[[["self"]],["foreignitemstatic"]]],[11,"clone","","",67,[[["self"]],["foreignitemtype"]]],[11,"clone","","",65,[[["self"]],["foreignitemmacro"]]],[11,"clone","","",166,[[["self"]],["traititem"]]],[11,"clone","","",90,[[["self"]],["traititemconst"]]],[11,"clone","","",92,[[["self"]],["traititemmethod"]]],[11,"clone","","",93,[[["self"]],["traititemtype"]]],[11,"clone","","",91,[[["self"]],["traititemmacro"]]],[11,"clone","","",164,[[["self"]],["implitem"]]],[11,"clone","","",68,[[["self"]],["implitemconst"]]],[11,"clone","","",70,[[["self"]],["implitemmethod"]]],[11,"clone","","",71,[[["self"]],["implitemtype"]]],[11,"clone","","",69,[[["self"]],["implitemmacro"]]],[11,"clone","","",89,[[["self"]],["signature"]]],[11,"clone","","",162,[[["self"]],["fnarg"]]],[11,"clone","","",88,[[["self"]],["receiver"]]],[11,"clone","","",99,[[["self"]],["file"]]],[11,"clone","","",100,[[["self"]],["lifetime"]]],[11,"clone","","",168,[[["self"]],["lit"]]],[11,"clone","","",284,[[["self"]],["litstr"]]],[11,"clone","","",285,[[["self"]],["litbytestr"]]],[11,"clone","","",286,[[["self"]],["litbyte"]]],[11,"clone","","",287,[[["self"]],["litchar"]]],[11,"clone","","",288,[[["self"]],["litint"]]],[11,"clone","","",289,[[["self"]],["litfloat"]]],[11,"clone","","",101,[[["self"]],["litbool"]]],[11,"clone","","",169,[[["self"]],["strstyle"]]],[11,"clone","","",102,[[["self"]],["macro"]]],[11,"clone","","",170,[[["self"]],["macrodelimiter"]]],[11,"clone","","",106,[[["self"]],["deriveinput"]]],[11,"clone","","",171,[[["self"]],["data"]]],[11,"clone","","",104,[[["self"]],["datastruct"]]],[11,"clone","","",103,[[["self"]],["dataenum"]]],[11,"clone","","",105,[[["self"]],["dataunion"]]],[11,"clone","","",172,[[["self"]],["binop"]]],[11,"clone","","",173,[[["self"]],["unop"]]],[11,"clone","","",107,[[["self"]],["block"]]],[11,"clone","","",174,[[["self"]],["stmt"]]],[11,"clone","","",108,[[["self"]],["local"]]],[11,"clone","","",176,[[["self"]],["type"]]],[11,"clone","","",111,[[["self"]],["typearray"]]],[11,"clone","","",112,[[["self"]],["typebarefn"]]],[11,"clone","","",113,[[["self"]],["typegroup"]]],[11,"clone","","",114,[[["self"]],["typeimpltrait"]]],[11,"clone","","",115,[[["self"]],["typeinfer"]]],[11,"clone","","",116,[[["self"]],["typemacro"]]],[11,"clone","","",117,[[["self"]],["typenever"]]],[11,"clone","","",118,[[["self"]],["typeparen"]]],[11,"clone","","",119,[[["self"]],["typepath"]]],[11,"clone","","",120,[[["self"]],["typeptr"]]],[11,"clone","","",121,[[["self"]],["typereference"]]],[11,"clone","","",122,[[["self"]],["typeslice"]]],[11,"clone","","",123,[[["self"]],["typetraitobject"]]],[11,"clone","","",124,[[["self"]],["typetuple"]]],[11,"clone","","",109,[[["self"]],["abi"]]],[11,"clone","","",110,[[["self"]],["barefnarg"]]],[11,"clone","","",125,[[["self"]],["variadic"]]],[11,"clone","","",175,[[["self"]],["returntype"]]],[11,"clone","","",177,[[["self"]],["pat"]]],[11,"clone","","",127,[[["self"]],["patbox"]]],[11,"clone","","",128,[[["self"]],["patident"]]],[11,"clone","","",129,[[["self"]],["patlit"]]],[11,"clone","","",130,[[["self"]],["patmacro"]]],[11,"clone","","",131,[[["self"]],["pator"]]],[11,"clone","","",132,[[["self"]],["patpath"]]],[11,"clone","","",133,[[["self"]],["patrange"]]],[11,"clone","","",134,[[["self"]],["patreference"]]],[11,"clone","","",135,[[["self"]],["patrest"]]],[11,"clone","","",136,[[["self"]],["patslice"]]],[11,"clone","","",137,[[["self"]],["patstruct"]]],[11,"clone","","",138,[[["self"]],["pattuple"]]],[11,"clone","","",139,[[["self"]],["pattuplestruct"]]],[11,"clone","","",140,[[["self"]],["pattype"]]],[11,"clone","","",141,[[["self"]],["patwild"]]],[11,"clone","","",126,[[["self"]],["fieldpat"]]],[11,"clone","","",146,[[["self"]],["path"]]],[11,"clone","","",147,[[["self"]],["pathsegment"]]],[11,"clone","","",179,[[["self"]],["patharguments"]]],[11,"clone","","",178,[[["self"]],["genericargument"]]],[11,"clone","","",142,[[["self"]],["anglebracketedgenericarguments"]]],[11,"clone","","",143,[[["self"]],["binding"]]],[11,"clone","","",144,[[["self"]],["constraint"]]],[11,"clone","","",145,[[["self"]],["parenthesizedgenericarguments"]]],[11,"clone","","",148,[[["self"]],["qself"]]],[11,"clone","syn::buffer","",291,[[["self"]],["cursor"]]],[11,"clone","syn::punctuated","",294,[[["self"]],["punctuated"]]],[11,"clone","","",307,[[["self"]],["self"]]],[11,"clone","","",309,[[["self"]],["intopairs"]]],[11,"clone","","",310,[[["self"]],["intoiter"]]],[11,"clone","","",311,[[["self"]],["self"]]],[11,"clone","","",293,[[["self"]],["pair"]]],[11,"clone","syn::parse","",301,[[["self"]],["stepcursor"]]],[11,"clone","syn","",303,[[["self"]],["error"]]],[11,"default","syn::token","",180,[[],["self"]]],[11,"default","","",181,[[],["self"]]],[11,"default","","",182,[[],["self"]]],[11,"default","","",183,[[],["self"]]],[11,"default","","",184,[[],["self"]]],[11,"default","","",185,[[],["self"]]],[11,"default","","",186,[[],["self"]]],[11,"default","","",187,[[],["self"]]],[11,"default","","",188,[[],["self"]]],[11,"default","","",189,[[],["self"]]],[11,"default","","",190,[[],["self"]]],[11,"default","","",191,[[],["self"]]],[11,"default","","",192,[[],["self"]]],[11,"default","","",193,[[],["self"]]],[11,"default","","",194,[[],["self"]]],[11,"default","","",195,[[],["self"]]],[11,"default","","",196,[[],["self"]]],[11,"default","","",197,[[],["self"]]],[11,"default","","",198,[[],["self"]]],[11,"default","","",199,[[],["self"]]],[11,"default","","",200,[[],["self"]]],[11,"default","","",201,[[],["self"]]],[11,"default","","",202,[[],["self"]]],[11,"default","","",203,[[],["self"]]],[11,"default","","",204,[[],["self"]]],[11,"default","","",205,[[],["self"]]],[11,"default","","",206,[[],["self"]]],[11,"default","","",207,[[],["self"]]],[11,"default","","",208,[[],["self"]]],[11,"default","","",209,[[],["self"]]],[11,"default","","",210,[[],["self"]]],[11,"default","","",211,[[],["self"]]],[11,"default","","",212,[[],["self"]]],[11,"default","","",213,[[],["self"]]],[11,"default","","",214,[[],["self"]]],[11,"default","","",215,[[],["self"]]],[11,"default","","",216,[[],["self"]]],[11,"default","","",217,[[],["self"]]],[11,"default","","",218,[[],["self"]]],[11,"default","","",219,[[],["self"]]],[11,"default","","",220,[[],["self"]]],[11,"default","","",221,[[],["self"]]],[11,"default","","",222,[[],["self"]]],[11,"default","","",223,[[],["self"]]],[11,"default","","",224,[[],["self"]]],[11,"default","","",225,[[],["self"]]],[11,"default","","",226,[[],["self"]]],[11,"default","","",227,[[],["self"]]],[11,"default","","",228,[[],["self"]]],[11,"default","","",229,[[],["self"]]],[11,"default","","",230,[[],["self"]]],[11,"default","","",231,[[],["self"]]],[11,"default","","",232,[[],["self"]]],[11,"default","","",233,[[],["self"]]],[11,"default","","",234,[[],["self"]]],[11,"default","","",235,[[],["self"]]],[11,"default","","",236,[[],["self"]]],[11,"default","","",237,[[],["self"]]],[11,"default","","",238,[[],["self"]]],[11,"default","","",239,[[],["self"]]],[11,"default","","",240,[[],["self"]]],[11,"default","","",241,[[],["self"]]],[11,"default","","",242,[[],["self"]]],[11,"default","","",243,[[],["self"]]],[11,"default","","",244,[[],["self"]]],[11,"default","","",245,[[],["self"]]],[11,"default","","",246,[[],["self"]]],[11,"default","","",247,[[],["self"]]],[11,"default","","",248,[[],["self"]]],[11,"default","","",249,[[],["self"]]],[11,"default","","",250,[[],["self"]]],[11,"default","","",251,[[],["self"]]],[11,"default","","",252,[[],["self"]]],[11,"default","","",253,[[],["self"]]],[11,"default","","",254,[[],["self"]]],[11,"default","","",255,[[],["self"]]],[11,"default","","",256,[[],["self"]]],[11,"default","","",257,[[],["self"]]],[11,"default","","",258,[[],["self"]]],[11,"default","","",259,[[],["self"]]],[11,"default","","",260,[[],["self"]]],[11,"default","","",261,[[],["self"]]],[11,"default","","",262,[[],["self"]]],[11,"default","","",263,[[],["self"]]],[11,"default","","",264,[[],["self"]]],[11,"default","","",265,[[],["self"]]],[11,"default","","",266,[[],["self"]]],[11,"default","","",267,[[],["self"]]],[11,"default","","",268,[[],["self"]]],[11,"default","","",269,[[],["self"]]],[11,"default","","",270,[[],["self"]]],[11,"default","","",271,[[],["self"]]],[11,"default","","",272,[[],["self"]]],[11,"default","","",273,[[],["self"]]],[11,"default","","",274,[[],["self"]]],[11,"default","","",275,[[],["self"]]],[11,"default","","",276,[[],["self"]]],[11,"default","","",277,[[],["self"]]],[11,"default","","",278,[[],["self"]]],[11,"default","","",279,[[],["self"]]],[11,"default","","",280,[[],["self"]]],[11,"default","","",281,[[],["self"]]],[11,"default","","",282,[[],["self"]]],[11,"default","syn","",56,[[],["generics"]]],[11,"default","","",54,[[],["boundlifetimes"]]],[11,"default","","",179,[[],["self"]]],[11,"default","syn::punctuated","",294,[[],["self"]]],[11,"cmp","syn","",100,[[["lifetime"],["self"]],["ordering"]]],[11,"eq","syn::token","",180,[[["underscore"],["self"]],["bool"]]],[11,"eq","","",181,[[["self"],["abstract"]],["bool"]]],[11,"eq","","",182,[[["self"],["as"]],["bool"]]],[11,"eq","","",183,[[["async"],["self"]],["bool"]]],[11,"eq","","",184,[[["self"],["auto"]],["bool"]]],[11,"eq","","",185,[[["await"],["self"]],["bool"]]],[11,"eq","","",186,[[["become"],["self"]],["bool"]]],[11,"eq","","",187,[[["self"],["box"]],["bool"]]],[11,"eq","","",188,[[["self"],["break"]],["bool"]]],[11,"eq","","",189,[[["const"],["self"]],["bool"]]],[11,"eq","","",190,[[["continue"],["self"]],["bool"]]],[11,"eq","","",191,[[["crate"],["self"]],["bool"]]],[11,"eq","","",192,[[["self"],["default"]],["bool"]]],[11,"eq","","",193,[[["self"],["do"]],["bool"]]],[11,"eq","","",194,[[["self"],["dyn"]],["bool"]]],[11,"eq","","",195,[[["else"],["self"]],["bool"]]],[11,"eq","","",196,[[["self"],["enum"]],["bool"]]],[11,"eq","","",197,[[["extern"],["self"]],["bool"]]],[11,"eq","","",198,[[["self"],["final"]],["bool"]]],[11,"eq","","",199,[[["fn"],["self"]],["bool"]]],[11,"eq","","",200,[[["for"],["self"]],["bool"]]],[11,"eq","","",201,[[["self"],["if"]],["bool"]]],[11,"eq","","",202,[[["self"],["impl"]],["bool"]]],[11,"eq","","",203,[[["self"],["in"]],["bool"]]],[11,"eq","","",204,[[["let"],["self"]],["bool"]]],[11,"eq","","",205,[[["self"],["loop"]],["bool"]]],[11,"eq","","",206,[[["self"],["macro"]],["bool"]]],[11,"eq","","",207,[[["self"],["match"]],["bool"]]],[11,"eq","","",208,[[["self"],["mod"]],["bool"]]],[11,"eq","","",209,[[["move"],["self"]],["bool"]]],[11,"eq","","",210,[[["self"],["mut"]],["bool"]]],[11,"eq","","",211,[[["self"],["override"]],["bool"]]],[11,"eq","","",212,[[["self"],["priv"]],["bool"]]],[11,"eq","","",213,[[["pub"],["self"]],["bool"]]],[11,"eq","","",214,[[["ref"],["self"]],["bool"]]],[11,"eq","","",215,[[["return"],["self"]],["bool"]]],[11,"eq","","",216,[[["self"],["selftype"]],["bool"]]],[11,"eq","","",217,[[["self"],["selfvalue"]],["bool"]]],[11,"eq","","",218,[[["self"],["static"]],["bool"]]],[11,"eq","","",219,[[["self"],["struct"]],["bool"]]],[11,"eq","","",220,[[["self"],["super"]],["bool"]]],[11,"eq","","",221,[[["self"],["trait"]],["bool"]]],[11,"eq","","",222,[[["self"],["try"]],["bool"]]],[11,"eq","","",223,[[["type"],["self"]],["bool"]]],[11,"eq","","",224,[[["typeof"],["self"]],["bool"]]],[11,"eq","","",225,[[["union"],["self"]],["bool"]]],[11,"eq","","",226,[[["unsafe"],["self"]],["bool"]]],[11,"eq","","",227,[[["self"],["unsized"]],["bool"]]],[11,"eq","","",228,[[["use"],["self"]],["bool"]]],[11,"eq","","",229,[[["self"],["virtual"]],["bool"]]],[11,"eq","","",230,[[["self"],["where"]],["bool"]]],[11,"eq","","",231,[[["self"],["while"]],["bool"]]],[11,"eq","","",232,[[["self"],["yield"]],["bool"]]],[11,"eq","","",233,[[["add"],["self"]],["bool"]]],[11,"eq","","",234,[[["self"],["addeq"]],["bool"]]],[11,"eq","","",235,[[["self"],["and"]],["bool"]]],[11,"eq","","",236,[[["self"],["andand"]],["bool"]]],[11,"eq","","",237,[[["self"],["andeq"]],["bool"]]],[11,"eq","","",238,[[["at"],["self"]],["bool"]]],[11,"eq","","",239,[[["self"],["bang"]],["bool"]]],[11,"eq","","",240,[[["self"],["caret"]],["bool"]]],[11,"eq","","",241,[[["careteq"],["self"]],["bool"]]],[11,"eq","","",242,[[["colon"],["self"]],["bool"]]],[11,"eq","","",243,[[["self"],["colon2"]],["bool"]]],[11,"eq","","",244,[[["self"],["comma"]],["bool"]]],[11,"eq","","",245,[[["self"],["div"]],["bool"]]],[11,"eq","","",246,[[["self"],["diveq"]],["bool"]]],[11,"eq","","",247,[[["self"],["dollar"]],["bool"]]],[11,"eq","","",248,[[["dot"],["self"]],["bool"]]],[11,"eq","","",249,[[["self"],["dot2"]],["bool"]]],[11,"eq","","",250,[[["dot3"],["self"]],["bool"]]],[11,"eq","","",251,[[["self"],["dotdoteq"]],["bool"]]],[11,"eq","","",252,[[["eq"],["self"]],["bool"]]],[11,"eq","","",253,[[["eqeq"],["self"]],["bool"]]],[11,"eq","","",254,[[["self"],["ge"]],["bool"]]],[11,"eq","","",255,[[["gt"],["self"]],["bool"]]],[11,"eq","","",256,[[["self"],["le"]],["bool"]]],[11,"eq","","",257,[[["lt"],["self"]],["bool"]]],[11,"eq","","",258,[[["muleq"],["self"]],["bool"]]],[11,"eq","","",259,[[["ne"],["self"]],["bool"]]],[11,"eq","","",260,[[["self"],["or"]],["bool"]]],[11,"eq","","",261,[[["self"],["oreq"]],["bool"]]],[11,"eq","","",262,[[["oror"],["self"]],["bool"]]],[11,"eq","","",263,[[["self"],["pound"]],["bool"]]],[11,"eq","","",264,[[["self"],["question"]],["bool"]]],[11,"eq","","",265,[[["self"],["rarrow"]],["bool"]]],[11,"eq","","",266,[[["larrow"],["self"]],["bool"]]],[11,"eq","","",267,[[["rem"],["self"]],["bool"]]],[11,"eq","","",268,[[["remeq"],["self"]],["bool"]]],[11,"eq","","",269,[[["self"],["fatarrow"]],["bool"]]],[11,"eq","","",270,[[["self"],["semi"]],["bool"]]],[11,"eq","","",271,[[["shl"],["self"]],["bool"]]],[11,"eq","","",272,[[["self"],["shleq"]],["bool"]]],[11,"eq","","",273,[[["self"],["shr"]],["bool"]]],[11,"eq","","",274,[[["shreq"],["self"]],["bool"]]],[11,"eq","","",275,[[["star"],["self"]],["bool"]]],[11,"eq","","",276,[[["self"],["sub"]],["bool"]]],[11,"eq","","",277,[[["self"],["subeq"]],["bool"]]],[11,"eq","","",278,[[["tilde"],["self"]],["bool"]]],[11,"eq","","",279,[[["self"],["brace"]],["bool"]]],[11,"eq","","",280,[[["bracket"],["self"]],["bool"]]],[11,"eq","","",281,[[["self"],["paren"]],["bool"]]],[11,"eq","","",282,[[["group"],["self"]],["bool"]]],[11,"eq","syn","",0,[[["self"]],["bool"]]],[11,"eq","","",149,[[["attrstyle"],["self"]],["bool"]]],[11,"ne","","",149,[[["attrstyle"],["self"]],["bool"]]],[11,"eq","","",150,[[["self"],["meta"]],["bool"]]],[11,"ne","","",150,[[["self"],["meta"]],["bool"]]],[11,"eq","","",1,[[["self"],["metalist"]],["bool"]]],[11,"ne","","",1,[[["self"],["metalist"]],["bool"]]],[11,"eq","","",2,[[["metanamevalue"],["self"]],["bool"]]],[11,"ne","","",2,[[["metanamevalue"],["self"]],["bool"]]],[11,"eq","","",151,[[["nestedmeta"],["self"]],["bool"]]],[11,"ne","","",151,[[["nestedmeta"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["variant"]],["bool"]]],[11,"ne","","",6,[[["self"],["variant"]],["bool"]]],[11,"eq","","",152,[[["fields"],["self"]],["bool"]]],[11,"ne","","",152,[[["fields"],["self"]],["bool"]]],[11,"eq","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"ne","","",4,[[["self"],["fieldsnamed"]],["bool"]]],[11,"eq","","",5,[[["fieldsunnamed"],["self"]],["bool"]]],[11,"ne","","",5,[[["fieldsunnamed"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["field"]],["bool"]]],[11,"ne","","",3,[[["self"],["field"]],["bool"]]],[11,"eq","","",153,[[["visibility"],["self"]],["bool"]]],[11,"ne","","",153,[[["visibility"],["self"]],["bool"]]],[11,"eq","","",8,[[["vispublic"],["self"]],["bool"]]],[11,"ne","","",8,[[["vispublic"],["self"]],["bool"]]],[11,"eq","","",7,[[["viscrate"],["self"]],["bool"]]],[11,"ne","","",7,[[["viscrate"],["self"]],["bool"]]],[11,"eq","","",9,[[["visrestricted"],["self"]],["bool"]]],[11,"ne","","",9,[[["visrestricted"],["self"]],["bool"]]],[11,"eq","","",14,[[["self"],["exprarray"]],["bool"]]],[11,"ne","","",14,[[["self"],["exprarray"]],["bool"]]],[11,"eq","","",15,[[["self"],["exprassign"]],["bool"]]],[11,"ne","","",15,[[["self"],["exprassign"]],["bool"]]],[11,"eq","","",16,[[["exprassignop"],["self"]],["bool"]]],[11,"ne","","",16,[[["exprassignop"],["self"]],["bool"]]],[11,"eq","","",17,[[["exprasync"],["self"]],["bool"]]],[11,"ne","","",17,[[["exprasync"],["self"]],["bool"]]],[11,"eq","","",18,[[["exprawait"],["self"]],["bool"]]],[11,"ne","","",18,[[["exprawait"],["self"]],["bool"]]],[11,"eq","","",19,[[["self"],["exprbinary"]],["bool"]]],[11,"ne","","",19,[[["self"],["exprbinary"]],["bool"]]],[11,"eq","","",20,[[["exprblock"],["self"]],["bool"]]],[11,"ne","","",20,[[["exprblock"],["self"]],["bool"]]],[11,"eq","","",21,[[["exprbox"],["self"]],["bool"]]],[11,"ne","","",21,[[["exprbox"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["exprbreak"]],["bool"]]],[11,"ne","","",22,[[["self"],["exprbreak"]],["bool"]]],[11,"eq","","",23,[[["exprcall"],["self"]],["bool"]]],[11,"ne","","",23,[[["exprcall"],["self"]],["bool"]]],[11,"eq","","",24,[[["exprcast"],["self"]],["bool"]]],[11,"ne","","",24,[[["exprcast"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["exprclosure"]],["bool"]]],[11,"ne","","",25,[[["self"],["exprclosure"]],["bool"]]],[11,"eq","","",26,[[["exprcontinue"],["self"]],["bool"]]],[11,"ne","","",26,[[["exprcontinue"],["self"]],["bool"]]],[11,"eq","","",27,[[["exprfield"],["self"]],["bool"]]],[11,"ne","","",27,[[["exprfield"],["self"]],["bool"]]],[11,"eq","","",28,[[["self"],["exprforloop"]],["bool"]]],[11,"ne","","",28,[[["self"],["exprforloop"]],["bool"]]],[11,"eq","","",29,[[["exprgroup"],["self"]],["bool"]]],[11,"ne","","",29,[[["exprgroup"],["self"]],["bool"]]],[11,"eq","","",30,[[["exprif"],["self"]],["bool"]]],[11,"ne","","",30,[[["exprif"],["self"]],["bool"]]],[11,"eq","","",31,[[["self"],["exprindex"]],["bool"]]],[11,"ne","","",31,[[["self"],["exprindex"]],["bool"]]],[11,"eq","","",32,[[["self"],["exprlet"]],["bool"]]],[11,"ne","","",32,[[["self"],["exprlet"]],["bool"]]],[11,"eq","","",33,[[["exprlit"],["self"]],["bool"]]],[11,"ne","","",33,[[["exprlit"],["self"]],["bool"]]],[11,"eq","","",34,[[["self"],["exprloop"]],["bool"]]],[11,"ne","","",34,[[["self"],["exprloop"]],["bool"]]],[11,"eq","","",35,[[["self"],["exprmacro"]],["bool"]]],[11,"ne","","",35,[[["self"],["exprmacro"]],["bool"]]],[11,"eq","","",36,[[["exprmatch"],["self"]],["bool"]]],[11,"ne","","",36,[[["exprmatch"],["self"]],["bool"]]],[11,"eq","","",37,[[["exprmethodcall"],["self"]],["bool"]]],[11,"ne","","",37,[[["exprmethodcall"],["self"]],["bool"]]],[11,"eq","","",38,[[["self"],["exprparen"]],["bool"]]],[11,"ne","","",38,[[["self"],["exprparen"]],["bool"]]],[11,"eq","","",39,[[["exprpath"],["self"]],["bool"]]],[11,"ne","","",39,[[["exprpath"],["self"]],["bool"]]],[11,"eq","","",40,[[["exprrange"],["self"]],["bool"]]],[11,"ne","","",40,[[["exprrange"],["self"]],["bool"]]],[11,"eq","","",41,[[["exprreference"],["self"]],["bool"]]],[11,"ne","","",41,[[["exprreference"],["self"]],["bool"]]],[11,"eq","","",42,[[["exprrepeat"],["self"]],["bool"]]],[11,"ne","","",42,[[["exprrepeat"],["self"]],["bool"]]],[11,"eq","","",43,[[["exprreturn"],["self"]],["bool"]]],[11,"ne","","",43,[[["exprreturn"],["self"]],["bool"]]],[11,"eq","","",44,[[["exprstruct"],["self"]],["bool"]]],[11,"ne","","",44,[[["exprstruct"],["self"]],["bool"]]],[11,"eq","","",45,[[["exprtry"],["self"]],["bool"]]],[11,"ne","","",45,[[["exprtry"],["self"]],["bool"]]],[11,"eq","","",46,[[["exprtryblock"],["self"]],["bool"]]],[11,"ne","","",46,[[["exprtryblock"],["self"]],["bool"]]],[11,"eq","","",47,[[["self"],["exprtuple"]],["bool"]]],[11,"ne","","",47,[[["self"],["exprtuple"]],["bool"]]],[11,"eq","","",48,[[["exprtype"],["self"]],["bool"]]],[11,"ne","","",48,[[["exprtype"],["self"]],["bool"]]],[11,"eq","","",49,[[["self"],["exprunary"]],["bool"]]],[11,"ne","","",49,[[["self"],["exprunary"]],["bool"]]],[11,"eq","","",50,[[["self"],["exprunsafe"]],["bool"]]],[11,"ne","","",50,[[["self"],["exprunsafe"]],["bool"]]],[11,"eq","","",51,[[["exprwhile"],["self"]],["bool"]]],[11,"ne","","",51,[[["exprwhile"],["self"]],["bool"]]],[11,"eq","","",52,[[["expryield"],["self"]],["bool"]]],[11,"ne","","",52,[[["expryield"],["self"]],["bool"]]],[11,"eq","","",156,[[["self"]],["bool"]]],[11,"eq","","",157,[[["member"],["self"]],["bool"]]],[11,"ne","","",157,[[["member"],["self"]],["bool"]]],[11,"eq","","",53,[[["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["methodturbofish"]],["bool"]]],[11,"ne","","",13,[[["self"],["methodturbofish"]],["bool"]]],[11,"eq","","",154,[[["genericmethodargument"],["self"]],["bool"]]],[11,"ne","","",154,[[["genericmethodargument"],["self"]],["bool"]]],[11,"eq","","",11,[[["fieldvalue"],["self"]],["bool"]]],[11,"ne","","",11,[[["fieldvalue"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["label"]],["bool"]]],[11,"ne","","",12,[[["self"],["label"]],["bool"]]],[11,"eq","","",10,[[["self"],["arm"]],["bool"]]],[11,"ne","","",10,[[["self"],["arm"]],["bool"]]],[11,"eq","","",155,[[["rangelimits"],["self"]],["bool"]]],[11,"ne","","",155,[[["rangelimits"],["self"]],["bool"]]],[11,"eq","","",56,[[["self"],["generics"]],["bool"]]],[11,"ne","","",56,[[["self"],["generics"]],["bool"]]],[11,"eq","","",158,[[["genericparam"],["self"]],["bool"]]],[11,"ne","","",158,[[["genericparam"],["self"]],["bool"]]],[11,"eq","","",62,[[["self"],["typeparam"]],["bool"]]],[11,"ne","","",62,[[["self"],["typeparam"]],["bool"]]],[11,"eq","","",57,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",57,[[["self"],["lifetimedef"]],["bool"]]],[11,"eq","","",55,[[["self"],["constparam"]],["bool"]]],[11,"ne","","",55,[[["self"],["constparam"]],["bool"]]],[11,"eq","","",305,[[["self"],["implgenerics"]],["bool"]]],[11,"ne","","",305,[[["self"],["implgenerics"]],["bool"]]],[11,"eq","","",283,[[["typegenerics"],["self"]],["bool"]]],[11,"ne","","",283,[[["typegenerics"],["self"]],["bool"]]],[11,"eq","","",306,[[["self"],["turbofish"]],["bool"]]],[11,"ne","","",306,[[["self"],["turbofish"]],["bool"]]],[11,"eq","","",54,[[["boundlifetimes"],["self"]],["bool"]]],[11,"ne","","",54,[[["boundlifetimes"],["self"]],["bool"]]],[11,"eq","","",160,[[["self"],["typeparambound"]],["bool"]]],[11,"ne","","",160,[[["self"],["typeparambound"]],["bool"]]],[11,"eq","","",61,[[["traitbound"],["self"]],["bool"]]],[11,"ne","","",61,[[["traitbound"],["self"]],["bool"]]],[11,"eq","","",159,[[["traitboundmodifier"],["self"]],["bool"]]],[11,"ne","","",159,[[["traitboundmodifier"],["self"]],["bool"]]],[11,"eq","","",63,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",63,[[["self"],["whereclause"]],["bool"]]],[11,"eq","","",161,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",161,[[["self"],["wherepredicate"]],["bool"]]],[11,"eq","","",60,[[["self"],["predicatetype"]],["bool"]]],[11,"ne","","",60,[[["self"],["predicatetype"]],["bool"]]],[11,"eq","","",59,[[["self"],["predicatelifetime"]],["bool"]]],[11,"ne","","",59,[[["self"],["predicatelifetime"]],["bool"]]],[11,"eq","","",58,[[["predicateeq"],["self"]],["bool"]]],[11,"ne","","",58,[[["predicateeq"],["self"]],["bool"]]],[11,"eq","","",72,[[["self"],["itemconst"]],["bool"]]],[11,"ne","","",72,[[["self"],["itemconst"]],["bool"]]],[11,"eq","","",73,[[["self"],["itemenum"]],["bool"]]],[11,"ne","","",73,[[["self"],["itemenum"]],["bool"]]],[11,"eq","","",74,[[["self"],["itemexterncrate"]],["bool"]]],[11,"ne","","",74,[[["self"],["itemexterncrate"]],["bool"]]],[11,"eq","","",75,[[["self"],["itemfn"]],["bool"]]],[11,"ne","","",75,[[["self"],["itemfn"]],["bool"]]],[11,"eq","","",76,[[["self"],["itemforeignmod"]],["bool"]]],[11,"ne","","",76,[[["self"],["itemforeignmod"]],["bool"]]],[11,"eq","","",77,[[["itemimpl"],["self"]],["bool"]]],[11,"ne","","",77,[[["itemimpl"],["self"]],["bool"]]],[11,"eq","","",78,[[["self"],["itemmacro"]],["bool"]]],[11,"ne","","",78,[[["self"],["itemmacro"]],["bool"]]],[11,"eq","","",80,[[["itemmod"],["self"]],["bool"]]],[11,"ne","","",80,[[["itemmod"],["self"]],["bool"]]],[11,"eq","","",81,[[["itemstatic"],["self"]],["bool"]]],[11,"ne","","",81,[[["itemstatic"],["self"]],["bool"]]],[11,"eq","","",82,[[["self"],["itemstruct"]],["bool"]]],[11,"ne","","",82,[[["self"],["itemstruct"]],["bool"]]],[11,"eq","","",83,[[["self"],["itemtrait"]],["bool"]]],[11,"ne","","",83,[[["self"],["itemtrait"]],["bool"]]],[11,"eq","","",84,[[["self"],["itemtraitalias"]],["bool"]]],[11,"ne","","",84,[[["self"],["itemtraitalias"]],["bool"]]],[11,"eq","","",85,[[["itemtype"],["self"]],["bool"]]],[11,"ne","","",85,[[["itemtype"],["self"]],["bool"]]],[11,"eq","","",86,[[["itemunion"],["self"]],["bool"]]],[11,"ne","","",86,[[["itemunion"],["self"]],["bool"]]],[11,"eq","","",87,[[["self"],["itemuse"]],["bool"]]],[11,"ne","","",87,[[["self"],["itemuse"]],["bool"]]],[11,"eq","","",165,[[["self"]],["bool"]]],[11,"eq","","",79,[[["self"]],["bool"]]],[11,"eq","","",167,[[["usetree"],["self"]],["bool"]]],[11,"ne","","",167,[[["usetree"],["self"]],["bool"]]],[11,"eq","","",97,[[["usepath"],["self"]],["bool"]]],[11,"ne","","",97,[[["usepath"],["self"]],["bool"]]],[11,"eq","","",96,[[["self"],["usename"]],["bool"]]],[11,"ne","","",96,[[["self"],["usename"]],["bool"]]],[11,"eq","","",98,[[["userename"],["self"]],["bool"]]],[11,"ne","","",98,[[["userename"],["self"]],["bool"]]],[11,"eq","","",94,[[["useglob"],["self"]],["bool"]]],[11,"ne","","",94,[[["useglob"],["self"]],["bool"]]],[11,"eq","","",95,[[["usegroup"],["self"]],["bool"]]],[11,"ne","","",95,[[["usegroup"],["self"]],["bool"]]],[11,"eq","","",64,[[["self"],["foreignitemfn"]],["bool"]]],[11,"ne","","",64,[[["self"],["foreignitemfn"]],["bool"]]],[11,"eq","","",66,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"ne","","",66,[[["self"],["foreignitemstatic"]],["bool"]]],[11,"eq","","",67,[[["foreignitemtype"],["self"]],["bool"]]],[11,"ne","","",67,[[["foreignitemtype"],["self"]],["bool"]]],[11,"eq","","",65,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"ne","","",65,[[["self"],["foreignitemmacro"]],["bool"]]],[11,"eq","","",163,[[["self"]],["bool"]]],[11,"eq","","",90,[[["self"],["traititemconst"]],["bool"]]],[11,"ne","","",90,[[["self"],["traititemconst"]],["bool"]]],[11,"eq","","",92,[[["self"],["traititemmethod"]],["bool"]]],[11,"ne","","",92,[[["self"],["traititemmethod"]],["bool"]]],[11,"eq","","",93,[[["traititemtype"],["self"]],["bool"]]],[11,"ne","","",93,[[["traititemtype"],["self"]],["bool"]]],[11,"eq","","",91,[[["traititemmacro"],["self"]],["bool"]]],[11,"ne","","",91,[[["traititemmacro"],["self"]],["bool"]]],[11,"eq","","",166,[[["self"]],["bool"]]],[11,"eq","","",68,[[["self"],["implitemconst"]],["bool"]]],[11,"ne","","",68,[[["self"],["implitemconst"]],["bool"]]],[11,"eq","","",70,[[["implitemmethod"],["self"]],["bool"]]],[11,"ne","","",70,[[["implitemmethod"],["self"]],["bool"]]],[11,"eq","","",71,[[["self"],["implitemtype"]],["bool"]]],[11,"ne","","",71,[[["self"],["implitemtype"]],["bool"]]],[11,"eq","","",69,[[["implitemmacro"],["self"]],["bool"]]],[11,"ne","","",69,[[["implitemmacro"],["self"]],["bool"]]],[11,"eq","","",164,[[["self"]],["bool"]]],[11,"eq","","",89,[[["signature"],["self"]],["bool"]]],[11,"ne","","",89,[[["signature"],["self"]],["bool"]]],[11,"eq","","",162,[[["fnarg"],["self"]],["bool"]]],[11,"ne","","",162,[[["fnarg"],["self"]],["bool"]]],[11,"eq","","",88,[[["self"],["receiver"]],["bool"]]],[11,"ne","","",88,[[["self"],["receiver"]],["bool"]]],[11,"eq","","",99,[[["self"],["file"]],["bool"]]],[11,"ne","","",99,[[["self"],["file"]],["bool"]]],[11,"eq","","",100,[[["lifetime"],["self"]],["bool"]]],[11,"eq","","",168,[[["self"]],["bool"]]],[11,"eq","","",284,[[["self"]],["bool"]]],[11,"eq","","",285,[[["self"]],["bool"]]],[11,"eq","","",286,[[["self"]],["bool"]]],[11,"eq","","",287,[[["self"]],["bool"]]],[11,"eq","","",288,[[["self"]],["bool"]]],[11,"eq","","",289,[[["self"]],["bool"]]],[11,"eq","","",101,[[["self"]],["bool"]]],[11,"eq","","",169,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",169,[[["self"],["strstyle"]],["bool"]]],[11,"eq","","",170,[[["macrodelimiter"],["self"]],["bool"]]],[11,"ne","","",170,[[["macrodelimiter"],["self"]],["bool"]]],[11,"eq","","",102,[[["self"]],["bool"]]],[11,"eq","","",106,[[["deriveinput"],["self"]],["bool"]]],[11,"ne","","",106,[[["deriveinput"],["self"]],["bool"]]],[11,"eq","","",171,[[["self"],["data"]],["bool"]]],[11,"ne","","",171,[[["self"],["data"]],["bool"]]],[11,"eq","","",104,[[["datastruct"],["self"]],["bool"]]],[11,"ne","","",104,[[["datastruct"],["self"]],["bool"]]],[11,"eq","","",103,[[["dataenum"],["self"]],["bool"]]],[11,"ne","","",103,[[["dataenum"],["self"]],["bool"]]],[11,"eq","","",105,[[["self"],["dataunion"]],["bool"]]],[11,"ne","","",105,[[["self"],["dataunion"]],["bool"]]],[11,"eq","","",172,[[["binop"],["self"]],["bool"]]],[11,"ne","","",172,[[["binop"],["self"]],["bool"]]],[11,"eq","","",173,[[["self"],["unop"]],["bool"]]],[11,"ne","","",173,[[["self"],["unop"]],["bool"]]],[11,"eq","","",107,[[["block"],["self"]],["bool"]]],[11,"ne","","",107,[[["block"],["self"]],["bool"]]],[11,"eq","","",174,[[["self"],["stmt"]],["bool"]]],[11,"ne","","",174,[[["self"],["stmt"]],["bool"]]],[11,"eq","","",108,[[["self"],["local"]],["bool"]]],[11,"ne","","",108,[[["self"],["local"]],["bool"]]],[11,"eq","","",111,[[["self"],["typearray"]],["bool"]]],[11,"ne","","",111,[[["self"],["typearray"]],["bool"]]],[11,"eq","","",112,[[["typebarefn"],["self"]],["bool"]]],[11,"ne","","",112,[[["typebarefn"],["self"]],["bool"]]],[11,"eq","","",113,[[["self"],["typegroup"]],["bool"]]],[11,"ne","","",113,[[["self"],["typegroup"]],["bool"]]],[11,"eq","","",114,[[["self"],["typeimpltrait"]],["bool"]]],[11,"ne","","",114,[[["self"],["typeimpltrait"]],["bool"]]],[11,"eq","","",115,[[["typeinfer"],["self"]],["bool"]]],[11,"ne","","",115,[[["typeinfer"],["self"]],["bool"]]],[11,"eq","","",116,[[["self"],["typemacro"]],["bool"]]],[11,"ne","","",116,[[["self"],["typemacro"]],["bool"]]],[11,"eq","","",117,[[["typenever"],["self"]],["bool"]]],[11,"ne","","",117,[[["typenever"],["self"]],["bool"]]],[11,"eq","","",118,[[["typeparen"],["self"]],["bool"]]],[11,"ne","","",118,[[["typeparen"],["self"]],["bool"]]],[11,"eq","","",119,[[["self"],["typepath"]],["bool"]]],[11,"ne","","",119,[[["self"],["typepath"]],["bool"]]],[11,"eq","","",120,[[["self"],["typeptr"]],["bool"]]],[11,"ne","","",120,[[["self"],["typeptr"]],["bool"]]],[11,"eq","","",121,[[["typereference"],["self"]],["bool"]]],[11,"ne","","",121,[[["typereference"],["self"]],["bool"]]],[11,"eq","","",122,[[["self"],["typeslice"]],["bool"]]],[11,"ne","","",122,[[["self"],["typeslice"]],["bool"]]],[11,"eq","","",123,[[["typetraitobject"],["self"]],["bool"]]],[11,"ne","","",123,[[["typetraitobject"],["self"]],["bool"]]],[11,"eq","","",124,[[["typetuple"],["self"]],["bool"]]],[11,"ne","","",124,[[["typetuple"],["self"]],["bool"]]],[11,"eq","","",176,[[["self"]],["bool"]]],[11,"eq","","",109,[[["abi"],["self"]],["bool"]]],[11,"ne","","",109,[[["abi"],["self"]],["bool"]]],[11,"eq","","",110,[[["barefnarg"],["self"]],["bool"]]],[11,"ne","","",110,[[["barefnarg"],["self"]],["bool"]]],[11,"eq","","",125,[[["variadic"],["self"]],["bool"]]],[11,"ne","","",125,[[["variadic"],["self"]],["bool"]]],[11,"eq","","",175,[[["returntype"],["self"]],["bool"]]],[11,"ne","","",175,[[["returntype"],["self"]],["bool"]]],[11,"eq","","",127,[[["self"],["patbox"]],["bool"]]],[11,"ne","","",127,[[["self"],["patbox"]],["bool"]]],[11,"eq","","",128,[[["self"],["patident"]],["bool"]]],[11,"ne","","",128,[[["self"],["patident"]],["bool"]]],[11,"eq","","",129,[[["patlit"],["self"]],["bool"]]],[11,"ne","","",129,[[["patlit"],["self"]],["bool"]]],[11,"eq","","",130,[[["patmacro"],["self"]],["bool"]]],[11,"ne","","",130,[[["patmacro"],["self"]],["bool"]]],[11,"eq","","",131,[[["pator"],["self"]],["bool"]]],[11,"ne","","",131,[[["pator"],["self"]],["bool"]]],[11,"eq","","",132,[[["patpath"],["self"]],["bool"]]],[11,"ne","","",132,[[["patpath"],["self"]],["bool"]]],[11,"eq","","",133,[[["patrange"],["self"]],["bool"]]],[11,"ne","","",133,[[["patrange"],["self"]],["bool"]]],[11,"eq","","",134,[[["self"],["patreference"]],["bool"]]],[11,"ne","","",134,[[["self"],["patreference"]],["bool"]]],[11,"eq","","",135,[[["patrest"],["self"]],["bool"]]],[11,"ne","","",135,[[["patrest"],["self"]],["bool"]]],[11,"eq","","",136,[[["self"],["patslice"]],["bool"]]],[11,"ne","","",136,[[["self"],["patslice"]],["bool"]]],[11,"eq","","",137,[[["self"],["patstruct"]],["bool"]]],[11,"ne","","",137,[[["self"],["patstruct"]],["bool"]]],[11,"eq","","",138,[[["pattuple"],["self"]],["bool"]]],[11,"ne","","",138,[[["pattuple"],["self"]],["bool"]]],[11,"eq","","",139,[[["self"],["pattuplestruct"]],["bool"]]],[11,"ne","","",139,[[["self"],["pattuplestruct"]],["bool"]]],[11,"eq","","",140,[[["pattype"],["self"]],["bool"]]],[11,"ne","","",140,[[["pattype"],["self"]],["bool"]]],[11,"eq","","",141,[[["patwild"],["self"]],["bool"]]],[11,"ne","","",141,[[["patwild"],["self"]],["bool"]]],[11,"eq","","",126,[[["fieldpat"],["self"]],["bool"]]],[11,"ne","","",126,[[["fieldpat"],["self"]],["bool"]]],[11,"eq","","",177,[[["self"]],["bool"]]],[11,"eq","","",146,[[["path"],["self"]],["bool"]]],[11,"ne","","",146,[[["path"],["self"]],["bool"]]],[11,"eq","","",147,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",147,[[["self"],["pathsegment"]],["bool"]]],[11,"eq","","",179,[[["patharguments"],["self"]],["bool"]]],[11,"ne","","",179,[[["patharguments"],["self"]],["bool"]]],[11,"eq","","",178,[[["genericargument"],["self"]],["bool"]]],[11,"ne","","",178,[[["genericargument"],["self"]],["bool"]]],[11,"eq","","",142,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"ne","","",142,[[["self"],["anglebracketedgenericarguments"]],["bool"]]],[11,"eq","","",143,[[["self"],["binding"]],["bool"]]],[11,"ne","","",143,[[["self"],["binding"]],["bool"]]],[11,"eq","","",144,[[["self"],["constraint"]],["bool"]]],[11,"ne","","",144,[[["self"],["constraint"]],["bool"]]],[11,"eq","","",145,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"ne","","",145,[[["self"],["parenthesizedgenericarguments"]],["bool"]]],[11,"eq","","",148,[[["self"],["qself"]],["bool"]]],[11,"ne","","",148,[[["self"],["qself"]],["bool"]]],[11,"eq","syn::buffer","",291,[[["self"],["cursor"]],["bool"]]],[11,"ne","","",291,[[["self"],["cursor"]],["bool"]]],[11,"eq","syn::punctuated","",294,[[["self"],["punctuated"]],["bool"]]],[11,"ne","","",294,[[["self"],["punctuated"]],["bool"]]],[11,"partial_cmp","syn","",100,[[["lifetime"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"deref","syn::token","",180,[[["self"]]]],[11,"deref","","",233,[[["self"]]]],[11,"deref","","",235,[[["self"]]]],[11,"deref","","",238,[[["self"]]]],[11,"deref","","",239,[[["self"]]]],[11,"deref","","",240,[[["self"]]]],[11,"deref","","",242,[[["self"]]]],[11,"deref","","",244,[[["self"]]]],[11,"deref","","",245,[[["self"]]]],[11,"deref","","",247,[[["self"]]]],[11,"deref","","",248,[[["self"]]]],[11,"deref","","",252,[[["self"]]]],[11,"deref","","",255,[[["self"]]]],[11,"deref","","",257,[[["self"]]]],[11,"deref","","",260,[[["self"]]]],[11,"deref","","",263,[[["self"]]]],[11,"deref","","",264,[[["self"]]]],[11,"deref","","",267,[[["self"]]]],[11,"deref","","",270,[[["self"]]]],[11,"deref","","",275,[[["self"]]]],[11,"deref","","",276,[[["self"]]]],[11,"deref","","",278,[[["self"]]]],[11,"deref","syn::parse","",301,[[["self"]]]],[11,"deref_mut","syn::token","",180,[[["self"]]]],[11,"deref_mut","","",233,[[["self"]]]],[11,"deref_mut","","",235,[[["self"]]]],[11,"deref_mut","","",238,[[["self"]]]],[11,"deref_mut","","",239,[[["self"]]]],[11,"deref_mut","","",240,[[["self"]]]],[11,"deref_mut","","",242,[[["self"]]]],[11,"deref_mut","","",244,[[["self"]]]],[11,"deref_mut","","",245,[[["self"]]]],[11,"deref_mut","","",247,[[["self"]]]],[11,"deref_mut","","",248,[[["self"]]]],[11,"deref_mut","","",252,[[["self"]]]],[11,"deref_mut","","",255,[[["self"]]]],[11,"deref_mut","","",257,[[["self"]]]],[11,"deref_mut","","",260,[[["self"]]]],[11,"deref_mut","","",263,[[["self"]]]],[11,"deref_mut","","",264,[[["self"]]]],[11,"deref_mut","","",267,[[["self"]]]],[11,"deref_mut","","",270,[[["self"]]]],[11,"deref_mut","","",275,[[["self"]]]],[11,"deref_mut","","",276,[[["self"]]]],[11,"deref_mut","","",278,[[["self"]]]],[11,"fmt","","",180,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",183,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",184,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",185,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",187,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",189,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",190,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",191,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",192,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",193,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",194,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",196,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",197,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",198,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",199,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",200,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",202,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",204,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",205,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",206,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",207,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",209,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",211,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",212,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",213,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",214,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",215,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",216,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",217,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",218,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",220,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",221,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",223,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",224,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",225,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",226,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",227,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",228,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",229,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",230,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",231,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",232,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",233,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",234,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",235,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",236,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",238,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",240,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",242,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",243,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",244,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",245,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",246,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",247,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",248,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",249,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",251,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",252,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",253,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",254,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",256,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",257,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",258,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",259,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",260,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",261,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",262,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",263,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",264,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",265,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",266,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",267,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",268,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",269,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",270,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",271,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",272,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",273,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",274,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",275,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",276,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",277,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",278,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",279,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",280,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",281,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",282,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",149,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",150,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",151,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",152,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",153,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",156,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",157,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",154,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",155,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",158,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",305,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",283,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",306,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",160,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",159,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",63,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",161,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",165,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",83,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",85,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",87,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",167,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",97,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",96,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",98,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",94,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",95,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",163,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",166,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",90,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",92,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",93,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",91,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",164,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",89,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",162,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",168,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",284,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",285,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",286,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",287,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",169,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",102,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",170,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",106,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",171,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",104,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",103,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",105,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",172,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",173,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",107,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",174,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",108,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",176,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",112,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",113,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",114,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",115,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",116,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",117,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",118,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",119,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",120,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",121,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",122,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",123,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",124,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",109,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",110,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",125,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",175,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",177,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",127,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",128,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",129,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",130,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",131,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",132,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",133,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",134,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",135,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",136,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",137,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",138,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",139,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",140,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",141,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",126,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",146,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",147,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",179,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",178,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",142,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",143,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",144,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",145,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",148,[[["formatter"],["self"]],["result"]]],[11,"fmt","syn::punctuated","",294,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::parse","",302,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",303,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",100,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",288,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",289,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn::parse","",302,[[["self"],["formatter"]],["result"]]],[11,"fmt","syn","",303,[[["self"],["formatter"]],["result"]]],[11,"index","syn::punctuated","",294,[[["self"],["usize"]]]],[11,"index_mut","","",294,[[["self"],["usize"]]]],[11,"hash","syn::token","",180,[[["self"],["h"]]]],[11,"hash","","",181,[[["self"],["h"]]]],[11,"hash","","",182,[[["self"],["h"]]]],[11,"hash","","",183,[[["self"],["h"]]]],[11,"hash","","",184,[[["self"],["h"]]]],[11,"hash","","",185,[[["self"],["h"]]]],[11,"hash","","",186,[[["self"],["h"]]]],[11,"hash","","",187,[[["self"],["h"]]]],[11,"hash","","",188,[[["self"],["h"]]]],[11,"hash","","",189,[[["self"],["h"]]]],[11,"hash","","",190,[[["self"],["h"]]]],[11,"hash","","",191,[[["self"],["h"]]]],[11,"hash","","",192,[[["self"],["h"]]]],[11,"hash","","",193,[[["self"],["h"]]]],[11,"hash","","",194,[[["self"],["h"]]]],[11,"hash","","",195,[[["self"],["h"]]]],[11,"hash","","",196,[[["self"],["h"]]]],[11,"hash","","",197,[[["self"],["h"]]]],[11,"hash","","",198,[[["self"],["h"]]]],[11,"hash","","",199,[[["self"],["h"]]]],[11,"hash","","",200,[[["self"],["h"]]]],[11,"hash","","",201,[[["self"],["h"]]]],[11,"hash","","",202,[[["self"],["h"]]]],[11,"hash","","",203,[[["self"],["h"]]]],[11,"hash","","",204,[[["self"],["h"]]]],[11,"hash","","",205,[[["self"],["h"]]]],[11,"hash","","",206,[[["self"],["h"]]]],[11,"hash","","",207,[[["self"],["h"]]]],[11,"hash","","",208,[[["self"],["h"]]]],[11,"hash","","",209,[[["self"],["h"]]]],[11,"hash","","",210,[[["self"],["h"]]]],[11,"hash","","",211,[[["self"],["h"]]]],[11,"hash","","",212,[[["self"],["h"]]]],[11,"hash","","",213,[[["self"],["h"]]]],[11,"hash","","",214,[[["self"],["h"]]]],[11,"hash","","",215,[[["self"],["h"]]]],[11,"hash","","",216,[[["self"],["h"]]]],[11,"hash","","",217,[[["self"],["h"]]]],[11,"hash","","",218,[[["self"],["h"]]]],[11,"hash","","",219,[[["self"],["h"]]]],[11,"hash","","",220,[[["self"],["h"]]]],[11,"hash","","",221,[[["self"],["h"]]]],[11,"hash","","",222,[[["self"],["h"]]]],[11,"hash","","",223,[[["self"],["h"]]]],[11,"hash","","",224,[[["self"],["h"]]]],[11,"hash","","",225,[[["self"],["h"]]]],[11,"hash","","",226,[[["self"],["h"]]]],[11,"hash","","",227,[[["self"],["h"]]]],[11,"hash","","",228,[[["self"],["h"]]]],[11,"hash","","",229,[[["self"],["h"]]]],[11,"hash","","",230,[[["self"],["h"]]]],[11,"hash","","",231,[[["self"],["h"]]]],[11,"hash","","",232,[[["self"],["h"]]]],[11,"hash","","",233,[[["self"],["h"]]]],[11,"hash","","",234,[[["self"],["h"]]]],[11,"hash","","",235,[[["self"],["h"]]]],[11,"hash","","",236,[[["self"],["h"]]]],[11,"hash","","",237,[[["self"],["h"]]]],[11,"hash","","",238,[[["self"],["h"]]]],[11,"hash","","",239,[[["self"],["h"]]]],[11,"hash","","",240,[[["self"],["h"]]]],[11,"hash","","",241,[[["self"],["h"]]]],[11,"hash","","",242,[[["self"],["h"]]]],[11,"hash","","",243,[[["self"],["h"]]]],[11,"hash","","",244,[[["self"],["h"]]]],[11,"hash","","",245,[[["self"],["h"]]]],[11,"hash","","",246,[[["self"],["h"]]]],[11,"hash","","",247,[[["self"],["h"]]]],[11,"hash","","",248,[[["self"],["h"]]]],[11,"hash","","",249,[[["self"],["h"]]]],[11,"hash","","",250,[[["self"],["h"]]]],[11,"hash","","",251,[[["self"],["h"]]]],[11,"hash","","",252,[[["self"],["h"]]]],[11,"hash","","",253,[[["self"],["h"]]]],[11,"hash","","",254,[[["self"],["h"]]]],[11,"hash","","",255,[[["self"],["h"]]]],[11,"hash","","",256,[[["self"],["h"]]]],[11,"hash","","",257,[[["self"],["h"]]]],[11,"hash","","",258,[[["self"],["h"]]]],[11,"hash","","",259,[[["self"],["h"]]]],[11,"hash","","",260,[[["self"],["h"]]]],[11,"hash","","",261,[[["self"],["h"]]]],[11,"hash","","",262,[[["self"],["h"]]]],[11,"hash","","",263,[[["self"],["h"]]]],[11,"hash","","",264,[[["self"],["h"]]]],[11,"hash","","",265,[[["self"],["h"]]]],[11,"hash","","",266,[[["self"],["h"]]]],[11,"hash","","",267,[[["self"],["h"]]]],[11,"hash","","",268,[[["self"],["h"]]]],[11,"hash","","",269,[[["self"],["h"]]]],[11,"hash","","",270,[[["self"],["h"]]]],[11,"hash","","",271,[[["self"],["h"]]]],[11,"hash","","",272,[[["self"],["h"]]]],[11,"hash","","",273,[[["self"],["h"]]]],[11,"hash","","",274,[[["self"],["h"]]]],[11,"hash","","",275,[[["self"],["h"]]]],[11,"hash","","",276,[[["self"],["h"]]]],[11,"hash","","",277,[[["self"],["h"]]]],[11,"hash","","",278,[[["self"],["h"]]]],[11,"hash","","",279,[[["self"],["h"]]]],[11,"hash","","",280,[[["self"],["h"]]]],[11,"hash","","",281,[[["self"],["h"]]]],[11,"hash","","",282,[[["self"],["h"]]]],[11,"hash","syn","",0,[[["self"],["h"]]]],[11,"hash","","",149,[[["self"],["__h"]]]],[11,"hash","","",150,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",151,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",152,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",153,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","","",24,[[["self"],["__h"]]]],[11,"hash","","",25,[[["self"],["__h"]]]],[11,"hash","","",26,[[["self"],["__h"]]]],[11,"hash","","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","","",32,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","","",34,[[["self"],["__h"]]]],[11,"hash","","",35,[[["self"],["__h"]]]],[11,"hash","","",36,[[["self"],["__h"]]]],[11,"hash","","",37,[[["self"],["__h"]]]],[11,"hash","","",38,[[["self"],["__h"]]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"hash","","",40,[[["self"],["__h"]]]],[11,"hash","","",41,[[["self"],["__h"]]]],[11,"hash","","",42,[[["self"],["__h"]]]],[11,"hash","","",43,[[["self"],["__h"]]]],[11,"hash","","",44,[[["self"],["__h"]]]],[11,"hash","","",45,[[["self"],["__h"]]]],[11,"hash","","",46,[[["self"],["__h"]]]],[11,"hash","","",47,[[["self"],["__h"]]]],[11,"hash","","",48,[[["self"],["__h"]]]],[11,"hash","","",49,[[["self"],["__h"]]]],[11,"hash","","",50,[[["self"],["__h"]]]],[11,"hash","","",51,[[["self"],["__h"]]]],[11,"hash","","",52,[[["self"],["__h"]]]],[11,"hash","","",156,[[["self"],["h"]]]],[11,"hash","","",157,[[["self"],["__h"]]]],[11,"hash","","",53,[[["self"],["h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",154,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",155,[[["self"],["__h"]]]],[11,"hash","","",56,[[["self"],["__h"]]]],[11,"hash","","",158,[[["self"],["__h"]]]],[11,"hash","","",62,[[["self"],["__h"]]]],[11,"hash","","",57,[[["self"],["__h"]]]],[11,"hash","","",55,[[["self"],["__h"]]]],[11,"hash","","",305,[[["self"],["__h"]]]],[11,"hash","","",283,[[["self"],["__h"]]]],[11,"hash","","",306,[[["self"],["__h"]]]],[11,"hash","","",54,[[["self"],["__h"]]]],[11,"hash","","",160,[[["self"],["__h"]]]],[11,"hash","","",61,[[["self"],["__h"]]]],[11,"hash","","",159,[[["self"],["__h"]]]],[11,"hash","","",63,[[["self"],["__h"]]]],[11,"hash","","",161,[[["self"],["__h"]]]],[11,"hash","","",60,[[["self"],["__h"]]]],[11,"hash","","",59,[[["self"],["__h"]]]],[11,"hash","","",58,[[["self"],["__h"]]]],[11,"hash","","",72,[[["self"],["__h"]]]],[11,"hash","","",73,[[["self"],["__h"]]]],[11,"hash","","",74,[[["self"],["__h"]]]],[11,"hash","","",75,[[["self"],["__h"]]]],[11,"hash","","",76,[[["self"],["__h"]]]],[11,"hash","","",77,[[["self"],["__h"]]]],[11,"hash","","",78,[[["self"],["__h"]]]],[11,"hash","","",80,[[["self"],["__h"]]]],[11,"hash","","",81,[[["self"],["__h"]]]],[11,"hash","","",82,[[["self"],["__h"]]]],[11,"hash","","",83,[[["self"],["__h"]]]],[11,"hash","","",84,[[["self"],["__h"]]]],[11,"hash","","",85,[[["self"],["__h"]]]],[11,"hash","","",86,[[["self"],["__h"]]]],[11,"hash","","",87,[[["self"],["__h"]]]],[11,"hash","","",165,[[["self"],["h"]]]],[11,"hash","","",79,[[["self"],["h"]]]],[11,"hash","","",167,[[["self"],["__h"]]]],[11,"hash","","",97,[[["self"],["__h"]]]],[11,"hash","","",96,[[["self"],["__h"]]]],[11,"hash","","",98,[[["self"],["__h"]]]],[11,"hash","","",94,[[["self"],["__h"]]]],[11,"hash","","",95,[[["self"],["__h"]]]],[11,"hash","","",64,[[["self"],["__h"]]]],[11,"hash","","",66,[[["self"],["__h"]]]],[11,"hash","","",67,[[["self"],["__h"]]]],[11,"hash","","",65,[[["self"],["__h"]]]],[11,"hash","","",163,[[["self"],["h"]]]],[11,"hash","","",90,[[["self"],["__h"]]]],[11,"hash","","",92,[[["self"],["__h"]]]],[11,"hash","","",93,[[["self"],["__h"]]]],[11,"hash","","",91,[[["self"],["__h"]]]],[11,"hash","","",166,[[["self"],["h"]]]],[11,"hash","","",68,[[["self"],["__h"]]]],[11,"hash","","",70,[[["self"],["__h"]]]],[11,"hash","","",71,[[["self"],["__h"]]]],[11,"hash","","",69,[[["self"],["__h"]]]],[11,"hash","","",164,[[["self"],["h"]]]],[11,"hash","","",89,[[["self"],["__h"]]]],[11,"hash","","",162,[[["self"],["__h"]]]],[11,"hash","","",88,[[["self"],["__h"]]]],[11,"hash","","",99,[[["self"],["__h"]]]],[11,"hash","","",100,[[["self"],["h"]]]],[11,"hash","","",168,[[["self"],["h"]]]],[11,"hash","","",284,[[["self"],["h"]]]],[11,"hash","","",285,[[["self"],["h"]]]],[11,"hash","","",286,[[["self"],["h"]]]],[11,"hash","","",287,[[["self"],["h"]]]],[11,"hash","","",288,[[["self"],["h"]]]],[11,"hash","","",289,[[["self"],["h"]]]],[11,"hash","","",101,[[["self"],["h"]]]],[11,"hash","","",169,[[["self"],["__h"]]]],[11,"hash","","",170,[[["self"],["__h"]]]],[11,"hash","","",102,[[["self"],["h"]]]],[11,"hash","","",106,[[["self"],["__h"]]]],[11,"hash","","",171,[[["self"],["__h"]]]],[11,"hash","","",104,[[["self"],["__h"]]]],[11,"hash","","",103,[[["self"],["__h"]]]],[11,"hash","","",105,[[["self"],["__h"]]]],[11,"hash","","",172,[[["self"],["__h"]]]],[11,"hash","","",173,[[["self"],["__h"]]]],[11,"hash","","",107,[[["self"],["__h"]]]],[11,"hash","","",174,[[["self"],["__h"]]]],[11,"hash","","",108,[[["self"],["__h"]]]],[11,"hash","","",111,[[["self"],["__h"]]]],[11,"hash","","",112,[[["self"],["__h"]]]],[11,"hash","","",113,[[["self"],["__h"]]]],[11,"hash","","",114,[[["self"],["__h"]]]],[11,"hash","","",115,[[["self"],["__h"]]]],[11,"hash","","",116,[[["self"],["__h"]]]],[11,"hash","","",117,[[["self"],["__h"]]]],[11,"hash","","",118,[[["self"],["__h"]]]],[11,"hash","","",119,[[["self"],["__h"]]]],[11,"hash","","",120,[[["self"],["__h"]]]],[11,"hash","","",121,[[["self"],["__h"]]]],[11,"hash","","",122,[[["self"],["__h"]]]],[11,"hash","","",123,[[["self"],["__h"]]]],[11,"hash","","",124,[[["self"],["__h"]]]],[11,"hash","","",176,[[["self"],["h"]]]],[11,"hash","","",109,[[["self"],["__h"]]]],[11,"hash","","",110,[[["self"],["__h"]]]],[11,"hash","","",125,[[["self"],["__h"]]]],[11,"hash","","",175,[[["self"],["__h"]]]],[11,"hash","","",127,[[["self"],["__h"]]]],[11,"hash","","",128,[[["self"],["__h"]]]],[11,"hash","","",129,[[["self"],["__h"]]]],[11,"hash","","",130,[[["self"],["__h"]]]],[11,"hash","","",131,[[["self"],["__h"]]]],[11,"hash","","",132,[[["self"],["__h"]]]],[11,"hash","","",133,[[["self"],["__h"]]]],[11,"hash","","",134,[[["self"],["__h"]]]],[11,"hash","","",135,[[["self"],["__h"]]]],[11,"hash","","",136,[[["self"],["__h"]]]],[11,"hash","","",137,[[["self"],["__h"]]]],[11,"hash","","",138,[[["self"],["__h"]]]],[11,"hash","","",139,[[["self"],["__h"]]]],[11,"hash","","",140,[[["self"],["__h"]]]],[11,"hash","","",141,[[["self"],["__h"]]]],[11,"hash","","",126,[[["self"],["__h"]]]],[11,"hash","","",177,[[["self"],["h"]]]],[11,"hash","","",146,[[["self"],["__h"]]]],[11,"hash","","",147,[[["self"],["__h"]]]],[11,"hash","","",179,[[["self"],["__h"]]]],[11,"hash","","",178,[[["self"],["__h"]]]],[11,"hash","","",142,[[["self"],["__h"]]]],[11,"hash","","",143,[[["self"],["__h"]]]],[11,"hash","","",144,[[["self"],["__h"]]]],[11,"hash","","",145,[[["self"],["__h"]]]],[11,"hash","","",148,[[["self"],["__h"]]]],[11,"hash","syn::punctuated","",294,[[["self"],["__h"]]]],[11,"from_iter","","",294,[[["intoiterator"]],["self"]]],[11,"from_iter","","",294,[[["intoiterator"]],["self"]]],[11,"description","syn","",303,[[["self"]],["str"]]],[11,"to_tokens","syn::token","",180,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",181,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",182,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",183,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",184,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",185,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",186,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",187,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",188,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",189,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",190,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",191,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",192,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",193,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",194,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",195,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",196,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",197,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",198,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",199,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",200,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",201,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",202,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",203,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",204,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",205,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",206,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",207,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",208,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",209,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",210,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",211,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",212,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",213,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",214,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",215,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",216,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",217,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",218,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",219,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",220,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",221,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",222,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",223,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",224,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",225,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",226,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",227,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",228,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",229,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",230,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",231,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",232,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",233,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",234,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",235,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",236,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",237,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",238,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",239,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",240,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",241,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",242,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",243,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",244,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",245,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",246,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",247,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",248,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",249,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",250,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",251,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",252,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",253,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",254,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",255,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",256,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",257,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",258,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",259,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",260,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",261,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",262,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",263,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",264,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",265,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",266,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",267,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",268,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",269,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",270,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",271,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",272,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",273,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",274,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",275,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",276,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",277,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",278,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn","",150,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",151,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",1,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",2,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",152,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",153,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",6,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",5,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",3,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",8,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",7,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",9,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",156,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",21,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",14,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",23,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",37,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",13,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",154,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",47,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",19,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",49,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",33,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",24,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",48,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",32,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",30,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",51,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",28,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",34,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",36,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",17,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",18,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",46,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",52,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",25,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",50,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",20,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",15,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",16,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",27,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",157,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",53,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",31,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",40,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",39,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",41,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",22,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",26,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",43,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",35,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",44,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",42,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",29,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",38,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",45,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",12,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",11,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",10,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",158,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",160,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",161,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",56,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",305,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",283,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",306,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",54,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",57,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",62,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",61,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",159,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",55,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",63,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",60,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",59,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",58,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",165,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",167,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",163,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",166,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",164,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",162,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",74,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",87,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",81,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",72,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",75,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",80,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",76,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",85,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",73,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",82,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",86,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",83,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",84,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",77,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",78,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",79,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",97,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",96,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",98,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",94,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",95,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",90,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",92,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",93,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",91,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",68,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",70,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",71,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",69,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",64,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",66,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",67,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",65,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",89,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",88,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",99,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",100,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",168,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",284,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",285,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",286,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",287,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",288,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",289,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",101,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",102,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",106,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",172,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",173,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",107,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",174,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",108,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",176,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",122,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",111,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",120,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",121,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",112,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",117,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",124,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",119,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",123,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",114,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",113,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",118,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",115,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",116,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",175,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",110,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",125,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",109,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",177,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",141,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",128,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",137,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",139,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",140,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",132,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",138,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",127,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",134,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",135,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",129,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",133,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",136,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",130,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",131,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",126,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",146,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",147,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",179,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",178,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",142,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",143,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",144,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",145,[[["self"],["tokenstream"]]]],[11,"to_tokens","syn::punctuated","",294,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",293,[[["self"],["tokenstream"]]]],[11,"fmt","syn","",157,[[["self"],["formatter"]],["result"]]],[11,"span","","",157,[[["self"]],[["option",["span"]],["span"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"span","","",53,[[["self"]],[["option",["span"]],["span"]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",304,[[["str"],["span"]],["ident"]]],[11,"span","","Returns the span of this `Ident`.",304,[[["self"]],["span"]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",304,[[["self"],["span"]]]],[11,"visit_abi","syn::visit","",296,[[["self"],["abi"]]]],[11,"visit_angle_bracketed_generic_arguments","","",296,[[["self"],["anglebracketedgenericarguments"]]]],[11,"visit_arm","","",296,[[["self"],["arm"]]]],[11,"visit_attr_style","","",296,[[["self"],["attrstyle"]]]],[11,"visit_attribute","","",296,[[["attribute"],["self"]]]],[11,"visit_bare_fn_arg","","",296,[[["self"],["barefnarg"]]]],[11,"visit_bin_op","","",296,[[["self"],["binop"]]]],[11,"visit_binding","","",296,[[["self"],["binding"]]]],[11,"visit_block","","",296,[[["self"],["block"]]]],[11,"visit_bound_lifetimes","","",296,[[["self"],["boundlifetimes"]]]],[11,"visit_const_param","","",296,[[["self"],["constparam"]]]],[11,"visit_constraint","","",296,[[["self"],["constraint"]]]],[11,"visit_data","","",296,[[["data"],["self"]]]],[11,"visit_data_enum","","",296,[[["self"],["dataenum"]]]],[11,"visit_data_struct","","",296,[[["self"],["datastruct"]]]],[11,"visit_data_union","","",296,[[["self"],["dataunion"]]]],[11,"visit_derive_input","","",296,[[["self"],["deriveinput"]]]],[11,"visit_expr","","",296,[[["self"],["expr"]]]],[11,"visit_expr_array","","",296,[[["self"],["exprarray"]]]],[11,"visit_expr_assign","","",296,[[["self"],["exprassign"]]]],[11,"visit_expr_assign_op","","",296,[[["self"],["exprassignop"]]]],[11,"visit_expr_async","","",296,[[["self"],["exprasync"]]]],[11,"visit_expr_await","","",296,[[["self"],["exprawait"]]]],[11,"visit_expr_binary","","",296,[[["exprbinary"],["self"]]]],[11,"visit_expr_block","","",296,[[["self"],["exprblock"]]]],[11,"visit_expr_box","","",296,[[["exprbox"],["self"]]]],[11,"visit_expr_break","","",296,[[["exprbreak"],["self"]]]],[11,"visit_expr_call","","",296,[[["self"],["exprcall"]]]],[11,"visit_expr_cast","","",296,[[["self"],["exprcast"]]]],[11,"visit_expr_closure","","",296,[[["self"],["exprclosure"]]]],[11,"visit_expr_continue","","",296,[[["exprcontinue"],["self"]]]],[11,"visit_expr_field","","",296,[[["self"],["exprfield"]]]],[11,"visit_expr_for_loop","","",296,[[["self"],["exprforloop"]]]],[11,"visit_expr_group","","",296,[[["self"],["exprgroup"]]]],[11,"visit_expr_if","","",296,[[["self"],["exprif"]]]],[11,"visit_expr_index","","",296,[[["self"],["exprindex"]]]],[11,"visit_expr_let","","",296,[[["exprlet"],["self"]]]],[11,"visit_expr_lit","","",296,[[["exprlit"],["self"]]]],[11,"visit_expr_loop","","",296,[[["self"],["exprloop"]]]],[11,"visit_expr_macro","","",296,[[["exprmacro"],["self"]]]],[11,"visit_expr_match","","",296,[[["self"],["exprmatch"]]]],[11,"visit_expr_method_call","","",296,[[["exprmethodcall"],["self"]]]],[11,"visit_expr_paren","","",296,[[["self"],["exprparen"]]]],[11,"visit_expr_path","","",296,[[["self"],["exprpath"]]]],[11,"visit_expr_range","","",296,[[["self"],["exprrange"]]]],[11,"visit_expr_reference","","",296,[[["self"],["exprreference"]]]],[11,"visit_expr_repeat","","",296,[[["self"],["exprrepeat"]]]],[11,"visit_expr_return","","",296,[[["self"],["exprreturn"]]]],[11,"visit_expr_struct","","",296,[[["exprstruct"],["self"]]]],[11,"visit_expr_try","","",296,[[["exprtry"],["self"]]]],[11,"visit_expr_try_block","","",296,[[["self"],["exprtryblock"]]]],[11,"visit_expr_tuple","","",296,[[["exprtuple"],["self"]]]],[11,"visit_expr_type","","",296,[[["exprtype"],["self"]]]],[11,"visit_expr_unary","","",296,[[["self"],["exprunary"]]]],[11,"visit_expr_unsafe","","",296,[[["self"],["exprunsafe"]]]],[11,"visit_expr_while","","",296,[[["self"],["exprwhile"]]]],[11,"visit_expr_yield","","",296,[[["self"],["expryield"]]]],[11,"visit_field","","",296,[[["self"],["field"]]]],[11,"visit_field_pat","","",296,[[["self"],["fieldpat"]]]],[11,"visit_field_value","","",296,[[["self"],["fieldvalue"]]]],[11,"visit_fields","","",296,[[["self"],["fields"]]]],[11,"visit_fields_named","","",296,[[["fieldsnamed"],["self"]]]],[11,"visit_fields_unnamed","","",296,[[["self"],["fieldsunnamed"]]]],[11,"visit_file","","",296,[[["file"],["self"]]]],[11,"visit_fn_arg","","",296,[[["fnarg"],["self"]]]],[11,"visit_foreign_item","","",296,[[["self"],["foreignitem"]]]],[11,"visit_foreign_item_fn","","",296,[[["self"],["foreignitemfn"]]]],[11,"visit_foreign_item_macro","","",296,[[["foreignitemmacro"],["self"]]]],[11,"visit_foreign_item_static","","",296,[[["self"],["foreignitemstatic"]]]],[11,"visit_foreign_item_type","","",296,[[["self"],["foreignitemtype"]]]],[11,"visit_generic_argument","","",296,[[["genericargument"],["self"]]]],[11,"visit_generic_method_argument","","",296,[[["self"],["genericmethodargument"]]]],[11,"visit_generic_param","","",296,[[["self"],["genericparam"]]]],[11,"visit_generics","","",296,[[["self"],["generics"]]]],[11,"visit_ident","","",296,[[["self"],["ident"]]]],[11,"visit_impl_item","","",296,[[["self"],["implitem"]]]],[11,"visit_impl_item_const","","",296,[[["self"],["implitemconst"]]]],[11,"visit_impl_item_macro","","",296,[[["self"],["implitemmacro"]]]],[11,"visit_impl_item_method","","",296,[[["self"],["implitemmethod"]]]],[11,"visit_impl_item_type","","",296,[[["self"],["implitemtype"]]]],[11,"visit_index","","",296,[[["self"],["index"]]]],[11,"visit_item","","",296,[[["self"],["item"]]]],[11,"visit_item_const","","",296,[[["self"],["itemconst"]]]],[11,"visit_item_enum","","",296,[[["itemenum"],["self"]]]],[11,"visit_item_extern_crate","","",296,[[["itemexterncrate"],["self"]]]],[11,"visit_item_fn","","",296,[[["self"],["itemfn"]]]],[11,"visit_item_foreign_mod","","",296,[[["self"],["itemforeignmod"]]]],[11,"visit_item_impl","","",296,[[["self"],["itemimpl"]]]],[11,"visit_item_macro","","",296,[[["itemmacro"],["self"]]]],[11,"visit_item_macro2","","",296,[[["self"],["itemmacro2"]]]],[11,"visit_item_mod","","",296,[[["self"],["itemmod"]]]],[11,"visit_item_static","","",296,[[["itemstatic"],["self"]]]],[11,"visit_item_struct","","",296,[[["self"],["itemstruct"]]]],[11,"visit_item_trait","","",296,[[["self"],["itemtrait"]]]],[11,"visit_item_trait_alias","","",296,[[["self"],["itemtraitalias"]]]],[11,"visit_item_type","","",296,[[["itemtype"],["self"]]]],[11,"visit_item_union","","",296,[[["self"],["itemunion"]]]],[11,"visit_item_use","","",296,[[["itemuse"],["self"]]]],[11,"visit_label","","",296,[[["self"],["label"]]]],[11,"visit_lifetime","","",296,[[["lifetime"],["self"]]]],[11,"visit_lifetime_def","","",296,[[["self"],["lifetimedef"]]]],[11,"visit_lit","","",296,[[["self"],["lit"]]]],[11,"visit_lit_bool","","",296,[[["litbool"],["self"]]]],[11,"visit_lit_byte","","",296,[[["litbyte"],["self"]]]],[11,"visit_lit_byte_str","","",296,[[["self"],["litbytestr"]]]],[11,"visit_lit_char","","",296,[[["litchar"],["self"]]]],[11,"visit_lit_float","","",296,[[["litfloat"],["self"]]]],[11,"visit_lit_int","","",296,[[["self"],["litint"]]]],[11,"visit_lit_str","","",296,[[["self"],["litstr"]]]],[11,"visit_local","","",296,[[["self"],["local"]]]],[11,"visit_macro","","",296,[[["self"],["macro"]]]],[11,"visit_macro_delimiter","","",296,[[["self"],["macrodelimiter"]]]],[11,"visit_member","","",296,[[["self"],["member"]]]],[11,"visit_meta","","",296,[[["self"],["meta"]]]],[11,"visit_meta_list","","",296,[[["self"],["metalist"]]]],[11,"visit_meta_name_value","","",296,[[["metanamevalue"],["self"]]]],[11,"visit_method_turbofish","","",296,[[["self"],["methodturbofish"]]]],[11,"visit_nested_meta","","",296,[[["nestedmeta"],["self"]]]],[11,"visit_parenthesized_generic_arguments","","",296,[[["self"],["parenthesizedgenericarguments"]]]],[11,"visit_pat","","",296,[[["self"],["pat"]]]],[11,"visit_pat_box","","",296,[[["patbox"],["self"]]]],[11,"visit_pat_ident","","",296,[[["self"],["patident"]]]],[11,"visit_pat_lit","","",296,[[["self"],["patlit"]]]],[11,"visit_pat_macro","","",296,[[["self"],["patmacro"]]]],[11,"visit_pat_or","","",296,[[["self"],["pator"]]]],[11,"visit_pat_path","","",296,[[["self"],["patpath"]]]],[11,"visit_pat_range","","",296,[[["self"],["patrange"]]]],[11,"visit_pat_reference","","",296,[[["self"],["patreference"]]]],[11,"visit_pat_rest","","",296,[[["self"],["patrest"]]]],[11,"visit_pat_slice","","",296,[[["self"],["patslice"]]]],[11,"visit_pat_struct","","",296,[[["self"],["patstruct"]]]],[11,"visit_pat_tuple","","",296,[[["self"],["pattuple"]]]],[11,"visit_pat_tuple_struct","","",296,[[["self"],["pattuplestruct"]]]],[11,"visit_pat_type","","",296,[[["self"],["pattype"]]]],[11,"visit_pat_wild","","",296,[[["self"],["patwild"]]]],[11,"visit_path","","",296,[[["self"],["path"]]]],[11,"visit_path_arguments","","",296,[[["patharguments"],["self"]]]],[11,"visit_path_segment","","",296,[[["pathsegment"],["self"]]]],[11,"visit_predicate_eq","","",296,[[["self"],["predicateeq"]]]],[11,"visit_predicate_lifetime","","",296,[[["self"],["predicatelifetime"]]]],[11,"visit_predicate_type","","",296,[[["self"],["predicatetype"]]]],[11,"visit_qself","","",296,[[["self"],["qself"]]]],[11,"visit_range_limits","","",296,[[["self"],["rangelimits"]]]],[11,"visit_receiver","","",296,[[["self"],["receiver"]]]],[11,"visit_return_type","","",296,[[["self"],["returntype"]]]],[11,"visit_signature","","",296,[[["self"],["signature"]]]],[11,"visit_span","","",296,[[["self"],["span"]]]],[11,"visit_stmt","","",296,[[["self"],["stmt"]]]],[11,"visit_trait_bound","","",296,[[["self"],["traitbound"]]]],[11,"visit_trait_bound_modifier","","",296,[[["self"],["traitboundmodifier"]]]],[11,"visit_trait_item","","",296,[[["self"],["traititem"]]]],[11,"visit_trait_item_const","","",296,[[["self"],["traititemconst"]]]],[11,"visit_trait_item_macro","","",296,[[["self"],["traititemmacro"]]]],[11,"visit_trait_item_method","","",296,[[["traititemmethod"],["self"]]]],[11,"visit_trait_item_type","","",296,[[["self"],["traititemtype"]]]],[11,"visit_type","","",296,[[["self"],["type"]]]],[11,"visit_type_array","","",296,[[["self"],["typearray"]]]],[11,"visit_type_bare_fn","","",296,[[["typebarefn"],["self"]]]],[11,"visit_type_group","","",296,[[["self"],["typegroup"]]]],[11,"visit_type_impl_trait","","",296,[[["self"],["typeimpltrait"]]]],[11,"visit_type_infer","","",296,[[["typeinfer"],["self"]]]],[11,"visit_type_macro","","",296,[[["self"],["typemacro"]]]],[11,"visit_type_never","","",296,[[["self"],["typenever"]]]],[11,"visit_type_param","","",296,[[["self"],["typeparam"]]]],[11,"visit_type_param_bound","","",296,[[["self"],["typeparambound"]]]],[11,"visit_type_paren","","",296,[[["self"],["typeparen"]]]],[11,"visit_type_path","","",296,[[["self"],["typepath"]]]],[11,"visit_type_ptr","","",296,[[["self"],["typeptr"]]]],[11,"visit_type_reference","","",296,[[["self"],["typereference"]]]],[11,"visit_type_slice","","",296,[[["self"],["typeslice"]]]],[11,"visit_type_trait_object","","",296,[[["typetraitobject"],["self"]]]],[11,"visit_type_tuple","","",296,[[["self"],["typetuple"]]]],[11,"visit_un_op","","",296,[[["unop"],["self"]]]],[11,"visit_use_glob","","",296,[[["self"],["useglob"]]]],[11,"visit_use_group","","",296,[[["self"],["usegroup"]]]],[11,"visit_use_name","","",296,[[["self"],["usename"]]]],[11,"visit_use_path","","",296,[[["self"],["usepath"]]]],[11,"visit_use_rename","","",296,[[["self"],["userename"]]]],[11,"visit_use_tree","","",296,[[["self"],["usetree"]]]],[11,"visit_variadic","","",296,[[["self"],["variadic"]]]],[11,"visit_variant","","",296,[[["variant"],["self"]]]],[11,"visit_vis_crate","","",296,[[["self"],["viscrate"]]]],[11,"visit_vis_public","","",296,[[["self"],["vispublic"]]]],[11,"visit_vis_restricted","","",296,[[["self"],["visrestricted"]]]],[11,"visit_visibility","","",296,[[["self"],["visibility"]]]],[11,"visit_where_clause","","",296,[[["whereclause"],["self"]]]],[11,"visit_where_predicate","","",296,[[["self"],["wherepredicate"]]]],[11,"fold_abi","syn::fold","",297,[[["self"],["abi"]],["abi"]]],[11,"fold_angle_bracketed_generic_arguments","","",297,[[["anglebracketedgenericarguments"],["self"]],["anglebracketedgenericarguments"]]],[11,"fold_arm","","",297,[[["self"],["arm"]],["arm"]]],[11,"fold_attr_style","","",297,[[["self"],["attrstyle"]],["attrstyle"]]],[11,"fold_attribute","","",297,[[["attribute"],["self"]],["attribute"]]],[11,"fold_bare_fn_arg","","",297,[[["self"],["barefnarg"]],["barefnarg"]]],[11,"fold_bin_op","","",297,[[["binop"],["self"]],["binop"]]],[11,"fold_binding","","",297,[[["self"],["binding"]],["binding"]]],[11,"fold_block","","",297,[[["block"],["self"]],["block"]]],[11,"fold_bound_lifetimes","","",297,[[["self"],["boundlifetimes"]],["boundlifetimes"]]],[11,"fold_const_param","","",297,[[["constparam"],["self"]],["constparam"]]],[11,"fold_constraint","","",297,[[["constraint"],["self"]],["constraint"]]],[11,"fold_data","","",297,[[["self"],["data"]],["data"]]],[11,"fold_data_enum","","",297,[[["self"],["dataenum"]],["dataenum"]]],[11,"fold_data_struct","","",297,[[["self"],["datastruct"]],["datastruct"]]],[11,"fold_data_union","","",297,[[["dataunion"],["self"]],["dataunion"]]],[11,"fold_derive_input","","",297,[[["self"],["deriveinput"]],["deriveinput"]]],[11,"fold_expr","","",297,[[["self"],["expr"]],["expr"]]],[11,"fold_expr_array","","",297,[[["self"],["exprarray"]],["exprarray"]]],[11,"fold_expr_assign","","",297,[[["exprassign"],["self"]],["exprassign"]]],[11,"fold_expr_assign_op","","",297,[[["self"],["exprassignop"]],["exprassignop"]]],[11,"fold_expr_async","","",297,[[["self"],["exprasync"]],["exprasync"]]],[11,"fold_expr_await","","",297,[[["self"],["exprawait"]],["exprawait"]]],[11,"fold_expr_binary","","",297,[[["exprbinary"],["self"]],["exprbinary"]]],[11,"fold_expr_block","","",297,[[["self"],["exprblock"]],["exprblock"]]],[11,"fold_expr_box","","",297,[[["self"],["exprbox"]],["exprbox"]]],[11,"fold_expr_break","","",297,[[["exprbreak"],["self"]],["exprbreak"]]],[11,"fold_expr_call","","",297,[[["self"],["exprcall"]],["exprcall"]]],[11,"fold_expr_cast","","",297,[[["self"],["exprcast"]],["exprcast"]]],[11,"fold_expr_closure","","",297,[[["self"],["exprclosure"]],["exprclosure"]]],[11,"fold_expr_continue","","",297,[[["self"],["exprcontinue"]],["exprcontinue"]]],[11,"fold_expr_field","","",297,[[["exprfield"],["self"]],["exprfield"]]],[11,"fold_expr_for_loop","","",297,[[["self"],["exprforloop"]],["exprforloop"]]],[11,"fold_expr_group","","",297,[[["self"],["exprgroup"]],["exprgroup"]]],[11,"fold_expr_if","","",297,[[["exprif"],["self"]],["exprif"]]],[11,"fold_expr_index","","",297,[[["self"],["exprindex"]],["exprindex"]]],[11,"fold_expr_let","","",297,[[["exprlet"],["self"]],["exprlet"]]],[11,"fold_expr_lit","","",297,[[["self"],["exprlit"]],["exprlit"]]],[11,"fold_expr_loop","","",297,[[["self"],["exprloop"]],["exprloop"]]],[11,"fold_expr_macro","","",297,[[["exprmacro"],["self"]],["exprmacro"]]],[11,"fold_expr_match","","",297,[[["self"],["exprmatch"]],["exprmatch"]]],[11,"fold_expr_method_call","","",297,[[["self"],["exprmethodcall"]],["exprmethodcall"]]],[11,"fold_expr_paren","","",297,[[["exprparen"],["self"]],["exprparen"]]],[11,"fold_expr_path","","",297,[[["self"],["exprpath"]],["exprpath"]]],[11,"fold_expr_range","","",297,[[["self"],["exprrange"]],["exprrange"]]],[11,"fold_expr_reference","","",297,[[["self"],["exprreference"]],["exprreference"]]],[11,"fold_expr_repeat","","",297,[[["self"],["exprrepeat"]],["exprrepeat"]]],[11,"fold_expr_return","","",297,[[["self"],["exprreturn"]],["exprreturn"]]],[11,"fold_expr_struct","","",297,[[["self"],["exprstruct"]],["exprstruct"]]],[11,"fold_expr_try","","",297,[[["exprtry"],["self"]],["exprtry"]]],[11,"fold_expr_try_block","","",297,[[["exprtryblock"],["self"]],["exprtryblock"]]],[11,"fold_expr_tuple","","",297,[[["self"],["exprtuple"]],["exprtuple"]]],[11,"fold_expr_type","","",297,[[["exprtype"],["self"]],["exprtype"]]],[11,"fold_expr_unary","","",297,[[["exprunary"],["self"]],["exprunary"]]],[11,"fold_expr_unsafe","","",297,[[["self"],["exprunsafe"]],["exprunsafe"]]],[11,"fold_expr_while","","",297,[[["exprwhile"],["self"]],["exprwhile"]]],[11,"fold_expr_yield","","",297,[[["self"],["expryield"]],["expryield"]]],[11,"fold_field","","",297,[[["self"],["field"]],["field"]]],[11,"fold_field_pat","","",297,[[["self"],["fieldpat"]],["fieldpat"]]],[11,"fold_field_value","","",297,[[["self"],["fieldvalue"]],["fieldvalue"]]],[11,"fold_fields","","",297,[[["self"],["fields"]],["fields"]]],[11,"fold_fields_named","","",297,[[["fieldsnamed"],["self"]],["fieldsnamed"]]],[11,"fold_fields_unnamed","","",297,[[["self"],["fieldsunnamed"]],["fieldsunnamed"]]],[11,"fold_file","","",297,[[["self"],["file"]],["file"]]],[11,"fold_fn_arg","","",297,[[["self"],["fnarg"]],["fnarg"]]],[11,"fold_foreign_item","","",297,[[["self"],["foreignitem"]],["foreignitem"]]],[11,"fold_foreign_item_fn","","",297,[[["self"],["foreignitemfn"]],["foreignitemfn"]]],[11,"fold_foreign_item_macro","","",297,[[["self"],["foreignitemmacro"]],["foreignitemmacro"]]],[11,"fold_foreign_item_static","","",297,[[["self"],["foreignitemstatic"]],["foreignitemstatic"]]],[11,"fold_foreign_item_type","","",297,[[["self"],["foreignitemtype"]],["foreignitemtype"]]],[11,"fold_generic_argument","","",297,[[["genericargument"],["self"]],["genericargument"]]],[11,"fold_generic_method_argument","","",297,[[["genericmethodargument"],["self"]],["genericmethodargument"]]],[11,"fold_generic_param","","",297,[[["self"],["genericparam"]],["genericparam"]]],[11,"fold_generics","","",297,[[["self"],["generics"]],["generics"]]],[11,"fold_ident","","",297,[[["self"],["ident"]],["ident"]]],[11,"fold_impl_item","","",297,[[["self"],["implitem"]],["implitem"]]],[11,"fold_impl_item_const","","",297,[[["self"],["implitemconst"]],["implitemconst"]]],[11,"fold_impl_item_macro","","",297,[[["implitemmacro"],["self"]],["implitemmacro"]]],[11,"fold_impl_item_method","","",297,[[["self"],["implitemmethod"]],["implitemmethod"]]],[11,"fold_impl_item_type","","",297,[[["implitemtype"],["self"]],["implitemtype"]]],[11,"fold_index","","",297,[[["index"],["self"]],["index"]]],[11,"fold_item","","",297,[[["item"],["self"]],["item"]]],[11,"fold_item_const","","",297,[[["self"],["itemconst"]],["itemconst"]]],[11,"fold_item_enum","","",297,[[["self"],["itemenum"]],["itemenum"]]],[11,"fold_item_extern_crate","","",297,[[["self"],["itemexterncrate"]],["itemexterncrate"]]],[11,"fold_item_fn","","",297,[[["self"],["itemfn"]],["itemfn"]]],[11,"fold_item_foreign_mod","","",297,[[["itemforeignmod"],["self"]],["itemforeignmod"]]],[11,"fold_item_impl","","",297,[[["self"],["itemimpl"]],["itemimpl"]]],[11,"fold_item_macro","","",297,[[["itemmacro"],["self"]],["itemmacro"]]],[11,"fold_item_macro2","","",297,[[["itemmacro2"],["self"]],["itemmacro2"]]],[11,"fold_item_mod","","",297,[[["self"],["itemmod"]],["itemmod"]]],[11,"fold_item_static","","",297,[[["self"],["itemstatic"]],["itemstatic"]]],[11,"fold_item_struct","","",297,[[["self"],["itemstruct"]],["itemstruct"]]],[11,"fold_item_trait","","",297,[[["itemtrait"],["self"]],["itemtrait"]]],[11,"fold_item_trait_alias","","",297,[[["self"],["itemtraitalias"]],["itemtraitalias"]]],[11,"fold_item_type","","",297,[[["self"],["itemtype"]],["itemtype"]]],[11,"fold_item_union","","",297,[[["self"],["itemunion"]],["itemunion"]]],[11,"fold_item_use","","",297,[[["self"],["itemuse"]],["itemuse"]]],[11,"fold_label","","",297,[[["self"],["label"]],["label"]]],[11,"fold_lifetime","","",297,[[["lifetime"],["self"]],["lifetime"]]],[11,"fold_lifetime_def","","",297,[[["self"],["lifetimedef"]],["lifetimedef"]]],[11,"fold_lit","","",297,[[["self"],["lit"]],["lit"]]],[11,"fold_lit_bool","","",297,[[["self"],["litbool"]],["litbool"]]],[11,"fold_lit_byte","","",297,[[["self"],["litbyte"]],["litbyte"]]],[11,"fold_lit_byte_str","","",297,[[["self"],["litbytestr"]],["litbytestr"]]],[11,"fold_lit_char","","",297,[[["self"],["litchar"]],["litchar"]]],[11,"fold_lit_float","","",297,[[["self"],["litfloat"]],["litfloat"]]],[11,"fold_lit_int","","",297,[[["self"],["litint"]],["litint"]]],[11,"fold_lit_str","","",297,[[["self"],["litstr"]],["litstr"]]],[11,"fold_local","","",297,[[["self"],["local"]],["local"]]],[11,"fold_macro","","",297,[[["self"],["macro"]],["macro"]]],[11,"fold_macro_delimiter","","",297,[[["self"],["macrodelimiter"]],["macrodelimiter"]]],[11,"fold_member","","",297,[[["member"],["self"]],["member"]]],[11,"fold_meta","","",297,[[["self"],["meta"]],["meta"]]],[11,"fold_meta_list","","",297,[[["self"],["metalist"]],["metalist"]]],[11,"fold_meta_name_value","","",297,[[["self"],["metanamevalue"]],["metanamevalue"]]],[11,"fold_method_turbofish","","",297,[[["self"],["methodturbofish"]],["methodturbofish"]]],[11,"fold_nested_meta","","",297,[[["self"],["nestedmeta"]],["nestedmeta"]]],[11,"fold_parenthesized_generic_arguments","","",297,[[["self"],["parenthesizedgenericarguments"]],["parenthesizedgenericarguments"]]],[11,"fold_pat","","",297,[[["self"],["pat"]],["pat"]]],[11,"fold_pat_box","","",297,[[["self"],["patbox"]],["patbox"]]],[11,"fold_pat_ident","","",297,[[["self"],["patident"]],["patident"]]],[11,"fold_pat_lit","","",297,[[["self"],["patlit"]],["patlit"]]],[11,"fold_pat_macro","","",297,[[["self"],["patmacro"]],["patmacro"]]],[11,"fold_pat_or","","",297,[[["self"],["pator"]],["pator"]]],[11,"fold_pat_path","","",297,[[["self"],["patpath"]],["patpath"]]],[11,"fold_pat_range","","",297,[[["self"],["patrange"]],["patrange"]]],[11,"fold_pat_reference","","",297,[[["self"],["patreference"]],["patreference"]]],[11,"fold_pat_rest","","",297,[[["self"],["patrest"]],["patrest"]]],[11,"fold_pat_slice","","",297,[[["self"],["patslice"]],["patslice"]]],[11,"fold_pat_struct","","",297,[[["self"],["patstruct"]],["patstruct"]]],[11,"fold_pat_tuple","","",297,[[["pattuple"],["self"]],["pattuple"]]],[11,"fold_pat_tuple_struct","","",297,[[["self"],["pattuplestruct"]],["pattuplestruct"]]],[11,"fold_pat_type","","",297,[[["pattype"],["self"]],["pattype"]]],[11,"fold_pat_wild","","",297,[[["self"],["patwild"]],["patwild"]]],[11,"fold_path","","",297,[[["self"],["path"]],["path"]]],[11,"fold_path_arguments","","",297,[[["self"],["patharguments"]],["patharguments"]]],[11,"fold_path_segment","","",297,[[["pathsegment"],["self"]],["pathsegment"]]],[11,"fold_predicate_eq","","",297,[[["self"],["predicateeq"]],["predicateeq"]]],[11,"fold_predicate_lifetime","","",297,[[["self"],["predicatelifetime"]],["predicatelifetime"]]],[11,"fold_predicate_type","","",297,[[["self"],["predicatetype"]],["predicatetype"]]],[11,"fold_qself","","",297,[[["self"],["qself"]],["qself"]]],[11,"fold_range_limits","","",297,[[["self"],["rangelimits"]],["rangelimits"]]],[11,"fold_receiver","","",297,[[["self"],["receiver"]],["receiver"]]],[11,"fold_return_type","","",297,[[["returntype"],["self"]],["returntype"]]],[11,"fold_signature","","",297,[[["signature"],["self"]],["signature"]]],[11,"fold_span","","",297,[[["self"],["span"]],["span"]]],[11,"fold_stmt","","",297,[[["self"],["stmt"]],["stmt"]]],[11,"fold_trait_bound","","",297,[[["traitbound"],["self"]],["traitbound"]]],[11,"fold_trait_bound_modifier","","",297,[[["self"],["traitboundmodifier"]],["traitboundmodifier"]]],[11,"fold_trait_item","","",297,[[["self"],["traititem"]],["traititem"]]],[11,"fold_trait_item_const","","",297,[[["self"],["traititemconst"]],["traititemconst"]]],[11,"fold_trait_item_macro","","",297,[[["traititemmacro"],["self"]],["traititemmacro"]]],[11,"fold_trait_item_method","","",297,[[["traititemmethod"],["self"]],["traititemmethod"]]],[11,"fold_trait_item_type","","",297,[[["self"],["traititemtype"]],["traititemtype"]]],[11,"fold_type","","",297,[[["type"],["self"]],["type"]]],[11,"fold_type_array","","",297,[[["typearray"],["self"]],["typearray"]]],[11,"fold_type_bare_fn","","",297,[[["self"],["typebarefn"]],["typebarefn"]]],[11,"fold_type_group","","",297,[[["self"],["typegroup"]],["typegroup"]]],[11,"fold_type_impl_trait","","",297,[[["self"],["typeimpltrait"]],["typeimpltrait"]]],[11,"fold_type_infer","","",297,[[["self"],["typeinfer"]],["typeinfer"]]],[11,"fold_type_macro","","",297,[[["self"],["typemacro"]],["typemacro"]]],[11,"fold_type_never","","",297,[[["typenever"],["self"]],["typenever"]]],[11,"fold_type_param","","",297,[[["typeparam"],["self"]],["typeparam"]]],[11,"fold_type_param_bound","","",297,[[["self"],["typeparambound"]],["typeparambound"]]],[11,"fold_type_paren","","",297,[[["typeparen"],["self"]],["typeparen"]]],[11,"fold_type_path","","",297,[[["self"],["typepath"]],["typepath"]]],[11,"fold_type_ptr","","",297,[[["self"],["typeptr"]],["typeptr"]]],[11,"fold_type_reference","","",297,[[["typereference"],["self"]],["typereference"]]],[11,"fold_type_slice","","",297,[[["self"],["typeslice"]],["typeslice"]]],[11,"fold_type_trait_object","","",297,[[["self"],["typetraitobject"]],["typetraitobject"]]],[11,"fold_type_tuple","","",297,[[["self"],["typetuple"]],["typetuple"]]],[11,"fold_un_op","","",297,[[["self"],["unop"]],["unop"]]],[11,"fold_use_glob","","",297,[[["self"],["useglob"]],["useglob"]]],[11,"fold_use_group","","",297,[[["self"],["usegroup"]],["usegroup"]]],[11,"fold_use_name","","",297,[[["self"],["usename"]],["usename"]]],[11,"fold_use_path","","",297,[[["self"],["usepath"]],["usepath"]]],[11,"fold_use_rename","","",297,[[["userename"],["self"]],["userename"]]],[11,"fold_use_tree","","",297,[[["self"],["usetree"]],["usetree"]]],[11,"fold_variadic","","",297,[[["self"],["variadic"]],["variadic"]]],[11,"fold_variant","","",297,[[["variant"],["self"]],["variant"]]],[11,"fold_vis_crate","","",297,[[["self"],["viscrate"]],["viscrate"]]],[11,"fold_vis_public","","",297,[[["self"],["vispublic"]],["vispublic"]]],[11,"fold_vis_restricted","","",297,[[["self"],["visrestricted"]],["visrestricted"]]],[11,"fold_visibility","","",297,[[["visibility"],["self"]],["visibility"]]],[11,"fold_where_clause","","",297,[[["self"],["whereclause"]],["whereclause"]]],[11,"fold_where_predicate","","",297,[[["wherepredicate"],["self"]],["wherepredicate"]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine…",313,[[["peek"],["self"]],["bool"]]],[11,"error","","Triggers an error at the current position of the parse…",313,[[],["error"]]]],"p":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"Arm"],[3,"FieldValue"],[3,"Label"],[3,"MethodTurbofish"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"Receiver"],[3,"Signature"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[3,"File"],[3,"Lifetime"],[3,"LitBool"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Block"],[3,"Local"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"FieldPat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"GenericMethodArgument"],[4,"RangeLimits"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[4,"ImplItem"],[4,"Item"],[4,"TraitItem"],[4,"UseTree"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"Stmt"],[4,"ReturnType"],[4,"Type"],[4,"Pat"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[8,"Visit"],[8,"Fold"],[8,"Speculative"],[8,"Parse"],[8,"Parser"],[3,"StepCursor"],[3,"ParseBuffer"],[3,"Error"],[3,"Ident"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum…","i":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both…",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however…",null,null],[12,"attrs","","",1,null],[12,"ident","","",1,null],[12,"fields","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn::DeriveInput`'s variant which…",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn::DeriveInput` which provides…",null,null],[4,"AddBounds","","Changes how bounds are added",null,null],[13,"Both","","Add for fields and generics",3,null],[13,"Fields","","Fields only",3,null],[13,"Generics","","Generics only",3,null],[13,"None","","None",3,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",4,null],[13,"MoveMut","","`mut x`",4,null],[13,"Ref","","`ref x`",4,null],[13,"RefMut","","`ref mut x`",4,null],[5,"unpretty_print","","Dumps an unpretty version of a tokenstream. Takes any type…",null,[[["display"]],["string"]]],[8,"MacroResult","","Helper trait describing values which may be returned by…",null,null],[10,"into_result","","Convert this result into a `Result` for further processing…",5,[[],[["tokenstream"],["result",["tokenstream"]]]]],[11,"into_stream","","Convert this result into a `proc_macro::TokenStream`,…",5,[[],["tokenstream"]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which…",0,[[["self"]],["field"]]],[11,"pat","","Generates the pattern fragment for this field binding.",0,[[["self"]],["tokenstream"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced…",0,[[["self"]],[["vec",["ident"]],["ident"]]]],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,[[["self"]]]],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,[[["self"]]]],[11,"ast","","Returns a `VariantAst` object which contains references to…",2,[[["self"]],["variantast"]]],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,[[["self"]],["bool"]]],[11,"pat","","Generates the match-arm pattern which could be used to…",2,[[["self"]],["tokenstream"]]],[11,"construct","","Generates the token stream required to construct the…",2,[[["self"],["f"]],["tokenstream"]]],[11,"each","","Runs the passed-in function once for each bound field,…",2,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field,…",2,[[["i"],["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Variant` object. This…",2,[[["self"],["f"]],["self"]]],[11,"remove_binding","","Remove the binding at the given index.",2,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields…",2,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields…",2,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced…",2,[[["self"]],[["vec",["ident"]],["ident"]]]],[11,"new","","Create a new `Structure` with the variants and fields from…",6,[[["deriveinput"]],["self"]]],[11,"try_new","","Create a new `Structure` with the variants and fields from…",6,[[["deriveinput"]],["result"]]],[11,"variants","","Returns a slice of the variants in this Structure.",6,[[["self"]]]],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",6,[[["self"]]]],[11,"ast","","Returns a reference to the underlying `syn` AST node which…",6,[[["self"]],["deriveinput"]]],[11,"omitted_variants","","True if any variants were omitted due to a…",6,[[["self"]],["bool"]]],[11,"each","","Runs the passed-in function once for each bound field,…",6,[[["self"],["f"]],["tokenstream"]]],[11,"fold","","Runs the passed-in function once for each bound field,…",6,[[["i"],["self"],["f"]],["tokenstream"]]],[11,"each_variant","","Runs the passed-in function once for each variant, passing…",6,[[["self"],["f"]],["tokenstream"]]],[11,"filter","","Filter the bindings created by this `Structure` object.…",6,[[["self"],["f"]],["self"]]],[11,"add_where_predicate","","Specify additional where predicate bounds which should be…",6,[[["wherepredicate"],["self"]],["self"]]],[11,"add_bounds","","Specify which bounds should be generated by…",6,[[["self"],["addbounds"]],["self"]]],[11,"filter_variants","","Filter the variants matched by this `Structure` object.…",6,[[["self"],["f"]],["self"]]],[11,"remove_variant","","Remove the variant at the given index.",6,[[["self"],["usize"]],["self"]]],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields…",6,[[["self"],["f"]],["self"]]],[11,"binding_name","","Updates the binding name for each fo the passed-in fields…",6,[[["self"],["f"]],["self"]]],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced…",6,[[["self"]],[["vec",["ident"]],["ident"]]]],[11,"add_impl_generic","","Adds an `impl<>` generic parameter. This can be used when…",6,[[["genericparam"],["self"]],["self"]]],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each…",6,[[["traitbound"],["addbounds"],["self"],["option"]]]],[11,"bound_impl","","NOTE: This methods' features are superceded by…",6,[[["self"],["totokens"]],["tokenstream"]]],[11,"unsafe_bound_impl","","NOTE: This methods' features are superceded by…",6,[[["self"],["totokens"]],["tokenstream"]]],[11,"unbound_impl","","NOTE: This methods' features are superceded by…",6,[[["self"],["totokens"]],["tokenstream"]]],[11,"unsafe_unbound_impl","","NOTE: This methods' features are superceded by…",6,[[["self"],["totokens"]],["tokenstream"]]],[11,"gen_impl","","Generate an impl block for the given struct. This impl…",6,[[["tokenstream"],["self"]],["tokenstream"]]],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper.…",null,null],[14,"decl_attribute","","The `decl_attribute!` macro declares a custom attribute…",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"span","","",0,[[["self"]],["span"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"span","","",4,[[["self"]],["span"]]],[11,"clone","","",3,[[["self"]],["addbounds"]]],[11,"clone","","",4,[[["self"]],["bindstyle"]]],[11,"clone","","",0,[[["self"]],["bindinginfo"]]],[11,"clone","","",1,[[["self"]],["variantast"]]],[11,"clone","","",2,[[["self"]],["variantinfo"]]],[11,"clone","","",6,[[["self"]],["structure"]]],[11,"eq","","",3,[[["self"],["addbounds"]],["bool"]]],[11,"eq","","",4,[[["bindstyle"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"ne","","",0,[[["self"],["bindinginfo"]],["bool"]]],[11,"eq","","",1,[[["variantast"],["self"]],["bool"]]],[11,"ne","","",1,[[["variantast"],["self"]],["bool"]]],[11,"eq","","",2,[[["variantinfo"],["self"]],["bool"]]],[11,"ne","","",2,[[["variantinfo"],["self"]],["bool"]]],[11,"eq","","",6,[[["structure"],["self"]],["bool"]]],[11,"ne","","",6,[[["structure"],["self"]],["bool"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"to_tokens","","",4,[[["self"],["tokenstream"]]]],[11,"to_tokens","","",0,[[["self"],["tokenstream"]]]]],"p":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"AddBounds"],[4,"BindStyle"],[8,"MacroResult"],[3,"Structure"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","i":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a…",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],[["option"],["t"]]]],[11,"get_or","","Returns the element for the current thread, or creates it…",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it…",0,[[["self"],["f"]],[["t"],["result"]]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all…",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`,…",0,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a…",0,[[["self"]],["t"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",1,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",1,[[["self"]],[["option"],["t"]]]],[11,"get_or","","Returns the element for the current thread, or creates it…",1,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it…",1,[[["self"],["f"]],[["t"],["result"]]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all…",1,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`,…",1,[[["self"]]]],[11,"get_default","","Returns the element for the current thread, or creates a…",1,[[["self"]],["t"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"drop","","",0,[[["self"]]]],[11,"into_iter","","",0,[[],["intoiter"]]],[11,"into_iter","","",1,[[],["cachedintoiter"]]],[11,"next","","",2,[[["self"]],[["option",["box"]],["box"]]]],[11,"size_hint","","",2,[[["self"]]]],[11,"next","","",3,[[["self"]],[["box"],["option",["box"]]]]],[11,"size_hint","","",3,[[["self"]]]],[11,"default","","",0,[[],["threadlocal"]]],[11,"default","","",1,[[],["cachedthreadlocal"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]]],"p":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"IterMut"],[3,"IntoIter"]]};
searchIndex["tiny_keccak"] = {"doc":"Keccak derived functions specified in [`FIPS-202`],…","i":[[3,"Keccak","tiny_keccak","The `Keccak` hash functions defined in [`Keccak SHA3…",null,null],[5,"keccakf","","`keccak-f[1600, 24]`",null,[[]]],[11,"v224","","Creates new [`Keccak`] hasher with a security level of 224…",0,[[],["keccak"]]],[11,"v256","","Creates new [`Keccak`] hasher with a security level of 256…",0,[[],["keccak"]]],[11,"v384","","Creates new [`Keccak`] hasher with a security level of 384…",0,[[],["keccak"]]],[11,"v512","","Creates new [`Keccak`] hasher with a security level of 512…",0,[[],["keccak"]]],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",null,null],[10,"update","","Absorb additional input. Can be called multiple times.",1,[[["self"]]]],[10,"finalize","","Pad and squeeze the state to the output.",1,[[]]],[8,"IntoXof","","A trait used to convert [`Hasher`] into it's [`Xof`]…",null,null],[16,"Xof","","A type implementing [`Xof`], eXtendable-output function…",2,null],[10,"into_xof","","A method used to convert type into [`Xof`].",2,[[]]],[8,"Xof","","Extendable-output function (`XOF`) is a function on bit…",null,null],[10,"squeeze","","A method used to retrieve another part of hash function…",3,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"update","","Absorb additional input. Can be called multiple times.",0,[[["self"]]]],[11,"finalize","","Pad and squeeze the state to the output.",0,[[]]],[11,"clone","","",0,[[["self"]],["keccak"]]]],"p":[[3,"Keccak"],[8,"Hasher"],[8,"IntoXof"],[8,"Xof"]]};
searchIndex["toml"] = {"doc":"A [TOML]-parsing library","i":[[3,"Spanned","toml","A spanned value, indicating the range at which it is…",null,null],[0,"map","","A map of String to toml::Value.",null,null],[3,"Map","toml::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a toml::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a toml::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a toml::Map's entries.",null,null],[3,"Keys","","An iterator over a toml::Map's keys.",null,null],[3,"Values","","An iterator over a toml::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be…",null,null],[13,"Vacant","","A vacant Entry.",0,null],[13,"Occupied","","An occupied Entry.",0,null],[11,"new","","Makes a new empty Map.",1,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",1,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["q"]],[["value"],["option",["value"]]]]],[11,"contains_key","","Returns true if the map contains a value for the specified…",1,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to…",1,[[["self"],["q"]],[["value"],["option",["value"]]]]],[11,"insert","","Inserts a key-value pair into the map.",1,[[["self"],["string"],["value"]],[["value"],["option",["value"]]]]],[11,"remove","","Removes a key from the map, returning the value at the key…",1,[[["self"],["q"]],[["value"],["option",["value"]]]]],[11,"entry","","Gets the given key's corresponding entry in the map for…",1,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",1,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",1,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",1,[[["self"]],["values"]]],[11,"key","","Returns a reference to this entry's key.",0,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",0,[[["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",0,[[["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when…",2,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key,…",2,[[["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",3,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s…",3,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[],["value"]]],[0,"value","toml","Definition of a TOML value",null,null],[3,"Datetime","toml::value","A parsed TOML datetime value",null,null],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr`…",null,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","Represents a TOML string",4,null],[13,"Integer","","Represents a TOML integer",4,null],[13,"Float","","Represents a TOML float",4,null],[13,"Boolean","","Represents a TOML boolean",4,null],[13,"Datetime","","Represents a TOML datetime",4,null],[13,"Array","","Represents a TOML array",4,null],[13,"Table","","Represents a TOML table",4,null],[6,"Array","","Type representing a TOML array, payload of the…",null,null],[6,"Table","","Type representing a TOML table, payload of the…",null,null],[8,"Index","","Types that can be used to index a `toml::Value`",null,null],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can…",4,[[["t"]],[["result",["value","error"]],["error"],["value"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",4,[[],[["result",["error"]],["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used…",4,[[["self"],["index"]],[["value"],["option",["value"]]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can…",4,[[["self"],["index"]],[["value"],["option",["value"]]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",4,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"is_integer","","Tests whether this value is an integer.",4,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",4,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"is_float","","Tests whether this value is a float.",4,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",4,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",4,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",4,[[["self"]],[["str"],["option",["str"]]]]],[11,"is_str","","Tests if this value is a string.",4,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",4,[[["self"]],[["datetime"],["option",["datetime"]]]]],[11,"is_datetime","","Tests whether this value is a datetime.",4,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",4,[[["self"]],[["option",["vec"]],["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",4,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"is_array","","Tests whether this value is an array.",4,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",4,[[["self"]],[["table"],["option",["table"]]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",4,[[["self"]],[["table"],["option",["table"]]]]],[11,"is_table","","Tests whether this value is a table.",4,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",4,[[["value"],["self"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of…",4,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",null,null],[3,"Serializer","toml::ser","Serialization implementation for TOML.",null,null],[4,"Error","","Errors that can occur when serializing a type.",null,null],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized…",5,null],[13,"KeyNotString","","The key of all TOML maps must be strings, but…",5,null],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a…",5,null],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further…",5,null],[13,"DateInvalid","","A serialized date was invalid.",5,null],[13,"NumberInvalid","","A serialized number was invalid.",5,null],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",5,null],[13,"Custom","","A custom error which could be generated when serializing a…",5,null],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",null,[[["t"]],[["vec",["u8"]],["error"],["result",["vec","error"]]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",null,[[["t"]],[["result",["string","error"]],["string"],["error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of…",null,[[["t"]],[["result",["string","error"]],["string"],["error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an…",null,[[["i"],["s"]],["result"]]],[11,"new","","Creates a new serializer which will emit TOML into the…",6,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",6,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",6,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",6,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",6,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",6,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing…",6,[[["self"],["bool"]],["self"]]],[0,"de","toml","Deserializing TOML into Rust structures.",null,null],[3,"Error","toml::de","Errors that can occur when deserializing a type.",null,null],[3,"Deserializer","","Deserialization implementation for TOML.",null,null],[5,"from_slice","","Deserializes a byte slice into a type.",null,[[],[["result",["error"]],["error"]]]],[5,"from_str","","Deserializes a string into a type.",null,[[["str"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a new deserializer which will be deserializing the…",7,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a…",7,[[["self"]],[["result",["error"]],["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a…",7,[[["self"],["bool"]]]],[11,"set_allow_duplicate_after_longer_table","","Historical versions of toml-rs accidentally allowed a…",7,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the…",8,[[["self"]],["option"]]],[11,"start","toml","Access the start of the span of the contained value.",9,[[["self"]],["usize"]]],[11,"end","","Access the end of the span of the contained value.",9,[[["self"]],["usize"]]],[11,"span","","Get the span of the contained value.",9,[[["self"]]]],[11,"into_inner","","Consumes the spanned value and returns the contained value.",9,[[],["t"]]],[11,"get_ref","","Returns a reference to the contained value.",9,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained value.",9,[[["self"]],["t"]]],[14,"toml","","Construct a [`toml::Value`] from TOML syntax.",null,null],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","toml::map","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"into_iter","","",10,[[],["i"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"into_iter","","",11,[[],["i"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"into_iter","","",12,[[],["i"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"into_iter","","",13,[[],["i"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"into_iter","","",14,[[],["i"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","toml::value","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","toml::ser","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","toml::de","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","toml::value","",4,[[["str"]],["value"]]],[11,"from","","",4,[[["vec"]],["value"]]],[11,"from","","",4,[[["btreemap"]],["value"]]],[11,"from","","",4,[[["hashmap"]],["value"]]],[11,"from","","",4,[[["string"]],["value"]]],[11,"from","","",4,[[["i64"]],["value"]]],[11,"from","","",4,[[["i32"]],["value"]]],[11,"from","","",4,[[["i8"]],["value"]]],[11,"from","","",4,[[["u8"]],["value"]]],[11,"from","","",4,[[["u32"]],["value"]]],[11,"from","","",4,[[["f64"]],["value"]]],[11,"from","","",4,[[["f32"]],["value"]]],[11,"from","","",4,[[["bool"]],["value"]]],[11,"from","","",4,[[["datetime"]],["value"]]],[11,"from","","",4,[[["table"]],["value"]]],[11,"next_back","toml::map","",10,[[["self"]],["option"]]],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"into_iter","","",1,[[]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,[[["self"]]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,[[["self"]]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,[[["self"]]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,[[["self"]]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,[[["self"]]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","toml::value","",4,[[["self"]],["value"]]],[11,"clone","","",15,[[["self"]],["datetime"]]],[11,"clone","","",16,[[["self"]],["datetimeparseerror"]]],[11,"clone","toml::ser","",5,[[["self"]],["error"]]],[11,"clone","toml::de","",8,[[["self"]],["error"]]],[11,"clone","toml","",9,[[["self"]],["spanned"]]],[11,"default","toml::map","",1,[[],["self"]]],[11,"cmp","toml","",9,[[["self"]],["ordering"]]],[11,"eq","toml::map","",1,[[["self"]],["bool"]]],[11,"eq","toml::value","",4,[[["value"],["self"]],["bool"]]],[11,"ne","","",4,[[["value"],["self"]],["bool"]]],[11,"eq","","",15,[[["datetime"],["self"]],["bool"]]],[11,"ne","","",15,[[["datetime"],["self"]],["bool"]]],[11,"eq","toml::ser","",5,[[["self"],["error"]],["bool"]]],[11,"ne","","",5,[[["self"],["error"]],["bool"]]],[11,"eq","toml::de","",8,[[["error"],["self"]],["bool"]]],[11,"ne","","",8,[[["error"],["self"]],["bool"]]],[11,"eq","toml","",9,[[["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","toml::map","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","toml::value","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","toml::de","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","toml","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","toml::value","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::ser","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","toml::de","",8,[[["self"],["formatter"]],["result"]]],[11,"index","toml::map","",1,[[["self"],["q"]],["value"]]],[11,"index","toml::value","",4,[[["i"],["self"]],["value"]]],[11,"index_mut","toml::map","",1,[[["self"],["q"]],["value"]]],[11,"index_mut","toml::value","",4,[[["self"],["i"]],["value"]]],[11,"hash","toml","",9,[[["self"],["h"]]]],[11,"from_iter","toml::map","",1,[[["t"]],["self"]]],[11,"from_str","toml::value","",4,[[["str"]],[["result",["value"]],["value"]]]],[11,"from_str","","",15,[[["str"]],[["datetime"],["datetimeparseerror"],["result",["datetime","datetimeparseerror"]]]]],[11,"borrow","toml","",9,[[["self"]],["str"]]],[11,"description","toml::value","",16,[[["self"]],["str"]]],[11,"description","toml::ser","",5,[[["self"]],["str"]]],[11,"description","toml::de","",8,[[["self"]],["str"]]],[11,"deserialize_any","toml::value","",4,[[["v"]],[["error"],["result",["error"]]]]],[11,"deserialize_enum","","",4,[[["str"],["v"]],[["error"],["result",["error"]]]]],[11,"deserialize_option","","",4,[[["v"]],[["error"],["result",["error"]]]]],[11,"deserialize_newtype_struct","","",4,[[["str"],["v"]],[["error"],["result",["error"]]]]],[11,"deserialize_bool","","",4,[[["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["v"]],["result"]]],[11,"deserialize_char","","",4,[[["v"]],["result"]]],[11,"deserialize_str","","",4,[[["v"]],["result"]]],[11,"deserialize_string","","",4,[[["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["v"]],["result"]]],[11,"deserialize_map","","",4,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",4,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["v"]],["result"]]],[11,"deserialize_identifier","","",4,[[["v"]],["result"]]],[11,"into_deserializer","","",4,[[],["self"]]],[11,"custom","toml::ser","",5,[[["display"]],["error"]]],[11,"serialize","toml::map","",1,[[["s"],["self"]],["result"]]],[11,"serialize","toml::value","",4,[[["s"],["self"]],["result"]]],[11,"serialize","","",15,[[["s"],["self"]],["result"]]],[11,"serialize","toml","",9,[[["s"],["self"]],["result"]]],[11,"deserialize","toml::map","",1,[[["d"]],["result"]]],[11,"deserialize","toml::value","",4,[[["d"]],[["result",["value"]],["value"]]]],[11,"deserialize","","",15,[[["d"]],[["datetime"],["result",["datetime"]]]]],[11,"deserialize","toml","",9,[[["d"]],[["result",["spanned"]],["spanned"]]]],[11,"custom","toml::de","",8,[[["display"]],["error"]]]],"p":[[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[4,"Value"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"],[3,"Error"],[3,"Spanned"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Datetime"],[3,"DatetimeParseError"]]};
searchIndex["tracing"] = {"doc":"A scoped, structured logging and diagnostics system.","i":[[3,"Dispatch","tracing","`Dispatch` trace data to a [`Subscriber`].",null,null],[3,"Event","","`Event`s represent single points in time where something…",null,null],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given `Visitor`.",0,[[["field"],["self"],["visit"]]]],[8,"Subscriber","","Trait representing the functions required to collect trace…",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",1,[[["metadata"],["self"]],["interest"]]],[10,"enabled","","Returns true if a span or event with the specified…",1,[[["metadata"],["self"]],["bool"]]],[10,"new_span","","Visit the construction of a new span, returning a new…",1,[[["self"],["attributes"]],["id"]]],[10,"record","","Record a set of values on a span.",1,[[["record"],["self"],["id"]]]],[10,"record_follows_from","","Adds an indication that `span` follows from the span with…",1,[[["self"],["id"]]]],[10,"event","","Records that an [`Event`] has occurred.",1,[[["self"],["event"]]]],[10,"enter","","Records that a span has been entered.",1,[[["self"],["id"]]]],[10,"exit","","Records that a span has been exited.",1,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",1,[[["self"],["id"]],["id"]]],[11,"drop_span","","This method is soft-deprecated.",1,[[["id"],["self"]]]],[11,"try_close","","Notifies the subscriber that a [`span ID`] has been…",1,[[["id"],["self"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",1,[[["self"]],["current"]]],[11,"downcast_raw","","If `self` is the same type as the provided `TypeId`,…",1,[[["self"],["typeid"]],["option"]]],[0,"dispatcher","","Dispatches trace events to [`Subscriber`]s.",null,null],[3,"Dispatch","tracing::dispatcher","`Dispatch` trace data to a [`Subscriber`].",null,null],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the…",null,null],[5,"with_default","","Sets this dispatch as the default for the duration of a…",null,[[["dispatch"]],["t"]]],[5,"set_default","","Sets the dispatch as the default dispatch for the duration…",null,[[["dispatch"]],["defaultguard"]]],[5,"set_global_default","","Sets this dispatch as the global default for the duration…",null,[[["dispatch"]],[["result",["setglobaldefaulterror"]],["setglobaldefaulterror"]]]],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[5,"get_default","","Executes a closure with a reference to this thread's…",null,[[["f"]],["t"]]],[0,"event","tracing","Events represent single points in time during the…",null,null],[3,"Event","tracing::event","`Event`s represent single points in time where something…",null,null],[3,"Level","tracing","Describes the level of verbosity of a span or event.",null,null],[3,"Metadata","","Metadata describing a [span] or [event].",null,null],[23,"instrument","","Instruments a function to create and enter a `tracing`…",null,null],[3,"Span","","A handle representing a span, with the capability to enter…",null,null],[0,"field","","Structured data associated with `Span`s and `Event`s.",null,null],[3,"Field","tracing::field","An opaque key allowing O(1) access to a field in a…",null,null],[3,"FieldSet","","Describes the fields present on a span.",null,null],[3,"ValueSet","","A set of fields and values for a span.",null,null],[3,"Iter","","An iterator over a set of fields.",null,null],[8,"Visit","","Visits typed values.",null,null],[11,"record_i64","","Visit a signed 64-bit integer value.",2,[[["field"],["self"],["i64"]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",2,[[["field"],["self"],["u64"]]]],[11,"record_bool","","Visit a boolean value.",2,[[["field"],["self"],["bool"]]]],[11,"record_str","","Visit a string value.",2,[[["field"],["self"],["str"]]]],[11,"record_error","","Records a type implementing `Error`.",2,[[["field"],["self"],["error"]]]],[10,"record_debug","","Visit a value implementing `fmt::Debug`.",2,[[["field"],["self"],["debug"]]]],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given `Visitor`.",0,[[["field"],["self"],["visit"]]]],[3,"DisplayValue","","A `Value` which serializes using `fmt::Display`.",null,null],[3,"DebugValue","","A `Value` which serializes as a string using `fmt::Debug`.",null,null],[5,"display","","Wraps a type implementing `fmt::Display` as a `Value` that…",null,[[["t"]],["displayvalue"]]],[5,"debug","","Wraps a type implementing `fmt::Debug` as a `Value` that…",null,[[["t"]],["debugvalue"]]],[8,"AsField","","Trait implemented to allow a type to be used as a field key.",null,null],[10,"as_field","","Attempts to convert `&self` into a `Field` with the…",3,[[["metadata"],["self"]],[["option",["field"]],["field"]]]],[0,"level_filters","tracing","Trace verbosity level filtering.",null,null],[3,"LevelFilter","tracing::level_filters","A filter comparable to trace verbosity `Level`.",null,null],[17,"STATIC_MAX_LEVEL","","The statically configured maximum trace level.",null,null],[18,"OFF","","The \"off\" level.",4,null],[18,"ERROR","","The \"error\" level.",4,null],[18,"WARN","","The \"warn\" level.",4,null],[18,"INFO","","The \"info\" level.",4,null],[18,"DEBUG","","The \"debug\" level.",4,null],[18,"TRACE","","The \"trace\" level.",4,null],[11,"from_level","","Returns a `LevelFilter` that enables spans and events with…",4,[[["level"]],["self"]]],[11,"into_level","","Returns the most verbose [`Level`] that this filter…",4,[[],[["option",["level"]],["level"]]]],[0,"span","tracing","Spans represent periods of time in which a program was…",null,null],[3,"Attributes","tracing::span","Attributes provided to a `Subscriber` describing a new…",null,null],[3,"Id","","Identifies a span within the context of a subscriber.",null,null],[3,"Record","","A set of fields recorded by a span.",null,null],[3,"Span","","A handle representing a span, with the capability to enter…",null,null],[3,"Entered","","A guard representing a span which has been entered and is…",null,null],[8,"AsId","","Trait implemented by types which have a span `Id`.",null,null],[10,"as_id","","Returns the `Id` of the span that `self` corresponds to,…",5,[[["self"]],[["id"],["option",["id"]]]]],[11,"new","","Constructs a new `Span` with the given [metadata] and set…",6,[[["metadata"],["valueset"]],["span"]]],[11,"new_root","","Constructs a new `Span` as the root of its own trace tree,…",6,[[["metadata"],["valueset"]],["span"]]],[11,"child_of","","Constructs a new `Span` as child of the given parent span,…",6,[[["metadata"],["valueset"]],["span"]]],[11,"new_disabled","","Constructs a new disabled span with the given `Metadata`.",6,[[["metadata"]],["span"]]],[11,"none","","Constructs a new span that is completely disabled.",6,[[],["span"]]],[11,"current","","Returns a handle to the span [considered by the…",6,[[],["span"]]],[11,"enter","","Enters this span, returning a guard that will exit the…",6,[[["self"]],["entered"]]],[11,"in_scope","","Executes the given function in the context of this span.",6,[[["fnonce"],["self"]],["t"]]],[11,"field","","Returns a `Field` for the field with the given `name`, if…",6,[[["self"],["q"]],[["option",["field"]],["field"]]]],[11,"has_field","","Returns true if this `Span` has a field for the given…",6,[[["self"],["q"]],["bool"]]],[11,"record","","Visits that the field described by `field` has the value…",6,[[["v"],["self"],["q"]],["self"]]],[11,"record_all","","Visit all the fields in the span",6,[[["valueset"],["self"]],["self"]]],[11,"is_disabled","","Returns `true` if this span was disabled by the subscriber…",6,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if this span was constructed by…",6,[[["self"]],["bool"]]],[11,"follows_from","","Indicates that the span with the given ID has an indirect…",6,[[["self"]],["self"]]],[11,"id","","Returns this span's `Id`, if it is enabled.",6,[[["self"]],[["id"],["option",["id"]]]]],[11,"metadata","","Returns this span's `Metadata`, if it is enabled.",6,[[["self"]],[["option",["metadata"]],["metadata"]]]],[0,"subscriber","tracing","Collects and records trace data.",null,null],[8,"Subscriber","tracing::subscriber","Trait representing the functions required to collect trace…",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",1,[[["metadata"],["self"]],["interest"]]],[10,"enabled","","Returns true if a span or event with the specified…",1,[[["metadata"],["self"]],["bool"]]],[10,"new_span","","Visit the construction of a new span, returning a new…",1,[[["self"],["attributes"]],["id"]]],[10,"record","","Record a set of values on a span.",1,[[["record"],["self"],["id"]]]],[10,"record_follows_from","","Adds an indication that `span` follows from the span with…",1,[[["self"],["id"]]]],[10,"event","","Records that an [`Event`] has occurred.",1,[[["self"],["event"]]]],[10,"enter","","Records that a span has been entered.",1,[[["self"],["id"]]]],[10,"exit","","Records that a span has been exited.",1,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",1,[[["self"],["id"]],["id"]]],[11,"drop_span","","This method is soft-deprecated.",1,[[["id"],["self"]]]],[11,"try_close","","Notifies the subscriber that a [`span ID`] has been…",1,[[["id"],["self"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",1,[[["self"]],["current"]]],[11,"downcast_raw","","If `self` is the same type as the provided `TypeId`,…",1,[[["self"],["typeid"]],["option"]]],[3,"Interest","","Indicates a [`Subscriber`]'s interest in a particular…",null,null],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the…",null,null],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[5,"with_default","","Sets this subscriber as the default for the duration of a…",null,[[["s"]],["t"]]],[5,"set_global_default","","Sets this subscriber as the global default for the…",null,[[["s"]],[["setglobaldefaulterror"],["result",["setglobaldefaulterror"]]]]],[5,"set_default","","Sets the subscriber as the default for the duration of the…",null,[[["s"]],["defaultguard"]]],[14,"span","tracing","Constructs a new span.",null,null],[14,"trace_span","","Constructs a span at the trace level.",null,null],[14,"debug_span","","Constructs a span at the debug level.",null,null],[14,"info_span","","Constructs a span at the info level.",null,null],[14,"warn_span","","Constructs a span at the warn level.",null,null],[14,"error_span","","Constructs a span at the error level.",null,null],[14,"event","","Constructs a new `Event`.",null,null],[14,"trace","","Constructs an event at the trace level.",null,null],[14,"debug","","Constructs an event at the debug level.",null,null],[14,"info","","Constructs an event at the info level.",null,null],[14,"warn","","Constructs an event at the warn level.",null,null],[14,"error","","Constructs an event at the error level.",null,null],[11,"from","tracing::dispatcher","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","tracing::event","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","tracing::subscriber","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","tracing","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","tracing::span","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","tracing::field","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"into_iter","","",16,[[],["i"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","tracing::level_filters","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tracing::span","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","tracing::subscriber","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"as_ref","tracing::field","",13,[[["self"]],["str"]]],[11,"fmt","tracing::subscriber","",10,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::span","",19,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::subscriber","",9,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing","",12,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::field","",14,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing","",11,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::span","",21,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::event","",8,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::field","",17,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",15,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",16,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",18,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::subscriber","",23,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::span","",20,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::dispatcher","",7,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"drop","tracing::subscriber","",9,[[["self"]]]],[11,"clone","","",23,[[["self"]],["interest"]]],[11,"clone","tracing::field","",13,[[["self"]],["field"]]],[11,"clone","tracing","",11,[[["self"]],["level"]]],[11,"clone","tracing::field","",17,[[["self"]],["displayvalue"]]],[11,"clone","tracing::span","",20,[[["self"]],["id"]]],[11,"clone","tracing::dispatcher","",7,[[["self"]],["dispatch"]]],[11,"clone","tracing::field","",18,[[["self"]],["debugvalue"]]],[11,"from_str","tracing","",11,[[["str"]],[["level"],["result",["level","parselevelerror"]],["parselevelerror"]]]],[11,"eq","tracing::span","",20,[[["self"],["id"]],["bool"]]],[11,"ne","","",20,[[["self"],["id"]],["bool"]]],[11,"eq","tracing","",11,[[["self"],["level"]],["bool"]]],[11,"ne","","",11,[[["self"],["level"]],["bool"]]],[11,"eq","tracing::field","",13,[[["field"],["self"]],["bool"]]],[11,"record","","",18,[[["field"],["self"],["visit"]]]],[11,"record","","",17,[[["field"],["self"],["visit"]]]],[11,"hash","tracing::span","",20,[[["self"],["__h"]]]],[11,"hash","tracing::field","",13,[[["self"],["h"]]]],[11,"default","tracing::dispatcher","Returns the current default dispatcher",7,[[],["dispatch"]]],[11,"fmt","tracing","",11,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::subscriber","",10,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","tracing::field","",15,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",14,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",13,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"partial_cmp","tracing","",11,[[["self"],["level"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["self"],["level"]],["bool"]]],[11,"le","","",11,[[["self"],["level"]],["bool"]]],[11,"gt","","",11,[[["self"],["level"]],["bool"]]],[11,"ge","","",11,[[["self"],["level"]],["bool"]]],[11,"cmp","","",11,[[["self"],["level"]],["ordering"]]],[11,"from","tracing::dispatcher","",7,[[["s"]],["dispatch"]]],[11,"next","tracing::field","",16,[[["self"]],[["option",["field"]],["field"]]]],[11,"as_field","","",13,[[["metadata"],["self"]],[["option",["field"]],["field"]]]],[11,"drop","tracing::span","",6,[[["self"]]]],[11,"drop","","",22,[[["self"]]]],[11,"from","tracing::level_filters","",4,[[["level"]],["self"]]],[11,"into","tracing::span","",6,[[],[["id"],["option",["id"]]]]],[11,"clone","tracing::level_filters","",4,[[["self"]],["levelfilter"]]],[11,"clone","tracing::span","",6,[[["self"]],["span"]]],[11,"cmp","tracing::level_filters","",4,[[["self"],["levelfilter"]],["ordering"]]],[11,"eq","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"ne","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","tracing","",11,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","tracing::span","",6,[[["self"]],["bool"]]],[11,"partial_cmp","tracing::level_filters","",4,[[["self"],["levelfilter"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",4,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","tracing","",11,[[["self"],["levelfilter"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","tracing::level_filters","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","tracing::span","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"hash","","",6,[[["self"],["h"]]]],[11,"none","tracing::dispatcher","Returns a new `Dispatch` that discards events and spans.",7,[[],["dispatch"]]],[11,"new","","Returns a `Dispatch` that forwards to the given…",7,[[["s"]],["dispatch"]]],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",7,[[["metadata"],["self"]],["interest"]]],[11,"new_span","","Record the construction of a new span, returning a new…",7,[[["self"],["attributes"]],["id"]]],[11,"record","","Record a set of values on a span.",7,[[["record"],["self"],["id"]]]],[11,"record_follows_from","","Adds an indication that `span` follows from the span with…",7,[[["self"],["id"]]]],[11,"enabled","","Returns true if a span with the specified [metadata] would…",7,[[["metadata"],["self"]],["bool"]]],[11,"event","","Records that an [`Event`] has occurred.",7,[[["self"],["event"]]]],[11,"enter","","Records that a span has been can_enter.",7,[[["self"],["id"]]]],[11,"exit","","Records that a span has been exited.",7,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",7,[[["self"],["id"]],["id"]]],[11,"drop_span","","Notifies the subscriber that a [span ID] has been dropped.",7,[[["id"],["self"]]]],[11,"try_close","","Notifies the subscriber that a [span ID] has been dropped,…",7,[[["id"],["self"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",7,[[["self"]],["current"]]],[11,"is","","Returns `true` if this `Dispatch` forwards to a…",7,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the `Subscriber` this `Dispatch`…",7,[[["self"]],[["t"],["option"]]]],[11,"dispatch","tracing::event","Constructs a new `Event` with the specified metadata and…",8,[[["metadata"],["valueset"]]]],[11,"new","","Returns a new `Event` in the current span, with the…",8,[[["metadata"],["valueset"]],["event"]]],[11,"new_child_of","","Returns a new `Event` as a child of the specified span,…",8,[[["metadata"],["valueset"]],["event"]]],[11,"child_of","","Constructs a new `Event` with the specified metadata and…",8,[[["metadata"],["valueset"]]]],[11,"record","","Visits all the fields on this `Event` with the specified…",8,[[["self"],["visit"]]]],[11,"fields","","Returns an iterator over the set of values on this `Event`.",8,[[["self"]],["iter"]]],[11,"metadata","","Returns [metadata] describing this `Event`.",8,[[["self"]],["metadata"]]],[11,"is_root","","Returns true if the new event should be a root.",8,[[["self"]],["bool"]]],[11,"is_contextual","","Returns true if the new event's parent should be…",8,[[["self"]],["bool"]]],[11,"parent","","Returns the new event's explicitly-specified parent, if…",8,[[["self"]],[["option",["id"]],["id"]]]],[11,"is","tracing::subscriber","Returns `true` if this `Subscriber` is the same type as `T`.",1,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to this `Subscriber` value if it is…",1,[[["self"]],[["t"],["option"]]]],[18,"ERROR","tracing","The \"error\" level.",11,null],[18,"WARN","","The \"warn\" level.",11,null],[18,"INFO","","The \"info\" level.",11,null],[18,"DEBUG","","The \"debug\" level.",11,null],[18,"TRACE","","The \"trace\" level.",11,null],[11,"new","","Construct new metadata for a span or event, with a name,…",12,[[["str"],["u32"],["level"],["fieldset"],["kind"],["option",["str"]],["option",["u32"]],["str"]],["metadata"]]],[11,"fields","","Returns the names of the fields on the described span or…",12,[[["self"]],["fieldset"]]],[11,"level","","Returns the level of verbosity of the described span or…",12,[[["self"]],["level"]]],[11,"name","","Returns the name of the span.",12,[[["self"]],["str"]]],[11,"target","","Returns a string describing the part of the system where…",12,[[["self"]],["str"]]],[11,"module_path","","Returns the path to the Rust module where the span…",12,[[["self"]],[["str"],["option",["str"]]]]],[11,"file","","Returns the name of the source code file where the span…",12,[[["self"]],[["str"],["option",["str"]]]]],[11,"line","","Returns the line number in the source code file where the…",12,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"callsite","","Returns an opaque `Identifier` that uniquely identifies…",12,[[["self"]],["identifier"]]],[11,"is_event","","Returns true if the callsite kind is `Event`.",12,[[["self"]],["bool"]]],[11,"is_span","","Return true if the callsite kind is `Span`.",12,[[["self"]],["bool"]]],[11,"callsite","tracing::field","Returns an [`Identifier`] that uniquely identifies the…",13,[[["self"]],["identifier"]]],[11,"name","","Returns a string representing the name of the field.",13,[[["self"]],["str"]]],[11,"new","","Constructs a new `FieldSet` with the given array of field…",14,[[["identifier"]],["fieldset"]]],[11,"field","","Returns the [`Field`] named `name`, or `None` if no such…",14,[[["self"],["q"]],[["option",["field"]],["field"]]]],[11,"contains","","Returns `true` if `self` contains the given `field`.",14,[[["field"],["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Field`s in this `FieldSet`.",14,[[["self"]],["iter"]]],[11,"len","","Returns the number of fields in this `FieldSet`.",14,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether or not this `FieldSet` has fields.",14,[[["self"]],["bool"]]],[11,"callsite","","Returns an [`Identifier`] that uniquely identifies the…",15,[[["self"]],["identifier"]]],[11,"new","tracing::span","Returns `Attributes` describing a new child span of the…",19,[[["metadata"],["valueset"]],["attributes"]]],[11,"new_root","","Returns `Attributes` describing a new span at the root of…",19,[[["metadata"],["valueset"]],["attributes"]]],[11,"child_of","","Returns `Attributes` describing a new child span of the…",19,[[["id"],["metadata"],["valueset"]],["attributes"]]],[11,"metadata","","Returns a reference to the new span's metadata.",19,[[["self"]],["metadata"]]],[11,"values","","Returns a reference to a `ValueSet` containing any values…",19,[[["self"]],["valueset"]]],[11,"is_root","","Returns true if the new span should be a root.",19,[[["self"]],["bool"]]],[11,"is_contextual","","Returns true if the new span's parent should be determined…",19,[[["self"]],["bool"]]],[11,"parent","","Returns the new span's explicitly-specified parent, if…",19,[[["self"]],[["option",["id"]],["id"]]]],[11,"record","","Records all the fields in this set of `Attributes` with…",19,[[["self"],["visit"]]]],[11,"contains","","Returns `true` if this set of `Attributes` contains a…",19,[[["field"],["self"]],["bool"]]],[11,"is_empty","","Returns true if this set of `Attributes` contains no values.",19,[[["self"]],["bool"]]],[11,"from_u64","","Constructs a new span ID from the given `u64`.",20,[[["u64"]],["id"]]],[11,"into_u64","","Returns the span's ID as a  `u64`.",20,[[["self"]],["u64"]]],[11,"new","","Constructs a new `Record` from a `ValueSet`.",21,[[["valueset"]],["record"]]],[11,"record","","Records all the fields in this `Record` with the provided…",21,[[["self"],["visit"]]]],[11,"contains","","Returns `true` if this `Record` contains a value for the…",21,[[["field"],["self"]],["bool"]]],[11,"is_empty","","Returns true if this `Record` contains no values.",21,[[["self"]],["bool"]]],[11,"never","tracing::subscriber","Returns an `Interest` indicating that the subscriber is…",23,[[],["interest"]]],[11,"sometimes","","Returns an `Interest` indicating the subscriber is…",23,[[],["interest"]]],[11,"always","","Returns an `Interest` indicating the subscriber is always…",23,[[],["interest"]]],[11,"is_never","","Returns `true` if the subscriber is never interested in…",23,[[["self"]],["bool"]]],[11,"is_sometimes","","Returns `true` if the subscriber is sometimes interested…",23,[[["self"]],["bool"]]],[11,"is_always","","Returns `true` if the subscriber is always interested in…",23,[[["self"]],["bool"]]]],"p":[[8,"Value"],[8,"Subscriber"],[8,"Visit"],[8,"AsField"],[3,"LevelFilter"],[8,"AsId"],[3,"Span"],[3,"Dispatch"],[3,"Event"],[3,"DefaultGuard"],[3,"SetGlobalDefaultError"],[3,"Level"],[3,"Metadata"],[3,"Field"],[3,"FieldSet"],[3,"ValueSet"],[3,"Iter"],[3,"DisplayValue"],[3,"DebugValue"],[3,"Attributes"],[3,"Id"],[3,"Record"],[3,"Entered"],[3,"Interest"]]};
searchIndex["tracing_attributes"] = {"doc":"A procedural macro attribute for instrumenting functions…","i":[[23,"instrument","tracing_attributes","Instruments a function to create and enter a `tracing`…",null,null]],"p":[]};
searchIndex["tracing_core"] = {"doc":"Core primitives for `tracing`.","i":[[3,"Dispatch","tracing_core","`Dispatch` trace data to a [`Subscriber`].",null,null],[3,"Event","","`Event`s represent single points in time where something…",null,null],[3,"Field","","An opaque key allowing O(1) access to a field in a…",null,null],[3,"Level","","Describes the level of verbosity of a span or event.",null,null],[3,"Metadata","","Metadata describing a [span] or [event].",null,null],[0,"callsite","","Callsites represent the source locations from which spans…",null,null],[3,"Identifier","tracing_core::callsite","Uniquely identifies a [`Callsite`]",null,null],[5,"rebuild_interest_cache","","Clear and reregister interest on every [`Callsite`]",null,[[]]],[5,"register","","Register a new `Callsite` with the global registry.",null,[[["callsite"]]]],[8,"Callsite","","Trait implemented by callsites.",null,null],[10,"set_interest","","Sets the [`Interest`] for this callsite.",0,[[["self"],["interest"]]]],[10,"metadata","","Returns the [metadata] associated with the callsite.",0,[[["self"]],["metadata"]]],[0,"dispatcher","tracing_core","Dispatches trace events to [`Subscriber`]s.",null,null],[3,"Dispatch","tracing_core::dispatcher","`Dispatch` trace data to a [`Subscriber`].",null,null],[3,"DefaultGuard","","A guard that resets the current default dispatcher to the…",null,null],[3,"SetGlobalDefaultError","","Returned if setting the global dispatcher fails.",null,null],[5,"with_default","","Sets this dispatch as the default for the duration of a…",null,[[["dispatch"]],["t"]]],[5,"set_default","","Sets the dispatch as the default dispatch for the duration…",null,[[["dispatch"]],["defaultguard"]]],[5,"set_global_default","","Sets this dispatch as the global default for the duration…",null,[[["dispatch"]],[["result",["setglobaldefaulterror"]],["setglobaldefaulterror"]]]],[5,"get_default","","Executes a closure with a reference to this thread's…",null,[[["f"]],["t"]]],[11,"none","","Returns a new `Dispatch` that discards events and spans.",1,[[],["self"]]],[11,"new","","Returns a `Dispatch` that forwards to the given…",1,[[["s"]],["self"]]],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",1,[[["metadata"],["self"]],["interest"]]],[11,"new_span","","Record the construction of a new span, returning a new…",1,[[["attributes"],["self"]],["id"]]],[11,"record","","Record a set of values on a span.",1,[[["record"],["self"],["id"]]]],[11,"record_follows_from","","Adds an indication that `span` follows from the span with…",1,[[["self"],["id"]]]],[11,"enabled","","Returns true if a span with the specified [metadata] would…",1,[[["metadata"],["self"]],["bool"]]],[11,"event","","Records that an [`Event`] has occurred.",1,[[["self"],["event"]]]],[11,"enter","","Records that a span has been can_enter.",1,[[["self"],["id"]]]],[11,"exit","","Records that a span has been exited.",1,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",1,[[["self"],["id"]],["id"]]],[11,"drop_span","","Notifies the subscriber that a [span ID] has been dropped.",1,[[["self"],["id"]]]],[11,"try_close","","Notifies the subscriber that a [span ID] has been dropped,…",1,[[["self"],["id"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",1,[[["self"]],["current"]]],[11,"is","","Returns `true` if this `Dispatch` forwards to a…",1,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the `Subscriber` this `Dispatch`…",1,[[["self"]],[["option"],["t"]]]],[0,"event","tracing_core","Events represent single points in time during the…",null,null],[3,"Event","tracing_core::event","`Event`s represent single points in time where something…",null,null],[11,"dispatch","","Constructs a new `Event` with the specified metadata and…",2,[[["metadata"],["valueset"]]]],[11,"new","","Returns a new `Event` in the current span, with the…",2,[[["metadata"],["valueset"]],["self"]]],[11,"new_child_of","","Returns a new `Event` as a child of the specified span,…",2,[[["metadata"],["valueset"]],["self"]]],[11,"child_of","","Constructs a new `Event` with the specified metadata and…",2,[[["metadata"],["valueset"]]]],[11,"record","","Visits all the fields on this `Event` with the specified…",2,[[["visit"],["self"]]]],[11,"fields","","Returns an iterator over the set of values on this `Event`.",2,[[["self"]],["iter"]]],[11,"metadata","","Returns [metadata] describing this `Event`.",2,[[["self"]],["metadata"]]],[11,"is_root","","Returns true if the new event should be a root.",2,[[["self"]],["bool"]]],[11,"is_contextual","","Returns true if the new event's parent should be…",2,[[["self"]],["bool"]]],[11,"parent","","Returns the new event's explicitly-specified parent, if…",2,[[["self"]],[["option",["id"]],["id"]]]],[0,"field","tracing_core","Span and `Event` key-value data.",null,null],[3,"Field","tracing_core::field","An opaque key allowing O(1) access to a field in a…",null,null],[3,"FieldSet","","Describes the fields present on a span.",null,null],[3,"ValueSet","","A set of fields and values for a span.",null,null],[3,"Iter","","An iterator over a set of fields.",null,null],[3,"DisplayValue","","A `Value` which serializes using `fmt::Display`.",null,null],[3,"DebugValue","","A `Value` which serializes as a string using `fmt::Debug`.",null,null],[5,"display","","Wraps a type implementing `fmt::Display` as a `Value` that…",null,[[["t"]],["displayvalue"]]],[5,"debug","","Wraps a type implementing `fmt::Debug` as a `Value` that…",null,[[["t"]],["debugvalue"]]],[8,"Visit","","Visits typed values.",null,null],[11,"record_i64","","Visit a signed 64-bit integer value.",3,[[["i64"],["self"],["field"]]]],[11,"record_u64","","Visit an unsigned 64-bit integer value.",3,[[["self"],["field"],["u64"]]]],[11,"record_bool","","Visit a boolean value.",3,[[["self"],["field"],["bool"]]]],[11,"record_str","","Visit a string value.",3,[[["str"],["self"],["field"]]]],[11,"record_error","","Records a type implementing `Error`.",3,[[["self"],["field"],["error"]]]],[10,"record_debug","","Visit a value implementing `fmt::Debug`.",3,[[["debug"],["self"],["field"]]]],[8,"Value","","A field value of an erased type.",null,null],[10,"record","","Visits this value with the given `Visitor`.",4,[[["field"],["self"],["visit"]]]],[11,"callsite","","Returns an [`Identifier`] that uniquely identifies the…",5,[[["self"]],["identifier"]]],[11,"name","","Returns a string representing the name of the field.",5,[[["self"]],["str"]]],[11,"new","","Constructs a new `FieldSet` with the given array of field…",6,[[["identifier"]],["self"]]],[11,"field","","Returns the [`Field`] named `name`, or `None` if no such…",6,[[["self"],["q"]],[["field"],["option",["field"]]]]],[11,"contains","","Returns `true` if `self` contains the given `field`.",6,[[["field"],["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Field`s in this `FieldSet`.",6,[[["self"]],["iter"]]],[11,"len","","Returns the number of fields in this `FieldSet`.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether or not this `FieldSet` has fields.",6,[[["self"]],["bool"]]],[11,"callsite","","Returns an [`Identifier`] that uniquely identifies the…",7,[[["self"]],["identifier"]]],[0,"metadata","tracing_core","Metadata describing trace data.",null,null],[3,"Metadata","tracing_core::metadata","Metadata describing a [span] or [event].",null,null],[3,"Kind","","Indicates whether the callsite is a span or event.",null,null],[3,"Level","","Describes the level of verbosity of a span or event.",null,null],[3,"ParseLevelError","","Returned if parsing a `Level` fails.",null,null],[11,"new","","Construct new metadata for a span or event, with a name,…",8,[[["str"],["option",["str"]],["u32"],["fieldset"],["kind"],["str"],["option",["u32"]],["level"]],["self"]]],[11,"fields","","Returns the names of the fields on the described span or…",8,[[["self"]],["fieldset"]]],[11,"level","","Returns the level of verbosity of the described span or…",8,[[["self"]],["level"]]],[11,"name","","Returns the name of the span.",8,[[["self"]],["str"]]],[11,"target","","Returns a string describing the part of the system where…",8,[[["self"]],["str"]]],[11,"module_path","","Returns the path to the Rust module where the span…",8,[[["self"]],[["str"],["option",["str"]]]]],[11,"file","","Returns the name of the source code file where the span…",8,[[["self"]],[["str"],["option",["str"]]]]],[11,"line","","Returns the line number in the source code file where the…",8,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"callsite","","Returns an opaque `Identifier` that uniquely identifies…",8,[[["self"]],["identifier"]]],[11,"is_event","","Returns true if the callsite kind is `Event`.",8,[[["self"]],["bool"]]],[11,"is_span","","Return true if the callsite kind is `Span`.",8,[[["self"]],["bool"]]],[18,"EVENT","","`Event` callsite",9,null],[18,"SPAN","","`Span` callsite",9,null],[11,"is_span","","Return true if the callsite kind is `Span`",9,[[["self"]],["bool"]]],[11,"is_event","","Return true if the callsite kind is `Event`",9,[[["self"]],["bool"]]],[18,"ERROR","","The \"error\" level.",10,null],[18,"WARN","","The \"warn\" level.",10,null],[18,"INFO","","The \"info\" level.",10,null],[18,"DEBUG","","The \"debug\" level.",10,null],[18,"TRACE","","The \"trace\" level.",10,null],[0,"span","tracing_core","Spans represent periods of time in the execution of a…",null,null],[3,"Id","tracing_core::span","Identifies a span within the context of a subscriber.",null,null],[3,"Attributes","","Attributes provided to a `Subscriber` describing a new…",null,null],[3,"Record","","A set of fields recorded by a span.",null,null],[3,"Current","","Indicates what [the `Subscriber` considers] the \"current\"…",null,null],[11,"from_u64","","Constructs a new span ID from the given `u64`.",11,[[["u64"]],["self"]]],[11,"into_u64","","Returns the span's ID as a  `u64`.",11,[[["self"]],["u64"]]],[11,"new","","Returns `Attributes` describing a new child span of the…",12,[[["metadata"],["valueset"]],["self"]]],[11,"new_root","","Returns `Attributes` describing a new span at the root of…",12,[[["metadata"],["valueset"]],["self"]]],[11,"child_of","","Returns `Attributes` describing a new child span of the…",12,[[["metadata"],["id"],["valueset"]],["self"]]],[11,"metadata","","Returns a reference to the new span's metadata.",12,[[["self"]],["metadata"]]],[11,"values","","Returns a reference to a `ValueSet` containing any values…",12,[[["self"]],["valueset"]]],[11,"is_root","","Returns true if the new span should be a root.",12,[[["self"]],["bool"]]],[11,"is_contextual","","Returns true if the new span's parent should be determined…",12,[[["self"]],["bool"]]],[11,"parent","","Returns the new span's explicitly-specified parent, if…",12,[[["self"]],[["option",["id"]],["id"]]]],[11,"record","","Records all the fields in this set of `Attributes` with…",12,[[["visit"],["self"]]]],[11,"contains","","Returns `true` if this set of `Attributes` contains a…",12,[[["field"],["self"]],["bool"]]],[11,"is_empty","","Returns true if this set of `Attributes` contains no values.",12,[[["self"]],["bool"]]],[11,"new","","Constructs a new `Record` from a `ValueSet`.",13,[[["valueset"]],["self"]]],[11,"record","","Records all the fields in this `Record` with the provided…",13,[[["visit"],["self"]]]],[11,"contains","","Returns `true` if this `Record` contains a value for the…",13,[[["field"],["self"]],["bool"]]],[11,"is_empty","","Returns true if this `Record` contains no values.",13,[[["self"]],["bool"]]],[11,"new","","Constructs a new `Current` that indicates the current…",14,[[["metadata"],["id"]],["self"]]],[11,"none","","Constructs a new `Current` that indicates the current…",14,[[],["self"]]],[11,"is_known","","Returns `true` if the `Subscriber` that constructed this…",14,[[["self"]],["bool"]]],[11,"into_inner","","Consumes `self` and returns the span `Id` and `Metadata`…",14,[[],["option"]]],[11,"id","","Borrows the `Id` of the current span, if one exists and is…",14,[[["self"]],[["option",["id"]],["id"]]]],[11,"metadata","","Borrows the `Metadata` of the current span, if one exists…",14,[[["self"]],[["metadata"],["option",["metadata"]]]]],[0,"subscriber","tracing_core","Subscribers collect and record trace data.",null,null],[3,"Interest","tracing_core::subscriber","Indicates a [`Subscriber`]'s interest in a particular…",null,null],[8,"Subscriber","","Trait representing the functions required to collect trace…",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",15,[[["metadata"],["self"]],["interest"]]],[10,"enabled","","Returns true if a span or event with the specified…",15,[[["metadata"],["self"]],["bool"]]],[10,"new_span","","Visit the construction of a new span, returning a new…",15,[[["attributes"],["self"]],["id"]]],[10,"record","","Record a set of values on a span.",15,[[["record"],["self"],["id"]]]],[10,"record_follows_from","","Adds an indication that `span` follows from the span with…",15,[[["self"],["id"]]]],[10,"event","","Records that an [`Event`] has occurred.",15,[[["self"],["event"]]]],[10,"enter","","Records that a span has been entered.",15,[[["self"],["id"]]]],[10,"exit","","Records that a span has been exited.",15,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",15,[[["self"],["id"]],["id"]]],[11,"drop_span","","This method is soft-deprecated.",15,[[["self"],["id"]]]],[11,"try_close","","Notifies the subscriber that a [`span ID`] has been…",15,[[["self"],["id"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",15,[[["self"]],["current"]]],[11,"downcast_raw","","If `self` is the same type as the provided `TypeId`,…",15,[[["typeid"],["self"]],["option"]]],[11,"is","","Returns `true` if this `Subscriber` is the same type as `T`.",15,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to this `Subscriber` value if it is…",15,[[["self"]],[["option"],["t"]]]],[11,"never","","Returns an `Interest` indicating that the subscriber is…",16,[[],["self"]]],[11,"sometimes","","Returns an `Interest` indicating the subscriber is…",16,[[],["self"]]],[11,"always","","Returns an `Interest` indicating the subscriber is always…",16,[[],["self"]]],[11,"is_never","","Returns `true` if the subscriber is never interested in…",16,[[["self"]],["bool"]]],[11,"is_sometimes","","Returns `true` if the subscriber is sometimes interested…",16,[[["self"]],["bool"]]],[11,"is_always","","Returns `true` if the subscriber is always interested in…",16,[[["self"]],["bool"]]],[8,"Callsite","tracing_core","Trait implemented by callsites.",null,null],[10,"set_interest","","Sets the [`Interest`] for this callsite.",0,[[["self"],["interest"]]]],[10,"metadata","","Returns the [metadata] associated with the callsite.",0,[[["self"]],["metadata"]]],[8,"Subscriber","","Trait representing the functions required to collect trace…",null,null],[11,"register_callsite","","Registers a new callsite with this subscriber, returning…",15,[[["metadata"],["self"]],["interest"]]],[10,"enabled","","Returns true if a span or event with the specified…",15,[[["metadata"],["self"]],["bool"]]],[10,"new_span","","Visit the construction of a new span, returning a new…",15,[[["attributes"],["self"]],["id"]]],[10,"record","","Record a set of values on a span.",15,[[["record"],["self"],["id"]]]],[10,"record_follows_from","","Adds an indication that `span` follows from the span with…",15,[[["self"],["id"]]]],[10,"event","","Records that an [`Event`] has occurred.",15,[[["self"],["event"]]]],[10,"enter","","Records that a span has been entered.",15,[[["self"],["id"]]]],[10,"exit","","Records that a span has been exited.",15,[[["self"],["id"]]]],[11,"clone_span","","Notifies the subscriber that a [span ID] has been cloned.",15,[[["self"],["id"]],["id"]]],[11,"drop_span","","This method is soft-deprecated.",15,[[["self"],["id"]]]],[11,"try_close","","Notifies the subscriber that a [`span ID`] has been…",15,[[["self"],["id"]],["bool"]]],[11,"current_span","","Returns a type representing this subscriber's view of the…",15,[[["self"]],["current"]]],[11,"downcast_raw","","If `self` is the same type as the provided `TypeId`,…",15,[[["typeid"],["self"]],["option"]]],[14,"identify_callsite","","Statically constructs an [`Identifier`] for the provided…",null,null],[14,"metadata","","Statically constructs new span [metadata].",null,null],[11,"from","tracing_core::dispatcher","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tracing_core::event","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tracing_core::field","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","tracing_core::metadata","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","tracing_core::callsite","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","tracing_core::dispatcher","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","tracing_core::field","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_string","","",7,[[["self"]],["string"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"into_iter","","",20,[[],["i"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","tracing_core::metadata","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","tracing_core::span","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","tracing_core::subscriber","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"record","tracing_core::field","",21,[[["field"],["self"],["visit"]]]],[11,"record","","",22,[[["field"],["self"],["visit"]]]],[11,"drop","tracing_core::dispatcher","",18,[[["self"]]]],[11,"as_ref","tracing_core::field","",5,[[["self"]],["str"]]],[11,"from","tracing_core::dispatcher","",1,[[["s"]],["self"]]],[11,"into","tracing_core::span","",14,[[],[["option",["id"]],["id"]]]],[11,"next","tracing_core::field","",20,[[["self"]],[["field"],["option",["field"]]]]],[11,"clone","tracing_core::callsite","",17,[[["self"]],["identifier"]]],[11,"clone","tracing_core::dispatcher","",1,[[["self"]],["dispatch"]]],[11,"clone","tracing_core::field","",21,[[["self"]],["displayvalue"]]],[11,"clone","","",22,[[["self"]],["debugvalue"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"clone","tracing_core::metadata","",9,[[["self"]],["kind"]]],[11,"clone","","",10,[[["self"]],["level"]]],[11,"clone","tracing_core::span","",11,[[["self"]],["id"]]],[11,"clone","tracing_core::subscriber","",16,[[["self"]],["interest"]]],[11,"default","tracing_core::dispatcher","Returns the current default dispatcher",1,[[],["self"]]],[11,"cmp","tracing_core::metadata","",10,[[["level"],["self"]],["ordering"]]],[11,"eq","tracing_core::callsite","",17,[[["identifier"],["self"]],["bool"]]],[11,"eq","tracing_core::field","",5,[[["self"]],["bool"]]],[11,"eq","tracing_core::metadata","",9,[[["kind"],["self"]],["bool"]]],[11,"ne","","",9,[[["kind"],["self"]],["bool"]]],[11,"eq","","",10,[[["level"],["self"]],["bool"]]],[11,"ne","","",10,[[["level"],["self"]],["bool"]]],[11,"eq","tracing_core::span","",11,[[["self"],["id"]],["bool"]]],[11,"ne","","",11,[[["self"],["id"]],["bool"]]],[11,"partial_cmp","tracing_core::metadata","",10,[[["level"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["level"],["self"]],["bool"]]],[11,"le","","",10,[[["level"],["self"]],["bool"]]],[11,"gt","","",10,[[["level"],["self"]],["bool"]]],[11,"ge","","",10,[[["level"],["self"]],["bool"]]],[11,"fmt","tracing_core::callsite","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","tracing_core::dispatcher","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tracing_core::event","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","tracing_core::field","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tracing_core::metadata","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","tracing_core::span","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","tracing_core::subscriber","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","tracing_core::dispatcher","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","tracing_core::field","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","tracing_core::metadata","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"hash","tracing_core::callsite","",17,[[["self"],["h"]]]],[11,"hash","tracing_core::field","",5,[[["self"],["h"]]]],[11,"hash","tracing_core::span","",11,[[["self"],["__h"]]]],[11,"from_str","tracing_core::metadata","",10,[[["str"]],[["parselevelerror"],["result",["parselevelerror"]]]]]],"p":[[8,"Callsite"],[3,"Dispatch"],[3,"Event"],[8,"Visit"],[8,"Value"],[3,"Field"],[3,"FieldSet"],[3,"ValueSet"],[3,"Metadata"],[3,"Kind"],[3,"Level"],[3,"Id"],[3,"Attributes"],[3,"Record"],[3,"Current"],[8,"Subscriber"],[3,"Interest"],[3,"Identifier"],[3,"DefaultGuard"],[3,"SetGlobalDefaultError"],[3,"Iter"],[3,"DisplayValue"],[3,"DebugValue"],[3,"ParseLevelError"]]};
searchIndex["trie_db"] = {"doc":"Trie interface and implementation.","i":[[8,"HashDB","trie_db","Trait modelling datastore keyed by a hash defined by the…",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",0,[[["self"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",0,[[["self"]],["bool"]]],[10,"insert","","Insert a datum item into the DB and return the datum's…",0,[[["self"]]]],[10,"emplace","","Like `insert()`, except you provide the key and the data…",0,[[["self"],["t"]]]],[10,"remove","","Remove a datum previously inserted. Insertions can be…",0,[[["self"]]]],[8,"HashDBRef","","Trait for immutable reference of HashDB.",null,null],[10,"get","","Look up a given hash into the bytes that hash to it,…",1,[[["self"]],["option"]]],[10,"contains","","Check for the existance of a hash-key.",1,[[["self"]],["bool"]]],[8,"Hasher","","Trait describing an object that can hash a slice of bytes.…",null,null],[16,"Out","","The output type of the `Hasher`",2,null],[16,"StdHasher","","What to use to build `HashMap`s with this `Hasher`.",2,null],[18,"LENGTH","","The length in bytes of the `Hasher` output.",2,null],[10,"hash","","Compute the hash of the provided slice of bytes returning…",2,[[]]],[3,"FatDB","","A `Trie` implementation which hashes keys and uses a…",null,null],[3,"FatDBIterator","","Itarator over inserted pairs of key values.",null,null],[3,"FatDBMut","","A mutable `Trie` implementation which hashes keys and uses…",null,null],[3,"Lookup","","Trie lookup helper object.",null,null],[12,"db","","database to query from.",3,null],[12,"query","","Query object to record nodes and transform data.",3,null],[12,"hash","","Hash to start at",3,null],[3,"NibbleSlice","","Nibble-orientated view onto byte-slice, allowing…",null,null],[3,"NibbleVec","","Owning, nibble-oriented byte vector. Counterpart to…",null,null],[3,"TrieBuilder","","Get trie root and insert visited node in a hash_db. As for…",null,null],[12,"root","","",4,null],[3,"TrieRoot","","Calculate the trie root of the trie.",null,null],[12,"root","","The resulting root.",5,null],[3,"TrieRootUnhashed","","Get the trie root node encoding.",null,null],[12,"root","","The resulting encoded root.",6,null],[3,"TrieDBNodeIterator","","Iterator for going through all nodes in the trie in…",null,null],[3,"TrieRootPrint","","Calculate the trie root of the trie. Print a debug trace.",null,null],[12,"root","","The resulting root.",7,null],[3,"TrieFactory","","Trie factory.",null,null],[4,"TrieError","","Trie Errors.",null,null],[13,"InvalidStateRoot","","Attempted to create a trie with a state root not in the DB.",8,null],[13,"IncompleteDatabase","","Trie item not found in the database,",8,null],[13,"ValueAtIncompleteKey","","A value was found in the trie with a nibble key that was…",8,null],[13,"DecoderError","","Corrupt Trie item",8,null],[13,"InvalidHash","","",8,null],[4,"TrieSpec","","Trie types",null,null],[13,"Generic","","Generic trie.",9,null],[13,"Secure","","Secure trie.",9,null],[13,"Fat","","Secure trie with fat database.",9,null],[4,"TrieKinds","","All different kinds of tries. This is used to prevent a…",null,null],[13,"Generic","","A generic trie db.",10,null],[13,"Secure","","A secure trie db.",10,null],[13,"Fat","","A fat trie db.",10,null],[5,"trie_visit","","Function visiting trie from key value inputs with a…",null,[[["i"],["f"]]]],[5,"decode_compact","","Reconstructs a partial trie DB from a compact…",null,[[["db"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[5,"encode_compact","","Generates a compact representation of the partial trie…",null,[[["triedb"]],[["cerror"],["result",["vec","triehash","cerror"]],["triehash"],["vec",["vec"]]]]],[0,"node","","",null,null],[3,"NibbleSlicePlan","trie_db::node","A `NibbleSlicePlan` is a blueprint for decoding a nibble…",null,null],[3,"OwnedNode","","An `OwnedNode` is an owned type from which a `Node` can be…",null,null],[4,"NodeHandle","","A reference to a trie node which may be stored within…",null,null],[13,"Hash","","",11,null],[13,"Inline","","",11,null],[4,"Node","","Type of node in the trie and essential information thereof.",null,null],[13,"Empty","","Null trie node; could be an empty root or an empty branch…",12,null],[13,"Leaf","","Leaf node; has key slice and value. Value may not be empty.",12,null],[13,"Extension","","Extension node; has key slice and node data. Data may not…",12,null],[13,"Branch","","Branch node; has slice of child nodes (each possibly null)…",12,null],[13,"NibbledBranch","","Branch node with support for a nibble (when extension…",12,null],[4,"NodeHandlePlan","","A `NodeHandlePlan` is a decoding plan for constructing a…",null,null],[13,"Hash","","",13,null],[13,"Inline","","",13,null],[4,"NodePlan","","A `NodePlan` is a blueprint for decoding a node from a…",null,null],[13,"Empty","","Null trie node; could be an empty root or an empty branch…",14,null],[13,"Leaf","","Leaf node; has a partial key plan and value.",14,null],[12,"partial","trie_db::node::NodePlan","",14,null],[12,"value","","",14,null],[13,"Extension","trie_db::node","Extension node; has a partial key plan and child data.",14,null],[12,"partial","trie_db::node::NodePlan","",14,null],[12,"child","","",14,null],[13,"Branch","trie_db::node","Branch node; has slice of child nodes (each possibly null)…",14,null],[12,"value","trie_db::node::NodePlan","",14,null],[12,"children","","",14,null],[13,"NibbledBranch","trie_db::node","Branch node with support for a nibble (when extension…",14,null],[12,"partial","trie_db::node::NodePlan","",14,null],[12,"value","","",14,null],[12,"children","","",14,null],[5,"decode_hash","trie_db::node","Read a hash from a slice into a Hasher output. Returns…",null,[[],["option"]]],[6,"NodeKey","","Partial node key type: offset and owned value of a…",null,null],[11,"build","","Build a node handle by decoding a byte slice according to…",13,[[["self"]],["nodehandle"]]],[11,"new","","Construct a nibble slice decode plan.",15,[[["range",["usize"]],["usize"]],["self"]]],[11,"len","","Returns the nibble length of the slice.",15,[[["self"]],["usize"]]],[11,"build","","Build a nibble slice by decoding a byte slice according to…",15,[[["self"]],["nibbleslice"]]],[11,"build","","Build a node by decoding a byte slice according to the…",14,[[["self"]],["node"]]],[11,"new","","Construct an `OwnedNode` by decoding an owned data source…",16,[[["d"]],["result"]]],[11,"data","","Returns a reference to the backing data.",16,[[["self"]]]],[11,"node_plan","","Returns a reference to the node decode plan.",16,[[["self"]],["nodeplan"]]],[11,"node","","Construct a `Node` by borrowing data from this struct.",16,[[["self"]],["node"]]],[0,"triedb","trie_db","",null,null],[3,"TrieDB","trie_db::triedb","A `Trie` implementation using a generic `HashDB` backing…",null,null],[3,"TrieDBIterator","","Iterator for going through all values in the trie in…",null,null],[11,"new","","Create a new trie with the backing database `db` and…",17,[[["hashdbref"],["triehash"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"db","","Get the backing database.",17,[[["self"]],["hashdbref"]]],[11,"new","","Create a new iterator.",18,[[["triedb"]],[["result",["triedbiterator","triehash","cerror"]],["triedbiterator"],["triehash"],["cerror"]]]],[0,"triedbmut","trie_db","In-memory trie representation.",null,null],[3,"TrieDBMut","trie_db::triedbmut","A `Trie` implementation using a generic `HashDB` backing…",null,null],[4,"ChildReference","","Used to build a collection of child nodes from a…",null,null],[13,"Hash","","",19,null],[13,"Inline","","",19,null],[11,"new","","Create a new trie with backing database `db` and empty…",20,[[["hashdb"],["triehash"]],["self"]]],[11,"from_existing","","Create a new trie with the backing database `db` and…",20,[[["hashdb"],["triehash"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"db","","Get the backing database.",20,[[["self"]],["hashdb"]]],[11,"db_mut","","Get the backing database mutably.",20,[[["self"]],["hashdb"]]],[11,"commit","","Commit the in-memory changes to disk, freeing their…",20,[[["self"]]]],[0,"sectriedb","trie_db","",null,null],[3,"SecTrieDB","trie_db::sectriedb","A `Trie` implementation which hashes keys and uses a…",null,null],[11,"new","","Create a new trie with the backing database `db` and empty…",21,[[["hashdbref"],["triehash"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"raw","","Get a reference to the underlying raw `TrieDB` struct.",21,[[["self"]],["triedb"]]],[11,"raw_mut","","Get a mutable reference to the underlying raw `TrieDB`…",21,[[["self"]],["triedb"]]],[0,"sectriedbmut","trie_db","",null,null],[3,"SecTrieDBMut","trie_db::sectriedbmut","A mutable `Trie` implementation which hashes keys and uses…",null,null],[11,"new","","Create a new trie with the backing database `db` and empty…",22,[[["triehash"],["hashdb"]],["self"]]],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.",22,[[["triehash"],["hashdb"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"db","","Get the backing database.",22,[[["self"]],["hashdb"]]],[11,"db_mut","","Get the backing database.",22,[[["self"]],["hashdb"]]],[0,"recorder","trie_db","Trie query recorder.",null,null],[3,"Record","trie_db::recorder","A record of a visited node.",null,null],[12,"depth","","The depth of this node.",23,null],[12,"data","","The raw data of the node.",23,null],[12,"hash","","The hash of the data.",23,null],[3,"Recorder","","Records trie nodes as they pass it.",null,null],[11,"new","","Create a new `Recorder` which records all given nodes.",24,[[],["self"]]],[11,"with_depth","","Create a `Recorder` which only records nodes beyond a…",24,[[["u32"]],["self"]]],[11,"record","","Record a visited node, given its hash, data, and depth.",24,[[["u32"],["self"],["ho"]]]],[11,"drain","","Drain all visited records.",24,[[["self"]],[["vec",["record"]],["record"]]]],[11,"new","trie_db","Create a new trie with the backing database `db` and empty…",25,[[["hashdbref"],["triehash"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"db","","Get the backing database.",25,[[["self"]],["hashdbref"]]],[11,"new","","Creates new iterator.",26,[[["triedb"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"new","","Create a new trie with the backing database `db` and empty…",27,[[["triehash"],["hashdb"]],["self"]]],[11,"from_existing","","Create a new trie with the backing database `db` and `root`.",27,[[["triehash"],["hashdb"]],[["cerror"],["triehash"],["result",["triehash","cerror"]]]]],[11,"db","","Get the backing database.",27,[[["self"]],["hashdb"]]],[11,"db_mut","","Get the backing database.",27,[[["self"]],["hashdb"]]],[11,"new","","",4,[[["db"]],["self"]]],[11,"new","","Create a new iterator.",28,[[["triedb"]],[["triedbnodeiterator"],["result",["triedbnodeiterator","triehash","cerror"]],["triehash"],["cerror"]]]],[11,"look_up","","Look up the given key. If the value is found, it will be…",3,[[["nibbleslice"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[11,"new","","Make a new `NibbleVec`.",29,[[],["self"]]],[11,"len","","Length of the `NibbleVec`.",29,[[["self"]],["usize"]]],[11,"is_empty","","Retrurns true if `NibbleVec` has zero length.",29,[[["self"]],["bool"]]],[11,"at","","Try to get the nibble at the given offset.",29,[[["self"],["usize"]],["u8"]]],[11,"push","","Push a nibble onto the `NibbleVec`. Ignores the high 4 bits.",29,[[["self"],["u8"]]]],[11,"pop","","Try to pop a nibble off the `NibbleVec`. Fails if len == 0.",29,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"drop_lasts","","Remove then n last nibbles in a faster way than popping n…",29,[[["self"],["usize"]]]],[11,"as_prefix","","Get `Prefix` representation of this `NibbleVec`.",29,[[["self"]],["prefix"]]],[11,"append","","Append another `NibbleVec`. Can be slow (alignement of…",29,[[["self"],["nibblevec"]]]],[11,"append_partial","","Append a `Partial`. Can be slow (alignement of partial).",29,[[["self"],["partial"]]]],[11,"inner","","Get the underlying byte slice.",29,[[["self"]]]],[11,"clear","","clear",29,[[["self"]]]],[11,"as_nibbleslice","","Try to treat this `NibbleVec` as a `NibbleSlice`. Works…",29,[[["self"]],[["nibbleslice"],["option",["nibbleslice"]]]]],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",29,[[["self"]],["bool"]]],[11,"new","","Create a new nibble slice with the given byte-slice.",30,[[],["self"]]],[11,"new_offset","","Create a new nibble slice with the given byte-slice with a…",30,[[["usize"]],["self"]]],[11,"iter","","Get an iterator for the series of nibbles.",30,[[["self"]],["nibblesliceiterator"]]],[11,"from_stored","","Get nibble slice from a `NodeKey`.",30,[[["nodekey"]],["nibbleslice"]]],[11,"to_stored","","Helper function to create a owned `NodeKey` from this…",30,[[["self"]],["nodekey"]]],[11,"to_stored_range","","Helper function to create a owned `NodeKey` from this…",30,[[["self"],["usize"]],["nodekey"]]],[11,"is_empty","","Return true if the slice contains no nibbles.",30,[[["self"]],["bool"]]],[11,"len","","Get the length (in nibbles, naturally) of this slice.",30,[[["self"]],["usize"]]],[11,"at","","Get the nibble at position `i`.",30,[[["self"],["usize"]],["u8"]]],[11,"mid","","Return object which represents a view on to this slice…",30,[[["self"],["usize"]],["nibbleslice"]]],[11,"advance","","Advance the view on the slice by `i` nibbles.",30,[[["self"],["usize"]]]],[11,"back","","Move back to a previously valid fix offset position.",30,[[["self"],["usize"]],["nibbleslice"]]],[11,"starts_with","","Do we start with the same nibbles as the whole of `them`?",30,[[["self"]],["bool"]]],[11,"common_prefix","","How many of the same nibbles at the beginning do we match…",30,[[["self"]],["usize"]]],[11,"right","","Return `Partial` representation of this slice: first…",30,[[["self"]],["partial"]]],[11,"right_iter","","Return an iterator over `Partial` bytes representation.",30,[[["self"]]]],[11,"right_range_iter","","Return `Partial` bytes iterator over a range of byte..…",30,[[["self"],["usize"]]]],[11,"left","","Return left portion of `NibbleSlice`, if the slice…",30,[[["self"]],["prefix"]]],[11,"left_owned","","Owned version of a `Prefix` from a `left` method call.",30,[[["self"]]]],[0,"nibble_ops","","Utility methods to work on radix 16 nibble.",null,null],[5,"pad_left","trie_db::nibble_ops","Mask a byte, keeping left nibble.",null,[[["u8"]],["u8"]]],[5,"pad_right","","Mask a byte, keeping right byte.",null,[[["u8"]],["u8"]]],[5,"at_left","","Get u8 nibble value at a given index of a byte.",null,[[["u8"]],["u8"]]],[5,"left_nibble_at","","Get u8 nibble value at a given index in a left aligned…",null,[[["usize"]],["u8"]]],[5,"at","","Get u8 nibble value at a given index in a `NibbleSlice`.",null,[[["nibbleslice"],["usize"]],["u8"]]],[5,"push_at_left","","Push u8 nibble value at a given index into an existing byte.",null,[[["u8"]],["u8"]]],[5,"number_padding","","Calculate the number of needed padding a array of nibble…",null,[[["usize"]],["usize"]]],[5,"biggest_depth","","Count the biggest common depth between two left aligned…",null,[[],["usize"]]],[5,"left_common","","Calculate the number of common nibble between two left…",null,[[["u8"]],["usize"]]],[5,"shift_key","","Shifts right aligned key to add a given left offset.…",null,[[["nodekey"],["usize"]],["bool"]]],[17,"BIT_PER_NIBBLE","","Single nibble length in bit.",null,null],[17,"NIBBLE_PER_BYTE","","Number of nibble per byte.",null,null],[17,"NIBBLE_LENGTH","","Number of child for a branch (trie radix).",null,null],[17,"PADDING_BITMASK","","Nibble (half a byte).",null,null],[17,"CONTENT_HEADER_SIZE","","Size of header.",null,null],[17,"SPLIT_SHIFTS","","The nibble shifts needed to align. We use two value, one…",null,null],[6,"Partial","trie_db","Representation of a nible slice (right aligned). It…",null,null],[6,"DBValue","","Database value",null,null],[6,"Result","","Trie result type. Boxed to avoid copying around extra…",null,null],[6,"TrieItem","","Trie-Item type used for iterators over trie data.",null,null],[6,"TrieHash","","Alias accessor to hasher hash output type from a…",null,null],[6,"CError","","Alias accessor to `NodeCodec` associated `Error` type from…",null,null],[8,"MaybeDebug","","",null,null],[8,"NodeCodec","","Trait for trie node encoding/decoding.",null,null],[16,"Error","","Codec error type.",31,null],[16,"HashOut","","Output type of encoded node hasher.",31,null],[10,"hashed_null_node","","Get the hashed null node.",31,[[]]],[10,"decode_plan","","Decode bytes to a `NodePlan`. Returns `Self::E` on failure.",31,[[],[["result",["nodeplan"]],["nodeplan"]]]],[11,"decode","","Decode bytes to a `Node`. Returns `Self::E` on failure.",31,[[],[["result",["node"]],["node"]]]],[10,"is_empty_node","","Check if the provided bytes correspond to the codecs…",31,[[],["bool"]]],[10,"empty_node","","Returns an encoded empty node.",31,[[]]],[10,"leaf_node","","Returns an encoded leaf node",31,[[["partial"]],[["vec",["u8"]],["u8"]]]],[10,"extension_node","","Returns an encoded extension node Note that number_nibble…",31,[[["childreference"],["usize"]],[["vec",["u8"]],["u8"]]]],[10,"branch_node","","Returns an encoded branch node. Takes an iterator yielding…",31,[[["option"]],[["vec",["u8"]],["u8"]]]],[10,"branch_node_nibbled","","Returns an encoded branch node with a possible partial…",31,[[["usize"],["option"]],[["vec",["u8"]],["u8"]]]],[8,"ProcessEncodedNode","","Visitor trait to implement when using `trie_visit`.",null,null],[10,"process","","Function call with prefix, encoded value and a boolean…",32,[[["bool"],["prefix"],["vec",["u8"]],["self"],["u8"]],["childreference"]]],[8,"Query","","Description of what kind of query will be made to the trie.",null,null],[16,"Item","","Output item.",33,null],[10,"decode","","Decode a byte-slice into the desired item.",33,[[]]],[11,"record","","Record that a node has been passed through.",33,[[["u32"],["self"]]]],[8,"Trie","","A key-value datastore implemented as a database-backed…",null,null],[10,"root","","Return the root of the trie.",34,[[["self"]],["triehash"]]],[11,"is_empty","","Is the trie empty?",34,[[["self"]],["bool"]]],[11,"contains","","Does the trie contain a given key?",34,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get","","What is the value of the given key in this trie?",34,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[10,"get_with","","Search for the key with the given query parameter. See the…",34,[[["self"],["query"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[10,"iter","","Returns a depth-first iterator over the elements of trie.",34,[[["self"]],[["result",["box","triehash","cerror"]],["box",["trieiterator"]],["triehash"],["cerror"]]]],[8,"TrieMut","","A key-value datastore implemented as a database-backed…",null,null],[10,"root","","Return the root of the trie.",35,[[["self"]],["triehash"]]],[10,"is_empty","","Is the trie empty?",35,[[["self"]],["bool"]]],[11,"contains","","Does the trie contain a given key?",35,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[10,"get","","What is the value of the given key in this trie?",35,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[10,"insert","","Insert a `key`/`value` pair into the trie. An empty value…",35,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[10,"remove","","Remove a `key` from the trie. Equivalent to making it…",35,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[8,"TrieIterator","","A trie iterator that also supports random access (`seek()`).",null,null],[10,"seek","","Position the iterator on the first element with key >= `key`",36,[[["self"]],[["result",["triehash","cerror"]],["triehash"],["cerror"]]]],[8,"TrieLayout","","Trait with definition of trie layout. Contains all…",null,null],[18,"USE_EXTENSION","","If true, the trie will use extension nodes and no partial…",37,null],[16,"Hash","","Hasher to use for this trie.",37,null],[16,"Codec","","Codec to use (needs to match hasher and nibble ops).",37,null],[8,"TrieConfiguration","","This trait associates a trie definition with preferred…",null,null],[11,"trie_build","","Operation to build a trie db from its ordered iterator…",38,[[["db"],["i"]]]],[11,"trie_root","","Determines a trie root given its ordered contents, closed…",38,[[["i"]]]],[11,"trie_root_unhashed","","Determines a trie root node's data given its ordered…",38,[[["i"]],[["vec",["u8"]],["u8"]]]],[11,"encode_index","","Encoding of index as a key (when reusing general trie for…",38,[[["u32"]],[["vec",["u8"]],["u8"]]]],[11,"ordered_trie_root","","A trie root formed from the items, with keys attached…",38,[[["i"]]]],[11,"new","","Creates new factory.",39,[[["triespec"],["l"]],["self"]]],[11,"readonly","","Create new immutable instance of Trie.",39,[[["triehash"],["self"],["hashdbref"]],[["cerror"],["result",["triekinds","triehash","cerror"]],["triehash"],["triekinds"]]]],[11,"create","","Create new mutable instance of Trie.",39,[[["triehash"],["self"],["hashdb"]],[["triemut"],["box",["triemut"]]]]],[11,"from_existing","","Create new mutable instance of trie and check for errors.",39,[[["triehash"],["self"],["hashdb"]],[["cerror"],["result",["box","triehash","cerror"]],["triehash"],["box",["triemut"]]]]],[11,"is_fat","","Returns true iff the trie DB is a fat DB (allows…",39,[[["self"]],["bool"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"into_iter","","",26,[[],["i"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","trie_db::node","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","trie_db::triedb","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","trie_db::triedbmut","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","trie_db::sectriedb","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","trie_db::sectriedbmut","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","trie_db::recorder","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"process","trie_db","",4,[[["bool"],["prefix"],["vec",["u8"]],["self"],["u8"]],["childreference"]]],[11,"process","","",5,[[["bool"],["prefix"],["vec",["u8"]],["self"],["u8"]],["childreference"]]],[11,"process","","",7,[[["bool"],["prefix"],["vec",["u8"]],["self"],["u8"]],["childreference"]]],[11,"process","","",6,[[["bool"],["prefix"],["vec",["u8"]],["self"],["u8"]],["childreference"]]],[11,"root","trie_db::triedb","",17,[[["self"]],["triehash"]]],[11,"get_with","","",17,[[["self"],["query"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[11,"iter","","",17,[[["self"]],[["result",["box","triehash","cerror"]],["box",["trieiterator"]],["triehash"],["cerror"]]]],[11,"root","trie_db::sectriedb","",21,[[["self"]],["triehash"]]],[11,"contains","","",21,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get_with","","",21,[[["self"],["query"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[11,"iter","","",21,[[["self"]],[["result",["box","triehash","cerror"]],["box",["trieiterator"]],["triehash"],["cerror"]]]],[11,"root","trie_db","",25,[[["self"]],["triehash"]]],[11,"contains","","",25,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get_with","","",25,[[["self"],["query"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[11,"iter","","",25,[[["self"]],[["result",["box","triehash","cerror"]],["box",["trieiterator"]],["triehash"],["cerror"]]]],[11,"root","","",10,[[["self"]],["triehash"]]],[11,"is_empty","","",10,[[["self"]],["bool"]]],[11,"contains","","",10,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get_with","","",10,[[["self"],["query"]],[["cerror"],["result",["option","triehash","cerror"]],["triehash"],["option"]]]],[11,"iter","","",10,[[["self"]],[["result",["box","triehash","cerror"]],["box",["trieiterator"]],["triehash"],["cerror"]]]],[11,"root","trie_db::triedbmut","",20,[[["self"]],["triehash"]]],[11,"is_empty","","",20,[[["self"]],["bool"]]],[11,"get","","",20,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"insert","","",20,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"remove","","",20,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"root","trie_db::sectriedbmut","",22,[[["self"]],["triehash"]]],[11,"is_empty","","",22,[[["self"]],["bool"]]],[11,"contains","","",22,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get","","",22,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"insert","","",22,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"remove","","",22,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"root","trie_db","",27,[[["self"]],["triehash"]]],[11,"is_empty","","",27,[[["self"]],["bool"]]],[11,"contains","","",27,[[["self"]],[["cerror"],["result",["bool","triehash","cerror"]],["triehash"],["bool"]]]],[11,"get","","",27,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"insert","","",27,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"remove","","",27,[[["self"]],[["result",["option","triehash","cerror"]],["option",["dbvalue"]],["triehash"],["cerror"]]]],[11,"seek","trie_db::triedb","Position the iterator on the first element with key >= `key`",18,[[["self"]],[["result",["triehash","cerror"]],["triehash"],["cerror"]]]],[11,"seek","trie_db","",26,[[["self"]],[["result",["triehash","cerror"]],["triehash"],["cerror"]]]],[11,"seek","","",28,[[["self"]],[["result",["triehash","cerror"]],["triehash"],["cerror"]]]],[11,"drop","trie_db::triedbmut","",20,[[["self"]]]],[11,"from","trie_db","",29,[[["nibbleslice"]],["self"]]],[11,"into","","",30,[[],["nodekey"]]],[11,"next","trie_db::triedb","",18,[[["self"]],["option"]]],[11,"next","trie_db","",26,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"clone","trie_db::node","",11,[[["self"]],["nodehandle"]]],[11,"clone","","",12,[[["self"]],["node"]]],[11,"clone","","",13,[[["self"]],["nodehandleplan"]]],[11,"clone","","",15,[[["self"]],["nibblesliceplan"]]],[11,"clone","","",14,[[["self"]],["nodeplan"]]],[11,"clone","trie_db::triedbmut","",19,[[["self"]],["childreference"]]],[11,"clone","trie_db::recorder","",23,[[["self"]],["record"]]],[11,"clone","trie_db","",29,[[["self"]],["nibblevec"]]],[11,"clone","","",30,[[["self"]],["nibbleslice"]]],[11,"clone","","",8,[[["self"]],["trieerror"]]],[11,"clone","","",9,[[["self"]],["triespec"]]],[11,"clone","","",39,[[["self"]],["triefactory"]]],[11,"default","trie_db::recorder","",24,[[],["self"]]],[11,"default","trie_db","",5,[[],["self"]]],[11,"default","","",6,[[],["self"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",29,[[],["self"]]],[11,"default","","",9,[[],["triespec"]]],[11,"default","","",39,[[],["triefactory"]]],[11,"cmp","","",30,[[["self"]],["ordering"]]],[11,"eq","trie_db::node","",11,[[["nodehandle"],["self"]],["bool"]]],[11,"ne","","",11,[[["nodehandle"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["node"]],["bool"]]],[11,"ne","","",12,[[["self"],["node"]],["bool"]]],[11,"eq","","",13,[[["nodehandleplan"],["self"]],["bool"]]],[11,"ne","","",13,[[["nodehandleplan"],["self"]],["bool"]]],[11,"eq","","",15,[[["nibblesliceplan"],["self"]],["bool"]]],[11,"ne","","",15,[[["nibblesliceplan"],["self"]],["bool"]]],[11,"eq","","",14,[[["nodeplan"],["self"]],["bool"]]],[11,"ne","","",14,[[["nodeplan"],["self"]],["bool"]]],[11,"eq","","",16,[[["ownednode"],["self"]],["bool"]]],[11,"ne","","",16,[[["ownednode"],["self"]],["bool"]]],[11,"eq","trie_db::recorder","",23,[[["record"],["self"]],["bool"]]],[11,"ne","","",23,[[["record"],["self"]],["bool"]]],[11,"eq","trie_db","",30,[[["self"]],["bool"]]],[11,"eq","","",29,[[["nibblevec"],["self"]],["bool"]]],[11,"ne","","",29,[[["nibblevec"],["self"]],["bool"]]],[11,"eq","","",8,[[["trieerror"],["self"]],["bool"]]],[11,"ne","","",8,[[["trieerror"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["triespec"]],["bool"]]],[11,"partial_cmp","","",30,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","trie_db::node","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","trie_db::triedb","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","trie_db::recorder","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","trie_db","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"try_from","trie_db::triedbmut","",19,[[["encodednodehandle"]],[["result",["vec"]],["vec",["u8"]]]]],[11,"description","trie_db","",8,[[["self"]],["str"]]],[11,"decode","","Decode bytes to a `Node`. Returns `Self::E` on failure.",31,[[],[["result",["node"]],["node"]]]]],"p":[[8,"HashDB"],[8,"HashDBRef"],[8,"Hasher"],[3,"Lookup"],[3,"TrieBuilder"],[3,"TrieRoot"],[3,"TrieRootUnhashed"],[3,"TrieRootPrint"],[4,"TrieError"],[4,"TrieSpec"],[4,"TrieKinds"],[4,"NodeHandle"],[4,"Node"],[4,"NodeHandlePlan"],[4,"NodePlan"],[3,"NibbleSlicePlan"],[3,"OwnedNode"],[3,"TrieDB"],[3,"TrieDBIterator"],[4,"ChildReference"],[3,"TrieDBMut"],[3,"SecTrieDB"],[3,"SecTrieDBMut"],[3,"Record"],[3,"Recorder"],[3,"FatDB"],[3,"FatDBIterator"],[3,"FatDBMut"],[3,"TrieDBNodeIterator"],[3,"NibbleVec"],[3,"NibbleSlice"],[8,"NodeCodec"],[8,"ProcessEncodedNode"],[8,"Query"],[8,"Trie"],[8,"TrieMut"],[8,"TrieIterator"],[8,"TrieLayout"],[8,"TrieConfiguration"],[3,"TrieFactory"]]};
searchIndex["trie_root"] = {"doc":"Generates trie root.","i":[[8,"Hasher","trie_root","Trait describing an object that can hash a slice of bytes.…",null,null],[16,"Out","","The output type of the `Hasher`",0,null],[16,"StdHasher","","What to use to build `HashMap`s with this `Hasher`.",0,null],[18,"LENGTH","","The length in bytes of the `Hasher` output.",0,null],[10,"hash","","Compute the hash of the provided slice of bytes returning…",0,[[]]],[5,"trie_root","","Generates a trie root hash for a vector of key-value tuples",null,[[["i"]]]],[5,"trie_root_no_extension","","Variant of `trie_root` for patricia trie without extension…",null,[[["i"]]]],[5,"unhashed_trie","","Method similar to `trie_root` but returning the root…",null,[[["i"]],[["vec",["u8"]],["u8"]]]],[5,"unhashed_trie_no_extension","","Variant of `unhashed_trie` for patricia trie without…",null,[[["i"]],[["vec",["u8"]],["u8"]]]],[5,"sec_trie_root","","Generates a key-hashed (secure) trie root hash for a…",null,[[["i"]]]],[8,"TrieStream","","Byte-stream oriented trait for constructing closed-form…",null,null],[10,"new","","Construct a new `TrieStream`",1,[[],["self"]]],[10,"append_empty_data","","Append an Empty node",1,[[["self"]]]],[10,"begin_branch","","Start a new Branch node, possibly with a value; takes a…",1,[[["self"],["option"]]]],[11,"append_empty_child","","Append an empty child node. Optional.",1,[[["self"]]]],[11,"end_branch","","Wrap up a Branch node portion of a `TrieStream` and append…",1,[[["self"],["option"]]]],[10,"append_leaf","","Append a Leaf node",1,[[["self"]]]],[10,"append_extension","","Append an Extension node",1,[[["self"]]]],[10,"append_substream","","Append a Branch of Extension substream",1,[[["self"]]]],[10,"out","","Return the finished `TrieStream` as a vector of bytes.",1,[[],[["vec",["u8"]],["u8"]]]]],"p":[[8,"Hasher"],[8,"TrieStream"]]};
searchIndex["twox_hash"] = {"doc":"A Rust implementation of the [XXHash] algorithm.","i":[[3,"RandomXxHashBuilder64","twox_hash","Constructs a randomized seed and reuses it for multiple…",null,null],[3,"RandomXxHashBuilder32","","Constructs a randomized seed and reuses it for multiple…",null,null],[3,"XxHash64","","Calculates the 64-bit hash.",null,null],[3,"XxHash32","","Calculates the 32-bit hash. Care should be taken when…",null,null],[11,"with_seed","","Constructs the hash with an initial seed",0,[[["u64"]],["xxhash64"]]],[11,"seed","","",0,[[["self"]],["u64"]]],[11,"total_len","","",0,[[["self"]],["u64"]]],[11,"with_seed","","Constructs the hash with an initial seed",1,[[["u32"]],["xxhash32"]]],[11,"seed","","",1,[[["self"]],["u32"]]],[11,"total_len","","",1,[[["self"]],["u32"]]],[6,"XxHash","","A backwards compatibility type alias. Consider directly…",null,null],[6,"RandomXxHashBuilder","","A backwards compatibility type alias. Consider directly…",null,null],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"vzip","","",1,[[],["v"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["xxhash64"],["self"]],["bool"]]],[11,"ne","","",0,[[["xxhash64"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["xxhash32"]],["bool"]]],[11,"ne","","",1,[[["self"],["xxhash32"]],["bool"]]],[11,"finish","","",0,[[["self"]],["u64"]]],[11,"write","","",0,[[["self"]]]],[11,"finish","","",1,[[["self"]],["u64"]]],[11,"write","","",1,[[["self"]]]],[11,"build_hasher","","",2,[[["self"]],["xxhash64"]]],[11,"build_hasher","","",3,[[["self"]],["xxhash32"]]],[11,"clone","","",0,[[["self"]],["xxhash64"]]],[11,"clone","","",1,[[["self"]],["xxhash32"]]],[11,"clone","","",2,[[["self"]],["randomxxhashbuilder64"]]],[11,"clone","","",3,[[["self"]],["randomxxhashbuilder32"]]],[11,"default","","",0,[[],["xxhash64"]]],[11,"default","","",1,[[],["xxhash32"]]],[11,"default","","",2,[[],["randomxxhashbuilder64"]]],[11,"default","","",3,[[],["randomxxhashbuilder32"]]]],"p":[[3,"XxHash64"],[3,"XxHash32"],[3,"RandomXxHashBuilder64"],[3,"RandomXxHashBuilder32"]]};
searchIndex["typenum"] = {"doc":"This crate provides type-level numbers evaluated at…","i":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent…",null,null],[3,"Less","","A potential output from `Cmp`, this is the type equivalent…",null,null],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent…",null,null],[0,"consts","","Type aliases for many constants.",null,null],[6,"True","typenum::consts","",null,null],[6,"False","","",null,null],[6,"U0","","",null,null],[6,"U1","","",null,null],[6,"P1","","",null,null],[6,"N1","","",null,null],[6,"U2","","",null,null],[6,"P2","","",null,null],[6,"N2","","",null,null],[6,"U3","","",null,null],[6,"P3","","",null,null],[6,"N3","","",null,null],[6,"U4","","",null,null],[6,"P4","","",null,null],[6,"N4","","",null,null],[6,"U5","","",null,null],[6,"P5","","",null,null],[6,"N5","","",null,null],[6,"U6","","",null,null],[6,"P6","","",null,null],[6,"N6","","",null,null],[6,"U7","","",null,null],[6,"P7","","",null,null],[6,"N7","","",null,null],[6,"U8","","",null,null],[6,"P8","","",null,null],[6,"N8","","",null,null],[6,"U9","","",null,null],[6,"P9","","",null,null],[6,"N9","","",null,null],[6,"U10","","",null,null],[6,"P10","","",null,null],[6,"N10","","",null,null],[6,"U11","","",null,null],[6,"P11","","",null,null],[6,"N11","","",null,null],[6,"U12","","",null,null],[6,"P12","","",null,null],[6,"N12","","",null,null],[6,"U13","","",null,null],[6,"P13","","",null,null],[6,"N13","","",null,null],[6,"U14","","",null,null],[6,"P14","","",null,null],[6,"N14","","",null,null],[6,"U15","","",null,null],[6,"P15","","",null,null],[6,"N15","","",null,null],[6,"U16","","",null,null],[6,"P16","","",null,null],[6,"N16","","",null,null],[6,"U17","","",null,null],[6,"P17","","",null,null],[6,"N17","","",null,null],[6,"U18","","",null,null],[6,"P18","","",null,null],[6,"N18","","",null,null],[6,"U19","","",null,null],[6,"P19","","",null,null],[6,"N19","","",null,null],[6,"U20","","",null,null],[6,"P20","","",null,null],[6,"N20","","",null,null],[6,"U21","","",null,null],[6,"P21","","",null,null],[6,"N21","","",null,null],[6,"U22","","",null,null],[6,"P22","","",null,null],[6,"N22","","",null,null],[6,"U23","","",null,null],[6,"P23","","",null,null],[6,"N23","","",null,null],[6,"U24","","",null,null],[6,"P24","","",null,null],[6,"N24","","",null,null],[6,"U25","","",null,null],[6,"P25","","",null,null],[6,"N25","","",null,null],[6,"U26","","",null,null],[6,"P26","","",null,null],[6,"N26","","",null,null],[6,"U27","","",null,null],[6,"P27","","",null,null],[6,"N27","","",null,null],[6,"U28","","",null,null],[6,"P28","","",null,null],[6,"N28","","",null,null],[6,"U29","","",null,null],[6,"P29","","",null,null],[6,"N29","","",null,null],[6,"U30","","",null,null],[6,"P30","","",null,null],[6,"N30","","",null,null],[6,"U31","","",null,null],[6,"P31","","",null,null],[6,"N31","","",null,null],[6,"U32","","",null,null],[6,"P32","","",null,null],[6,"N32","","",null,null],[6,"U33","","",null,null],[6,"P33","","",null,null],[6,"N33","","",null,null],[6,"U34","","",null,null],[6,"P34","","",null,null],[6,"N34","","",null,null],[6,"U35","","",null,null],[6,"P35","","",null,null],[6,"N35","","",null,null],[6,"U36","","",null,null],[6,"P36","","",null,null],[6,"N36","","",null,null],[6,"U37","","",null,null],[6,"P37","","",null,null],[6,"N37","","",null,null],[6,"U38","","",null,null],[6,"P38","","",null,null],[6,"N38","","",null,null],[6,"U39","","",null,null],[6,"P39","","",null,null],[6,"N39","","",null,null],[6,"U40","","",null,null],[6,"P40","","",null,null],[6,"N40","","",null,null],[6,"U41","","",null,null],[6,"P41","","",null,null],[6,"N41","","",null,null],[6,"U42","","",null,null],[6,"P42","","",null,null],[6,"N42","","",null,null],[6,"U43","","",null,null],[6,"P43","","",null,null],[6,"N43","","",null,null],[6,"U44","","",null,null],[6,"P44","","",null,null],[6,"N44","","",null,null],[6,"U45","","",null,null],[6,"P45","","",null,null],[6,"N45","","",null,null],[6,"U46","","",null,null],[6,"P46","","",null,null],[6,"N46","","",null,null],[6,"U47","","",null,null],[6,"P47","","",null,null],[6,"N47","","",null,null],[6,"U48","","",null,null],[6,"P48","","",null,null],[6,"N48","","",null,null],[6,"U49","","",null,null],[6,"P49","","",null,null],[6,"N49","","",null,null],[6,"U50","","",null,null],[6,"P50","","",null,null],[6,"N50","","",null,null],[6,"U51","","",null,null],[6,"P51","","",null,null],[6,"N51","","",null,null],[6,"U52","","",null,null],[6,"P52","","",null,null],[6,"N52","","",null,null],[6,"U53","","",null,null],[6,"P53","","",null,null],[6,"N53","","",null,null],[6,"U54","","",null,null],[6,"P54","","",null,null],[6,"N54","","",null,null],[6,"U55","","",null,null],[6,"P55","","",null,null],[6,"N55","","",null,null],[6,"U56","","",null,null],[6,"P56","","",null,null],[6,"N56","","",null,null],[6,"U57","","",null,null],[6,"P57","","",null,null],[6,"N57","","",null,null],[6,"U58","","",null,null],[6,"P58","","",null,null],[6,"N58","","",null,null],[6,"U59","","",null,null],[6,"P59","","",null,null],[6,"N59","","",null,null],[6,"U60","","",null,null],[6,"P60","","",null,null],[6,"N60","","",null,null],[6,"U61","","",null,null],[6,"P61","","",null,null],[6,"N61","","",null,null],[6,"U62","","",null,null],[6,"P62","","",null,null],[6,"N62","","",null,null],[6,"U63","","",null,null],[6,"P63","","",null,null],[6,"N63","","",null,null],[6,"U64","","",null,null],[6,"P64","","",null,null],[6,"N64","","",null,null],[6,"U65","","",null,null],[6,"P65","","",null,null],[6,"N65","","",null,null],[6,"U66","","",null,null],[6,"P66","","",null,null],[6,"N66","","",null,null],[6,"U67","","",null,null],[6,"P67","","",null,null],[6,"N67","","",null,null],[6,"U68","","",null,null],[6,"P68","","",null,null],[6,"N68","","",null,null],[6,"U69","","",null,null],[6,"P69","","",null,null],[6,"N69","","",null,null],[6,"U70","","",null,null],[6,"P70","","",null,null],[6,"N70","","",null,null],[6,"U71","","",null,null],[6,"P71","","",null,null],[6,"N71","","",null,null],[6,"U72","","",null,null],[6,"P72","","",null,null],[6,"N72","","",null,null],[6,"U73","","",null,null],[6,"P73","","",null,null],[6,"N73","","",null,null],[6,"U74","","",null,null],[6,"P74","","",null,null],[6,"N74","","",null,null],[6,"U75","","",null,null],[6,"P75","","",null,null],[6,"N75","","",null,null],[6,"U76","","",null,null],[6,"P76","","",null,null],[6,"N76","","",null,null],[6,"U77","","",null,null],[6,"P77","","",null,null],[6,"N77","","",null,null],[6,"U78","","",null,null],[6,"P78","","",null,null],[6,"N78","","",null,null],[6,"U79","","",null,null],[6,"P79","","",null,null],[6,"N79","","",null,null],[6,"U80","","",null,null],[6,"P80","","",null,null],[6,"N80","","",null,null],[6,"U81","","",null,null],[6,"P81","","",null,null],[6,"N81","","",null,null],[6,"U82","","",null,null],[6,"P82","","",null,null],[6,"N82","","",null,null],[6,"U83","","",null,null],[6,"P83","","",null,null],[6,"N83","","",null,null],[6,"U84","","",null,null],[6,"P84","","",null,null],[6,"N84","","",null,null],[6,"U85","","",null,null],[6,"P85","","",null,null],[6,"N85","","",null,null],[6,"U86","","",null,null],[6,"P86","","",null,null],[6,"N86","","",null,null],[6,"U87","","",null,null],[6,"P87","","",null,null],[6,"N87","","",null,null],[6,"U88","","",null,null],[6,"P88","","",null,null],[6,"N88","","",null,null],[6,"U89","","",null,null],[6,"P89","","",null,null],[6,"N89","","",null,null],[6,"U90","","",null,null],[6,"P90","","",null,null],[6,"N90","","",null,null],[6,"U91","","",null,null],[6,"P91","","",null,null],[6,"N91","","",null,null],[6,"U92","","",null,null],[6,"P92","","",null,null],[6,"N92","","",null,null],[6,"U93","","",null,null],[6,"P93","","",null,null],[6,"N93","","",null,null],[6,"U94","","",null,null],[6,"P94","","",null,null],[6,"N94","","",null,null],[6,"U95","","",null,null],[6,"P95","","",null,null],[6,"N95","","",null,null],[6,"U96","","",null,null],[6,"P96","","",null,null],[6,"N96","","",null,null],[6,"U97","","",null,null],[6,"P97","","",null,null],[6,"N97","","",null,null],[6,"U98","","",null,null],[6,"P98","","",null,null],[6,"N98","","",null,null],[6,"U99","","",null,null],[6,"P99","","",null,null],[6,"N99","","",null,null],[6,"U100","","",null,null],[6,"P100","","",null,null],[6,"N100","","",null,null],[6,"U101","","",null,null],[6,"P101","","",null,null],[6,"N101","","",null,null],[6,"U102","","",null,null],[6,"P102","","",null,null],[6,"N102","","",null,null],[6,"U103","","",null,null],[6,"P103","","",null,null],[6,"N103","","",null,null],[6,"U104","","",null,null],[6,"P104","","",null,null],[6,"N104","","",null,null],[6,"U105","","",null,null],[6,"P105","","",null,null],[6,"N105","","",null,null],[6,"U106","","",null,null],[6,"P106","","",null,null],[6,"N106","","",null,null],[6,"U107","","",null,null],[6,"P107","","",null,null],[6,"N107","","",null,null],[6,"U108","","",null,null],[6,"P108","","",null,null],[6,"N108","","",null,null],[6,"U109","","",null,null],[6,"P109","","",null,null],[6,"N109","","",null,null],[6,"U110","","",null,null],[6,"P110","","",null,null],[6,"N110","","",null,null],[6,"U111","","",null,null],[6,"P111","","",null,null],[6,"N111","","",null,null],[6,"U112","","",null,null],[6,"P112","","",null,null],[6,"N112","","",null,null],[6,"U113","","",null,null],[6,"P113","","",null,null],[6,"N113","","",null,null],[6,"U114","","",null,null],[6,"P114","","",null,null],[6,"N114","","",null,null],[6,"U115","","",null,null],[6,"P115","","",null,null],[6,"N115","","",null,null],[6,"U116","","",null,null],[6,"P116","","",null,null],[6,"N116","","",null,null],[6,"U117","","",null,null],[6,"P117","","",null,null],[6,"N117","","",null,null],[6,"U118","","",null,null],[6,"P118","","",null,null],[6,"N118","","",null,null],[6,"U119","","",null,null],[6,"P119","","",null,null],[6,"N119","","",null,null],[6,"U120","","",null,null],[6,"P120","","",null,null],[6,"N120","","",null,null],[6,"U121","","",null,null],[6,"P121","","",null,null],[6,"N121","","",null,null],[6,"U122","","",null,null],[6,"P122","","",null,null],[6,"N122","","",null,null],[6,"U123","","",null,null],[6,"P123","","",null,null],[6,"N123","","",null,null],[6,"U124","","",null,null],[6,"P124","","",null,null],[6,"N124","","",null,null],[6,"U125","","",null,null],[6,"P125","","",null,null],[6,"N125","","",null,null],[6,"U126","","",null,null],[6,"P126","","",null,null],[6,"N126","","",null,null],[6,"U127","","",null,null],[6,"P127","","",null,null],[6,"N127","","",null,null],[6,"U128","","",null,null],[6,"P128","","",null,null],[6,"N128","","",null,null],[6,"U129","","",null,null],[6,"P129","","",null,null],[6,"N129","","",null,null],[6,"U130","","",null,null],[6,"P130","","",null,null],[6,"N130","","",null,null],[6,"U131","","",null,null],[6,"P131","","",null,null],[6,"N131","","",null,null],[6,"U132","","",null,null],[6,"P132","","",null,null],[6,"N132","","",null,null],[6,"U133","","",null,null],[6,"P133","","",null,null],[6,"N133","","",null,null],[6,"U134","","",null,null],[6,"P134","","",null,null],[6,"N134","","",null,null],[6,"U135","","",null,null],[6,"P135","","",null,null],[6,"N135","","",null,null],[6,"U136","","",null,null],[6,"P136","","",null,null],[6,"N136","","",null,null],[6,"U137","","",null,null],[6,"P137","","",null,null],[6,"N137","","",null,null],[6,"U138","","",null,null],[6,"P138","","",null,null],[6,"N138","","",null,null],[6,"U139","","",null,null],[6,"P139","","",null,null],[6,"N139","","",null,null],[6,"U140","","",null,null],[6,"P140","","",null,null],[6,"N140","","",null,null],[6,"U141","","",null,null],[6,"P141","","",null,null],[6,"N141","","",null,null],[6,"U142","","",null,null],[6,"P142","","",null,null],[6,"N142","","",null,null],[6,"U143","","",null,null],[6,"P143","","",null,null],[6,"N143","","",null,null],[6,"U144","","",null,null],[6,"P144","","",null,null],[6,"N144","","",null,null],[6,"U145","","",null,null],[6,"P145","","",null,null],[6,"N145","","",null,null],[6,"U146","","",null,null],[6,"P146","","",null,null],[6,"N146","","",null,null],[6,"U147","","",null,null],[6,"P147","","",null,null],[6,"N147","","",null,null],[6,"U148","","",null,null],[6,"P148","","",null,null],[6,"N148","","",null,null],[6,"U149","","",null,null],[6,"P149","","",null,null],[6,"N149","","",null,null],[6,"U150","","",null,null],[6,"P150","","",null,null],[6,"N150","","",null,null],[6,"U151","","",null,null],[6,"P151","","",null,null],[6,"N151","","",null,null],[6,"U152","","",null,null],[6,"P152","","",null,null],[6,"N152","","",null,null],[6,"U153","","",null,null],[6,"P153","","",null,null],[6,"N153","","",null,null],[6,"U154","","",null,null],[6,"P154","","",null,null],[6,"N154","","",null,null],[6,"U155","","",null,null],[6,"P155","","",null,null],[6,"N155","","",null,null],[6,"U156","","",null,null],[6,"P156","","",null,null],[6,"N156","","",null,null],[6,"U157","","",null,null],[6,"P157","","",null,null],[6,"N157","","",null,null],[6,"U158","","",null,null],[6,"P158","","",null,null],[6,"N158","","",null,null],[6,"U159","","",null,null],[6,"P159","","",null,null],[6,"N159","","",null,null],[6,"U160","","",null,null],[6,"P160","","",null,null],[6,"N160","","",null,null],[6,"U161","","",null,null],[6,"P161","","",null,null],[6,"N161","","",null,null],[6,"U162","","",null,null],[6,"P162","","",null,null],[6,"N162","","",null,null],[6,"U163","","",null,null],[6,"P163","","",null,null],[6,"N163","","",null,null],[6,"U164","","",null,null],[6,"P164","","",null,null],[6,"N164","","",null,null],[6,"U165","","",null,null],[6,"P165","","",null,null],[6,"N165","","",null,null],[6,"U166","","",null,null],[6,"P166","","",null,null],[6,"N166","","",null,null],[6,"U167","","",null,null],[6,"P167","","",null,null],[6,"N167","","",null,null],[6,"U168","","",null,null],[6,"P168","","",null,null],[6,"N168","","",null,null],[6,"U169","","",null,null],[6,"P169","","",null,null],[6,"N169","","",null,null],[6,"U170","","",null,null],[6,"P170","","",null,null],[6,"N170","","",null,null],[6,"U171","","",null,null],[6,"P171","","",null,null],[6,"N171","","",null,null],[6,"U172","","",null,null],[6,"P172","","",null,null],[6,"N172","","",null,null],[6,"U173","","",null,null],[6,"P173","","",null,null],[6,"N173","","",null,null],[6,"U174","","",null,null],[6,"P174","","",null,null],[6,"N174","","",null,null],[6,"U175","","",null,null],[6,"P175","","",null,null],[6,"N175","","",null,null],[6,"U176","","",null,null],[6,"P176","","",null,null],[6,"N176","","",null,null],[6,"U177","","",null,null],[6,"P177","","",null,null],[6,"N177","","",null,null],[6,"U178","","",null,null],[6,"P178","","",null,null],[6,"N178","","",null,null],[6,"U179","","",null,null],[6,"P179","","",null,null],[6,"N179","","",null,null],[6,"U180","","",null,null],[6,"P180","","",null,null],[6,"N180","","",null,null],[6,"U181","","",null,null],[6,"P181","","",null,null],[6,"N181","","",null,null],[6,"U182","","",null,null],[6,"P182","","",null,null],[6,"N182","","",null,null],[6,"U183","","",null,null],[6,"P183","","",null,null],[6,"N183","","",null,null],[6,"U184","","",null,null],[6,"P184","","",null,null],[6,"N184","","",null,null],[6,"U185","","",null,null],[6,"P185","","",null,null],[6,"N185","","",null,null],[6,"U186","","",null,null],[6,"P186","","",null,null],[6,"N186","","",null,null],[6,"U187","","",null,null],[6,"P187","","",null,null],[6,"N187","","",null,null],[6,"U188","","",null,null],[6,"P188","","",null,null],[6,"N188","","",null,null],[6,"U189","","",null,null],[6,"P189","","",null,null],[6,"N189","","",null,null],[6,"U190","","",null,null],[6,"P190","","",null,null],[6,"N190","","",null,null],[6,"U191","","",null,null],[6,"P191","","",null,null],[6,"N191","","",null,null],[6,"U192","","",null,null],[6,"P192","","",null,null],[6,"N192","","",null,null],[6,"U193","","",null,null],[6,"P193","","",null,null],[6,"N193","","",null,null],[6,"U194","","",null,null],[6,"P194","","",null,null],[6,"N194","","",null,null],[6,"U195","","",null,null],[6,"P195","","",null,null],[6,"N195","","",null,null],[6,"U196","","",null,null],[6,"P196","","",null,null],[6,"N196","","",null,null],[6,"U197","","",null,null],[6,"P197","","",null,null],[6,"N197","","",null,null],[6,"U198","","",null,null],[6,"P198","","",null,null],[6,"N198","","",null,null],[6,"U199","","",null,null],[6,"P199","","",null,null],[6,"N199","","",null,null],[6,"U200","","",null,null],[6,"P200","","",null,null],[6,"N200","","",null,null],[6,"U201","","",null,null],[6,"P201","","",null,null],[6,"N201","","",null,null],[6,"U202","","",null,null],[6,"P202","","",null,null],[6,"N202","","",null,null],[6,"U203","","",null,null],[6,"P203","","",null,null],[6,"N203","","",null,null],[6,"U204","","",null,null],[6,"P204","","",null,null],[6,"N204","","",null,null],[6,"U205","","",null,null],[6,"P205","","",null,null],[6,"N205","","",null,null],[6,"U206","","",null,null],[6,"P206","","",null,null],[6,"N206","","",null,null],[6,"U207","","",null,null],[6,"P207","","",null,null],[6,"N207","","",null,null],[6,"U208","","",null,null],[6,"P208","","",null,null],[6,"N208","","",null,null],[6,"U209","","",null,null],[6,"P209","","",null,null],[6,"N209","","",null,null],[6,"U210","","",null,null],[6,"P210","","",null,null],[6,"N210","","",null,null],[6,"U211","","",null,null],[6,"P211","","",null,null],[6,"N211","","",null,null],[6,"U212","","",null,null],[6,"P212","","",null,null],[6,"N212","","",null,null],[6,"U213","","",null,null],[6,"P213","","",null,null],[6,"N213","","",null,null],[6,"U214","","",null,null],[6,"P214","","",null,null],[6,"N214","","",null,null],[6,"U215","","",null,null],[6,"P215","","",null,null],[6,"N215","","",null,null],[6,"U216","","",null,null],[6,"P216","","",null,null],[6,"N216","","",null,null],[6,"U217","","",null,null],[6,"P217","","",null,null],[6,"N217","","",null,null],[6,"U218","","",null,null],[6,"P218","","",null,null],[6,"N218","","",null,null],[6,"U219","","",null,null],[6,"P219","","",null,null],[6,"N219","","",null,null],[6,"U220","","",null,null],[6,"P220","","",null,null],[6,"N220","","",null,null],[6,"U221","","",null,null],[6,"P221","","",null,null],[6,"N221","","",null,null],[6,"U222","","",null,null],[6,"P222","","",null,null],[6,"N222","","",null,null],[6,"U223","","",null,null],[6,"P223","","",null,null],[6,"N223","","",null,null],[6,"U224","","",null,null],[6,"P224","","",null,null],[6,"N224","","",null,null],[6,"U225","","",null,null],[6,"P225","","",null,null],[6,"N225","","",null,null],[6,"U226","","",null,null],[6,"P226","","",null,null],[6,"N226","","",null,null],[6,"U227","","",null,null],[6,"P227","","",null,null],[6,"N227","","",null,null],[6,"U228","","",null,null],[6,"P228","","",null,null],[6,"N228","","",null,null],[6,"U229","","",null,null],[6,"P229","","",null,null],[6,"N229","","",null,null],[6,"U230","","",null,null],[6,"P230","","",null,null],[6,"N230","","",null,null],[6,"U231","","",null,null],[6,"P231","","",null,null],[6,"N231","","",null,null],[6,"U232","","",null,null],[6,"P232","","",null,null],[6,"N232","","",null,null],[6,"U233","","",null,null],[6,"P233","","",null,null],[6,"N233","","",null,null],[6,"U234","","",null,null],[6,"P234","","",null,null],[6,"N234","","",null,null],[6,"U235","","",null,null],[6,"P235","","",null,null],[6,"N235","","",null,null],[6,"U236","","",null,null],[6,"P236","","",null,null],[6,"N236","","",null,null],[6,"U237","","",null,null],[6,"P237","","",null,null],[6,"N237","","",null,null],[6,"U238","","",null,null],[6,"P238","","",null,null],[6,"N238","","",null,null],[6,"U239","","",null,null],[6,"P239","","",null,null],[6,"N239","","",null,null],[6,"U240","","",null,null],[6,"P240","","",null,null],[6,"N240","","",null,null],[6,"U241","","",null,null],[6,"P241","","",null,null],[6,"N241","","",null,null],[6,"U242","","",null,null],[6,"P242","","",null,null],[6,"N242","","",null,null],[6,"U243","","",null,null],[6,"P243","","",null,null],[6,"N243","","",null,null],[6,"U244","","",null,null],[6,"P244","","",null,null],[6,"N244","","",null,null],[6,"U245","","",null,null],[6,"P245","","",null,null],[6,"N245","","",null,null],[6,"U246","","",null,null],[6,"P246","","",null,null],[6,"N246","","",null,null],[6,"U247","","",null,null],[6,"P247","","",null,null],[6,"N247","","",null,null],[6,"U248","","",null,null],[6,"P248","","",null,null],[6,"N248","","",null,null],[6,"U249","","",null,null],[6,"P249","","",null,null],[6,"N249","","",null,null],[6,"U250","","",null,null],[6,"P250","","",null,null],[6,"N250","","",null,null],[6,"U251","","",null,null],[6,"P251","","",null,null],[6,"N251","","",null,null],[6,"U252","","",null,null],[6,"P252","","",null,null],[6,"N252","","",null,null],[6,"U253","","",null,null],[6,"P253","","",null,null],[6,"N253","","",null,null],[6,"U254","","",null,null],[6,"P254","","",null,null],[6,"N254","","",null,null],[6,"U255","","",null,null],[6,"P255","","",null,null],[6,"N255","","",null,null],[6,"U256","","",null,null],[6,"P256","","",null,null],[6,"N256","","",null,null],[6,"U257","","",null,null],[6,"P257","","",null,null],[6,"N257","","",null,null],[6,"U258","","",null,null],[6,"P258","","",null,null],[6,"N258","","",null,null],[6,"U259","","",null,null],[6,"P259","","",null,null],[6,"N259","","",null,null],[6,"U260","","",null,null],[6,"P260","","",null,null],[6,"N260","","",null,null],[6,"U261","","",null,null],[6,"P261","","",null,null],[6,"N261","","",null,null],[6,"U262","","",null,null],[6,"P262","","",null,null],[6,"N262","","",null,null],[6,"U263","","",null,null],[6,"P263","","",null,null],[6,"N263","","",null,null],[6,"U264","","",null,null],[6,"P264","","",null,null],[6,"N264","","",null,null],[6,"U265","","",null,null],[6,"P265","","",null,null],[6,"N265","","",null,null],[6,"U266","","",null,null],[6,"P266","","",null,null],[6,"N266","","",null,null],[6,"U267","","",null,null],[6,"P267","","",null,null],[6,"N267","","",null,null],[6,"U268","","",null,null],[6,"P268","","",null,null],[6,"N268","","",null,null],[6,"U269","","",null,null],[6,"P269","","",null,null],[6,"N269","","",null,null],[6,"U270","","",null,null],[6,"P270","","",null,null],[6,"N270","","",null,null],[6,"U271","","",null,null],[6,"P271","","",null,null],[6,"N271","","",null,null],[6,"U272","","",null,null],[6,"P272","","",null,null],[6,"N272","","",null,null],[6,"U273","","",null,null],[6,"P273","","",null,null],[6,"N273","","",null,null],[6,"U274","","",null,null],[6,"P274","","",null,null],[6,"N274","","",null,null],[6,"U275","","",null,null],[6,"P275","","",null,null],[6,"N275","","",null,null],[6,"U276","","",null,null],[6,"P276","","",null,null],[6,"N276","","",null,null],[6,"U277","","",null,null],[6,"P277","","",null,null],[6,"N277","","",null,null],[6,"U278","","",null,null],[6,"P278","","",null,null],[6,"N278","","",null,null],[6,"U279","","",null,null],[6,"P279","","",null,null],[6,"N279","","",null,null],[6,"U280","","",null,null],[6,"P280","","",null,null],[6,"N280","","",null,null],[6,"U281","","",null,null],[6,"P281","","",null,null],[6,"N281","","",null,null],[6,"U282","","",null,null],[6,"P282","","",null,null],[6,"N282","","",null,null],[6,"U283","","",null,null],[6,"P283","","",null,null],[6,"N283","","",null,null],[6,"U284","","",null,null],[6,"P284","","",null,null],[6,"N284","","",null,null],[6,"U285","","",null,null],[6,"P285","","",null,null],[6,"N285","","",null,null],[6,"U286","","",null,null],[6,"P286","","",null,null],[6,"N286","","",null,null],[6,"U287","","",null,null],[6,"P287","","",null,null],[6,"N287","","",null,null],[6,"U288","","",null,null],[6,"P288","","",null,null],[6,"N288","","",null,null],[6,"U289","","",null,null],[6,"P289","","",null,null],[6,"N289","","",null,null],[6,"U290","","",null,null],[6,"P290","","",null,null],[6,"N290","","",null,null],[6,"U291","","",null,null],[6,"P291","","",null,null],[6,"N291","","",null,null],[6,"U292","","",null,null],[6,"P292","","",null,null],[6,"N292","","",null,null],[6,"U293","","",null,null],[6,"P293","","",null,null],[6,"N293","","",null,null],[6,"U294","","",null,null],[6,"P294","","",null,null],[6,"N294","","",null,null],[6,"U295","","",null,null],[6,"P295","","",null,null],[6,"N295","","",null,null],[6,"U296","","",null,null],[6,"P296","","",null,null],[6,"N296","","",null,null],[6,"U297","","",null,null],[6,"P297","","",null,null],[6,"N297","","",null,null],[6,"U298","","",null,null],[6,"P298","","",null,null],[6,"N298","","",null,null],[6,"U299","","",null,null],[6,"P299","","",null,null],[6,"N299","","",null,null],[6,"U300","","",null,null],[6,"P300","","",null,null],[6,"N300","","",null,null],[6,"U301","","",null,null],[6,"P301","","",null,null],[6,"N301","","",null,null],[6,"U302","","",null,null],[6,"P302","","",null,null],[6,"N302","","",null,null],[6,"U303","","",null,null],[6,"P303","","",null,null],[6,"N303","","",null,null],[6,"U304","","",null,null],[6,"P304","","",null,null],[6,"N304","","",null,null],[6,"U305","","",null,null],[6,"P305","","",null,null],[6,"N305","","",null,null],[6,"U306","","",null,null],[6,"P306","","",null,null],[6,"N306","","",null,null],[6,"U307","","",null,null],[6,"P307","","",null,null],[6,"N307","","",null,null],[6,"U308","","",null,null],[6,"P308","","",null,null],[6,"N308","","",null,null],[6,"U309","","",null,null],[6,"P309","","",null,null],[6,"N309","","",null,null],[6,"U310","","",null,null],[6,"P310","","",null,null],[6,"N310","","",null,null],[6,"U311","","",null,null],[6,"P311","","",null,null],[6,"N311","","",null,null],[6,"U312","","",null,null],[6,"P312","","",null,null],[6,"N312","","",null,null],[6,"U313","","",null,null],[6,"P313","","",null,null],[6,"N313","","",null,null],[6,"U314","","",null,null],[6,"P314","","",null,null],[6,"N314","","",null,null],[6,"U315","","",null,null],[6,"P315","","",null,null],[6,"N315","","",null,null],[6,"U316","","",null,null],[6,"P316","","",null,null],[6,"N316","","",null,null],[6,"U317","","",null,null],[6,"P317","","",null,null],[6,"N317","","",null,null],[6,"U318","","",null,null],[6,"P318","","",null,null],[6,"N318","","",null,null],[6,"U319","","",null,null],[6,"P319","","",null,null],[6,"N319","","",null,null],[6,"U320","","",null,null],[6,"P320","","",null,null],[6,"N320","","",null,null],[6,"U321","","",null,null],[6,"P321","","",null,null],[6,"N321","","",null,null],[6,"U322","","",null,null],[6,"P322","","",null,null],[6,"N322","","",null,null],[6,"U323","","",null,null],[6,"P323","","",null,null],[6,"N323","","",null,null],[6,"U324","","",null,null],[6,"P324","","",null,null],[6,"N324","","",null,null],[6,"U325","","",null,null],[6,"P325","","",null,null],[6,"N325","","",null,null],[6,"U326","","",null,null],[6,"P326","","",null,null],[6,"N326","","",null,null],[6,"U327","","",null,null],[6,"P327","","",null,null],[6,"N327","","",null,null],[6,"U328","","",null,null],[6,"P328","","",null,null],[6,"N328","","",null,null],[6,"U329","","",null,null],[6,"P329","","",null,null],[6,"N329","","",null,null],[6,"U330","","",null,null],[6,"P330","","",null,null],[6,"N330","","",null,null],[6,"U331","","",null,null],[6,"P331","","",null,null],[6,"N331","","",null,null],[6,"U332","","",null,null],[6,"P332","","",null,null],[6,"N332","","",null,null],[6,"U333","","",null,null],[6,"P333","","",null,null],[6,"N333","","",null,null],[6,"U334","","",null,null],[6,"P334","","",null,null],[6,"N334","","",null,null],[6,"U335","","",null,null],[6,"P335","","",null,null],[6,"N335","","",null,null],[6,"U336","","",null,null],[6,"P336","","",null,null],[6,"N336","","",null,null],[6,"U337","","",null,null],[6,"P337","","",null,null],[6,"N337","","",null,null],[6,"U338","","",null,null],[6,"P338","","",null,null],[6,"N338","","",null,null],[6,"U339","","",null,null],[6,"P339","","",null,null],[6,"N339","","",null,null],[6,"U340","","",null,null],[6,"P340","","",null,null],[6,"N340","","",null,null],[6,"U341","","",null,null],[6,"P341","","",null,null],[6,"N341","","",null,null],[6,"U342","","",null,null],[6,"P342","","",null,null],[6,"N342","","",null,null],[6,"U343","","",null,null],[6,"P343","","",null,null],[6,"N343","","",null,null],[6,"U344","","",null,null],[6,"P344","","",null,null],[6,"N344","","",null,null],[6,"U345","","",null,null],[6,"P345","","",null,null],[6,"N345","","",null,null],[6,"U346","","",null,null],[6,"P346","","",null,null],[6,"N346","","",null,null],[6,"U347","","",null,null],[6,"P347","","",null,null],[6,"N347","","",null,null],[6,"U348","","",null,null],[6,"P348","","",null,null],[6,"N348","","",null,null],[6,"U349","","",null,null],[6,"P349","","",null,null],[6,"N349","","",null,null],[6,"U350","","",null,null],[6,"P350","","",null,null],[6,"N350","","",null,null],[6,"U351","","",null,null],[6,"P351","","",null,null],[6,"N351","","",null,null],[6,"U352","","",null,null],[6,"P352","","",null,null],[6,"N352","","",null,null],[6,"U353","","",null,null],[6,"P353","","",null,null],[6,"N353","","",null,null],[6,"U354","","",null,null],[6,"P354","","",null,null],[6,"N354","","",null,null],[6,"U355","","",null,null],[6,"P355","","",null,null],[6,"N355","","",null,null],[6,"U356","","",null,null],[6,"P356","","",null,null],[6,"N356","","",null,null],[6,"U357","","",null,null],[6,"P357","","",null,null],[6,"N357","","",null,null],[6,"U358","","",null,null],[6,"P358","","",null,null],[6,"N358","","",null,null],[6,"U359","","",null,null],[6,"P359","","",null,null],[6,"N359","","",null,null],[6,"U360","","",null,null],[6,"P360","","",null,null],[6,"N360","","",null,null],[6,"U361","","",null,null],[6,"P361","","",null,null],[6,"N361","","",null,null],[6,"U362","","",null,null],[6,"P362","","",null,null],[6,"N362","","",null,null],[6,"U363","","",null,null],[6,"P363","","",null,null],[6,"N363","","",null,null],[6,"U364","","",null,null],[6,"P364","","",null,null],[6,"N364","","",null,null],[6,"U365","","",null,null],[6,"P365","","",null,null],[6,"N365","","",null,null],[6,"U366","","",null,null],[6,"P366","","",null,null],[6,"N366","","",null,null],[6,"U367","","",null,null],[6,"P367","","",null,null],[6,"N367","","",null,null],[6,"U368","","",null,null],[6,"P368","","",null,null],[6,"N368","","",null,null],[6,"U369","","",null,null],[6,"P369","","",null,null],[6,"N369","","",null,null],[6,"U370","","",null,null],[6,"P370","","",null,null],[6,"N370","","",null,null],[6,"U371","","",null,null],[6,"P371","","",null,null],[6,"N371","","",null,null],[6,"U372","","",null,null],[6,"P372","","",null,null],[6,"N372","","",null,null],[6,"U373","","",null,null],[6,"P373","","",null,null],[6,"N373","","",null,null],[6,"U374","","",null,null],[6,"P374","","",null,null],[6,"N374","","",null,null],[6,"U375","","",null,null],[6,"P375","","",null,null],[6,"N375","","",null,null],[6,"U376","","",null,null],[6,"P376","","",null,null],[6,"N376","","",null,null],[6,"U377","","",null,null],[6,"P377","","",null,null],[6,"N377","","",null,null],[6,"U378","","",null,null],[6,"P378","","",null,null],[6,"N378","","",null,null],[6,"U379","","",null,null],[6,"P379","","",null,null],[6,"N379","","",null,null],[6,"U380","","",null,null],[6,"P380","","",null,null],[6,"N380","","",null,null],[6,"U381","","",null,null],[6,"P381","","",null,null],[6,"N381","","",null,null],[6,"U382","","",null,null],[6,"P382","","",null,null],[6,"N382","","",null,null],[6,"U383","","",null,null],[6,"P383","","",null,null],[6,"N383","","",null,null],[6,"U384","","",null,null],[6,"P384","","",null,null],[6,"N384","","",null,null],[6,"U385","","",null,null],[6,"P385","","",null,null],[6,"N385","","",null,null],[6,"U386","","",null,null],[6,"P386","","",null,null],[6,"N386","","",null,null],[6,"U387","","",null,null],[6,"P387","","",null,null],[6,"N387","","",null,null],[6,"U388","","",null,null],[6,"P388","","",null,null],[6,"N388","","",null,null],[6,"U389","","",null,null],[6,"P389","","",null,null],[6,"N389","","",null,null],[6,"U390","","",null,null],[6,"P390","","",null,null],[6,"N390","","",null,null],[6,"U391","","",null,null],[6,"P391","","",null,null],[6,"N391","","",null,null],[6,"U392","","",null,null],[6,"P392","","",null,null],[6,"N392","","",null,null],[6,"U393","","",null,null],[6,"P393","","",null,null],[6,"N393","","",null,null],[6,"U394","","",null,null],[6,"P394","","",null,null],[6,"N394","","",null,null],[6,"U395","","",null,null],[6,"P395","","",null,null],[6,"N395","","",null,null],[6,"U396","","",null,null],[6,"P396","","",null,null],[6,"N396","","",null,null],[6,"U397","","",null,null],[6,"P397","","",null,null],[6,"N397","","",null,null],[6,"U398","","",null,null],[6,"P398","","",null,null],[6,"N398","","",null,null],[6,"U399","","",null,null],[6,"P399","","",null,null],[6,"N399","","",null,null],[6,"U400","","",null,null],[6,"P400","","",null,null],[6,"N400","","",null,null],[6,"U401","","",null,null],[6,"P401","","",null,null],[6,"N401","","",null,null],[6,"U402","","",null,null],[6,"P402","","",null,null],[6,"N402","","",null,null],[6,"U403","","",null,null],[6,"P403","","",null,null],[6,"N403","","",null,null],[6,"U404","","",null,null],[6,"P404","","",null,null],[6,"N404","","",null,null],[6,"U405","","",null,null],[6,"P405","","",null,null],[6,"N405","","",null,null],[6,"U406","","",null,null],[6,"P406","","",null,null],[6,"N406","","",null,null],[6,"U407","","",null,null],[6,"P407","","",null,null],[6,"N407","","",null,null],[6,"U408","","",null,null],[6,"P408","","",null,null],[6,"N408","","",null,null],[6,"U409","","",null,null],[6,"P409","","",null,null],[6,"N409","","",null,null],[6,"U410","","",null,null],[6,"P410","","",null,null],[6,"N410","","",null,null],[6,"U411","","",null,null],[6,"P411","","",null,null],[6,"N411","","",null,null],[6,"U412","","",null,null],[6,"P412","","",null,null],[6,"N412","","",null,null],[6,"U413","","",null,null],[6,"P413","","",null,null],[6,"N413","","",null,null],[6,"U414","","",null,null],[6,"P414","","",null,null],[6,"N414","","",null,null],[6,"U415","","",null,null],[6,"P415","","",null,null],[6,"N415","","",null,null],[6,"U416","","",null,null],[6,"P416","","",null,null],[6,"N416","","",null,null],[6,"U417","","",null,null],[6,"P417","","",null,null],[6,"N417","","",null,null],[6,"U418","","",null,null],[6,"P418","","",null,null],[6,"N418","","",null,null],[6,"U419","","",null,null],[6,"P419","","",null,null],[6,"N419","","",null,null],[6,"U420","","",null,null],[6,"P420","","",null,null],[6,"N420","","",null,null],[6,"U421","","",null,null],[6,"P421","","",null,null],[6,"N421","","",null,null],[6,"U422","","",null,null],[6,"P422","","",null,null],[6,"N422","","",null,null],[6,"U423","","",null,null],[6,"P423","","",null,null],[6,"N423","","",null,null],[6,"U424","","",null,null],[6,"P424","","",null,null],[6,"N424","","",null,null],[6,"U425","","",null,null],[6,"P425","","",null,null],[6,"N425","","",null,null],[6,"U426","","",null,null],[6,"P426","","",null,null],[6,"N426","","",null,null],[6,"U427","","",null,null],[6,"P427","","",null,null],[6,"N427","","",null,null],[6,"U428","","",null,null],[6,"P428","","",null,null],[6,"N428","","",null,null],[6,"U429","","",null,null],[6,"P429","","",null,null],[6,"N429","","",null,null],[6,"U430","","",null,null],[6,"P430","","",null,null],[6,"N430","","",null,null],[6,"U431","","",null,null],[6,"P431","","",null,null],[6,"N431","","",null,null],[6,"U432","","",null,null],[6,"P432","","",null,null],[6,"N432","","",null,null],[6,"U433","","",null,null],[6,"P433","","",null,null],[6,"N433","","",null,null],[6,"U434","","",null,null],[6,"P434","","",null,null],[6,"N434","","",null,null],[6,"U435","","",null,null],[6,"P435","","",null,null],[6,"N435","","",null,null],[6,"U436","","",null,null],[6,"P436","","",null,null],[6,"N436","","",null,null],[6,"U437","","",null,null],[6,"P437","","",null,null],[6,"N437","","",null,null],[6,"U438","","",null,null],[6,"P438","","",null,null],[6,"N438","","",null,null],[6,"U439","","",null,null],[6,"P439","","",null,null],[6,"N439","","",null,null],[6,"U440","","",null,null],[6,"P440","","",null,null],[6,"N440","","",null,null],[6,"U441","","",null,null],[6,"P441","","",null,null],[6,"N441","","",null,null],[6,"U442","","",null,null],[6,"P442","","",null,null],[6,"N442","","",null,null],[6,"U443","","",null,null],[6,"P443","","",null,null],[6,"N443","","",null,null],[6,"U444","","",null,null],[6,"P444","","",null,null],[6,"N444","","",null,null],[6,"U445","","",null,null],[6,"P445","","",null,null],[6,"N445","","",null,null],[6,"U446","","",null,null],[6,"P446","","",null,null],[6,"N446","","",null,null],[6,"U447","","",null,null],[6,"P447","","",null,null],[6,"N447","","",null,null],[6,"U448","","",null,null],[6,"P448","","",null,null],[6,"N448","","",null,null],[6,"U449","","",null,null],[6,"P449","","",null,null],[6,"N449","","",null,null],[6,"U450","","",null,null],[6,"P450","","",null,null],[6,"N450","","",null,null],[6,"U451","","",null,null],[6,"P451","","",null,null],[6,"N451","","",null,null],[6,"U452","","",null,null],[6,"P452","","",null,null],[6,"N452","","",null,null],[6,"U453","","",null,null],[6,"P453","","",null,null],[6,"N453","","",null,null],[6,"U454","","",null,null],[6,"P454","","",null,null],[6,"N454","","",null,null],[6,"U455","","",null,null],[6,"P455","","",null,null],[6,"N455","","",null,null],[6,"U456","","",null,null],[6,"P456","","",null,null],[6,"N456","","",null,null],[6,"U457","","",null,null],[6,"P457","","",null,null],[6,"N457","","",null,null],[6,"U458","","",null,null],[6,"P458","","",null,null],[6,"N458","","",null,null],[6,"U459","","",null,null],[6,"P459","","",null,null],[6,"N459","","",null,null],[6,"U460","","",null,null],[6,"P460","","",null,null],[6,"N460","","",null,null],[6,"U461","","",null,null],[6,"P461","","",null,null],[6,"N461","","",null,null],[6,"U462","","",null,null],[6,"P462","","",null,null],[6,"N462","","",null,null],[6,"U463","","",null,null],[6,"P463","","",null,null],[6,"N463","","",null,null],[6,"U464","","",null,null],[6,"P464","","",null,null],[6,"N464","","",null,null],[6,"U465","","",null,null],[6,"P465","","",null,null],[6,"N465","","",null,null],[6,"U466","","",null,null],[6,"P466","","",null,null],[6,"N466","","",null,null],[6,"U467","","",null,null],[6,"P467","","",null,null],[6,"N467","","",null,null],[6,"U468","","",null,null],[6,"P468","","",null,null],[6,"N468","","",null,null],[6,"U469","","",null,null],[6,"P469","","",null,null],[6,"N469","","",null,null],[6,"U470","","",null,null],[6,"P470","","",null,null],[6,"N470","","",null,null],[6,"U471","","",null,null],[6,"P471","","",null,null],[6,"N471","","",null,null],[6,"U472","","",null,null],[6,"P472","","",null,null],[6,"N472","","",null,null],[6,"U473","","",null,null],[6,"P473","","",null,null],[6,"N473","","",null,null],[6,"U474","","",null,null],[6,"P474","","",null,null],[6,"N474","","",null,null],[6,"U475","","",null,null],[6,"P475","","",null,null],[6,"N475","","",null,null],[6,"U476","","",null,null],[6,"P476","","",null,null],[6,"N476","","",null,null],[6,"U477","","",null,null],[6,"P477","","",null,null],[6,"N477","","",null,null],[6,"U478","","",null,null],[6,"P478","","",null,null],[6,"N478","","",null,null],[6,"U479","","",null,null],[6,"P479","","",null,null],[6,"N479","","",null,null],[6,"U480","","",null,null],[6,"P480","","",null,null],[6,"N480","","",null,null],[6,"U481","","",null,null],[6,"P481","","",null,null],[6,"N481","","",null,null],[6,"U482","","",null,null],[6,"P482","","",null,null],[6,"N482","","",null,null],[6,"U483","","",null,null],[6,"P483","","",null,null],[6,"N483","","",null,null],[6,"U484","","",null,null],[6,"P484","","",null,null],[6,"N484","","",null,null],[6,"U485","","",null,null],[6,"P485","","",null,null],[6,"N485","","",null,null],[6,"U486","","",null,null],[6,"P486","","",null,null],[6,"N486","","",null,null],[6,"U487","","",null,null],[6,"P487","","",null,null],[6,"N487","","",null,null],[6,"U488","","",null,null],[6,"P488","","",null,null],[6,"N488","","",null,null],[6,"U489","","",null,null],[6,"P489","","",null,null],[6,"N489","","",null,null],[6,"U490","","",null,null],[6,"P490","","",null,null],[6,"N490","","",null,null],[6,"U491","","",null,null],[6,"P491","","",null,null],[6,"N491","","",null,null],[6,"U492","","",null,null],[6,"P492","","",null,null],[6,"N492","","",null,null],[6,"U493","","",null,null],[6,"P493","","",null,null],[6,"N493","","",null,null],[6,"U494","","",null,null],[6,"P494","","",null,null],[6,"N494","","",null,null],[6,"U495","","",null,null],[6,"P495","","",null,null],[6,"N495","","",null,null],[6,"U496","","",null,null],[6,"P496","","",null,null],[6,"N496","","",null,null],[6,"U497","","",null,null],[6,"P497","","",null,null],[6,"N497","","",null,null],[6,"U498","","",null,null],[6,"P498","","",null,null],[6,"N498","","",null,null],[6,"U499","","",null,null],[6,"P499","","",null,null],[6,"N499","","",null,null],[6,"U500","","",null,null],[6,"P500","","",null,null],[6,"N500","","",null,null],[6,"U501","","",null,null],[6,"P501","","",null,null],[6,"N501","","",null,null],[6,"U502","","",null,null],[6,"P502","","",null,null],[6,"N502","","",null,null],[6,"U503","","",null,null],[6,"P503","","",null,null],[6,"N503","","",null,null],[6,"U504","","",null,null],[6,"P504","","",null,null],[6,"N504","","",null,null],[6,"U505","","",null,null],[6,"P505","","",null,null],[6,"N505","","",null,null],[6,"U506","","",null,null],[6,"P506","","",null,null],[6,"N506","","",null,null],[6,"U507","","",null,null],[6,"P507","","",null,null],[6,"N507","","",null,null],[6,"U508","","",null,null],[6,"P508","","",null,null],[6,"N508","","",null,null],[6,"U509","","",null,null],[6,"P509","","",null,null],[6,"N509","","",null,null],[6,"U510","","",null,null],[6,"P510","","",null,null],[6,"N510","","",null,null],[6,"U511","","",null,null],[6,"P511","","",null,null],[6,"N511","","",null,null],[6,"U512","","",null,null],[6,"P512","","",null,null],[6,"N512","","",null,null],[6,"U513","","",null,null],[6,"P513","","",null,null],[6,"N513","","",null,null],[6,"U514","","",null,null],[6,"P514","","",null,null],[6,"N514","","",null,null],[6,"U515","","",null,null],[6,"P515","","",null,null],[6,"N515","","",null,null],[6,"U516","","",null,null],[6,"P516","","",null,null],[6,"N516","","",null,null],[6,"U517","","",null,null],[6,"P517","","",null,null],[6,"N517","","",null,null],[6,"U518","","",null,null],[6,"P518","","",null,null],[6,"N518","","",null,null],[6,"U519","","",null,null],[6,"P519","","",null,null],[6,"N519","","",null,null],[6,"U520","","",null,null],[6,"P520","","",null,null],[6,"N520","","",null,null],[6,"U521","","",null,null],[6,"P521","","",null,null],[6,"N521","","",null,null],[6,"U522","","",null,null],[6,"P522","","",null,null],[6,"N522","","",null,null],[6,"U523","","",null,null],[6,"P523","","",null,null],[6,"N523","","",null,null],[6,"U524","","",null,null],[6,"P524","","",null,null],[6,"N524","","",null,null],[6,"U525","","",null,null],[6,"P525","","",null,null],[6,"N525","","",null,null],[6,"U526","","",null,null],[6,"P526","","",null,null],[6,"N526","","",null,null],[6,"U527","","",null,null],[6,"P527","","",null,null],[6,"N527","","",null,null],[6,"U528","","",null,null],[6,"P528","","",null,null],[6,"N528","","",null,null],[6,"U529","","",null,null],[6,"P529","","",null,null],[6,"N529","","",null,null],[6,"U530","","",null,null],[6,"P530","","",null,null],[6,"N530","","",null,null],[6,"U531","","",null,null],[6,"P531","","",null,null],[6,"N531","","",null,null],[6,"U532","","",null,null],[6,"P532","","",null,null],[6,"N532","","",null,null],[6,"U533","","",null,null],[6,"P533","","",null,null],[6,"N533","","",null,null],[6,"U534","","",null,null],[6,"P534","","",null,null],[6,"N534","","",null,null],[6,"U535","","",null,null],[6,"P535","","",null,null],[6,"N535","","",null,null],[6,"U536","","",null,null],[6,"P536","","",null,null],[6,"N536","","",null,null],[6,"U537","","",null,null],[6,"P537","","",null,null],[6,"N537","","",null,null],[6,"U538","","",null,null],[6,"P538","","",null,null],[6,"N538","","",null,null],[6,"U539","","",null,null],[6,"P539","","",null,null],[6,"N539","","",null,null],[6,"U540","","",null,null],[6,"P540","","",null,null],[6,"N540","","",null,null],[6,"U541","","",null,null],[6,"P541","","",null,null],[6,"N541","","",null,null],[6,"U542","","",null,null],[6,"P542","","",null,null],[6,"N542","","",null,null],[6,"U543","","",null,null],[6,"P543","","",null,null],[6,"N543","","",null,null],[6,"U544","","",null,null],[6,"P544","","",null,null],[6,"N544","","",null,null],[6,"U545","","",null,null],[6,"P545","","",null,null],[6,"N545","","",null,null],[6,"U546","","",null,null],[6,"P546","","",null,null],[6,"N546","","",null,null],[6,"U547","","",null,null],[6,"P547","","",null,null],[6,"N547","","",null,null],[6,"U548","","",null,null],[6,"P548","","",null,null],[6,"N548","","",null,null],[6,"U549","","",null,null],[6,"P549","","",null,null],[6,"N549","","",null,null],[6,"U550","","",null,null],[6,"P550","","",null,null],[6,"N550","","",null,null],[6,"U551","","",null,null],[6,"P551","","",null,null],[6,"N551","","",null,null],[6,"U552","","",null,null],[6,"P552","","",null,null],[6,"N552","","",null,null],[6,"U553","","",null,null],[6,"P553","","",null,null],[6,"N553","","",null,null],[6,"U554","","",null,null],[6,"P554","","",null,null],[6,"N554","","",null,null],[6,"U555","","",null,null],[6,"P555","","",null,null],[6,"N555","","",null,null],[6,"U556","","",null,null],[6,"P556","","",null,null],[6,"N556","","",null,null],[6,"U557","","",null,null],[6,"P557","","",null,null],[6,"N557","","",null,null],[6,"U558","","",null,null],[6,"P558","","",null,null],[6,"N558","","",null,null],[6,"U559","","",null,null],[6,"P559","","",null,null],[6,"N559","","",null,null],[6,"U560","","",null,null],[6,"P560","","",null,null],[6,"N560","","",null,null],[6,"U561","","",null,null],[6,"P561","","",null,null],[6,"N561","","",null,null],[6,"U562","","",null,null],[6,"P562","","",null,null],[6,"N562","","",null,null],[6,"U563","","",null,null],[6,"P563","","",null,null],[6,"N563","","",null,null],[6,"U564","","",null,null],[6,"P564","","",null,null],[6,"N564","","",null,null],[6,"U565","","",null,null],[6,"P565","","",null,null],[6,"N565","","",null,null],[6,"U566","","",null,null],[6,"P566","","",null,null],[6,"N566","","",null,null],[6,"U567","","",null,null],[6,"P567","","",null,null],[6,"N567","","",null,null],[6,"U568","","",null,null],[6,"P568","","",null,null],[6,"N568","","",null,null],[6,"U569","","",null,null],[6,"P569","","",null,null],[6,"N569","","",null,null],[6,"U570","","",null,null],[6,"P570","","",null,null],[6,"N570","","",null,null],[6,"U571","","",null,null],[6,"P571","","",null,null],[6,"N571","","",null,null],[6,"U572","","",null,null],[6,"P572","","",null,null],[6,"N572","","",null,null],[6,"U573","","",null,null],[6,"P573","","",null,null],[6,"N573","","",null,null],[6,"U574","","",null,null],[6,"P574","","",null,null],[6,"N574","","",null,null],[6,"U575","","",null,null],[6,"P575","","",null,null],[6,"N575","","",null,null],[6,"U576","","",null,null],[6,"P576","","",null,null],[6,"N576","","",null,null],[6,"U577","","",null,null],[6,"P577","","",null,null],[6,"N577","","",null,null],[6,"U578","","",null,null],[6,"P578","","",null,null],[6,"N578","","",null,null],[6,"U579","","",null,null],[6,"P579","","",null,null],[6,"N579","","",null,null],[6,"U580","","",null,null],[6,"P580","","",null,null],[6,"N580","","",null,null],[6,"U581","","",null,null],[6,"P581","","",null,null],[6,"N581","","",null,null],[6,"U582","","",null,null],[6,"P582","","",null,null],[6,"N582","","",null,null],[6,"U583","","",null,null],[6,"P583","","",null,null],[6,"N583","","",null,null],[6,"U584","","",null,null],[6,"P584","","",null,null],[6,"N584","","",null,null],[6,"U585","","",null,null],[6,"P585","","",null,null],[6,"N585","","",null,null],[6,"U586","","",null,null],[6,"P586","","",null,null],[6,"N586","","",null,null],[6,"U587","","",null,null],[6,"P587","","",null,null],[6,"N587","","",null,null],[6,"U588","","",null,null],[6,"P588","","",null,null],[6,"N588","","",null,null],[6,"U589","","",null,null],[6,"P589","","",null,null],[6,"N589","","",null,null],[6,"U590","","",null,null],[6,"P590","","",null,null],[6,"N590","","",null,null],[6,"U591","","",null,null],[6,"P591","","",null,null],[6,"N591","","",null,null],[6,"U592","","",null,null],[6,"P592","","",null,null],[6,"N592","","",null,null],[6,"U593","","",null,null],[6,"P593","","",null,null],[6,"N593","","",null,null],[6,"U594","","",null,null],[6,"P594","","",null,null],[6,"N594","","",null,null],[6,"U595","","",null,null],[6,"P595","","",null,null],[6,"N595","","",null,null],[6,"U596","","",null,null],[6,"P596","","",null,null],[6,"N596","","",null,null],[6,"U597","","",null,null],[6,"P597","","",null,null],[6,"N597","","",null,null],[6,"U598","","",null,null],[6,"P598","","",null,null],[6,"N598","","",null,null],[6,"U599","","",null,null],[6,"P599","","",null,null],[6,"N599","","",null,null],[6,"U600","","",null,null],[6,"P600","","",null,null],[6,"N600","","",null,null],[6,"U601","","",null,null],[6,"P601","","",null,null],[6,"N601","","",null,null],[6,"U602","","",null,null],[6,"P602","","",null,null],[6,"N602","","",null,null],[6,"U603","","",null,null],[6,"P603","","",null,null],[6,"N603","","",null,null],[6,"U604","","",null,null],[6,"P604","","",null,null],[6,"N604","","",null,null],[6,"U605","","",null,null],[6,"P605","","",null,null],[6,"N605","","",null,null],[6,"U606","","",null,null],[6,"P606","","",null,null],[6,"N606","","",null,null],[6,"U607","","",null,null],[6,"P607","","",null,null],[6,"N607","","",null,null],[6,"U608","","",null,null],[6,"P608","","",null,null],[6,"N608","","",null,null],[6,"U609","","",null,null],[6,"P609","","",null,null],[6,"N609","","",null,null],[6,"U610","","",null,null],[6,"P610","","",null,null],[6,"N610","","",null,null],[6,"U611","","",null,null],[6,"P611","","",null,null],[6,"N611","","",null,null],[6,"U612","","",null,null],[6,"P612","","",null,null],[6,"N612","","",null,null],[6,"U613","","",null,null],[6,"P613","","",null,null],[6,"N613","","",null,null],[6,"U614","","",null,null],[6,"P614","","",null,null],[6,"N614","","",null,null],[6,"U615","","",null,null],[6,"P615","","",null,null],[6,"N615","","",null,null],[6,"U616","","",null,null],[6,"P616","","",null,null],[6,"N616","","",null,null],[6,"U617","","",null,null],[6,"P617","","",null,null],[6,"N617","","",null,null],[6,"U618","","",null,null],[6,"P618","","",null,null],[6,"N618","","",null,null],[6,"U619","","",null,null],[6,"P619","","",null,null],[6,"N619","","",null,null],[6,"U620","","",null,null],[6,"P620","","",null,null],[6,"N620","","",null,null],[6,"U621","","",null,null],[6,"P621","","",null,null],[6,"N621","","",null,null],[6,"U622","","",null,null],[6,"P622","","",null,null],[6,"N622","","",null,null],[6,"U623","","",null,null],[6,"P623","","",null,null],[6,"N623","","",null,null],[6,"U624","","",null,null],[6,"P624","","",null,null],[6,"N624","","",null,null],[6,"U625","","",null,null],[6,"P625","","",null,null],[6,"N625","","",null,null],[6,"U626","","",null,null],[6,"P626","","",null,null],[6,"N626","","",null,null],[6,"U627","","",null,null],[6,"P627","","",null,null],[6,"N627","","",null,null],[6,"U628","","",null,null],[6,"P628","","",null,null],[6,"N628","","",null,null],[6,"U629","","",null,null],[6,"P629","","",null,null],[6,"N629","","",null,null],[6,"U630","","",null,null],[6,"P630","","",null,null],[6,"N630","","",null,null],[6,"U631","","",null,null],[6,"P631","","",null,null],[6,"N631","","",null,null],[6,"U632","","",null,null],[6,"P632","","",null,null],[6,"N632","","",null,null],[6,"U633","","",null,null],[6,"P633","","",null,null],[6,"N633","","",null,null],[6,"U634","","",null,null],[6,"P634","","",null,null],[6,"N634","","",null,null],[6,"U635","","",null,null],[6,"P635","","",null,null],[6,"N635","","",null,null],[6,"U636","","",null,null],[6,"P636","","",null,null],[6,"N636","","",null,null],[6,"U637","","",null,null],[6,"P637","","",null,null],[6,"N637","","",null,null],[6,"U638","","",null,null],[6,"P638","","",null,null],[6,"N638","","",null,null],[6,"U639","","",null,null],[6,"P639","","",null,null],[6,"N639","","",null,null],[6,"U640","","",null,null],[6,"P640","","",null,null],[6,"N640","","",null,null],[6,"U641","","",null,null],[6,"P641","","",null,null],[6,"N641","","",null,null],[6,"U642","","",null,null],[6,"P642","","",null,null],[6,"N642","","",null,null],[6,"U643","","",null,null],[6,"P643","","",null,null],[6,"N643","","",null,null],[6,"U644","","",null,null],[6,"P644","","",null,null],[6,"N644","","",null,null],[6,"U645","","",null,null],[6,"P645","","",null,null],[6,"N645","","",null,null],[6,"U646","","",null,null],[6,"P646","","",null,null],[6,"N646","","",null,null],[6,"U647","","",null,null],[6,"P647","","",null,null],[6,"N647","","",null,null],[6,"U648","","",null,null],[6,"P648","","",null,null],[6,"N648","","",null,null],[6,"U649","","",null,null],[6,"P649","","",null,null],[6,"N649","","",null,null],[6,"U650","","",null,null],[6,"P650","","",null,null],[6,"N650","","",null,null],[6,"U651","","",null,null],[6,"P651","","",null,null],[6,"N651","","",null,null],[6,"U652","","",null,null],[6,"P652","","",null,null],[6,"N652","","",null,null],[6,"U653","","",null,null],[6,"P653","","",null,null],[6,"N653","","",null,null],[6,"U654","","",null,null],[6,"P654","","",null,null],[6,"N654","","",null,null],[6,"U655","","",null,null],[6,"P655","","",null,null],[6,"N655","","",null,null],[6,"U656","","",null,null],[6,"P656","","",null,null],[6,"N656","","",null,null],[6,"U657","","",null,null],[6,"P657","","",null,null],[6,"N657","","",null,null],[6,"U658","","",null,null],[6,"P658","","",null,null],[6,"N658","","",null,null],[6,"U659","","",null,null],[6,"P659","","",null,null],[6,"N659","","",null,null],[6,"U660","","",null,null],[6,"P660","","",null,null],[6,"N660","","",null,null],[6,"U661","","",null,null],[6,"P661","","",null,null],[6,"N661","","",null,null],[6,"U662","","",null,null],[6,"P662","","",null,null],[6,"N662","","",null,null],[6,"U663","","",null,null],[6,"P663","","",null,null],[6,"N663","","",null,null],[6,"U664","","",null,null],[6,"P664","","",null,null],[6,"N664","","",null,null],[6,"U665","","",null,null],[6,"P665","","",null,null],[6,"N665","","",null,null],[6,"U666","","",null,null],[6,"P666","","",null,null],[6,"N666","","",null,null],[6,"U667","","",null,null],[6,"P667","","",null,null],[6,"N667","","",null,null],[6,"U668","","",null,null],[6,"P668","","",null,null],[6,"N668","","",null,null],[6,"U669","","",null,null],[6,"P669","","",null,null],[6,"N669","","",null,null],[6,"U670","","",null,null],[6,"P670","","",null,null],[6,"N670","","",null,null],[6,"U671","","",null,null],[6,"P671","","",null,null],[6,"N671","","",null,null],[6,"U672","","",null,null],[6,"P672","","",null,null],[6,"N672","","",null,null],[6,"U673","","",null,null],[6,"P673","","",null,null],[6,"N673","","",null,null],[6,"U674","","",null,null],[6,"P674","","",null,null],[6,"N674","","",null,null],[6,"U675","","",null,null],[6,"P675","","",null,null],[6,"N675","","",null,null],[6,"U676","","",null,null],[6,"P676","","",null,null],[6,"N676","","",null,null],[6,"U677","","",null,null],[6,"P677","","",null,null],[6,"N677","","",null,null],[6,"U678","","",null,null],[6,"P678","","",null,null],[6,"N678","","",null,null],[6,"U679","","",null,null],[6,"P679","","",null,null],[6,"N679","","",null,null],[6,"U680","","",null,null],[6,"P680","","",null,null],[6,"N680","","",null,null],[6,"U681","","",null,null],[6,"P681","","",null,null],[6,"N681","","",null,null],[6,"U682","","",null,null],[6,"P682","","",null,null],[6,"N682","","",null,null],[6,"U683","","",null,null],[6,"P683","","",null,null],[6,"N683","","",null,null],[6,"U684","","",null,null],[6,"P684","","",null,null],[6,"N684","","",null,null],[6,"U685","","",null,null],[6,"P685","","",null,null],[6,"N685","","",null,null],[6,"U686","","",null,null],[6,"P686","","",null,null],[6,"N686","","",null,null],[6,"U687","","",null,null],[6,"P687","","",null,null],[6,"N687","","",null,null],[6,"U688","","",null,null],[6,"P688","","",null,null],[6,"N688","","",null,null],[6,"U689","","",null,null],[6,"P689","","",null,null],[6,"N689","","",null,null],[6,"U690","","",null,null],[6,"P690","","",null,null],[6,"N690","","",null,null],[6,"U691","","",null,null],[6,"P691","","",null,null],[6,"N691","","",null,null],[6,"U692","","",null,null],[6,"P692","","",null,null],[6,"N692","","",null,null],[6,"U693","","",null,null],[6,"P693","","",null,null],[6,"N693","","",null,null],[6,"U694","","",null,null],[6,"P694","","",null,null],[6,"N694","","",null,null],[6,"U695","","",null,null],[6,"P695","","",null,null],[6,"N695","","",null,null],[6,"U696","","",null,null],[6,"P696","","",null,null],[6,"N696","","",null,null],[6,"U697","","",null,null],[6,"P697","","",null,null],[6,"N697","","",null,null],[6,"U698","","",null,null],[6,"P698","","",null,null],[6,"N698","","",null,null],[6,"U699","","",null,null],[6,"P699","","",null,null],[6,"N699","","",null,null],[6,"U700","","",null,null],[6,"P700","","",null,null],[6,"N700","","",null,null],[6,"U701","","",null,null],[6,"P701","","",null,null],[6,"N701","","",null,null],[6,"U702","","",null,null],[6,"P702","","",null,null],[6,"N702","","",null,null],[6,"U703","","",null,null],[6,"P703","","",null,null],[6,"N703","","",null,null],[6,"U704","","",null,null],[6,"P704","","",null,null],[6,"N704","","",null,null],[6,"U705","","",null,null],[6,"P705","","",null,null],[6,"N705","","",null,null],[6,"U706","","",null,null],[6,"P706","","",null,null],[6,"N706","","",null,null],[6,"U707","","",null,null],[6,"P707","","",null,null],[6,"N707","","",null,null],[6,"U708","","",null,null],[6,"P708","","",null,null],[6,"N708","","",null,null],[6,"U709","","",null,null],[6,"P709","","",null,null],[6,"N709","","",null,null],[6,"U710","","",null,null],[6,"P710","","",null,null],[6,"N710","","",null,null],[6,"U711","","",null,null],[6,"P711","","",null,null],[6,"N711","","",null,null],[6,"U712","","",null,null],[6,"P712","","",null,null],[6,"N712","","",null,null],[6,"U713","","",null,null],[6,"P713","","",null,null],[6,"N713","","",null,null],[6,"U714","","",null,null],[6,"P714","","",null,null],[6,"N714","","",null,null],[6,"U715","","",null,null],[6,"P715","","",null,null],[6,"N715","","",null,null],[6,"U716","","",null,null],[6,"P716","","",null,null],[6,"N716","","",null,null],[6,"U717","","",null,null],[6,"P717","","",null,null],[6,"N717","","",null,null],[6,"U718","","",null,null],[6,"P718","","",null,null],[6,"N718","","",null,null],[6,"U719","","",null,null],[6,"P719","","",null,null],[6,"N719","","",null,null],[6,"U720","","",null,null],[6,"P720","","",null,null],[6,"N720","","",null,null],[6,"U721","","",null,null],[6,"P721","","",null,null],[6,"N721","","",null,null],[6,"U722","","",null,null],[6,"P722","","",null,null],[6,"N722","","",null,null],[6,"U723","","",null,null],[6,"P723","","",null,null],[6,"N723","","",null,null],[6,"U724","","",null,null],[6,"P724","","",null,null],[6,"N724","","",null,null],[6,"U725","","",null,null],[6,"P725","","",null,null],[6,"N725","","",null,null],[6,"U726","","",null,null],[6,"P726","","",null,null],[6,"N726","","",null,null],[6,"U727","","",null,null],[6,"P727","","",null,null],[6,"N727","","",null,null],[6,"U728","","",null,null],[6,"P728","","",null,null],[6,"N728","","",null,null],[6,"U729","","",null,null],[6,"P729","","",null,null],[6,"N729","","",null,null],[6,"U730","","",null,null],[6,"P730","","",null,null],[6,"N730","","",null,null],[6,"U731","","",null,null],[6,"P731","","",null,null],[6,"N731","","",null,null],[6,"U732","","",null,null],[6,"P732","","",null,null],[6,"N732","","",null,null],[6,"U733","","",null,null],[6,"P733","","",null,null],[6,"N733","","",null,null],[6,"U734","","",null,null],[6,"P734","","",null,null],[6,"N734","","",null,null],[6,"U735","","",null,null],[6,"P735","","",null,null],[6,"N735","","",null,null],[6,"U736","","",null,null],[6,"P736","","",null,null],[6,"N736","","",null,null],[6,"U737","","",null,null],[6,"P737","","",null,null],[6,"N737","","",null,null],[6,"U738","","",null,null],[6,"P738","","",null,null],[6,"N738","","",null,null],[6,"U739","","",null,null],[6,"P739","","",null,null],[6,"N739","","",null,null],[6,"U740","","",null,null],[6,"P740","","",null,null],[6,"N740","","",null,null],[6,"U741","","",null,null],[6,"P741","","",null,null],[6,"N741","","",null,null],[6,"U742","","",null,null],[6,"P742","","",null,null],[6,"N742","","",null,null],[6,"U743","","",null,null],[6,"P743","","",null,null],[6,"N743","","",null,null],[6,"U744","","",null,null],[6,"P744","","",null,null],[6,"N744","","",null,null],[6,"U745","","",null,null],[6,"P745","","",null,null],[6,"N745","","",null,null],[6,"U746","","",null,null],[6,"P746","","",null,null],[6,"N746","","",null,null],[6,"U747","","",null,null],[6,"P747","","",null,null],[6,"N747","","",null,null],[6,"U748","","",null,null],[6,"P748","","",null,null],[6,"N748","","",null,null],[6,"U749","","",null,null],[6,"P749","","",null,null],[6,"N749","","",null,null],[6,"U750","","",null,null],[6,"P750","","",null,null],[6,"N750","","",null,null],[6,"U751","","",null,null],[6,"P751","","",null,null],[6,"N751","","",null,null],[6,"U752","","",null,null],[6,"P752","","",null,null],[6,"N752","","",null,null],[6,"U753","","",null,null],[6,"P753","","",null,null],[6,"N753","","",null,null],[6,"U754","","",null,null],[6,"P754","","",null,null],[6,"N754","","",null,null],[6,"U755","","",null,null],[6,"P755","","",null,null],[6,"N755","","",null,null],[6,"U756","","",null,null],[6,"P756","","",null,null],[6,"N756","","",null,null],[6,"U757","","",null,null],[6,"P757","","",null,null],[6,"N757","","",null,null],[6,"U758","","",null,null],[6,"P758","","",null,null],[6,"N758","","",null,null],[6,"U759","","",null,null],[6,"P759","","",null,null],[6,"N759","","",null,null],[6,"U760","","",null,null],[6,"P760","","",null,null],[6,"N760","","",null,null],[6,"U761","","",null,null],[6,"P761","","",null,null],[6,"N761","","",null,null],[6,"U762","","",null,null],[6,"P762","","",null,null],[6,"N762","","",null,null],[6,"U763","","",null,null],[6,"P763","","",null,null],[6,"N763","","",null,null],[6,"U764","","",null,null],[6,"P764","","",null,null],[6,"N764","","",null,null],[6,"U765","","",null,null],[6,"P765","","",null,null],[6,"N765","","",null,null],[6,"U766","","",null,null],[6,"P766","","",null,null],[6,"N766","","",null,null],[6,"U767","","",null,null],[6,"P767","","",null,null],[6,"N767","","",null,null],[6,"U768","","",null,null],[6,"P768","","",null,null],[6,"N768","","",null,null],[6,"U769","","",null,null],[6,"P769","","",null,null],[6,"N769","","",null,null],[6,"U770","","",null,null],[6,"P770","","",null,null],[6,"N770","","",null,null],[6,"U771","","",null,null],[6,"P771","","",null,null],[6,"N771","","",null,null],[6,"U772","","",null,null],[6,"P772","","",null,null],[6,"N772","","",null,null],[6,"U773","","",null,null],[6,"P773","","",null,null],[6,"N773","","",null,null],[6,"U774","","",null,null],[6,"P774","","",null,null],[6,"N774","","",null,null],[6,"U775","","",null,null],[6,"P775","","",null,null],[6,"N775","","",null,null],[6,"U776","","",null,null],[6,"P776","","",null,null],[6,"N776","","",null,null],[6,"U777","","",null,null],[6,"P777","","",null,null],[6,"N777","","",null,null],[6,"U778","","",null,null],[6,"P778","","",null,null],[6,"N778","","",null,null],[6,"U779","","",null,null],[6,"P779","","",null,null],[6,"N779","","",null,null],[6,"U780","","",null,null],[6,"P780","","",null,null],[6,"N780","","",null,null],[6,"U781","","",null,null],[6,"P781","","",null,null],[6,"N781","","",null,null],[6,"U782","","",null,null],[6,"P782","","",null,null],[6,"N782","","",null,null],[6,"U783","","",null,null],[6,"P783","","",null,null],[6,"N783","","",null,null],[6,"U784","","",null,null],[6,"P784","","",null,null],[6,"N784","","",null,null],[6,"U785","","",null,null],[6,"P785","","",null,null],[6,"N785","","",null,null],[6,"U786","","",null,null],[6,"P786","","",null,null],[6,"N786","","",null,null],[6,"U787","","",null,null],[6,"P787","","",null,null],[6,"N787","","",null,null],[6,"U788","","",null,null],[6,"P788","","",null,null],[6,"N788","","",null,null],[6,"U789","","",null,null],[6,"P789","","",null,null],[6,"N789","","",null,null],[6,"U790","","",null,null],[6,"P790","","",null,null],[6,"N790","","",null,null],[6,"U791","","",null,null],[6,"P791","","",null,null],[6,"N791","","",null,null],[6,"U792","","",null,null],[6,"P792","","",null,null],[6,"N792","","",null,null],[6,"U793","","",null,null],[6,"P793","","",null,null],[6,"N793","","",null,null],[6,"U794","","",null,null],[6,"P794","","",null,null],[6,"N794","","",null,null],[6,"U795","","",null,null],[6,"P795","","",null,null],[6,"N795","","",null,null],[6,"U796","","",null,null],[6,"P796","","",null,null],[6,"N796","","",null,null],[6,"U797","","",null,null],[6,"P797","","",null,null],[6,"N797","","",null,null],[6,"U798","","",null,null],[6,"P798","","",null,null],[6,"N798","","",null,null],[6,"U799","","",null,null],[6,"P799","","",null,null],[6,"N799","","",null,null],[6,"U800","","",null,null],[6,"P800","","",null,null],[6,"N800","","",null,null],[6,"U801","","",null,null],[6,"P801","","",null,null],[6,"N801","","",null,null],[6,"U802","","",null,null],[6,"P802","","",null,null],[6,"N802","","",null,null],[6,"U803","","",null,null],[6,"P803","","",null,null],[6,"N803","","",null,null],[6,"U804","","",null,null],[6,"P804","","",null,null],[6,"N804","","",null,null],[6,"U805","","",null,null],[6,"P805","","",null,null],[6,"N805","","",null,null],[6,"U806","","",null,null],[6,"P806","","",null,null],[6,"N806","","",null,null],[6,"U807","","",null,null],[6,"P807","","",null,null],[6,"N807","","",null,null],[6,"U808","","",null,null],[6,"P808","","",null,null],[6,"N808","","",null,null],[6,"U809","","",null,null],[6,"P809","","",null,null],[6,"N809","","",null,null],[6,"U810","","",null,null],[6,"P810","","",null,null],[6,"N810","","",null,null],[6,"U811","","",null,null],[6,"P811","","",null,null],[6,"N811","","",null,null],[6,"U812","","",null,null],[6,"P812","","",null,null],[6,"N812","","",null,null],[6,"U813","","",null,null],[6,"P813","","",null,null],[6,"N813","","",null,null],[6,"U814","","",null,null],[6,"P814","","",null,null],[6,"N814","","",null,null],[6,"U815","","",null,null],[6,"P815","","",null,null],[6,"N815","","",null,null],[6,"U816","","",null,null],[6,"P816","","",null,null],[6,"N816","","",null,null],[6,"U817","","",null,null],[6,"P817","","",null,null],[6,"N817","","",null,null],[6,"U818","","",null,null],[6,"P818","","",null,null],[6,"N818","","",null,null],[6,"U819","","",null,null],[6,"P819","","",null,null],[6,"N819","","",null,null],[6,"U820","","",null,null],[6,"P820","","",null,null],[6,"N820","","",null,null],[6,"U821","","",null,null],[6,"P821","","",null,null],[6,"N821","","",null,null],[6,"U822","","",null,null],[6,"P822","","",null,null],[6,"N822","","",null,null],[6,"U823","","",null,null],[6,"P823","","",null,null],[6,"N823","","",null,null],[6,"U824","","",null,null],[6,"P824","","",null,null],[6,"N824","","",null,null],[6,"U825","","",null,null],[6,"P825","","",null,null],[6,"N825","","",null,null],[6,"U826","","",null,null],[6,"P826","","",null,null],[6,"N826","","",null,null],[6,"U827","","",null,null],[6,"P827","","",null,null],[6,"N827","","",null,null],[6,"U828","","",null,null],[6,"P828","","",null,null],[6,"N828","","",null,null],[6,"U829","","",null,null],[6,"P829","","",null,null],[6,"N829","","",null,null],[6,"U830","","",null,null],[6,"P830","","",null,null],[6,"N830","","",null,null],[6,"U831","","",null,null],[6,"P831","","",null,null],[6,"N831","","",null,null],[6,"U832","","",null,null],[6,"P832","","",null,null],[6,"N832","","",null,null],[6,"U833","","",null,null],[6,"P833","","",null,null],[6,"N833","","",null,null],[6,"U834","","",null,null],[6,"P834","","",null,null],[6,"N834","","",null,null],[6,"U835","","",null,null],[6,"P835","","",null,null],[6,"N835","","",null,null],[6,"U836","","",null,null],[6,"P836","","",null,null],[6,"N836","","",null,null],[6,"U837","","",null,null],[6,"P837","","",null,null],[6,"N837","","",null,null],[6,"U838","","",null,null],[6,"P838","","",null,null],[6,"N838","","",null,null],[6,"U839","","",null,null],[6,"P839","","",null,null],[6,"N839","","",null,null],[6,"U840","","",null,null],[6,"P840","","",null,null],[6,"N840","","",null,null],[6,"U841","","",null,null],[6,"P841","","",null,null],[6,"N841","","",null,null],[6,"U842","","",null,null],[6,"P842","","",null,null],[6,"N842","","",null,null],[6,"U843","","",null,null],[6,"P843","","",null,null],[6,"N843","","",null,null],[6,"U844","","",null,null],[6,"P844","","",null,null],[6,"N844","","",null,null],[6,"U845","","",null,null],[6,"P845","","",null,null],[6,"N845","","",null,null],[6,"U846","","",null,null],[6,"P846","","",null,null],[6,"N846","","",null,null],[6,"U847","","",null,null],[6,"P847","","",null,null],[6,"N847","","",null,null],[6,"U848","","",null,null],[6,"P848","","",null,null],[6,"N848","","",null,null],[6,"U849","","",null,null],[6,"P849","","",null,null],[6,"N849","","",null,null],[6,"U850","","",null,null],[6,"P850","","",null,null],[6,"N850","","",null,null],[6,"U851","","",null,null],[6,"P851","","",null,null],[6,"N851","","",null,null],[6,"U852","","",null,null],[6,"P852","","",null,null],[6,"N852","","",null,null],[6,"U853","","",null,null],[6,"P853","","",null,null],[6,"N853","","",null,null],[6,"U854","","",null,null],[6,"P854","","",null,null],[6,"N854","","",null,null],[6,"U855","","",null,null],[6,"P855","","",null,null],[6,"N855","","",null,null],[6,"U856","","",null,null],[6,"P856","","",null,null],[6,"N856","","",null,null],[6,"U857","","",null,null],[6,"P857","","",null,null],[6,"N857","","",null,null],[6,"U858","","",null,null],[6,"P858","","",null,null],[6,"N858","","",null,null],[6,"U859","","",null,null],[6,"P859","","",null,null],[6,"N859","","",null,null],[6,"U860","","",null,null],[6,"P860","","",null,null],[6,"N860","","",null,null],[6,"U861","","",null,null],[6,"P861","","",null,null],[6,"N861","","",null,null],[6,"U862","","",null,null],[6,"P862","","",null,null],[6,"N862","","",null,null],[6,"U863","","",null,null],[6,"P863","","",null,null],[6,"N863","","",null,null],[6,"U864","","",null,null],[6,"P864","","",null,null],[6,"N864","","",null,null],[6,"U865","","",null,null],[6,"P865","","",null,null],[6,"N865","","",null,null],[6,"U866","","",null,null],[6,"P866","","",null,null],[6,"N866","","",null,null],[6,"U867","","",null,null],[6,"P867","","",null,null],[6,"N867","","",null,null],[6,"U868","","",null,null],[6,"P868","","",null,null],[6,"N868","","",null,null],[6,"U869","","",null,null],[6,"P869","","",null,null],[6,"N869","","",null,null],[6,"U870","","",null,null],[6,"P870","","",null,null],[6,"N870","","",null,null],[6,"U871","","",null,null],[6,"P871","","",null,null],[6,"N871","","",null,null],[6,"U872","","",null,null],[6,"P872","","",null,null],[6,"N872","","",null,null],[6,"U873","","",null,null],[6,"P873","","",null,null],[6,"N873","","",null,null],[6,"U874","","",null,null],[6,"P874","","",null,null],[6,"N874","","",null,null],[6,"U875","","",null,null],[6,"P875","","",null,null],[6,"N875","","",null,null],[6,"U876","","",null,null],[6,"P876","","",null,null],[6,"N876","","",null,null],[6,"U877","","",null,null],[6,"P877","","",null,null],[6,"N877","","",null,null],[6,"U878","","",null,null],[6,"P878","","",null,null],[6,"N878","","",null,null],[6,"U879","","",null,null],[6,"P879","","",null,null],[6,"N879","","",null,null],[6,"U880","","",null,null],[6,"P880","","",null,null],[6,"N880","","",null,null],[6,"U881","","",null,null],[6,"P881","","",null,null],[6,"N881","","",null,null],[6,"U882","","",null,null],[6,"P882","","",null,null],[6,"N882","","",null,null],[6,"U883","","",null,null],[6,"P883","","",null,null],[6,"N883","","",null,null],[6,"U884","","",null,null],[6,"P884","","",null,null],[6,"N884","","",null,null],[6,"U885","","",null,null],[6,"P885","","",null,null],[6,"N885","","",null,null],[6,"U886","","",null,null],[6,"P886","","",null,null],[6,"N886","","",null,null],[6,"U887","","",null,null],[6,"P887","","",null,null],[6,"N887","","",null,null],[6,"U888","","",null,null],[6,"P888","","",null,null],[6,"N888","","",null,null],[6,"U889","","",null,null],[6,"P889","","",null,null],[6,"N889","","",null,null],[6,"U890","","",null,null],[6,"P890","","",null,null],[6,"N890","","",null,null],[6,"U891","","",null,null],[6,"P891","","",null,null],[6,"N891","","",null,null],[6,"U892","","",null,null],[6,"P892","","",null,null],[6,"N892","","",null,null],[6,"U893","","",null,null],[6,"P893","","",null,null],[6,"N893","","",null,null],[6,"U894","","",null,null],[6,"P894","","",null,null],[6,"N894","","",null,null],[6,"U895","","",null,null],[6,"P895","","",null,null],[6,"N895","","",null,null],[6,"U896","","",null,null],[6,"P896","","",null,null],[6,"N896","","",null,null],[6,"U897","","",null,null],[6,"P897","","",null,null],[6,"N897","","",null,null],[6,"U898","","",null,null],[6,"P898","","",null,null],[6,"N898","","",null,null],[6,"U899","","",null,null],[6,"P899","","",null,null],[6,"N899","","",null,null],[6,"U900","","",null,null],[6,"P900","","",null,null],[6,"N900","","",null,null],[6,"U901","","",null,null],[6,"P901","","",null,null],[6,"N901","","",null,null],[6,"U902","","",null,null],[6,"P902","","",null,null],[6,"N902","","",null,null],[6,"U903","","",null,null],[6,"P903","","",null,null],[6,"N903","","",null,null],[6,"U904","","",null,null],[6,"P904","","",null,null],[6,"N904","","",null,null],[6,"U905","","",null,null],[6,"P905","","",null,null],[6,"N905","","",null,null],[6,"U906","","",null,null],[6,"P906","","",null,null],[6,"N906","","",null,null],[6,"U907","","",null,null],[6,"P907","","",null,null],[6,"N907","","",null,null],[6,"U908","","",null,null],[6,"P908","","",null,null],[6,"N908","","",null,null],[6,"U909","","",null,null],[6,"P909","","",null,null],[6,"N909","","",null,null],[6,"U910","","",null,null],[6,"P910","","",null,null],[6,"N910","","",null,null],[6,"U911","","",null,null],[6,"P911","","",null,null],[6,"N911","","",null,null],[6,"U912","","",null,null],[6,"P912","","",null,null],[6,"N912","","",null,null],[6,"U913","","",null,null],[6,"P913","","",null,null],[6,"N913","","",null,null],[6,"U914","","",null,null],[6,"P914","","",null,null],[6,"N914","","",null,null],[6,"U915","","",null,null],[6,"P915","","",null,null],[6,"N915","","",null,null],[6,"U916","","",null,null],[6,"P916","","",null,null],[6,"N916","","",null,null],[6,"U917","","",null,null],[6,"P917","","",null,null],[6,"N917","","",null,null],[6,"U918","","",null,null],[6,"P918","","",null,null],[6,"N918","","",null,null],[6,"U919","","",null,null],[6,"P919","","",null,null],[6,"N919","","",null,null],[6,"U920","","",null,null],[6,"P920","","",null,null],[6,"N920","","",null,null],[6,"U921","","",null,null],[6,"P921","","",null,null],[6,"N921","","",null,null],[6,"U922","","",null,null],[6,"P922","","",null,null],[6,"N922","","",null,null],[6,"U923","","",null,null],[6,"P923","","",null,null],[6,"N923","","",null,null],[6,"U924","","",null,null],[6,"P924","","",null,null],[6,"N924","","",null,null],[6,"U925","","",null,null],[6,"P925","","",null,null],[6,"N925","","",null,null],[6,"U926","","",null,null],[6,"P926","","",null,null],[6,"N926","","",null,null],[6,"U927","","",null,null],[6,"P927","","",null,null],[6,"N927","","",null,null],[6,"U928","","",null,null],[6,"P928","","",null,null],[6,"N928","","",null,null],[6,"U929","","",null,null],[6,"P929","","",null,null],[6,"N929","","",null,null],[6,"U930","","",null,null],[6,"P930","","",null,null],[6,"N930","","",null,null],[6,"U931","","",null,null],[6,"P931","","",null,null],[6,"N931","","",null,null],[6,"U932","","",null,null],[6,"P932","","",null,null],[6,"N932","","",null,null],[6,"U933","","",null,null],[6,"P933","","",null,null],[6,"N933","","",null,null],[6,"U934","","",null,null],[6,"P934","","",null,null],[6,"N934","","",null,null],[6,"U935","","",null,null],[6,"P935","","",null,null],[6,"N935","","",null,null],[6,"U936","","",null,null],[6,"P936","","",null,null],[6,"N936","","",null,null],[6,"U937","","",null,null],[6,"P937","","",null,null],[6,"N937","","",null,null],[6,"U938","","",null,null],[6,"P938","","",null,null],[6,"N938","","",null,null],[6,"U939","","",null,null],[6,"P939","","",null,null],[6,"N939","","",null,null],[6,"U940","","",null,null],[6,"P940","","",null,null],[6,"N940","","",null,null],[6,"U941","","",null,null],[6,"P941","","",null,null],[6,"N941","","",null,null],[6,"U942","","",null,null],[6,"P942","","",null,null],[6,"N942","","",null,null],[6,"U943","","",null,null],[6,"P943","","",null,null],[6,"N943","","",null,null],[6,"U944","","",null,null],[6,"P944","","",null,null],[6,"N944","","",null,null],[6,"U945","","",null,null],[6,"P945","","",null,null],[6,"N945","","",null,null],[6,"U946","","",null,null],[6,"P946","","",null,null],[6,"N946","","",null,null],[6,"U947","","",null,null],[6,"P947","","",null,null],[6,"N947","","",null,null],[6,"U948","","",null,null],[6,"P948","","",null,null],[6,"N948","","",null,null],[6,"U949","","",null,null],[6,"P949","","",null,null],[6,"N949","","",null,null],[6,"U950","","",null,null],[6,"P950","","",null,null],[6,"N950","","",null,null],[6,"U951","","",null,null],[6,"P951","","",null,null],[6,"N951","","",null,null],[6,"U952","","",null,null],[6,"P952","","",null,null],[6,"N952","","",null,null],[6,"U953","","",null,null],[6,"P953","","",null,null],[6,"N953","","",null,null],[6,"U954","","",null,null],[6,"P954","","",null,null],[6,"N954","","",null,null],[6,"U955","","",null,null],[6,"P955","","",null,null],[6,"N955","","",null,null],[6,"U956","","",null,null],[6,"P956","","",null,null],[6,"N956","","",null,null],[6,"U957","","",null,null],[6,"P957","","",null,null],[6,"N957","","",null,null],[6,"U958","","",null,null],[6,"P958","","",null,null],[6,"N958","","",null,null],[6,"U959","","",null,null],[6,"P959","","",null,null],[6,"N959","","",null,null],[6,"U960","","",null,null],[6,"P960","","",null,null],[6,"N960","","",null,null],[6,"U961","","",null,null],[6,"P961","","",null,null],[6,"N961","","",null,null],[6,"U962","","",null,null],[6,"P962","","",null,null],[6,"N962","","",null,null],[6,"U963","","",null,null],[6,"P963","","",null,null],[6,"N963","","",null,null],[6,"U964","","",null,null],[6,"P964","","",null,null],[6,"N964","","",null,null],[6,"U965","","",null,null],[6,"P965","","",null,null],[6,"N965","","",null,null],[6,"U966","","",null,null],[6,"P966","","",null,null],[6,"N966","","",null,null],[6,"U967","","",null,null],[6,"P967","","",null,null],[6,"N967","","",null,null],[6,"U968","","",null,null],[6,"P968","","",null,null],[6,"N968","","",null,null],[6,"U969","","",null,null],[6,"P969","","",null,null],[6,"N969","","",null,null],[6,"U970","","",null,null],[6,"P970","","",null,null],[6,"N970","","",null,null],[6,"U971","","",null,null],[6,"P971","","",null,null],[6,"N971","","",null,null],[6,"U972","","",null,null],[6,"P972","","",null,null],[6,"N972","","",null,null],[6,"U973","","",null,null],[6,"P973","","",null,null],[6,"N973","","",null,null],[6,"U974","","",null,null],[6,"P974","","",null,null],[6,"N974","","",null,null],[6,"U975","","",null,null],[6,"P975","","",null,null],[6,"N975","","",null,null],[6,"U976","","",null,null],[6,"P976","","",null,null],[6,"N976","","",null,null],[6,"U977","","",null,null],[6,"P977","","",null,null],[6,"N977","","",null,null],[6,"U978","","",null,null],[6,"P978","","",null,null],[6,"N978","","",null,null],[6,"U979","","",null,null],[6,"P979","","",null,null],[6,"N979","","",null,null],[6,"U980","","",null,null],[6,"P980","","",null,null],[6,"N980","","",null,null],[6,"U981","","",null,null],[6,"P981","","",null,null],[6,"N981","","",null,null],[6,"U982","","",null,null],[6,"P982","","",null,null],[6,"N982","","",null,null],[6,"U983","","",null,null],[6,"P983","","",null,null],[6,"N983","","",null,null],[6,"U984","","",null,null],[6,"P984","","",null,null],[6,"N984","","",null,null],[6,"U985","","",null,null],[6,"P985","","",null,null],[6,"N985","","",null,null],[6,"U986","","",null,null],[6,"P986","","",null,null],[6,"N986","","",null,null],[6,"U987","","",null,null],[6,"P987","","",null,null],[6,"N987","","",null,null],[6,"U988","","",null,null],[6,"P988","","",null,null],[6,"N988","","",null,null],[6,"U989","","",null,null],[6,"P989","","",null,null],[6,"N989","","",null,null],[6,"U990","","",null,null],[6,"P990","","",null,null],[6,"N990","","",null,null],[6,"U991","","",null,null],[6,"P991","","",null,null],[6,"N991","","",null,null],[6,"U992","","",null,null],[6,"P992","","",null,null],[6,"N992","","",null,null],[6,"U993","","",null,null],[6,"P993","","",null,null],[6,"N993","","",null,null],[6,"U994","","",null,null],[6,"P994","","",null,null],[6,"N994","","",null,null],[6,"U995","","",null,null],[6,"P995","","",null,null],[6,"N995","","",null,null],[6,"U996","","",null,null],[6,"P996","","",null,null],[6,"N996","","",null,null],[6,"U997","","",null,null],[6,"P997","","",null,null],[6,"N997","","",null,null],[6,"U998","","",null,null],[6,"P998","","",null,null],[6,"N998","","",null,null],[6,"U999","","",null,null],[6,"P999","","",null,null],[6,"N999","","",null,null],[6,"U1000","","",null,null],[6,"P1000","","",null,null],[6,"N1000","","",null,null],[6,"U1001","","",null,null],[6,"P1001","","",null,null],[6,"N1001","","",null,null],[6,"U1002","","",null,null],[6,"P1002","","",null,null],[6,"N1002","","",null,null],[6,"U1003","","",null,null],[6,"P1003","","",null,null],[6,"N1003","","",null,null],[6,"U1004","","",null,null],[6,"P1004","","",null,null],[6,"N1004","","",null,null],[6,"U1005","","",null,null],[6,"P1005","","",null,null],[6,"N1005","","",null,null],[6,"U1006","","",null,null],[6,"P1006","","",null,null],[6,"N1006","","",null,null],[6,"U1007","","",null,null],[6,"P1007","","",null,null],[6,"N1007","","",null,null],[6,"U1008","","",null,null],[6,"P1008","","",null,null],[6,"N1008","","",null,null],[6,"U1009","","",null,null],[6,"P1009","","",null,null],[6,"N1009","","",null,null],[6,"U1010","","",null,null],[6,"P1010","","",null,null],[6,"N1010","","",null,null],[6,"U1011","","",null,null],[6,"P1011","","",null,null],[6,"N1011","","",null,null],[6,"U1012","","",null,null],[6,"P1012","","",null,null],[6,"N1012","","",null,null],[6,"U1013","","",null,null],[6,"P1013","","",null,null],[6,"N1013","","",null,null],[6,"U1014","","",null,null],[6,"P1014","","",null,null],[6,"N1014","","",null,null],[6,"U1015","","",null,null],[6,"P1015","","",null,null],[6,"N1015","","",null,null],[6,"U1016","","",null,null],[6,"P1016","","",null,null],[6,"N1016","","",null,null],[6,"U1017","","",null,null],[6,"P1017","","",null,null],[6,"N1017","","",null,null],[6,"U1018","","",null,null],[6,"P1018","","",null,null],[6,"N1018","","",null,null],[6,"U1019","","",null,null],[6,"P1019","","",null,null],[6,"N1019","","",null,null],[6,"U1020","","",null,null],[6,"P1020","","",null,null],[6,"N1020","","",null,null],[6,"U1021","","",null,null],[6,"P1021","","",null,null],[6,"N1021","","",null,null],[6,"U1022","","",null,null],[6,"P1022","","",null,null],[6,"N1022","","",null,null],[6,"U1023","","",null,null],[6,"P1023","","",null,null],[6,"N1023","","",null,null],[6,"U1024","","",null,null],[6,"P1024","","",null,null],[6,"N1024","","",null,null],[6,"U2048","","",null,null],[6,"P2048","","",null,null],[6,"N2048","","",null,null],[6,"U4096","","",null,null],[6,"P4096","","",null,null],[6,"N4096","","",null,null],[6,"U8192","","",null,null],[6,"P8192","","",null,null],[6,"N8192","","",null,null],[6,"U16384","","",null,null],[6,"P16384","","",null,null],[6,"N16384","","",null,null],[6,"U32768","","",null,null],[6,"P32768","","",null,null],[6,"N32768","","",null,null],[6,"U65536","","",null,null],[6,"P65536","","",null,null],[6,"N65536","","",null,null],[6,"U131072","","",null,null],[6,"P131072","","",null,null],[6,"N131072","","",null,null],[6,"U262144","","",null,null],[6,"P262144","","",null,null],[6,"N262144","","",null,null],[6,"U524288","","",null,null],[6,"P524288","","",null,null],[6,"N524288","","",null,null],[6,"U1048576","","",null,null],[6,"P1048576","","",null,null],[6,"N1048576","","",null,null],[6,"U2097152","","",null,null],[6,"P2097152","","",null,null],[6,"N2097152","","",null,null],[6,"U4194304","","",null,null],[6,"P4194304","","",null,null],[6,"N4194304","","",null,null],[6,"U8388608","","",null,null],[6,"P8388608","","",null,null],[6,"N8388608","","",null,null],[6,"U16777216","","",null,null],[6,"P16777216","","",null,null],[6,"N16777216","","",null,null],[6,"U33554432","","",null,null],[6,"P33554432","","",null,null],[6,"N33554432","","",null,null],[6,"U67108864","","",null,null],[6,"P67108864","","",null,null],[6,"N67108864","","",null,null],[6,"U134217728","","",null,null],[6,"P134217728","","",null,null],[6,"N134217728","","",null,null],[6,"U268435456","","",null,null],[6,"P268435456","","",null,null],[6,"N268435456","","",null,null],[6,"U536870912","","",null,null],[6,"P536870912","","",null,null],[6,"N536870912","","",null,null],[6,"U1073741824","","",null,null],[6,"P1073741824","","",null,null],[6,"N1073741824","","",null,null],[6,"U2147483648","","",null,null],[6,"P2147483648","","",null,null],[6,"N2147483648","","",null,null],[6,"U4294967296","","",null,null],[6,"P4294967296","","",null,null],[6,"N4294967296","","",null,null],[6,"U8589934592","","",null,null],[6,"P8589934592","","",null,null],[6,"N8589934592","","",null,null],[6,"U17179869184","","",null,null],[6,"P17179869184","","",null,null],[6,"N17179869184","","",null,null],[6,"U34359738368","","",null,null],[6,"P34359738368","","",null,null],[6,"N34359738368","","",null,null],[6,"U68719476736","","",null,null],[6,"P68719476736","","",null,null],[6,"N68719476736","","",null,null],[6,"U137438953472","","",null,null],[6,"P137438953472","","",null,null],[6,"N137438953472","","",null,null],[6,"U274877906944","","",null,null],[6,"P274877906944","","",null,null],[6,"N274877906944","","",null,null],[6,"U549755813888","","",null,null],[6,"P549755813888","","",null,null],[6,"N549755813888","","",null,null],[6,"U1099511627776","","",null,null],[6,"P1099511627776","","",null,null],[6,"N1099511627776","","",null,null],[6,"U2199023255552","","",null,null],[6,"P2199023255552","","",null,null],[6,"N2199023255552","","",null,null],[6,"U4398046511104","","",null,null],[6,"P4398046511104","","",null,null],[6,"N4398046511104","","",null,null],[6,"U8796093022208","","",null,null],[6,"P8796093022208","","",null,null],[6,"N8796093022208","","",null,null],[6,"U17592186044416","","",null,null],[6,"P17592186044416","","",null,null],[6,"N17592186044416","","",null,null],[6,"U35184372088832","","",null,null],[6,"P35184372088832","","",null,null],[6,"N35184372088832","","",null,null],[6,"U70368744177664","","",null,null],[6,"P70368744177664","","",null,null],[6,"N70368744177664","","",null,null],[6,"U140737488355328","","",null,null],[6,"P140737488355328","","",null,null],[6,"N140737488355328","","",null,null],[6,"U281474976710656","","",null,null],[6,"P281474976710656","","",null,null],[6,"N281474976710656","","",null,null],[6,"U562949953421312","","",null,null],[6,"P562949953421312","","",null,null],[6,"N562949953421312","","",null,null],[6,"U1125899906842624","","",null,null],[6,"P1125899906842624","","",null,null],[6,"N1125899906842624","","",null,null],[6,"U2251799813685248","","",null,null],[6,"P2251799813685248","","",null,null],[6,"N2251799813685248","","",null,null],[6,"U4503599627370496","","",null,null],[6,"P4503599627370496","","",null,null],[6,"N4503599627370496","","",null,null],[6,"U9007199254740992","","",null,null],[6,"P9007199254740992","","",null,null],[6,"N9007199254740992","","",null,null],[6,"U18014398509481984","","",null,null],[6,"P18014398509481984","","",null,null],[6,"N18014398509481984","","",null,null],[6,"U36028797018963968","","",null,null],[6,"P36028797018963968","","",null,null],[6,"N36028797018963968","","",null,null],[6,"U72057594037927936","","",null,null],[6,"P72057594037927936","","",null,null],[6,"N72057594037927936","","",null,null],[6,"U144115188075855872","","",null,null],[6,"P144115188075855872","","",null,null],[6,"N144115188075855872","","",null,null],[6,"U288230376151711744","","",null,null],[6,"P288230376151711744","","",null,null],[6,"N288230376151711744","","",null,null],[6,"U576460752303423488","","",null,null],[6,"P576460752303423488","","",null,null],[6,"N576460752303423488","","",null,null],[6,"U1152921504606846976","","",null,null],[6,"P1152921504606846976","","",null,null],[6,"N1152921504606846976","","",null,null],[6,"U2305843009213693952","","",null,null],[6,"P2305843009213693952","","",null,null],[6,"N2305843009213693952","","",null,null],[6,"U4611686018427387904","","",null,null],[6,"P4611686018427387904","","",null,null],[6,"N4611686018427387904","","",null,null],[6,"U9223372036854775808","","",null,null],[6,"U10000","","",null,null],[6,"P10000","","",null,null],[6,"N10000","","",null,null],[6,"U100000","","",null,null],[6,"P100000","","",null,null],[6,"N100000","","",null,null],[6,"U1000000","","",null,null],[6,"P1000000","","",null,null],[6,"N1000000","","",null,null],[6,"U10000000","","",null,null],[6,"P10000000","","",null,null],[6,"N10000000","","",null,null],[6,"U100000000","","",null,null],[6,"P100000000","","",null,null],[6,"N100000000","","",null,null],[6,"U1000000000","","",null,null],[6,"P1000000000","","",null,null],[6,"N1000000000","","",null,null],[6,"U10000000000","","",null,null],[6,"P10000000000","","",null,null],[6,"N10000000000","","",null,null],[6,"U100000000000","","",null,null],[6,"P100000000000","","",null,null],[6,"N100000000000","","",null,null],[6,"U1000000000000","","",null,null],[6,"P1000000000000","","",null,null],[6,"N1000000000000","","",null,null],[6,"U10000000000000","","",null,null],[6,"P10000000000000","","",null,null],[6,"N10000000000000","","",null,null],[6,"U100000000000000","","",null,null],[6,"P100000000000000","","",null,null],[6,"N100000000000000","","",null,null],[6,"U1000000000000000","","",null,null],[6,"P1000000000000000","","",null,null],[6,"N1000000000000000","","",null,null],[6,"U10000000000000000","","",null,null],[6,"P10000000000000000","","",null,null],[6,"N10000000000000000","","",null,null],[6,"U100000000000000000","","",null,null],[6,"P100000000000000000","","",null,null],[6,"N100000000000000000","","",null,null],[6,"U1000000000000000000","","",null,null],[6,"P1000000000000000000","","",null,null],[6,"N1000000000000000000","","",null,null],[6,"U10000000000000000000","","",null,null],[0,"bit","typenum","Type-level bits.",null,null],[3,"B0","typenum::bit","The type-level bit 0.",null,null],[3,"B1","","The type-level bit 1.",null,null],[11,"new","","Instantiates a singleton representing this bit.",0,[[],["b0"]]],[11,"new","","Instantiates a singleton representing this bit.",1,[[],["b1"]]],[0,"int","typenum","Type-level signed integers.",null,null],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",null,null],[3,"NInt","","Type-level signed integers with negative sign.",null,null],[3,"Z0","","The type-level signed integer 0.",null,null],[11,"new","","Instantiates a singleton representing this strictly…",2,[[],["pint"]]],[11,"new","","Instantiates a singleton representing this strictly…",3,[[],["nint"]]],[11,"new","","Instantiates a singleton representing the integer 0.",4,[[],["z0"]]],[0,"marker_traits","typenum","All of the marker traits used in typenum.",null,null],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All…",null,null],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",null,null],[10,"to_ordering","","",5,[[],["ordering"]]],[8,"Bit","","The marker trait for compile time bits.",null,null],[18,"U8","","",6,null],[18,"BOOL","","",6,null],[10,"to_u8","","",6,[[],["u8"]]],[10,"to_bool","","",6,[[],["bool"]]],[8,"Unsigned","","The marker trait for compile time unsigned integers.",null,null],[18,"U8","","",7,null],[18,"U16","","",7,null],[18,"U32","","",7,null],[18,"U64","","",7,null],[18,"USIZE","","",7,null],[18,"I8","","",7,null],[18,"I16","","",7,null],[18,"I32","","",7,null],[18,"I64","","",7,null],[18,"ISIZE","","",7,null],[10,"to_u8","","",7,[[],["u8"]]],[10,"to_u16","","",7,[[],["u16"]]],[10,"to_u32","","",7,[[],["u32"]]],[10,"to_u64","","",7,[[],["u64"]]],[10,"to_usize","","",7,[[],["usize"]]],[10,"to_i8","","",7,[[],["i8"]]],[10,"to_i16","","",7,[[],["i16"]]],[10,"to_i32","","",7,[[],["i32"]]],[10,"to_i64","","",7,[[],["i64"]]],[10,"to_isize","","",7,[[],["isize"]]],[8,"Integer","","The marker trait for compile time signed integers.",null,null],[18,"I8","","",8,null],[18,"I16","","",8,null],[18,"I32","","",8,null],[18,"I64","","",8,null],[18,"ISIZE","","",8,null],[10,"to_i8","","",8,[[],["i8"]]],[10,"to_i16","","",8,[[],["i16"]]],[10,"to_i32","","",8,[[],["i32"]]],[10,"to_i64","","",8,[[],["i64"]]],[10,"to_isize","","",8,[[],["isize"]]],[8,"TypeArray","","The marker trait for type-level arrays of type-level…",null,null],[8,"PowerOfTwo","","The marker trait for type-level numbers which are a power…",null,null],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their…",null,null],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A…",null,null],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A…",null,null],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A…",null,null],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A…",null,null],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> =…",null,null],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as…",null,null],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A…",null,null],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A…",null,null],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A…",null,null],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as…",null,null],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`:…",null,null],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as…",null,null],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as…",null,null],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as…",null,null],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as…",null,null],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as…",null,null],[6,"Double","","Alias to make it easy to multiply by 2. `Double<A> =…",null,null],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as…",null,null],[6,"Cube","","Alias to make it easy to cube. `Cube<A> = <Square<A> as…",null,null],[6,"Sqrt","","Alias for the associated type of `SquareRoot`: `Sqrt<A> =…",null,null],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> =…",null,null],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as…",null,null],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> =…",null,null],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> =…",null,null],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A…",null,null],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A…",null,null],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> =…",null,null],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`:…",null,null],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A,…",null,null],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A,…",null,null],[6,"Log2","","Alias for the associated type of `Logarithm2`: `Log2<A> =…",null,null],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",null,null],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as…",null,null],[16,"Output","","Should always be `Self`",9,null],[8,"Abs","","A type operator that returns the absolute value.",null,null],[16,"Output","","The absolute value.",10,null],[8,"Pow","","A type operator that provides exponentiation by repeated…",null,null],[16,"Output","","The result of the exponentiation.",11,null],[10,"powi","","This function isn't used in this crate, but may be useful…",11,[[["exp"]]]],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It…",null,null],[16,"Output","","The result of the comparison. It should only ever be one…",12,null],[8,"Len","","A type operator that gives the length of an `Array` or the…",null,null],[16,"Output","","The length as a type-level unsigned integer.",13,null],[10,"len","","This function isn't used in this crate, but may be useful…",13,[[["self"]]]],[8,"PartialDiv","","Division as a partial function. This type operator…",null,null],[16,"Output","","The type of the result of the division",14,null],[10,"partial_div","","Method for performing the division",14,[[["rhs"]]]],[8,"Min","","A type operator that returns the minimum of `Self` and…",null,null],[16,"Output","","The type of the minimum of `Self` and `Rhs`",15,null],[10,"min","","Method returning the minimum",15,[[["rhs"]]]],[8,"Max","","A type operator that returns the maximum of `Self` and…",null,null],[16,"Output","","The type of the maximum of `Self` and `Rhs`",16,null],[10,"max","","Method returning the maximum",16,[[["rhs"]]]],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",17,null],[10,"is_less","","Method returning `True` or `False`.",17,[[["rhs"]]]],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",18,null],[10,"is_equal","","Method returning `True` or `False`.",18,[[["rhs"]]]],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",19,null],[10,"is_greater","","Method returning `True` or `False`.",19,[[["rhs"]]]],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",20,null],[10,"is_less_or_equal","","Method returning `True` or `False`.",20,[[["rhs"]]]],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",21,null],[10,"is_not_equal","","Method returning `True` or `False`.",21,[[["rhs"]]]],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",22,null],[10,"is_greater_or_equal","","Method returning `True` or `False`.",22,[[["rhs"]]]],[8,"SquareRoot","","A type operator for taking the integer square root of…",null,null],[16,"Output","","The result of the integer square root.",23,null],[8,"Logarithm2","","A type operator for taking the integer binary logarithm of…",null,null],[16,"Output","","The result of the integer binary logarithm.",24,null],[0,"uint","typenum","Type-level unsigned integers.",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the…",null,null],[3,"UInt","","`UInt` is defined recursively, where `B` is the least…",null,null],[6,"GetBitOut","","",null,null],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I,…",null,null],[8,"GetBit","","",null,null],[16,"Output","","",25,null],[8,"SetBit","","A type operator that, when implemented for unsigned…",null,null],[16,"Output","","",26,null],[11,"new","","Instantiates a singleton representing this unsigned integer.",27,[[],["uterm"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",28,[[],["uint"]]],[0,"array","typenum","A type-level array of type-level numbers.",null,null],[3,"ATerm","typenum::array","The terminating type for type arrays.",null,null],[3,"TArr","","`TArr` is a type that acts as an array of types. It is…",null,null],[14,"op","typenum","Convenient type operations.",null,null],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!`…",null,null],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0…",null,null],[14,"assert_type_eq","","Asserts that two types are the same.",null,null],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",null,null],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"is_less","typenum::bit","",0,[[["b"]]]],[11,"is_equal","","",0,[[["b"]]]],[11,"is_greater","","",0,[[["b"]]]],[11,"is_less_or_equal","","",0,[[["b"]]]],[11,"is_not_equal","","",0,[[["b"]]]],[11,"is_greater_or_equal","","",0,[[["b"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"is_less","","",1,[[["b"]]]],[11,"is_equal","","",1,[[["b"]]]],[11,"is_greater","","",1,[[["b"]]]],[11,"is_less_or_equal","","",1,[[["b"]]]],[11,"is_not_equal","","",1,[[["b"]]]],[11,"is_greater_or_equal","","",1,[[["b"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"powi","typenum::int","",2,[[["n"]]]],[11,"partial_div","","",2,[[["n"]]]],[11,"is_less","","",2,[[["b"]]]],[11,"is_equal","","",2,[[["b"]]]],[11,"is_greater","","",2,[[["b"]]]],[11,"is_less_or_equal","","",2,[[["b"]]]],[11,"is_not_equal","","",2,[[["b"]]]],[11,"is_greater_or_equal","","",2,[[["b"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"powi","","",3,[[["n"]]]],[11,"partial_div","","",3,[[["n"]]]],[11,"is_less","","",3,[[["b"]]]],[11,"is_equal","","",3,[[["b"]]]],[11,"is_greater","","",3,[[["b"]]]],[11,"is_less_or_equal","","",3,[[["b"]]]],[11,"is_not_equal","","",3,[[["b"]]]],[11,"is_greater_or_equal","","",3,[[["b"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"powi","","",4,[[["n"]]]],[11,"partial_div","","",4,[[["n"]]]],[11,"is_less","","",4,[[["b"]]]],[11,"is_equal","","",4,[[["b"]]]],[11,"is_greater","","",4,[[["b"]]]],[11,"is_less_or_equal","","",4,[[["b"]]]],[11,"is_not_equal","","",4,[[["b"]]]],[11,"is_greater_or_equal","","",4,[[["b"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"powi","typenum::uint","",27,[[["n"]]]],[11,"partial_div","","",27,[[["n"]]]],[11,"is_less","","",27,[[["b"]]]],[11,"is_equal","","",27,[[["b"]]]],[11,"is_greater","","",27,[[["b"]]]],[11,"is_less_or_equal","","",27,[[["b"]]]],[11,"is_not_equal","","",27,[[["b"]]]],[11,"is_greater_or_equal","","",27,[[["b"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"powi","","",28,[[["n"]]]],[11,"partial_div","","",28,[[["n"]]]],[11,"is_less","","",28,[[["b"]]]],[11,"is_equal","","",28,[[["b"]]]],[11,"is_greater","","",28,[[["b"]]]],[11,"is_less_or_equal","","",28,[[["b"]]]],[11,"is_not_equal","","",28,[[["b"]]]],[11,"is_greater_or_equal","","",28,[[["b"]]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"partial_div","typenum::array","",32,[[["n"]]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"partial_div","","",33,[[["n"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_ordering","typenum","",29,[[],["ordering"]]],[11,"to_ordering","","",30,[[],["ordering"]]],[11,"to_ordering","","",31,[[],["ordering"]]],[11,"to_u8","typenum::bit","",0,[[],["u8"]]],[11,"to_bool","","",0,[[],["bool"]]],[11,"to_u8","","",1,[[],["u8"]]],[11,"to_bool","","",1,[[],["bool"]]],[11,"to_u8","typenum::uint","",27,[[],["u8"]]],[11,"to_u16","","",27,[[],["u16"]]],[11,"to_u32","","",27,[[],["u32"]]],[11,"to_u64","","",27,[[],["u64"]]],[11,"to_usize","","",27,[[],["usize"]]],[11,"to_i8","","",27,[[],["i8"]]],[11,"to_i16","","",27,[[],["i16"]]],[11,"to_i32","","",27,[[],["i32"]]],[11,"to_i64","","",27,[[],["i64"]]],[11,"to_isize","","",27,[[],["isize"]]],[11,"to_u8","","",28,[[],["u8"]]],[11,"to_u16","","",28,[[],["u16"]]],[11,"to_u32","","",28,[[],["u32"]]],[11,"to_u64","","",28,[[],["u64"]]],[11,"to_usize","","",28,[[],["usize"]]],[11,"to_i8","","",28,[[],["i8"]]],[11,"to_i16","","",28,[[],["i16"]]],[11,"to_i32","","",28,[[],["i32"]]],[11,"to_i64","","",28,[[],["i64"]]],[11,"to_isize","","",28,[[],["isize"]]],[11,"to_i8","typenum::int","",4,[[],["i8"]]],[11,"to_i16","","",4,[[],["i16"]]],[11,"to_i32","","",4,[[],["i32"]]],[11,"to_i64","","",4,[[],["i64"]]],[11,"to_isize","","",4,[[],["isize"]]],[11,"to_i8","","",2,[[],["i8"]]],[11,"to_i16","","",2,[[],["i16"]]],[11,"to_i32","","",2,[[],["i32"]]],[11,"to_i64","","",2,[[],["i64"]]],[11,"to_isize","","",2,[[],["isize"]]],[11,"to_i8","","",3,[[],["i8"]]],[11,"to_i16","","",3,[[],["i16"]]],[11,"to_i32","","",3,[[],["i32"]]],[11,"to_i64","","",3,[[],["i64"]]],[11,"to_isize","","",3,[[],["isize"]]],[11,"powi","","",4,[[["z0"]]]],[11,"powi","","",4,[[["pint"]]]],[11,"powi","","",4,[[["nint"]]]],[11,"powi","typenum","",34,[[["nint"]]]],[11,"powi","","",35,[[["nint",["uint"]],["uint",["b0"]]]]],[11,"powi","","",35,[[["nint",["uint"]],["uint",["b1"]]]]],[11,"powi","typenum::int","",2,[[["z0"]]]],[11,"powi","","",3,[[["z0"]]]],[11,"powi","","",2,[[["pint"]]]],[11,"powi","","",3,[[["uint",["b0"]],["pint",["uint"]]]]],[11,"powi","","",3,[[["pint",["uint"]],["uint",["b1"]]]]],[11,"len","typenum::uint","",27,[[["self"]]]],[11,"len","","",28,[[["self"]]]],[11,"len","typenum::array","",32,[[["self"]]]],[11,"len","","",33,[[["self"]]]],[11,"partial_div","typenum::uint","",27,[[["uint"]]]],[11,"partial_div","","",28,[[["uint"]]]],[11,"partial_div","typenum::array","",32,[[["rhs"]]]],[11,"partial_div","","",33,[[["rhs"]]]],[11,"min","typenum::bit","",0,[[["b0"]],["b0"]]],[11,"min","","",0,[[["b1"]],["b0"]]],[11,"min","","",1,[[["b0"]],["b0"]]],[11,"min","","",1,[[["b1"]],["b1"]]],[11,"min","typenum::int","",4,[[["z0"]]]],[11,"min","","",4,[[["pint"]]]],[11,"min","","",4,[[["nint"]]]],[11,"min","","",2,[[["z0"]]]],[11,"min","","",3,[[["z0"]]]],[11,"min","","",2,[[["pint"]]]],[11,"min","","",3,[[["pint"]]]],[11,"min","","",2,[[["nint"]]]],[11,"min","","",3,[[["nint"]]]],[11,"min","typenum::uint","",27,[[["u"]]]],[11,"min","","",28,[[["ur"]]]],[11,"max","typenum::bit","",0,[[["b0"]],["b0"]]],[11,"max","","",0,[[["b1"]],["b1"]]],[11,"max","","",1,[[["b0"]],["b1"]]],[11,"max","","",1,[[["b1"]],["b1"]]],[11,"max","typenum::int","",4,[[["z0"]]]],[11,"max","","",4,[[["pint"]]]],[11,"max","","",4,[[["nint"]]]],[11,"max","","",2,[[["z0"]]]],[11,"max","","",3,[[["z0"]]]],[11,"max","","",2,[[["pint"]]]],[11,"max","","",3,[[["pint"]]]],[11,"max","","",2,[[["nint"]]]],[11,"max","","",3,[[["nint"]]]],[11,"max","typenum::uint","",27,[[["u"]]]],[11,"max","","",28,[[["ur"]]]],[11,"fmt","typenum::bit","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::int","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::uint","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::array","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"div","typenum::int","",4,[[["i"]]]],[11,"div","","",2,[[["pint"]]]],[11,"div","","",2,[[["nint"]]]],[11,"div","","",3,[[["pint"]]]],[11,"div","","",3,[[["nint"]]]],[11,"div","typenum::uint","",27,[[["uint"]]]],[11,"div","","",28,[[["uint"]]]],[11,"div","typenum::array","",32,[[["rhs"]]]],[11,"div","","",33,[[["rhs"]]]],[11,"rem","typenum::int","",4,[[["i"]]]],[11,"rem","","",2,[[["pint"]]]],[11,"rem","","",2,[[["nint"]]]],[11,"rem","","",3,[[["pint"]]]],[11,"rem","","",3,[[["nint"]]]],[11,"rem","typenum::uint","",27,[[["uint"]]]],[11,"rem","","",28,[[["uint"]]]],[11,"rem","typenum::array","",32,[[["rhs"]]]],[11,"rem","","",33,[[["rhs"]]]],[11,"sub","typenum::int","",4,[[["z0"]]]],[11,"sub","","",4,[[["pint"]]]],[11,"sub","","",4,[[["nint"]]]],[11,"sub","","",2,[[["z0"]]]],[11,"sub","","",3,[[["z0"]]]],[11,"sub","","",2,[[["nint"]]]],[11,"sub","","",3,[[["pint"]]]],[11,"sub","","",2,[[["pint"]]]],[11,"sub","","",3,[[["nint"]]]],[11,"sub","typenum::uint","",27,[[["b0"]]]],[11,"sub","","",28,[[["b0"]]]],[11,"sub","","",28,[[["b1"]]]],[11,"sub","","",28,[[["b1"]]]],[11,"sub","","",28,[[["b1"]]]],[11,"sub","","",27,[[["uterm"]]]],[11,"sub","","",28,[[["ur"]]]],[11,"sub","typenum::array","",32,[[["aterm"]]]],[11,"sub","","",33,[[["tarr"]]]],[11,"eq","typenum::bit","",0,[[["self"],["b0"]],["bool"]]],[11,"eq","","",1,[[["b1"],["self"]],["bool"]]],[11,"eq","typenum::int","",2,[[["pint"],["self"]],["bool"]]],[11,"ne","","",2,[[["pint"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["nint"]],["bool"]]],[11,"ne","","",3,[[["self"],["nint"]],["bool"]]],[11,"eq","","",4,[[["z0"],["self"]],["bool"]]],[11,"eq","typenum::uint","",27,[[["uterm"],["self"]],["bool"]]],[11,"eq","","",28,[[["uint"],["self"]],["bool"]]],[11,"ne","","",28,[[["uint"],["self"]],["bool"]]],[11,"eq","typenum::array","",32,[[["self"],["aterm"]],["bool"]]],[11,"eq","","",33,[[["self"],["tarr"]],["bool"]]],[11,"ne","","",33,[[["self"],["tarr"]],["bool"]]],[11,"eq","typenum","",29,[[["self"],["greater"]],["bool"]]],[11,"eq","","",30,[[["self"],["less"]],["bool"]]],[11,"eq","","",31,[[["self"],["equal"]],["bool"]]],[11,"cmp","typenum::bit","",0,[[["self"],["b0"]],["ordering"]]],[11,"cmp","","",1,[[["b1"],["self"]],["ordering"]]],[11,"cmp","typenum::int","",2,[[["pint"],["self"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["nint"]],["ordering"]]],[11,"cmp","","",4,[[["z0"],["self"]],["ordering"]]],[11,"cmp","typenum::uint","",27,[[["uterm"],["self"]],["ordering"]]],[11,"cmp","","",28,[[["uint"],["self"]],["ordering"]]],[11,"cmp","typenum::array","",32,[[["self"],["aterm"]],["ordering"]]],[11,"cmp","","",33,[[["self"],["tarr"]],["ordering"]]],[11,"cmp","typenum","",29,[[["self"],["greater"]],["ordering"]]],[11,"cmp","","",30,[[["self"],["less"]],["ordering"]]],[11,"cmp","","",31,[[["self"],["equal"]],["ordering"]]],[11,"partial_cmp","typenum::bit","",0,[[["self"],["b0"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",1,[[["b1"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","typenum::int","",2,[[["pint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",2,[[["pint"],["self"]],["bool"]]],[11,"le","","",2,[[["pint"],["self"]],["bool"]]],[11,"gt","","",2,[[["pint"],["self"]],["bool"]]],[11,"ge","","",2,[[["pint"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["nint"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["self"],["nint"]],["bool"]]],[11,"le","","",3,[[["self"],["nint"]],["bool"]]],[11,"gt","","",3,[[["self"],["nint"]],["bool"]]],[11,"ge","","",3,[[["self"],["nint"]],["bool"]]],[11,"partial_cmp","","",4,[[["z0"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","typenum::uint","",27,[[["uterm"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",28,[[["uint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",28,[[["uint"],["self"]],["bool"]]],[11,"le","","",28,[[["uint"],["self"]],["bool"]]],[11,"gt","","",28,[[["uint"],["self"]],["bool"]]],[11,"ge","","",28,[[["uint"],["self"]],["bool"]]],[11,"partial_cmp","typenum::array","",32,[[["self"],["aterm"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",33,[[["self"],["tarr"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",33,[[["self"],["tarr"]],["bool"]]],[11,"le","","",33,[[["self"],["tarr"]],["bool"]]],[11,"gt","","",33,[[["self"],["tarr"]],["bool"]]],[11,"ge","","",33,[[["self"],["tarr"]],["bool"]]],[11,"partial_cmp","typenum","",29,[[["self"],["greater"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",30,[[["self"],["less"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",31,[[["self"],["equal"]],[["ordering"],["option",["ordering"]]]]],[11,"add","typenum::int","",4,[[["i"]]]],[11,"add","","",2,[[["z0"]]]],[11,"add","","",3,[[["z0"]]]],[11,"add","","",2,[[["pint"]]]],[11,"add","","",3,[[["nint"]]]],[11,"add","","",2,[[["nint"]]]],[11,"add","","",3,[[["pint"]]]],[11,"add","typenum::uint","",27,[[["b0"]]]],[11,"add","","",28,[[["b0"]]]],[11,"add","","",27,[[["b1"]]]],[11,"add","","",28,[[["b1"]]]],[11,"add","","",28,[[["b1"]]]],[11,"add","","",27,[[["u"]]]],[11,"add","","",28,[[["uterm"]]]],[11,"add","","",28,[[["uint",["b0"]],["b0"]]]],[11,"add","","",28,[[["uint",["b1"]],["b1"]]]],[11,"add","","",28,[[["uint",["b0"]],["b0"]]]],[11,"add","","",28,[[["uint",["b1"]],["b1"]]]],[11,"add","typenum::array","",32,[[["aterm"]]]],[11,"add","","",33,[[["tarr"]]]],[11,"mul","typenum::int","",4,[[["i"]]]],[11,"mul","","",2,[[["z0"]]]],[11,"mul","","",3,[[["z0"]]]],[11,"mul","","",2,[[["pint"]]]],[11,"mul","","",3,[[["nint"]]]],[11,"mul","","",2,[[["nint"]]]],[11,"mul","","",3,[[["pint"]]]],[11,"mul","typenum::uint","",28,[[["b0"]]]],[11,"mul","","",27,[[["b0"]]]],[11,"mul","","",27,[[["b1"]]]],[11,"mul","","",28,[[["b1"]]]],[11,"mul","","",28,[[["uterm"]]]],[11,"mul","","",27,[[["u"]]]],[11,"mul","","",28,[[["uint"]]]],[11,"mul","","",28,[[["uint"]]]],[11,"mul","typenum::array","",32,[[["rhs"]]]],[11,"mul","","",33,[[["rhs"]]]],[11,"mul","typenum::int","",4,[[["aterm"]]]],[11,"mul","","",2,[[["aterm"]]]],[11,"mul","","",3,[[["aterm"]]]],[11,"mul","","",4,[[["tarr"]]]],[11,"mul","","",2,[[["tarr"]]]],[11,"mul","","",3,[[["tarr"]]]],[11,"neg","","",4,[[]]],[11,"neg","","",2,[[]]],[11,"neg","","",3,[[]]],[11,"neg","typenum::array","",32,[[]]],[11,"neg","","",33,[[]]],[11,"not","typenum::bit","",0,[[]]],[11,"not","","",1,[[]]],[11,"bitand","","",0,[[["rhs"]]]],[11,"bitand","","",1,[[["b0"]]]],[11,"bitand","","",1,[[["b1"]]]],[11,"bitand","typenum::uint","",27,[[["ur"]]]],[11,"bitand","","",28,[[["ur"]]]],[11,"bitor","typenum::bit","",0,[[["b0"]]]],[11,"bitor","","",0,[[["b1"]]]],[11,"bitor","","",1,[[["rhs"]]]],[11,"bitor","typenum::uint","",27,[[["u"]]]],[11,"bitor","","",28,[[["uterm"]]]],[11,"bitor","","",28,[[["uint",["b0"]],["b0"]]]],[11,"bitor","","",28,[[["uint",["b1"]],["b1"]]]],[11,"bitor","","",28,[[["uint",["b0"]],["b0"]]]],[11,"bitor","","",28,[[["uint",["b1"]],["b1"]]]],[11,"bitxor","typenum::bit","",0,[[["b0"]]]],[11,"bitxor","","",1,[[["b0"]]]],[11,"bitxor","","",0,[[["b1"]]]],[11,"bitxor","","",1,[[["b1"]]]],[11,"bitxor","typenum::uint","",27,[[["ur"]]]],[11,"bitxor","","",28,[[["ur"]]]],[11,"shl","","",27,[[["b0"]]]],[11,"shl","","",27,[[["b1"]]]],[11,"shl","","",28,[[["b0"]]]],[11,"shl","","",28,[[["b1"]]]],[11,"shl","","",28,[[["uterm"]]]],[11,"shl","","",27,[[["u"]]]],[11,"shl","","",28,[[["uint"]]]],[11,"shr","","",27,[[["u"]]]],[11,"shr","","",28,[[["uterm"]]]],[11,"shr","","",27,[[["b0"]]]],[11,"shr","","",27,[[["b1"]]]],[11,"shr","","",28,[[["b0"]]]],[11,"shr","","",28,[[["b1"]]]],[11,"shr","","",28,[[["uint"]]]],[11,"hash","typenum::bit","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","typenum::int","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"hash","typenum::uint","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","typenum::array","",32,[[["self"],["__h"]]]],[11,"hash","","",33,[[["self"],["__h"]]]],[11,"hash","typenum","",29,[[["self"],["__h"]]]],[11,"hash","","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"clone","typenum::bit","",0,[[["self"]],["b0"]]],[11,"clone","","",1,[[["self"]],["b1"]]],[11,"clone","typenum::int","",2,[[["self"]],["pint"]]],[11,"clone","","",3,[[["self"]],["nint"]]],[11,"clone","","",4,[[["self"]],["z0"]]],[11,"clone","typenum::uint","",27,[[["self"]],["uterm"]]],[11,"clone","","",28,[[["self"]],["uint"]]],[11,"clone","typenum::array","",32,[[["self"]],["aterm"]]],[11,"clone","","",33,[[["self"]],["tarr"]]],[11,"clone","typenum","",29,[[["self"]],["greater"]]],[11,"clone","","",30,[[["self"]],["less"]]],[11,"clone","","",31,[[["self"]],["equal"]]],[11,"default","typenum::bit","",0,[[],["b0"]]],[11,"default","","",1,[[],["b1"]]],[11,"default","typenum::int","",2,[[],["pint"]]],[11,"default","","",3,[[],["nint"]]],[11,"default","","",4,[[],["z0"]]],[11,"default","typenum::uint","",27,[[],["uterm"]]],[11,"default","","",28,[[],["uint"]]],[11,"default","typenum","",29,[[],["greater"]]],[11,"default","","",30,[[],["less"]]],[11,"default","","",31,[[],["equal"]]]],"p":[[3,"B0"],[3,"B1"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"Greater"],[3,"Less"],[3,"Equal"],[3,"ATerm"],[3,"TArr"],[6,"P1"],[6,"N1"]]};
searchIndex["uint"] = {"doc":"Efficient large, fixed-size big integers and hashes.","i":[[14,"unroll","uint","Unroll the given for loop",null,null],[4,"FromDecStrErr","","Conversion from decimal string error",null,null],[13,"InvalidCharacter","","Char not from range 0-9",0,null],[13,"InvalidLength","","Value does not fit into type",0,null],[14,"construct_uint","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"eq","","",0,[[["self"],["fromdecstrerr"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"FromDecStrErr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser…","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is…",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid…",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the…",0,[[],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the…",0,[[],["bool"]]]],"p":[[8,"UnicodeXID"]]};
searchIndex["wasmi"] = {"doc":"wasmi","i":[[3,"Trap","wasmi","Error type which can be thrown by wasm code or by host…",null,null],[3,"FuncInstance","","Runtime representation of a function.",null,null],[3,"FuncInvocation","","A resumable invocation handle. This struct is returned by…",null,null],[3,"FuncRef","","Reference to a function (See [`FuncInstance`] for details).",null,null],[3,"GlobalInstance","","Runtime representation of a global variable (or `global`…",null,null],[3,"GlobalRef","","Reference to a global variable (See [`GlobalInstance`] for…",null,null],[3,"NopExternals","","Implementation of [`Externals`] that just traps on…",null,null],[3,"RuntimeArgs","","Wrapper around slice of [`RuntimeValue`] for using it as…",null,null],[3,"ImportsBuilder","","Convenience builder of [`ImportResolver`].",null,null],[3,"MemoryInstance","","Runtime representation of a linear memory (or `memory` for…",null,null],[3,"MemoryRef","","Reference to a memory (See [`MemoryInstance`] for details).",null,null],[3,"ModuleInstance","","A module instance is the runtime representation of a…",null,null],[3,"ModuleRef","","Reference to a [`ModuleInstance`].",null,null],[3,"NotStartedModuleRef","","Mostly instantiated [`ModuleRef`].",null,null],[3,"StackRecycler","","Used to recycle stacks instead of allocating them…",null,null],[3,"TableInstance","","Runtime representation of a table.",null,null],[3,"TableRef","","Reference to a table (See [`TableInstance`] for details).",null,null],[3,"GlobalDescriptor","","Description of a global variable.",null,null],[3,"MemoryDescriptor","","Description of a linear memory.",null,null],[3,"Signature","","Signature of a [function].",null,null],[3,"TableDescriptor","","Description of a table.",null,null],[3,"Module","","Deserialized module prepared for instantiation.",null,null],[4,"TrapKind","","Error type which can be thrown by wasm code or by host…",null,null],[13,"Unreachable","","Wasm code executed `unreachable` opcode.",0,null],[13,"MemoryAccessOutOfBounds","","Attempt to load or store at the address which lies outside…",0,null],[13,"TableAccessOutOfBounds","","Attempt to access table element at index which lies…",0,null],[13,"ElemUninitialized","","Attempt to access table element which is uninitialized…",0,null],[13,"DivisionByZero","","Attempt to divide by zero.",0,null],[13,"InvalidConversionToInt","","Attempt to make a conversion to an int failed.",0,null],[13,"StackOverflow","","Stack overflow.",0,null],[13,"UnexpectedSignature","","Attempt to invoke a function with mismatching signature.",0,null],[13,"Host","","Error specified by the host.",0,null],[4,"Error","","Internal interpreter error.",null,null],[13,"Validation","","Module validation error. Might occur only at load time.",1,null],[13,"Instantiation","","Error while instantiating a module. Might occur when…",1,null],[13,"Function","","Function-level error.",1,null],[13,"Table","","Table-level error.",1,null],[13,"Memory","","Memory-level error.",1,null],[13,"Global","","Global-level error.",1,null],[13,"Value","","Value-level error.",1,null],[13,"Trap","","Trap.",1,null],[13,"Host","","Custom embedder error.",1,null],[4,"ResumableError","","A resumable invocation error.",null,null],[13,"Trap","","Trap happened.",2,null],[13,"NotResumable","","The invocation is not resumable.",2,null],[13,"AlreadyStarted","","The invocation has already been started.",2,null],[4,"ExternVal","","An external value is the runtime representation of an…",null,null],[13,"Func","","[Function][`FuncInstance`].",3,null],[13,"Table","","[Table][`TableInstance`].",3,null],[13,"Memory","","[Memory][`MemoryInstance`].",3,null],[13,"Global","","[Global][`GlobalInstance`].",3,null],[4,"ValueType","","Type of a value.",null,null],[13,"I32","","32-bit signed or unsigned integer.",4,null],[13,"I64","","64-bit signed or unsigned integer.",4,null],[13,"F32","","32-bit IEEE 754-2008 floating point number.",4,null],[13,"F64","","64-bit IEEE 754-2008 floating point number.",4,null],[4,"ValueError","","Error for `LittleEndianConvert`",null,null],[13,"InvalidLittleEndianBuffer","","The buffer is too short for the type being deserialized",5,null],[4,"RuntimeValue","","Runtime representation of a value.",null,null],[13,"I32","","Value of 32-bit signed or unsigned integer.",6,null],[13,"I64","","Value of 64-bit signed or unsigned integer.",6,null],[13,"F32","","Value of 32-bit IEEE 754-2008 floating point number.",6,null],[13,"F64","","Value of 64-bit IEEE 754-2008 floating point number.",6,null],[11,"alloc_host","","Allocate a function instance for a host function.",7,[[["signature"],["usize"]],["funcref"]]],[11,"signature","","Returns [signature] of this function instance.",7,[[["self"]],["signature"]]],[11,"invoke","","Invoke this function.",7,[[["funcref"],["e"]],[["option",["runtimevalue"]],["result",["option","trap"]],["trap"]]]],[11,"invoke_with_stack","","Invoke this function using recycled stacks.",7,[[["stackrecycler"],["e"],["funcref"]],[["option",["runtimevalue"]],["result",["option","trap"]],["trap"]]]],[11,"invoke_resumable","","Invoke the function, get a resumable handle. This handle…",7,[[["funcref"]],[["result",["funcinvocation","trap"]],["funcinvocation"],["trap"]]]],[11,"is_resumable","","Whether this invocation is currently resumable.",8,[[["self"]],["bool"]]],[11,"resumable_value_type","","If the invocation is resumable, the expected return value…",8,[[["self"]],[["valuetype"],["option",["valuetype"]]]]],[11,"start_execution","","Start the invocation execution.",8,[[["self"],["e"]],[["option",["runtimevalue"]],["result",["option","resumableerror"]],["resumableerror"]]]],[11,"resume_execution","","Resume an execution if a previous trap of Host kind…",8,[[["option",["runtimevalue"]],["runtimevalue"],["self"],["e"]],[["option",["runtimevalue"]],["result",["option","resumableerror"]],["resumableerror"]]]],[11,"alloc","","Allocate a global variable instance.",9,[[["runtimevalue"],["bool"]],["globalref"]]],[11,"set","","Change the value of this global variable.",9,[[["runtimevalue"],["self"]],[["result",["error"]],["error"]]]],[11,"get","","Get the value of this global variable.",9,[[["self"]],["runtimevalue"]]],[11,"is_mutable","","Returns if this global variable is mutable.",9,[[["self"]],["bool"]]],[11,"value_type","","Returns value type of this global variable.",9,[[["self"]],["valuetype"]]],[11,"nth_checked","","Extract argument by index `idx`.",10,[[["self"],["usize"]],[["trap"],["result",["trap"]]]]],[11,"nth_value_checked","","Extract argument as a [`RuntimeValue`] by index `idx`.",10,[[["self"],["usize"]],[["runtimevalue"],["result",["runtimevalue","trap"]],["trap"]]]],[11,"nth","","Extract argument by index `idx`.",10,[[["self"],["usize"]],["t"]]],[11,"len","","Total number of arguments",10,[[["self"]],["usize"]]],[11,"new","","Create an empty `ImportsBuilder`.",11,[[],["importsbuilder"]]],[11,"with_resolver","","Register an resolver by a name.",11,[[["string"],["moduleimportresolver"],["into",["string"]]],["self"]]],[11,"push_resolver","","Register an resolver by a name.",11,[[["moduleimportresolver"],["into",["string"]],["self"],["string"]]]],[11,"alloc","","Allocate a memory instance.",12,[[["option",["pages"]],["pages"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[11,"initial","","Returns number of pages this `MemoryInstance` was created…",12,[[["self"]],["pages"]]],[11,"maximum","","Returns maximum amount of pages this `MemoryInstance` can…",12,[[["self"]],[["option",["pages"]],["pages"]]]],[11,"current_size","","Returns current linear memory size.",12,[[["self"]],["pages"]]],[11,"get_value","","Get value from memory at given offset.",12,[[["u32"],["self"]],[["littleendianconvert"],["result",["error"]],["error"]]]],[11,"get","","Copy data from memory at given offset.",12,[[["u32"],["self"],["usize"]],[["result",["vec","error"]],["vec",["u8"]],["error"]]]],[11,"get_into","","Copy data from given offset in the memory into `target`…",12,[[["u32"],["self"]],[["result",["error"]],["error"]]]],[11,"set","","Copy data in the memory at given offset.",12,[[["u32"],["self"]],[["result",["error"]],["error"]]]],[11,"set_value","","Copy value in the memory at given offset.",12,[[["u32"],["self"],["littleendianconvert"]],[["result",["error"]],["error"]]]],[11,"grow","","Increases the size of the linear memory by given number of…",12,[[["self"],["pages"]],[["pages"],["error"],["result",["pages","error"]]]]],[11,"copy","","Copy contents of one memory region to another.",12,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"copy_nonoverlapping","","Copy contents of one memory region to another…",12,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"transfer","","Copy memory between two (possibly distinct) memory…",12,[[["memoryref"],["usize"]],[["result",["error"]],["error"]]]],[11,"clear","","Fill the memory region with the specified value.",12,[[["usize"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"zero","","Fill the specified memory region with zeroes.",12,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"erase","","Set every byte in the entire linear memory to 0,…",12,[[["self"]],[["result",["error"]],["error"]]]],[11,"with_direct_access","","Provides direct access to the underlying memory buffer.",12,[[["fnonce"],["self"]],["r"]]],[11,"with_direct_access_mut","","Provides direct mutable access to the underlying memory…",12,[[["self"],["fnonce"]],["r"]]],[11,"as_func","","Get underlying function reference if this `ExternVal`…",3,[[["self"]],[["funcref"],["option",["funcref"]]]]],[11,"as_table","","Get underlying table reference if this `ExternVal`…",3,[[["self"]],[["option",["tableref"]],["tableref"]]]],[11,"as_memory","","Get underlying memory reference if this `ExternVal`…",3,[[["self"]],[["option",["memoryref"]],["memoryref"]]]],[11,"as_global","","Get underlying global variable reference if this…",3,[[["self"]],[["option",["globalref"]],["globalref"]]]],[11,"globals","","Access all globals. This is a non-standard API so it's…",13,[[["self"]],[["ref",["vec"]],["vec",["globalref"]]]]],[11,"with_externvals","","Instantiate a module with given [external…",13,[[["iterator"],["module"]],[["result",["notstartedmoduleref","error"]],["error"],["notstartedmoduleref"]]]],[11,"new","","Instantiate a [module][`Module`].",13,[[["i"],["module"]],[["notstartedmoduleref"],["error"],["result",["notstartedmoduleref","error"]]]]],[11,"invoke_export","","Invoke exported function by a name.",13,[[["str"],["e"],["self"]],[["option",["runtimevalue"]],["result",["option","error"]],["error"]]]],[11,"invoke_export_with_stack","","Invoke exported function by a name using recycled stacks.",13,[[["str"],["stackrecycler"],["e"],["self"]],[["option",["runtimevalue"]],["result",["option","error"]],["error"]]]],[11,"export_by_name","","Find export by a name.",13,[[["str"],["self"]],[["option",["externval"]],["externval"]]]],[11,"not_started_instance","","Returns not fully initialized instance.",14,[[["self"]],["moduleref"]]],[11,"run_start","","Executes `start` function (if any) and returns fully…",14,[[["e"]],[["moduleref"],["trap"],["result",["moduleref","trap"]]]]],[11,"assert_no_start","","Returns fully instantiated module without running `start`…",14,[[],["moduleref"]]],[11,"has_start","","Whether or not the module has a `start` function.",14,[[["self"]],["bool"]]],[0,"nan_preserving_float","","",null,null],[3,"F32","wasmi::nan_preserving_float","",null,null],[3,"F64","","",null,null],[11,"from_bits","","",15,[[["u32"]],["self"]]],[11,"to_bits","","",15,[[],["u32"]]],[11,"from_float","","",15,[[["f32"]],["self"]]],[11,"to_float","","",15,[[],["f32"]]],[11,"is_nan","","",15,[[],["bool"]]],[11,"abs","","",15,[[],["self"]]],[11,"fract","","",15,[[],["self"]]],[11,"min","","",15,[[],["self"]]],[11,"max","","",15,[[],["self"]]],[11,"from_bits","","",16,[[["u64"]],["self"]]],[11,"to_bits","","",16,[[],["u64"]]],[11,"from_float","","",16,[[["f64"]],["self"]]],[11,"to_float","","",16,[[],["f64"]]],[11,"is_nan","","",16,[[],["bool"]]],[11,"abs","","",16,[[],["self"]]],[11,"fract","","",16,[[],["self"]]],[11,"min","","",16,[[],["self"]]],[11,"max","","",16,[[],["self"]]],[11,"with_limits","wasmi","Limit stacks created by this recycler to -…",17,[[["usize"]],["self"]]],[11,"clear","","Clears any values left on the stack to avoid leaking them…",17,[[["self"]]]],[11,"alloc","","Allocate a table instance.",18,[[["u32"],["option",["u32"]]],[["result",["tableref","error"]],["tableref"],["error"]]]],[11,"initial_size","","Returns size this table was created with.",18,[[["self"]],["u32"]]],[11,"maximum_size","","Returns maximum size `TableInstance` can grow to.",18,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"current_size","","Returns current size of the table.",18,[[["self"]],["u32"]]],[11,"grow","","Increases the size of the table by given number of elements.",18,[[["u32"],["self"]],[["result",["error"]],["error"]]]],[11,"get","","Get the specific value in the table",18,[[["u32"],["self"]],[["result",["option","error"]],["error"],["option",["funcref"]]]]],[11,"set","","Set the table element to the specified function.",18,[[["u32"],["option",["funcref"]],["funcref"],["self"]],[["result",["error"]],["error"]]]],[11,"new","","Creates new signature with givens parameter types and…",19,[[["option",["valuetype"]],["cow"],["valuetype"],["into",["cow"]]],["signature"]]],[11,"params","","Returns parameter types of this signature.",19,[[["self"]]]],[11,"return_type","","Returns return type of this signature.",19,[[["self"]],[["valuetype"],["option",["valuetype"]]]]],[11,"value_type","","Returns [`ValueType`] of the requested global.",20,[[["self"]],["valuetype"]]],[11,"is_mutable","","Returns whether the requested global mutable.",20,[[["self"]],["bool"]]],[11,"initial","","Returns initial size of the requested table.",21,[[["self"]],["u32"]]],[11,"maximum","","Returns maximum size of the requested table.",21,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"initial","","Returns initial size (in pages) of the requested memory.",22,[[["self"]],["u32"]]],[11,"maximum","","Returns maximum size (in pages) of the requested memory.",22,[[["self"]],[["option",["u32"]],["u32"]]]],[11,"default","","Creates new default value of given type.",6,[[["valuetype"]],["self"]]],[11,"decode_f32","","Creates new value by interpreting passed u32 as f32.",6,[[["u32"]],["self"]]],[11,"decode_f64","","Creates new value by interpreting passed u64 as f64.",6,[[["u64"]],["self"]]],[11,"value_type","","Get variable type for this value.",6,[[["self"]],["valuetype"]]],[11,"try_into","","Returns `T` if this particular [`RuntimeValue`] contains…",6,[[],[["option"],["fromruntimevalue"]]]],[0,"memory_units","","WebAssembly-specific sizes and units.",null,null],[3,"Words","wasmi::memory_units","Memory size specified in `wasm32` words.",null,null],[12,"0","","",23,null],[3,"Pages","","Memory size specified in WebAssembly [memory pages][memory…",null,null],[12,"0","","",24,null],[5,"size_of","","Returns the size of a type in [`Bytes`].",null,[[],["bytes"]]],[8,"ByteSize","","A trait defining the size, in bytes, of one unit of `Self`.",null,null],[10,"byte_size","","The size, in bytes, of a single unit of `Self`.",25,[[],["bytes"]]],[3,"Bytes","","Memory size specified in bytes.",null,null],[12,"0","","",26,null],[8,"RoundUpTo","","A trait defining round up conversion between various…",null,null],[10,"round_up_to","","Returns minimum number of `T` to fit amount of space…",27,[[],["t"]]],[17,"LINEAR_MEMORY_PAGE_SIZE","wasmi","Size of a page of [linear memory][`MemoryInstance`] - 64KiB.",null,null],[17,"DEFAULT_CALL_STACK_LIMIT","","Maximum number of levels on the call stack.",null,null],[17,"DEFAULT_VALUE_STACK_LIMIT","","Maximum number of bytes on the value stack.",null,null],[8,"Externals","","Trait that allows to implement host functions.",null,null],[10,"invoke_index","","Perform invoke of a host function by specified `index`.",28,[[["self"],["usize"],["runtimeargs"]],[["option",["runtimevalue"]],["result",["option","trap"]],["trap"]]]],[8,"HostError","","Trait that allows the host to return custom error.",null,null],[8,"ImportResolver","","Resolver of a module's dependencies.",null,null],[10,"resolve_func","","Resolve a function.",29,[[["str"],["signature"],["self"]],[["funcref"],["result",["funcref","error"]],["error"]]]],[10,"resolve_global","","Resolve a global variable.",29,[[["str"],["globaldescriptor"],["self"]],[["error"],["result",["globalref","error"]],["globalref"]]]],[10,"resolve_memory","","Resolve a memory.",29,[[["str"],["memorydescriptor"],["self"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[10,"resolve_table","","Resolve a table.",29,[[["str"],["tabledescriptor"],["self"]],[["result",["tableref","error"]],["tableref"],["error"]]]],[8,"ModuleImportResolver","","Version of [`ImportResolver`] specialized for a single…",null,null],[11,"resolve_func","","Resolve a function.",30,[[["str"],["signature"],["self"]],[["funcref"],["result",["funcref","error"]],["error"]]]],[11,"resolve_global","","Resolve a global variable.",30,[[["str"],["globaldescriptor"],["self"]],[["error"],["result",["globalref","error"]],["globalref"]]]],[11,"resolve_memory","","Resolve a memory.",30,[[["str"],["memorydescriptor"],["self"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[11,"resolve_table","","Resolve a table.",30,[[["str"],["tabledescriptor"],["self"]],[["result",["tableref","error"]],["tableref"],["error"]]]],[8,"FromRuntimeValue","","Trait for creating value from a [`RuntimeValue`].",null,null],[10,"from_runtime_value","","Create a value of type `Self` from a given [`RuntimeValue`].",31,[[["runtimevalue"]],["option"]]],[8,"LittleEndianConvert","","Convert from and to little endian.",null,null],[10,"into_little_endian","","Convert to little endian buffer.",32,[[]]],[10,"from_little_endian","","Convert from little endian buffer.",32,[[],[["error"],["result",["error"]]]]],[11,"new","","Create new trap.",33,[[["trapkind"]],["trap"]]],[11,"kind","","Returns kind of this trap.",33,[[["self"]],["trapkind"]]],[11,"is_host","","Whether this trap is specified by the host.",0,[[["self"]],["bool"]]],[11,"as_host_error","","Returns [`HostError`] if this `Error` represents some host…",1,[[["self"]],[["hosterror"],["option",["hosterror"]]]]],[11,"from_parity_wasm_module","","Create `Module` from `parity_wasm::elements::Module`.",34,[[["module"]],[["error"],["result",["module","error"]],["module"]]]],[11,"deny_floating_point","","Fail if the module contains any floating-point operations",34,[[["self"]],[["result",["error"]],["error"]]]],[11,"from_buffer","","Create `Module` from a given buffer.",34,[[["asref"]],[["error"],["result",["module","error"]],["module"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_string","","",33,[[["self"]],["string"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","wasmi::nan_preserving_float","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","wasmi::memory_units","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"round_up_to","","",23,[[],["words"]]],[11,"round_up_to","","",23,[[],["pages"]]],[11,"round_up_to","","",23,[[],["pages"]]],[11,"round_up_to","","",23,[[],["words"]]],[11,"round_up_to","","",23,[[],["bytes"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"round_up_to","","",24,[[],["words"]]],[11,"round_up_to","","",24,[[],["pages"]]],[11,"round_up_to","","",24,[[],["pages"]]],[11,"round_up_to","","",24,[[],["words"]]],[11,"round_up_to","","",24,[[],["bytes"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"round_up_to","","",26,[[],["words"]]],[11,"round_up_to","","",26,[[],["pages"]]],[11,"round_up_to","","",26,[[],["pages"]]],[11,"round_up_to","","",26,[[],["words"]]],[11,"round_up_to","","",26,[[],["bytes"]]],[11,"cmp","","",23,[[["self"],["words"]],["ordering"]]],[11,"cmp","","",24,[[["self"],["pages"]],["ordering"]]],[11,"cmp","","",26,[[["bytes"],["self"]],["ordering"]]],[11,"add","","",23,[[["t"]],["words"]]],[11,"add","","",26,[[["t"]],["bytes"]]],[11,"add","","",24,[[["t"]],["pages"]]],[11,"byte_size","","",23,[[],["bytes"]]],[11,"byte_size","","",24,[[],["bytes"]]],[11,"byte_size","","",26,[[],["bytes"]]],[11,"partial_cmp","","",24,[[["self"],["pages"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",24,[[["self"],["pages"]],["bool"]]],[11,"le","","",24,[[["self"],["pages"]],["bool"]]],[11,"gt","","",24,[[["self"],["pages"]],["bool"]]],[11,"ge","","",24,[[["self"],["pages"]],["bool"]]],[11,"partial_cmp","","",26,[[["bytes"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",26,[[["bytes"],["self"]],["bool"]]],[11,"le","","",26,[[["bytes"],["self"]],["bool"]]],[11,"gt","","",26,[[["bytes"],["self"]],["bool"]]],[11,"ge","","",26,[[["bytes"],["self"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"],["words"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",23,[[["self"],["words"]],["bool"]]],[11,"le","","",23,[[["self"],["words"]],["bool"]]],[11,"gt","","",23,[[["self"],["words"]],["bool"]]],[11,"ge","","",23,[[["self"],["words"]],["bool"]]],[11,"sub","","",24,[[["t"]],["pages"]]],[11,"sub","","",23,[[["t"]],["words"]]],[11,"sub","","",26,[[["t"]],["bytes"]]],[11,"eq","","",23,[[["self"],["words"]],["bool"]]],[11,"ne","","",23,[[["self"],["words"]],["bool"]]],[11,"eq","","",26,[[["bytes"],["self"]],["bool"]]],[11,"ne","","",26,[[["bytes"],["self"]],["bool"]]],[11,"eq","","",24,[[["self"],["pages"]],["bool"]]],[11,"ne","","",24,[[["self"],["pages"]],["bool"]]],[11,"clone","","",26,[[["self"]],["bytes"]]],[11,"clone","","",23,[[["self"]],["words"]]],[11,"clone","","",24,[[["self"]],["pages"]]],[11,"mul","","",26,[[["t"]],["bytes"]]],[11,"mul","","",23,[[["t"]],["words"]]],[11,"mul","","",24,[[["t"]],["pages"]]],[11,"from","","",26,[[["words"]],["bytes"]]],[11,"from","","",26,[[["pages"]],["bytes"]]],[11,"from","","",26,[[["pages"]],["bytes"]]],[11,"from","","",26,[[["words"]],["bytes"]]],[11,"fmt","","",26,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",23,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",24,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"div","","",23,[[["t"]],["words"]]],[11,"div","","",26,[[["t"]],["bytes"]]],[11,"div","","",24,[[["t"]],["pages"]]],[11,"invoke_index","wasmi","",37,[[["self"],["usize"],["runtimeargs"]],[["option",["runtimevalue"]],["result",["option","trap"]],["trap"]]]],[11,"resolve_func","","",11,[[["str"],["signature"],["self"]],[["funcref"],["result",["funcref","error"]],["error"]]]],[11,"resolve_global","","",11,[[["str"],["globaldescriptor"],["self"]],[["error"],["result",["globalref","error"]],["globalref"]]]],[11,"resolve_memory","","",11,[[["str"],["memorydescriptor"],["self"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[11,"resolve_table","","",11,[[["str"],["tabledescriptor"],["self"]],[["result",["tableref","error"]],["tableref"],["error"]]]],[11,"resolve_func","","",39,[[["str"],["signature"],["self"]],[["funcref"],["result",["funcref","error"]],["error"]]]],[11,"resolve_global","","",39,[[["str"],["globaldescriptor"],["self"]],[["error"],["result",["globalref","error"]],["globalref"]]]],[11,"resolve_memory","","",39,[[["str"],["memorydescriptor"],["self"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[11,"resolve_table","","",39,[[["str"],["tabledescriptor"],["self"]],[["result",["tableref","error"]],["tableref"],["error"]]]],[11,"from_runtime_value","wasmi::nan_preserving_float","",15,[[["runtimevalue"]],["option"]]],[11,"from_runtime_value","","",16,[[["runtimevalue"]],["option"]]],[11,"into_little_endian","","",15,[[]]],[11,"from_little_endian","","",15,[[],[["error"],["result",["error"]]]]],[11,"into_little_endian","","",16,[[]]],[11,"from_little_endian","","",16,[[],[["error"],["result",["error"]]]]],[11,"as_ref","wasmi","",10,[[["self"]]]],[11,"from","","",1,[[["u"]],["self"]]],[11,"from","","",33,[[["u"]],["self"]]],[11,"from","","",1,[[["trap"]],["error"]]],[11,"from","","",33,[[["trapkind"]],["trap"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"from","","",2,[[["trap"]],["self"]]],[11,"from","","",10,[[],["self"]]],[11,"from","wasmi::nan_preserving_float","",15,[[["f32"]],["f32"]]],[11,"from","","",16,[[["f64"]],["f64"]]],[11,"from","","",15,[[["u32"]],["self"]]],[11,"from","","",16,[[["u64"]],["self"]]],[11,"from","wasmi","",6,[[["i8"]],["self"]]],[11,"from","","",6,[[["i16"]],["self"]]],[11,"from","","",6,[[["i32"]],["self"]]],[11,"from","","",6,[[["i64"]],["self"]]],[11,"from","","",6,[[["u8"]],["self"]]],[11,"from","","",6,[[["u16"]],["self"]]],[11,"from","","",6,[[["u32"]],["self"]]],[11,"from","","",6,[[["u64"]],["self"]]],[11,"from","","",6,[[["f32"]],["self"]]],[11,"from","","",6,[[["f64"]],["self"]]],[11,"into","","",1,[[],["string"]]],[11,"clone","","",35,[[["self"]],["funcref"]]],[11,"clone","","",36,[[["self"]],["globalref"]]],[11,"clone","","",38,[[["self"]],["memoryref"]]],[11,"clone","","",39,[[["self"]],["moduleref"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"clone","wasmi::nan_preserving_float","",15,[[["self"]],["f32"]]],[11,"clone","","",16,[[["self"]],["f64"]]],[11,"clone","wasmi","",40,[[["self"]],["tableref"]]],[11,"clone","","",19,[[["self"]],["signature"]]],[11,"clone","","",4,[[["self"]],["valuetype"]]],[11,"clone","","",6,[[["self"]],["runtimevalue"]]],[11,"default","","",11,[[],["self"]]],[11,"default","","",17,[[],["self"]]],[11,"eq","wasmi::nan_preserving_float","",15,[[["t"],["self"]],["bool"]]],[11,"eq","","",16,[[["t"],["self"]],["bool"]]],[11,"eq","wasmi","",19,[[["signature"],["self"]],["bool"]]],[11,"ne","","",19,[[["signature"],["self"]],["bool"]]],[11,"eq","","",4,[[["valuetype"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["runtimevalue"]],["bool"]]],[11,"ne","","",6,[[["self"],["runtimevalue"]],["bool"]]],[11,"partial_cmp","wasmi::nan_preserving_float","",15,[[["t"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",16,[[["t"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"deref","wasmi","",35,[[["self"]],["funcinstance"]]],[11,"deref","","",36,[[["self"]],["globalinstance"]]],[11,"deref","","",38,[[["self"]],["memoryinstance"]]],[11,"deref","","",39,[[["self"]],["moduleinstance"]]],[11,"deref","","",40,[[["self"]],["tableinstance"]]],[11,"fmt","","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi::nan_preserving_float","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","wasmi","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"div","wasmi::nan_preserving_float","",15,[[["t"]],["self"]]],[11,"div","","",16,[[["t"]],["self"]]],[11,"rem","","",15,[[["t"]],["self"]]],[11,"rem","","",16,[[["t"]],["self"]]],[11,"sub","","",15,[[["t"]],["self"]]],[11,"sub","","",16,[[["t"]],["self"]]],[11,"add","","",15,[[["t"]],["self"]]],[11,"add","","",16,[[["t"]],["self"]]],[11,"mul","","",15,[[["t"]],["self"]]],[11,"mul","","",16,[[["t"]],["self"]]],[11,"neg","","",15,[[],["self"]]],[11,"neg","","",16,[[],["self"]]],[11,"description","wasmi","",33,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"downcast_ref","","Attempt to downcast this `HostError` to a concrete type by…",41,[[["self"]],[["option"],["t"]]]],[11,"downcast_mut","","Attempt to downcast this `HostError` to a concrete type by…",41,[[["self"]],[["option"],["t"]]]],[11,"resolve_func","","Resolve a function.",30,[[["str"],["signature"],["self"]],[["funcref"],["result",["funcref","error"]],["error"]]]],[11,"resolve_global","","Resolve a global variable.",30,[[["str"],["globaldescriptor"],["self"]],[["error"],["result",["globalref","error"]],["globalref"]]]],[11,"resolve_memory","","Resolve a memory.",30,[[["str"],["memorydescriptor"],["self"]],[["error"],["memoryref"],["result",["memoryref","error"]]]]],[11,"resolve_table","","Resolve a table.",30,[[["str"],["tabledescriptor"],["self"]],[["result",["tableref","error"]],["tableref"],["error"]]]]],"p":[[4,"TrapKind"],[4,"Error"],[4,"ResumableError"],[4,"ExternVal"],[4,"ValueType"],[4,"ValueError"],[4,"RuntimeValue"],[3,"FuncInstance"],[3,"FuncInvocation"],[3,"GlobalInstance"],[3,"RuntimeArgs"],[3,"ImportsBuilder"],[3,"MemoryInstance"],[3,"ModuleInstance"],[3,"NotStartedModuleRef"],[3,"F32"],[3,"F64"],[3,"StackRecycler"],[3,"TableInstance"],[3,"Signature"],[3,"GlobalDescriptor"],[3,"TableDescriptor"],[3,"MemoryDescriptor"],[3,"Words"],[3,"Pages"],[8,"ByteSize"],[3,"Bytes"],[8,"RoundUpTo"],[8,"Externals"],[8,"ImportResolver"],[8,"ModuleImportResolver"],[8,"FromRuntimeValue"],[8,"LittleEndianConvert"],[3,"Trap"],[3,"Module"],[3,"FuncRef"],[3,"GlobalRef"],[3,"NopExternals"],[3,"MemoryRef"],[3,"ModuleRef"],[3,"TableRef"],[8,"HostError"]]};
searchIndex["wasmi_validation"] = {"doc":"","i":[[3,"Error","wasmi_validation","",null,null],[12,"0","","",0,null],[3,"PlainValidator","","A module validator that just validates modules and…",null,null],[3,"PlainFuncValidator","","A function validator that just validates modules and…",null,null],[5,"validate_module","","",null,[[["module"]],[["error"],["result",["error"]]]]],[5,"validate_memory","","",null,[[["u32"],["option",["u32"]]],[["result",["string"]],["string"]]]],[0,"stack","","",null,null],[3,"Error","wasmi_validation::stack","",null,null],[3,"StackWithLimit","","Stack with limit.",null,null],[11,"with_limit","","",1,[[["usize"]],["self"]]],[11,"is_empty","","",1,[[["self"]],["bool"]]],[11,"len","","",1,[[["self"]],["usize"]]],[11,"top","","",1,[[["self"]],[["result",["error"]],["t"],["error"]]]],[11,"top_mut","","",1,[[["self"]],[["result",["error"]],["t"],["error"]]]],[11,"get","","",1,[[["self"],["usize"]],[["result",["error"]],["t"],["error"]]]],[11,"push","","",1,[[["self"],["t"]],[["result",["error"]],["error"]]]],[11,"pop","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"resize","","",1,[[["self"],["usize"],["t"]]]],[0,"context","wasmi_validation","",null,null],[3,"ModuleContext","wasmi_validation::context","",null,null],[12,"memories","","",2,null],[12,"tables","","",2,null],[12,"globals","","",2,null],[12,"types","","",2,null],[12,"func_type_indexes","","",2,null],[3,"ModuleContextBuilder","","",null,null],[11,"memories","","",2,[[["self"]]]],[11,"tables","","",2,[[["self"]]]],[11,"globals","","",2,[[["self"]]]],[11,"types","","",2,[[["self"]]]],[11,"func_type_indexes","","",2,[[["self"]]]],[11,"require_memory","","",2,[[["u32"],["self"]],[["result",["error"]],["error"]]]],[11,"require_table","","",2,[[["u32"],["self"]],[["error"],["result",["tabletype","error"]],["tabletype"]]]],[11,"require_function","","",2,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"require_function_type","","",2,[[["u32"],["self"]],[["error"],["result",["error"]]]]],[11,"require_global","","",2,[[["u32"],["option",["bool"]],["self"],["bool"]],[["globaltype"],["result",["globaltype","error"]],["error"]]]],[11,"new","","",3,[[],["modulecontextbuilder"]]],[11,"push_memory","","",3,[[["self"],["memorytype"]]]],[11,"push_table","","",3,[[["self"],["tabletype"]]]],[11,"push_global","","",3,[[["self"],["globaltype"]]]],[11,"set_types","","",3,[[["self"],["vec",["functiontype"]],["functiontype"]]]],[11,"push_func_type_index","","",3,[[["self"],["u32"]]]],[11,"build","","",3,[[],["modulecontext"]]],[0,"func","wasmi_validation","",null,null],[3,"BlockFrame","wasmi_validation::func","Control stack frame.",null,null],[12,"started_with","","The opcode that started this block frame.",4,null],[12,"block_type","","A signature, which is a block signature type indicating…",4,null],[12,"value_stack_len","","A limit integer value, which is an index into the value…",4,null],[12,"polymorphic_stack","","Boolean which signals whether value stack became…",4,null],[3,"FunctionValidationContext","","Function validation context.",null,null],[12,"module","","Wasm module",5,null],[12,"locals","","Local variables.",5,null],[12,"value_stack","","Value stack.",5,null],[12,"frame_stack","","Frame stack.",5,null],[12,"return_type","","Function return type.",5,null],[4,"StartedWith","","An opcode that opened the particular frame.",null,null],[13,"Block","","",6,null],[13,"If","","",6,null],[13,"Else","","",6,null],[13,"Loop","","",6,null],[4,"StackValueType","","Value type on the stack.",null,null],[13,"Any","","Any value type.",7,null],[13,"Specific","","Concrete value type.",7,null],[5,"drive","","",null,[[["modulecontext"],["func"],["funcbody"]],[["error"],["result",["error"]]]]],[5,"top_label","","Returns the top most frame from the frame stack.",null,[[["stackwithlimit"]],["blockframe"]]],[5,"require_label","","",null,[[["u32"],["stackwithlimit"]],[["error"],["result",["blockframe","error"]],["blockframe"]]]],[11,"step","","",5,[[["self"],["instruction"]],[["result",["error"]],["error"]]]],[0,"util","wasmi_validation","",null,null],[3,"Locals","wasmi_validation::util","Locals are the concatenation of a slice of function…",null,null],[11,"new","","Create a new wrapper around declared variables and…",8,[[],[["locals"],["error"],["result",["locals","error"]]]]],[11,"param_count","","Returns parameter count.",8,[[["self"]],["u32"]]],[11,"count","","Returns total count of all declared locals and paramaterers.",8,[[["self"]],["u32"]]],[11,"type_of_local","","Returns the type of a local variable (either a declared…",8,[[["u32"],["self"]],[["result",["valuetype","error"]],["valuetype"],["error"]]]],[17,"DEFAULT_MEMORY_INDEX","wasmi_validation","Index of default linear memory.",null,null],[17,"DEFAULT_TABLE_INDEX","","Index of default table.",null,null],[17,"LINEAR_MEMORY_MAX_PAGES","","Maximal number of pages that a wasm instance supports.",null,null],[8,"Validator","","",null,null],[16,"Output","","",9,null],[16,"FuncValidator","","",9,null],[10,"new","","",9,[[["module"]],["self"]]],[10,"on_function_validated","","",9,[[["self"],["u32"]]]],[10,"finish","","",9,[[]]],[8,"FuncValidator","","",null,null],[16,"Output","","",10,null],[10,"new","","",10,[[["funcbody"],["functionvalidationcontext"]],["self"]]],[10,"next_instruction","","",10,[[["functionvalidationcontext"],["self"],["instruction"]],[["result",["error"]],["error"]]]],[10,"finish","","",10,[[]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","wasmi_validation::stack","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","wasmi_validation::context","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","wasmi_validation::func","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","wasmi_validation::util","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"new","wasmi_validation","",11,[[["module"]],["plainvalidator"]]],[11,"on_function_validated","","",11,[[["self"],["u32"]]]],[11,"finish","","",11,[[]]],[11,"new","","",12,[[["funcbody"],["functionvalidationcontext"]],["plainfuncvalidator"]]],[11,"next_instruction","","",12,[[["functionvalidationcontext"],["self"],["instruction"]],[["result",["error"]],["error"]]]],[11,"finish","","",12,[[]]],[11,"from","wasmi_validation::func","",7,[[["valuetype"]],["self"]]],[11,"from","wasmi_validation","",0,[[["error"]],["error"]]],[11,"clone","wasmi_validation::func","",4,[[["self"]],["blockframe"]]],[11,"clone","","",6,[[["self"]],["startedwith"]]],[11,"clone","","",7,[[["self"]],["stackvaluetype"]]],[11,"default","wasmi_validation::context","",2,[[],["modulecontext"]]],[11,"default","","",3,[[],["modulecontextbuilder"]]],[11,"eq","wasmi_validation::func","",6,[[["startedwith"],["self"]],["bool"]]],[11,"eq","","",7,[[["stackvaluetype"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["valuetype"]],["bool"]]],[11,"fmt","wasmi_validation::stack","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi_validation::context","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi_validation::func","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi_validation::util","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi_validation","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","wasmi_validation::stack","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","wasmi_validation","",0,[[["self"],["formatter"]],["result"]]],[11,"description","wasmi_validation::stack","",13,[[["self"]],["str"]]],[11,"description","wasmi_validation","",0,[[["self"]],["str"]]]],"p":[[3,"Error"],[3,"StackWithLimit"],[3,"ModuleContext"],[3,"ModuleContextBuilder"],[3,"BlockFrame"],[3,"FunctionValidationContext"],[4,"StartedWith"],[4,"StackValueType"],[3,"Locals"],[8,"Validator"],[8,"FuncValidator"],[3,"PlainValidator"],[3,"PlainFuncValidator"],[3,"Error"]]};
searchIndex["zeroize"] = {"doc":"Securely zero memory with a simple trait ([Zeroize]) built…","i":[[24,"Zeroize","zeroize","",null,null],[3,"Zeroizing","","`Zeroizing` is a a wrapper for any `Z: Zeroize` type which…",null,null],[8,"Zeroize","","Trait for securely erasing types from memory",null,null],[10,"zeroize","","Zero out this object from memory using Rust intrinsics…",0,[[["self"]]]],[8,"DefaultIsZeroes","","Marker trait for types whose `Default` is the desired…",null,null],[8,"TryZeroize","","Fallible trait for representing cases where zeroization…",null,null],[10,"try_zeroize","","Try to zero out this object from memory using Rust…",1,[[["self"]],["bool"]]],[11,"new","","Move value inside a `Zeroizing` wrapper which ensures it…",2,[[["z"]],["self"]]],[11,"zeroize","","",2,[[["self"]]]],[11,"from","","",2,[[],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"zeroize","","",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["z"]]],[11,"deref_mut","","",2,[[["self"]],["z"]]],[11,"from","","",2,[[["z"]],["zeroizing"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","","",2,[[["zeroizing"],["self"]],["bool"]]],[11,"ne","","",2,[[["zeroizing"],["self"]],["bool"]]],[11,"drop","","",2,[[["self"]]]],[11,"clone","","",2,[[["self"]],["zeroizing"]]]],"p":[[8,"Zeroize"],[8,"TryZeroize"],[3,"Zeroizing"]]};
searchIndex["zeroize_derive"] = {"doc":"Custom derive support for `zeroize`","i":[[24,"Zeroize","zeroize_derive","",null,null]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);